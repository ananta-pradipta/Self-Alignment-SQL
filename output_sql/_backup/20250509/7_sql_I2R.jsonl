{"seed": "/* Creates a table named db with 12 columns: id (bigint), db_name (varchar), driver_class_name (varchar), jdbc_url (varchar), password (varchar), pool_name (varchar), username (varchar), group_name (varchar), balance_type (varchar), minimum_idle (int), maximum_pool_size (int), connection_test_query (varchar). */\nCREATE TABLE `db` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `db_name` varchar(255) DEFAULT NULL,\n  `driver_class_name` varchar(255) DEFAULT NULL,\n  `jdbc_url` varchar(255) DEFAULT NULL,\n  `password` varchar(255) DEFAULT NULL,\n  `pool_name` varchar(255) DEFAULT NULL,\n  `username` varchar(255) DEFAULT NULL,\n  `group_name` varchar(255) DEFAULT '',\n  `balance_type` varchar(50) DEFAULT '',\n  `minimum_idle` int(11) DEFAULT '1',\n  `maximum_pool_size` int(11) DEFAULT '1',\n  `connection_test_query` varchar(255) DEFAULT 'SELECT 1',\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8", "description": "Creates a table named db with 12 columns: id (bigint), db_name (varchar), driver_class_name (varchar), jdbc_url (varchar), password (varchar), pool_name (varchar), username (varchar), group_name (varchar), balance_type (varchar), minimum_idle (int), maximum_pool_size (int), connection_test_query (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named db with 12 columns: id (bigint), db_name (varchar), driver_class_name (varchar), jdbc_url (varchar), password (varchar), pool_name (varchar), username (varchar), group_name (varchar), balance_type (varchar), minimum_idle (int), maximum_pool_size (int), connection_test_query (varchar).", "response": "-- Reasoning:\nWe need a new table named db. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE db (\n  id BIGINT,\n  db_name VARCHAR(255),\n  driver_class_name VARCHAR(255),\n  jdbc_url VARCHAR(255),\n  password VARCHAR(255),\n  pool_name VARCHAR(255),\n  username VARCHAR(255),\n  group_name VARCHAR(255),\n  balance_type VARCHAR(255),\n  minimum_idle INT,\n  maximum_pool_size INT,\n  connection_test_query VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the db table with 12 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('db');"}
{"seed": "/* Selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table. */\nselect d20_sal - d10_sal as d20_10_diff, d20_sal - d30_sal as d20_30_diff\n  from (\n    select\n      sum(\n        case\n          when deptno = 10 then sal\n        end\n      ) as d10_sal,\n      sum(\n        case\n          when deptno = 20 then sal\n          end\n      ) as d20_sal,\n      sum (\n        case\n          when deptno = 30 then sal\n          end\n      ) as d30_sal\n      from emp\n  ) totals_by_dept", "description": "Selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.", "concepts": ["SELECT", "SUM", "CASE", "END", "AS", "FROM", "WHERE", "GROUP BY"], "instruction": "Write a SQL query to select the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.", "response": "-- Reasoning:\nWe need to select the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.\n\n-- Solution:\n```sql\nSELECT d20_sal - d10_sal, d20_sal - d30_sal\nFROM totals_by_dept;\n```\n\n-- Explanation:\nThis query selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.\n\n-- Tests:\n-- 1. Verify the results are correct\nSELECT d20_sal - d10_sal, d20_sal - d30_sal\nFROM totals_by_dept;"}
{"seed": "/* Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be set to 0 when inserting a new row. */\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\"", "description": "Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be set to 0 when inserting a new row.", "concepts": ["SET", "SQL_MODE", "AUTO_INCREMENT", "NO_AUTO_VALUE_"], "instruction": "Write a SQL query to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be set to 0 when inserting a new row.", "response": "-- Reasoning:\nWe need to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" so that the AUTO_INCREMENT value will not be set to 0 when inserting a new row.\n\n-- Solution:\n```sql\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\n```\n\n-- Explanation:\nThis SET statement sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" to prevent the AUTO_INCREMENT value from being set to 0 when inserting a new row.\n\n-- Tests:\n-- 1. Check AUTO_INCREMENT value is not 0\nSELECT * FROM orders;"}
{"seed": "/* Sets the time zone to UTC. */\nSET time_zone = \"+00:00\"", "description": "Sets the time zone to UTC.", "concepts": ["SET"], "instruction": "Write a SQL query to set the time zone to UTC.", "response": "-- Reasoning:\nWe need to set the time zone to UTC.\n\n-- Solution:\n```sql\nSET TIMEZONE 'UTC';\n```\n\n-- Explanation:\nThis statement sets the time zone to UTC.\n\n-- Tests:\n-- 1. Check time zone is set to UTC\nSELECT TIMEZONE();"}
{"seed": "/* Creates a table named user with 9 columns: user_id (integer), age (integer), first_name (varchar), last_name (varchar), gender (varchar), birth_date (varchar), reg_date (varchar), password (varchar), and email (varchar). */\nCREATE TABLE `user` (\n  `user_id` int(11) NOT NULL,\n  `age` int(11) NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `gender` varchar(45) NOT NULL,\n  `birth_date` varchar(45) NOT NULL,\n  `reg_date` varchar(45) NOT NULL,\n  `password` varchar(45) NOT NULL,\n  `email` varchar(45) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named user with 9 columns: user_id (integer), age (integer), first_name (varchar), last_name (varchar), gender (varchar), birth_date (varchar), reg_date (varchar), password (varchar), and email (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "NOT NULL", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named user with 9 columns: user_id (integer), age (integer), first_name (varchar), last_name (varchar), gender (varchar), birth_date (varchar), reg_date (varchar), password (varchar), and email (varchar).", "response": "-- Reasoning:\nWe need a new table named user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user (\n  user_id INT PRIMARY KEY,\n  age INT,\n  first_name VARCHAR(255),\n  last_name VARCHAR(255),\n  gender VARCHAR(255),\n  birth_date VARCHAR(255),\n  reg_date VARCHAR(255),\n  password VARCHAR(255),\n  email VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the user table with nine columns:\n  \u2022 user_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 age: integer\n  \u2022 first_name: variable\u2010length string up to 255 characters\n  \u2022 last_name: variable\u2010length string up to 255 characters\n  \u2022 gender: variable\u2010length string up to 255 characters\n  \u2022 birth_date: variable\u2010length string up to 255 characters\n  \u2022"}
{"seed": "/* Inserts a new user into the users table with the given values. */\nINSERT INTO `user` (`user_id`, `age`, `first_name`, `last_name`, `gender`, `birth_date`, `reg_date`, `password`, `email`) VALUES\n(11328762, 20, 'Edward', 'Tiro', 'Male', 'November 29, 1996', 'May 15, 2016', 'ef2928350f579b0a0ae3f2c3bf882a27', 'dward@tiro.com')", "description": "Inserts a new user into the users table with the given values.", "concepts": ["INSERT INTO", "VALUES", "user_id", "age", "first_name", "last"], "instruction": "Write a SQL query to insert a new user into the users table with the given values.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have the given values for the columns:\n  \u2022 user_id: 1\n  \u2022 name: \u201c\u201d\n  \u2022 email: \u201c\u201d\n  \u2022 phone: \u201c1234567890\u201d\n\n-- Solution:\n```sql\nINSERT INTO users (user_id, name, email, phone)\nVALUES (1, '', '', '1234567890');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Drops the table named application_config if it exists. */\nDROP TABLE IF EXISTS `application_config`", "description": "Drops the table named application_config if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named application_config if it exists.", "response": "-- Reasoning:\nWe need to delete the table named application_config if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS application_config;\n```\n\n-- Explanation:\nThis statement deletes the table named application_config if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('application_config');"}
{"seed": "/* Creates a table named application_config with four columns: config_id (integer primary key), config_name (varchar), config_value (varchar), and config_categ (varchar). */\nCREATE TABLE `application_config` (\r\n  `config_id` int(11) NOT NULL,\r\n  `config_name` varchar(45) DEFAULT NULL,\r\n  `config_value` varchar(45) DEFAULT NULL,\r\n  `config_categ` varchar(45) DEFAULT NULL,\r\n  PRIMARY KEY (`config_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named application_config with four columns: config_id (integer primary key), config_name (varchar), config_value (varchar), and config_categ (varchar).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "INT", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named application_config with four columns: config_id (integer primary key), config_name (varchar), config_value (varchar), and config_categ (varchar).", "response": "-- Reasoning:\nWe need a new table named application_config. It should have an integer primary key so that each config has a unique identifier, and a name column to store the config\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE application_config (\n  config_id INT PRIMARY KEY,\n  config_name VARCHAR(255),\n  config_value VARCHAR(255),\n  config_categ VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the application_config table with four columns:\n  \u2022 config_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 config_name: variable\u2010length string up to 255 characters\n  \u2022 config_value: variable\u2010length string up to 255 characters\n  \u2022 config_categ: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('application_config');"}
{"seed": "/* Inserts the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT */\nINSERT INTO `application_config` VALUES (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT'),(7,'INCOME_TAX_CORPORATE','199','APPLICATION_AMOUNT'),(8,'IMPORT_EXPORT','3499','APPLICATION_AMOUNT')", "description": "Inserts the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT", "concepts": ["INSERT INTO", "VALUES", "APPLICATION_CONFIG", "APPLICATION_STYLE", "P"], "instruction": "Write a SQL query to insert the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299", "response": "-- Reasoning:\nWe need to insert the values into the table.\n\n-- Solution:\n```sql\nINSERT INTO products (product_id, name)\nVALUES (1, 'application_style'),\n       (2, 'ENTERPRENEUR_SERVED'),\n       (3, 'PROFESSIONAL_NETWORK'),\n       (4, 'GEOGRAPHIES'),\n       (5, 'TEAM_STRENGTH'),\n       (6, 'INCOME_TAX_INDIVIDULA');\n```\n\n-- Explanation:\nThis statement inserts the values into the products table.\n\n-- Tests:\n-- 1. Verify the values are inserted\nSELECT * FROM products;"}
{"seed": "/* Drops the table named book_keeping_request if it exists. */\nDROP TABLE IF EXISTS `book_keeping_request`", "description": "Drops the table named book_keeping_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named book_keeping_request if it exists.", "response": "-- Reasoning:\nWe need to drop the table named book_keeping_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS book_keeping_request;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('book_keeping_request');"}
{"seed": "/* Creates a table named book_keeping_request with seven columns: book_keeping_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `book_keeping_request` (\r\n  `book_keeping_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`book_keeping_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named book_keeping_request with seven columns: book_keeping_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named book_keeping_request with seven columns: book_keeping_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named book_keeping_request. It should have an integer primary key so that each request has a unique identifier, and a name column to store the requestor\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE book_keeping_request (\n  book_keeping_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the book_keeping_request table with seven columns:\n  \u2022 book_keeping_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length"}
{"seed": "/* Drops the table named companies if it exists. */\nDROP TABLE IF EXISTS `companies`", "description": "Drops the table named companies if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named companies if it exists.", "response": "-- Reasoning:\nWe need to delete the table named companies if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS companies;\n```\n\n-- Explanation:\nThis statement deletes the table named companies if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('companies');"}
{"seed": "/* Creates a table named companies with five columns: company_id (integer primary key), company_name (varchar), company_price (decimal), company_type (varchar), created_dt (datetime), and updated_dt (datetime). */\nCREATE TABLE `companies` (\r\n  `company_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `company_name` varchar(50) DEFAULT NULL,\r\n  `company_price` decimal(10,2) DEFAULT NULL,\r\n  `company_type` varchar(50) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`company_id`),\r\n  UNIQUE KEY `company_id_UNIQUE` (`company_id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='Details for company type available'", "description": "Creates a table named companies with five columns: company_id (integer primary key), company_name (varchar), company_price (decimal), company_type (varchar), created_dt (datetime), and updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "DEFAULT", "COMMENT"], "instruction": "Write a SQL query to create a table named companies with five columns: company_id (integer primary key), company_name (varchar), company_price (decimal), company_type (varchar), created_dt (datetime), and updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named companies. It should have an integer primary key so that each company has a unique identifier, and a name column to store the company\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE companies (\n  company_id INT PRIMARY KEY,\n  company_name VARCHAR(255),\n  company_price DECIMAL,\n  company_type VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the companies table with five columns:\n  \u2022 company_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 company_name: variable\u2010length string up to 255 characters\n  \u2022 company_price: decimal number\n  \u2022 company_type: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('companies');"}
{"seed": "/* Inserts the given values into the companies table. */\nINSERT INTO `companies` VALUES (1,'Private Limited',12999.00,NULL,NULL,NULL),(2,'Limited Liability Partnership',9999.00,NULL,NULL,NULL),(3,'One Person Company',11999.00,NULL,NULL,NULL),(4,'Public Limited Company',42999.00,NULL,NULL,NULL),(5,'Nidhi Limited Company',74999.00,NULL,NULL,NULL),(6,'Section 8 Company',25000.00,NULL,NULL,NULL)", "description": "Inserts the given values into the companies table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert the given values into the companies table.", "response": "-- Reasoning:\nWe need to insert the given values into the companies table.\n\n-- Solution:\n```sql\nINSERT INTO companies (name, revenue, country)\nVALUES ('Facebook', 2000000000, 'USA');\n```\n\n-- Explanation:\nThis INSERT statement inserts the given values into the companies table.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM companies;"}
{"seed": "/* Drops the table named company_request if it exists. */\nDROP TABLE IF EXISTS `company_request`", "description": "Drops the table named company_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named company_request if it exists.", "response": "-- Reasoning:\nWe need to drop the table named company_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS company_request;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('company_request');"}
{"seed": "/* Creates a table named company_request with 11 columns: company_request_id (integer primary key), company_name (varchar), requestor_last_name (varchar), requestor_first_name (varchar), requostor_email (varchar), requestor_phone_no (varchar), requestor_pan_no (varchar), company_id (integer), message (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `company_request` (\r\n  `company_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `company_name` varchar(100) NOT NULL,\r\n  `requestor_last_name` varchar(50) DEFAULT NULL,\r\n  `requestor_first_name` varchar(50) DEFAULT NULL,\r\n  `requostor_email` varchar(100) DEFAULT NULL,\r\n  `requestor_phone_no` varchar(30) DEFAULT NULL,\r\n  `requestor_pan_no` varchar(30) DEFAULT NULL,\r\n  `company_id` int(11) DEFAULT NULL,\r\n  `message` varchar(2000) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`company_request_id`),\r\n  KEY `company_id_foreign_key_idx` (`company_id`),\r\n  CONSTRAINT `company_id_foreign_key` FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Details of company creation '", "description": "Creates a table named company_request with 11 columns: company_request_id (integer primary key), company_name (varchar), requestor_last_name (varchar), requestor_first_name (varchar), requostor_email (varchar), requestor_phone_no (varchar), requestor_pan_no (varchar), company_id (integer), message (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "FOREIGN KEY", "CONSTRAINT", "KEY"], "instruction": "Write a SQL query to create a table named company_request with 11 columns: company_request_id (integer primary key), company_name (varchar), requestor_last_name (varchar), requestor_first_name (varchar), requostor_email (varchar), requestor_phone_no (varchar), requestor_pan_no (varchar), company_id (integer), message (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named company_request. It should have an integer primary key so that each request has a unique identifier, and a name column to store the company\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE company_request (\n  company_request_id INT PRIMARY KEY,\n  company_name VARCHAR(255),\n  requestor_last_name VARCHAR(255),\n  requestor_first_name VARCHAR(255),\n  requestor_email VARCHAR(255),\n  requestor_phone_no VARCHAR(255),\n  requestor_pan_no VARCHAR(255),\n  company_id INT,\n  message VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the company_request table with 11 columns:\n  \u2022 company_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 company_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_last_name: variable\u2010length string up to"}
{"seed": "/* Drops the table named gst_request if it exists. */\nDROP TABLE IF EXISTS `gst_request`", "description": "Drops the table named gst_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named gst_request if it exists.", "response": "-- Reasoning:\nWe need to delete the table named gst_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS gst_request;\n```\n\n-- Explanation:\nThis statement deletes the table named gst_request if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('gst_request');"}
{"seed": "/* Creates a table named gst_request with five columns: gst_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `gst_request` (\r\n  `gst_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`gst_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named gst_request with five columns: gst_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named gst_request with five columns: gst_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named gst_request. It should have an integer primary key so that each request has a unique identifier, and a datetime column to store the request\u2019s creation and update timestamps.\n\n-- Solution:\n```sql\nCREATE TABLE gst_request (\n  gst_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the gst_request table with five columns:\n  \u2022 gst_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 requestor_pan_"}
{"seed": "/* Drops the table named import_export_request if it exists. */\nDROP TABLE IF EXISTS `import_export_request`", "description": "Drops the table named import_export_request if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named import_export_request if it exists.", "response": "-- Reasoning:\nWe need to delete the import_export_request table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS import_export_request;\n```\n\n-- Explanation:\nThis statement deletes the import_export_request table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('import_export_request');"}
{"seed": "/* Creates a table named import_export_request with seven columns: import_export_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), and updated_dt (datetime). */\nCREATE TABLE `import_export_request` (\r\n  `import_export_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(50) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(15) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`import_export_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named import_export_request with seven columns: import_export_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), and updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named import_export_request with seven columns: import_export_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), and updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named import_export_request. It should have an integer primary key so that each request has a unique identifier, and a datetime column to store the request\u2019s creation and update timestamps.\n\n-- Solution:\n```sql\nCREATE TABLE import_export_request (\n  import_export_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the import_export_request table with seven columns:\n  \u2022 import_export_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 2"}
{"seed": "/* Drops the table named income_tax_request if it exists. */\nDROP TABLE IF EXISTS `income_tax_request`", "description": "Drops the table named income_tax_request if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named income_tax_request if it exists.", "response": "-- Reasoning:\nWe need to drop the table named income_tax_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS income_tax_request;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('income_tax_request');"}
{"seed": "/* Creates a table named income_tax_request with the following columns: income_tax_request_id (integer primary key), requestor_full_name (varchar), requestor_email_id (varchar), requestor_phone_number (varchar), requestor_bank_name (varchar), requestor_ifsc_code (varchar), user_type (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `income_tax_request` (\r\n  `income_tax_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(100) DEFAULT NULL,\r\n  `requestor_email_id` varchar(100) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(30) DEFAULT NULL,\r\n  `requestor_bank_name` varchar(45) DEFAULT NULL,\r\n  `requestor_ifsc_code` varchar(45) DEFAULT NULL,\r\n  `user_type` varchar(45) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`income_tax_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named income_tax_request with the following columns: income_tax_request_id (integer primary key), requestor_full_name (varchar), requestor_email_id (varchar), requestor_phone_number (varchar), requestor_bank_name (varchar), requestor_ifsc_code (varchar), user_type (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named income_tax_request with the following columns: income_tax_request_id (integer primary key), requestor_full_name (varchar), requestor_email_id (varchar), requestor_phone_number (varchar), requestor_bank_name (varchar), requestor_ifsc_code (varchar), user_type (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named income_tax_request. It should have an integer primary key so that each request has a unique identifier, and a name column to store the requestor\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE income_tax_request (\n  income_tax_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_bank_name VARCHAR(255),\n  requestor_ifsc_code VARCHAR(255),\n  user_type VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the income_tax_request table with eight columns:\n  \u2022 income_tax_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up"}
{"seed": "/* Drops the table loan_request if it exists. */\nDROP TABLE IF EXISTS `loan_request`", "description": "Drops the table loan_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the loan_request table if it exists.", "response": "-- Reasoning:\nWe need to drop the loan_request table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS loan_request;\n```\n\n-- Explanation:\nThis DROP statement deletes the loan_request table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('loan_request');"}
{"seed": "/* Creates a table named loan_request with 8 columns: loan_request_id (integer primary key), requestor_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), loan_id (integer), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `loan_request` (\r\n  `loan_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(20) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(15) DEFAULT NULL,\r\n  `loan_id` int(11) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`loan_request_id`),\r\n  KEY `loan_id_foreign_key_idx` (`loan_id`),\r\n  CONSTRAINT `loan_id_foreign_key` FOREIGN KEY (`loan_id`) REFERENCES `loan_types` (`loan_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Loan request from users'", "description": "Creates a table named loan_request with 8 columns: loan_request_id (integer primary key), requestor_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), loan_id (integer), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named loan_request with 8 columns: loan_request_id (integer primary key), requestor_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), loan_id (integer), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named loan_request. It should have an integer primary key so that each loan request has a unique identifier, and a datetime column to store the date and time when the request was created.\n\n-- Solution:\n```sql\nCREATE TABLE loan_request (\n  loan_request_id INT PRIMARY KEY,\n  requestor_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  loan_id INT,\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the loan_request table with eight columns:\n  \u2022 loan_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 request"}
{"seed": "/* Drops the table named loan_types if it exists. */\nDROP TABLE IF EXISTS `loan_types`", "description": "Drops the table named loan_types if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named loan_types if it exists.", "response": "-- Reasoning:\nWe need to delete the loan_types table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS loan_types;\n```\n\n-- Explanation:\nThis statement deletes the loan_types table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('loan_types');"}
{"seed": "/* Creates a table named loan_types with three columns: loan_type (varchar), loan_name (varchar), and loan_id (int). */\nCREATE TABLE `loan_types` (\r\n  `loan_type` varchar(50) DEFAULT NULL,\r\n  `loan_name` varchar(50) DEFAULT NULL,\r\n  `loan_id` int(11) NOT NULL,\r\n  PRIMARY KEY (`loan_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Types of loans offered by platform'", "description": "Creates a table named loan_types with three columns: loan_type (varchar), loan_name (varchar), and loan_id (int).", "concepts": ["CREATE TABLE", "VARCHAR", "INT", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named loan_types with three columns: loan_type (varchar), loan_name (varchar), and loan_id (int).", "response": "-- Reasoning:\nWe need a new table named loan_types. It should have an integer primary key so that each loan type has a unique identifier, and two varchar columns to store the loan type and name.\n\n-- Solution:\n```sql\nCREATE TABLE loan_types (\n  loan_id INT PRIMARY KEY,\n  loan_type VARCHAR(255),\n  loan_name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the loan_types table with three columns:\n  \u2022 loan_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 loan_type: variable\u2010length string up to 255 characters\n  \u2022 loan_name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('loan_types');"}
{"seed": "/* Inserts five rows into the loan_types table. */\nINSERT INTO `loan_types` VALUES ('Home Loan','Home Loan',1),('Loan Against Property','Loan Against Property',2),('Balance Transfer & Top ups','Balance Transfer & Top ups',3),('Educational Loan','Educational Loan',4),('Term Loan Synidation','Term Loan Synidation',5)", "description": "Inserts five rows into the loan_types table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert five rows into the loan_types table.", "response": "-- Reasoning:\nWe need to insert five rows into the loan_types table.\n\n-- Solution:\n```sql\nINSERT INTO loan_types (name, interest_rate)\nVALUES ('Home Mortgage', 4.25),\n       ('Car Mortgage', 3.75),\n       ('Student Mortgage', 3.5),\n       ('Personal Mortgage', 3.25),\n       ('Business Mortgage', 3.0);\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the loan_types table:\n  \u2022 name: Home Mortgage, Car Mortgage, Student Mortgage, Personal Mortgage, Business Mortgage\n  \u2022 interest_rate: 4.25, 3.75, 3.5, 3.25, 3.0\n\n-- Tests:\n-- 1. Verify new rows appear\nSELECT * FROM loan_types;"}
{"seed": "/* Drops the table named paymet_txn_summary if it exists. */\nDROP TABLE IF EXISTS `paymet_txn_summary`", "description": "Drops the table named paymet_txn_summary if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named paymet_txn_summary if it exists.", "response": "-- Reasoning:\nWe need to drop the table named paymet_txn_summary if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS paymet_txn_summary;\n```\n\n-- Explanation:\nThis DROP statement deletes the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('paymet_txn_summary');"}
{"seed": "/* Creates a table named paymet_txn_summary with 9 columns: payment_id (integer primary key), payment_txnid (varchar), payu_txnid (varchar), service_request_id (integer), service_type (varchar), amount_paid (varchar), payment_status (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `paymet_txn_summary` (\r\n  `payment_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `payment_txnid` varchar(200) DEFAULT NULL,\r\n  `payu_txnid` varchar(200) DEFAULT NULL,\r\n  `service_request_id` int(11) DEFAULT NULL,\r\n  `service_type` varchar(100) DEFAULT NULL,\r\n  `amount_paid` varchar(500) DEFAULT NULL,\r\n  `payment_status` varchar(45) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`payment_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To trck payments paid through the site'", "description": "Creates a table named paymet_txn_summary with 9 columns: payment_id (integer primary key), payment_txnid (varchar), payu_txnid (varchar), service_request_id (integer), service_type (varchar), amount_paid (varchar), payment_status (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT"], "instruction": "Write a SQL query to create a table named paymet_txn_summary with 9 columns: payment_id (integer primary key), payment_txnid (varchar), payu_txnid (varchar), service_request_id (integer), service_type (varchar), amount_paid (varchar), payment_status (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named paymet_txn_summary. It should have an integer primary key so that each payment has a unique identifier, and a name column to store the payment\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE paymet_txn_summary (\n  payment_id INT PRIMARY KEY,\n  payment_txnid VARCHAR(255),\n  payu_txnid VARCHAR(255),\n  service_request_id INT,\n  service_type VARCHAR(255),\n  amount_paid VARCHAR(255),\n  payment_status VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the paymet_txn_summary table with two columns:\n  \u2022 payment_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('paymet_txn_summary');"}
{"seed": "/* Drops the table named registration_service_request if it exists. */\nDROP TABLE IF EXISTS `registration_service_request`", "description": "Drops the table named registration_service_request if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named registration_service_request if it exists.", "response": "-- Reasoning:\nWe need to delete the table named registration_service_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS registration_service_request;\n```\n\n-- Explanation:\nThis statement deletes the table named registration_service_request if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('registration_service_request');"}
{"seed": "/* Creates a table named registration_service_request with the following columns: registration_service_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime), registration_service_type_id (integer). */\nCREATE TABLE `registration_service_request` (\r\n  `registration_service_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  `registration_service_type_id` int(11) DEFAULT NULL,\r\n  PRIMARY KEY (`registration_service_request_id`),\r\n  KEY `registration_service_fid_foreign_key_idx` (`registration_service_type_id`),\r\n  CONSTRAINT `registration_service_fid_foreign_key` FOREIGN KEY (`registration_service_type_id`) REFERENCES `registration_service_type` (`service_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named registration_service_request with the following columns: registration_service_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime), registration_service_type_id (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "FOREIGN KEY", "REFERENCES", "ON"], "instruction": "Write a SQL query to create a table named registration_service_request with the following columns: registration_service_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime), registration_service_type_id (integer).", "response": "-- Reasoning:\nWe need a new table named registration_service_request. It should have an integer primary key so that each request has a unique identifier, and a datetime column to store the request\u2019s creation and update timestamps.\n\n-- Solution:\n```sql\nCREATE TABLE registration_service_request (\n  registration_service_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME,\n  registration_service_type_id INT\n);\n```\n\n-- Explanation:\nThis statement defines the registration_service_request table with seven columns:\n  \u2022 registration_service_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id"}
{"seed": "/* Drops the table named registration_service_type if it exists. */\nDROP TABLE IF EXISTS `registration_service_type`", "description": "Drops the table named registration_service_type if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named registration_service_type if it exists.", "response": "-- Reasoning:\nWe need to delete the table named registration_service_type if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS registration_service_type;\n```\n\n-- Explanation:\nThis statement deletes the table named registration_service_type if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('registration_service_type');"}
{"seed": "/* Creates a table named registration_service_type with three columns: service_id (integer primary key), service_name (varchar) and service_type (varchar). */\nCREATE TABLE `registration_service_type` (\r\n  `service_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `service_name` varchar(45) NOT NULL,\r\n  `service_type` varchar(45) DEFAULT NULL,\r\n  PRIMARY KEY (`service_id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8", "description": "Creates a table named registration_service_type with three columns: service_id (integer primary key), service_name (varchar) and service_type (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named registration_service_type with three columns: service_id (integer primary key), service_name (varchar) and service_type (varchar).", "response": "-- Reasoning:\nWe need a new table named registration_service_type. It should have an integer primary key so that each service has a unique identifier, and two varchar columns to store the service name and type.\n\n-- Solution:\n```sql\nCREATE TABLE registration_service_type (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(255),\n  service_type VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the registration_service_type table with three columns:\n  \u2022 service_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 service_name: variable\u2010length string up to 255 characters\n  \u2022 service_type: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('registration_service_type');"}
{"seed": "/* Inserts the values (1,'FSSAI Food License','license'), (2,'IEC Registration','registration'), (3,'Trade License','license'), (4,'ISO Registration','license'), (5,'Digital Signature (DSC)','license'), (6,'Employee State Insurance (ESI) Registration','license'), (7,'Employees Provident Fund','license'), (8,'Service Tax Registration','registration'), (9,'Sales Tax Registration','registration'), (10,'Prof */\nINSERT INTO `registration_service_type` VALUES (1,'FSSAI Food License','license'),(2,'IEC Registration','registration'),(3,'Trade License','license'),(4,'ISO Registration','license'),(5,'Digital Signature (DSC)','license'),(6,'Employee State Insurance (ESI) Registration','license'),(7,'Employees Provident Fund','license'),(8,'Service Tax Registration','registration'),(9,'Sales Tax Registration','registration'),(10,'Professional Tax Registration','registration'),(11,'Excise Tax Registration','registration')", "description": "Inserts the values (1,'FSSAI Food License','license'), (2,'IEC Registration','registration'), (3,'Trade License','license'), (4,'ISO Registration','license'), (5,'Digital Signature (DSC)','license'), (6,'Employee State Insurance (ESI) Registration','license'), (7,'Employees Provident Fund','license'), (8,'Service Tax Registration','registration'), (9,'Sales Tax Registration','registration'), (10,'Prof", "concepts": ["INSERT INTO", "VALUES", "license", "registration"], "instruction": "Write a SQL query to insert the values (1,'FSSAI Food License','license'), (2,'IEC Registration','registration'), (3,'Trade License','license'), (4,'ISO Registration','license'), (5,'Digital Signature (DSC)','license'), (6,'Employee State Insurance (ESI) Registration','license'), (7,'Employees Provident Fund','license'), (8,'Service Tax Registration','registration'), (9,'Sales Tax Registration','registration'), (", "response": "-- Reasoning:\nWe need to insert the following values into the licenses table:\n\n-- Solution:\n```sql\nINSERT INTO licenses (id, name, type)\nVALUES (1, 'FSSAI Food License', 'license'),\n       (2, 'IEC Registration', 'registration'),\n       (3, 'Trade License', 'license'),\n       (4, 'ISO Registration', 'license'),\n       (5, 'Digital Signature (DSC)', 'license'),\n       (6, 'Employee State Insurance (ESI) Registration', 'license'),\n       (7, 'Employees Provident Fund', 'license'),\n       (8, 'Service Tax Registration', 'registration'),\n       (9, 'Sales Tax Registration', 'registration');\n```\n\n-- Explanation:\nThis INSERT statement inserts the values into the licenses table.\n\n-- Tests:\n-- 1. Verify new values are inserted\nSELECT * FROM licenses;"}
{"seed": "/* Drops the table named user_query if it exists. */\nDROP TABLE IF EXISTS `user_query`", "description": "Drops the table named user_query if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named user_query if it exists.", "response": "-- Reasoning:\nWe need to delete the table named user_query if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS user_query;\n```\n\n-- Explanation:\nThis statement deletes the table named user_query if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('user_query');"}
{"seed": "/* Creates a table named user_query with seven columns: query_id (integer primary key), full_name (varchar), subject (varchar), message (text), email_id (varchar), created_dt (datetime), and updated_dt (datetime). */\nCREATE TABLE `user_query` (\r\n  `query_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `full_name` varchar(55) DEFAULT NULL,\r\n  `subject` varchar(100) DEFAULT NULL,\r\n  `message` text,\r\n  `email_id` varchar(50) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`query_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named user_query with seven columns: query_id (integer primary key), full_name (varchar), subject (varchar), message (text), email_id (varchar), created_dt (datetime), and updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named user_query with seven columns: query_id (integer primary key), full_name (varchar), subject (varchar), message (text), email_id (varchar), created_dt (datetime), and updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named user_query. It should have an integer primary key so that each query has a unique identifier, and a name column to store the user\u2019s full name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user_query (\n  query_id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  subject VARCHAR(255),\n  message TEXT,\n  email_id VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the user_query table with seven columns:\n  \u2022 query_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 full_name: variable\u2010length string up to 255 characters\n  \u2022 subject: variable\u2010length string up to 255 characters\n  \u2022 message: text\n  \u2022 email_id: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_"}
{"seed": "/* Drops the database named libraryautomation. */\ndrop database libraryautomation", "description": "Drops the database named libraryautomation.", "concepts": ["drop database"], "instruction": "Write a SQL query to drop the database named libraryautomation.", "response": "-- Reasoning:\nWe need to delete the database named libraryautomation.\n\n-- Solution:\n```sql\nDROP DATABASE libraryautomation;\n```\n\n-- Explanation:\nThis statement deletes the database named libraryautomation.\n\n-- Tests:\n-- 1. Verify database is deleted\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named libraryautomation. */\ncreate database libraryautomation", "description": "Creates a database named libraryautomation.", "concepts": ["create database"], "instruction": "Write a SQL query to create a database named libraryautomation.", "response": "-- Reasoning:\nWe need to create a new database named libraryautomation.\n\n-- Solution:\n```sql\nCREATE DATABASE libraryautomation;\n```\n\n-- Explanation:\nThis statement creates a new database named libraryautomation.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named book with seven columns: BookId (integer primary key), BookName (varchar), author (varchar), Press (varchar), Price (varchar), Position (varchar), ISBN (varchar), status (varchar), Category (varchar), description (text), number (integer). */\ncreate table book(\n\tBookId int(6)  unsigned zerofill auto_increment not null,\n    BookName varchar(255) not null,\n    author varchar(255) not null,\n    Press varchar(255) not null,\n    Price varchar(255) not null,\n    Position varchar(255) not null,\n    ISBN varchar(255) not null,\n    status varchar(255) not null, -- available/reserved/lent\n    Category varchar(255) not null,\n    description text,\n    \n    number int not null,\n    PRIMARY KEY (BookId)\n)", "description": "Creates a table named book with seven columns: BookId (integer primary key), BookName (varchar), author (varchar), Press (varchar), Price (varchar), Position (varchar), ISBN (varchar), status (varchar), Category (varchar), description (text), number (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "INT", "AUTO_"], "instruction": "Write a SQL query to create a table named book with seven columns: BookId (integer primary key), BookName (varchar), author (varchar), Press (varchar), Price (varchar), Position (varchar), ISBN (varchar), status (varchar), Category (varchar), description (text), number (integer).", "response": "-- Reasoning:\nWe need a new table named book. It should have an integer primary key so that each book has a unique identifier, and a name column to store the book\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE book (\n  BookId INT PRIMARY KEY,\n  BookName VARCHAR(255),\n  author VARCHAR(255),\n  Press VARCHAR(255),\n  Price VARCHAR(255),\n  Position VARCHAR(255),\n  ISBN VARCHAR(255),\n  status VARCHAR(255),\n  Category VARCHAR(255),\n  description TEXT,\n  number INT\n);\n```\n\n-- Explanation:\nThis statement defines the book table with two columns:\n  \u2022 BookId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BookName: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('book');"}
{"seed": "/* Creates a table named bookrecord with five columns: informationId (integer primary key), FineValue (float), LentDate (datetime), ReturnDate (datetime), BookId (integer), AcntNum (integer). */\ncreate table bookrecord(\n\tinformationId int(6)  unsigned zerofill auto_increment not null,\n    FineValue float,\n    LentDate DATETIME not null,\n    ReturnDate DATETIME,\n    BookId int(6) unsigned zerofill not null,\n    AcntNum int(6) unsigned zerofill not null,\n    PRIMARY KEY (informationId)\n    \n)", "description": "Creates a table named bookrecord with five columns: informationId (integer primary key), FineValue (float), LentDate (datetime), ReturnDate (datetime), BookId (integer), AcntNum (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "FLOAT", "DATETIME", "DATETIME"], "instruction": "Write a SQL query to create a table named bookrecord with five columns: informationId (integer primary key), FineValue (float), LentDate (datetime), ReturnDate (datetime), BookId (integer), AcntNum (integer).", "response": "-- Reasoning:\nWe need a new table named bookrecord. It should have an integer primary key so that each record has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE bookrecord (\n  informationId INT PRIMARY KEY,\n  FineValue FLOAT,\n  LentDate DATETIME,\n  ReturnDate DATETIME,\n  BookId INT,\n  AcntNum INT\n);\n```\n\n-- Explanation:\nThis statement defines the bookrecord table with five columns:\n  \u2022 informationId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 FineValue: float\n  \u2022 LentDate: datetime\n  \u2022 ReturnDate: datetime\n  \u2022 BookId: integer\n  \u2022 AcntNum: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('bookrecord');"}
{"seed": "/* Creates a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime). */\ncreate table optionRecord(\n\tinformationId int(6)  unsigned zerofill auto_increment not null,\n\tBookId int(6) unsigned zerofill not null,\n    AcntNum int(6) unsigned zerofill not null,\n\treason  varchar(255),\n\toperation varchar(255) not null,\n\tcreationDate DATETIME not null,\n\tPRIMARY KEY (informationId)\n\t\n\t\n)", "description": "Creates a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime).", "response": "-- Reasoning:\nWe need a new table named optionRecord. It should have an integer primary key so that each record has a unique identifier, and four other columns to store the information about the option record.\n\n-- Solution:\n```sql\nCREATE TABLE optionRecord (\n  informationId INT PRIMARY KEY,\n  BookId INT,\n  AcntNum INT,\n  reason VARCHAR(255),\n  operation VARCHAR(255),\n  creationDate DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the optionRecord table with five columns:\n  \u2022 informationId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BookId: integer\n  \u2022 AcntNum: integer\n  \u2022 reason: variable\u2010length string up to 255 characters\n  \u2022 operation: variable\u2010length string up to 255 characters\n  \u2022 creationDate: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('optionRecord');"}
{"seed": "/* Creates a table named reserve with three columns: informationId (integer primary key), BookId (integer), AcntNum (integer), and createDate (datetime). */\ncreate table reserve(\n\tinformationId int(6)  unsigned zerofill auto_increment not null,\n\tBookId int(6) unsigned zerofill not null,\n    AcntNum int(6)  unsigned zerofill  not null,\n\tcreateDate DATETIME not null,\n\tPRIMARY KEY (informationId)\n)", "description": "Creates a table named reserve with three columns: informationId (integer primary key), BookId (integer), AcntNum (integer), and createDate (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named reserve with three columns: informationId (integer primary key), BookId (integer), AcntNum (integer), and createDate (datetime).", "response": "-- Reasoning:\nWe need a new table named reserve. It should have an integer primary key so that each reservation has a unique identifier, and two foreign keys to the books and accounts tables.\n\n-- Solution:\n```sql\nCREATE TABLE reserve (\n  informationId INT PRIMARY KEY,\n  BookId INT,\n  AcntNum INT,\n  createDate DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the reserve table with four columns:\n  \u2022 informationId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BookId: integer, foreign key to the books table\n  \u2022 AcntNum: integer, foreign key to the accounts table\n  \u2022 createDate: datetime, the date and time the reservation was created\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('reserve');"}
{"seed": "/* Creates a table named reader with five columns: AcntNum (integer primary key), Telephone (varchar), Password (varchar), Email (varchar), bookNumber (integer), registerDate (datetime), Deposit (float). */\ncreate table reader(\n\tAcntNum int(6)  unsigned zerofill auto_increment not null,\n\tTelephone varchar(255) not null,\n    Password varchar(255) not null,\n    Email varchar(255) not null,\n    bookNumber int not null,\n    registerDate DATETIME not null,\n    Deposit float not null,\n    PRIMARY KEY(AcntNum)\n)", "description": "Creates a table named reader with five columns: AcntNum (integer primary key), Telephone (varchar), Password (varchar), Email (varchar), bookNumber (integer), registerDate (datetime), Deposit (float).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DATETIME", "FLOAT"], "instruction": "Write a SQL query to create a table named reader with five columns: AcntNum (integer primary key), Telephone (varchar), Password (varchar), Email (varchar), bookNumber (integer), registerDate (datetime), Deposit (float).", "response": "-- Reasoning:\nWe need a new table named reader. It should have an integer primary key so that each reader has a unique identifier, and a name column to store the reader\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE reader (\n  AcntNum INT PRIMARY KEY,\n  Telephone VARCHAR(255),\n  Password VARCHAR(255),\n  Email VARCHAR(255),\n  bookNumber INT,\n  registerDate DATETIME,\n  Deposit FLOAT\n);\n```\n\n-- Explanation:\nThis statement defines the reader table with five columns:\n  \u2022 AcntNum: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Telephone: variable\u2010length string up to 255 characters\n  \u2022 Password: variable\u2010length string up to 255 characters\n  \u2022 Email: variable\u2010length string up to 255 characters\n  \u2022 bookNumber: integer\n  \u2022 registerDate: datetime\n  \u2022 Deposit: float\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('reader');"}
{"seed": "/* Creates a table named librarian with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table. */\ncreate table librarian(\n\tAcntNum varchar(255) not null,\n    Password varchar(255) not null,\n    PRIMARY KEY(AcntNum)\n)", "description": "Creates a table named librarian with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "concepts": ["CREATE TABLE", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named librarian with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "response": "-- Reasoning:\nWe need a new table named librarian. It should have an integer primary key so that each librarian has a unique identifier, and a name column to store the librarian\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE librarian (\n  AcntNum VARCHAR(255) PRIMARY KEY,\n  Password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the librarian table with two columns:\n  \u2022 AcntNum: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Password: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('librarian');"}
{"seed": "/* Creates a table named admin with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table. */\ncreate table admin(\n\tAcntNum varchar(255) not null,\n    Password varchar(255) not null,\n    PRIMARY KEY(AcntNum)\n)", "description": "Creates a table named admin with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "concepts": ["CREATE TABLE", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named admin with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "response": "-- Reasoning:\nWe need a new table named admin. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE admin (\n  AcntNum VARCHAR(255) PRIMARY KEY,\n  Password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the admin table with two columns:\n  \u2022 AcntNum: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Password: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('admin');"}
{"seed": "/* Creates a table named announcement with three columns: TextId (varchar), Text (text), and Date (datetime). TextId is the primary key of the table. */\ncreate table announcement(\n\tTextId varchar(255) not null,\n    Text text not null,\n    Date DATETIME not null,\n    PRIMARY KEY(TextId)\n)", "description": "Creates a table named announcement with three columns: TextId (varchar), Text (text), and Date (datetime). TextId is the primary key of the table.", "concepts": ["CREATE TABLE", "VARCHAR", "TEXT", "DATETIME", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named announcement with three columns: TextId (varchar), Text (text), and Date (datetime). TextId is the primary key of the table.", "response": "-- Reasoning:\nWe need a new table named announcement. It should have a primary key named TextId, a text column named Text, and a datetime column named Date.\n\n-- Solution:\n```sql\nCREATE TABLE announcement (\n  TextId VARCHAR(255) PRIMARY KEY,\n  Text TEXT,\n  Date DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the announcement table with three columns:\n  \u2022 TextId: variable\u2010length string up to 255 characters, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Text: variable\u2010length text\n  \u2022 Date: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('announcement');"}
{"seed": "/* Creates a foreign key constraint on the acntnum column of the optionRecord table that references the acntnum column of the reader table. */\nalter table optionRecord\nadd constraint reader_optionRecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the acntnum column of the optionRecord table that references the acntnum column of the reader table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the acntnum column of the optionRecord table that references the acntnum column of the reader table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the optionRecord table to reference the reader table. This will ensure that the acntnum column of the optionRecord table is always valid.\n\n-- Solution:\n```sql\nALTER TABLE optionRecord\n  ADD CONSTRAINT fk_optionRecord_reader\n    FOREIGN KEY (acntnum)\n    REFERENCES reader (acntnum);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the optionRecord table that references the reader table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('optionRecord');"}
{"seed": "/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the optionRecord table to ensure that the bookId column references the bookId column of the book table.\n\n-- Solution:\n```sql\nALTER TABLE optionRecord\n  ADD CONSTRAINT fk_bookId FOREIGN KEY (bookId) REFERENCES book(bookId);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the optionRecord table that references the bookId column of the book table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('optionRecord');"}
{"seed": "/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON UPDATE", "ON DELETE"], "instruction": "Write a SQL query to create a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table.\n\n-- Solution:\n```sql\nALTER TABLE reserve\n  ADD CONSTRAINT fk_acntnum\n  FOREIGN KEY (acntnum)\n  REFERENCES reader (acntnum);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the reserve table. The constraint ensures that the acntnum column of the reserve table references the acntnum column of the reader table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('reserve');"}
{"seed": "/* Creates a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table. */\nalter table reserve\nadd constraint book_reserve foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table.\n\n-- Solution:\n```sql\nALTER TABLE reserve\n  ADD CONSTRAINT fk_bookId\n    FOREIGN KEY (bookId)\n      REFERENCES book(bookId);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the reserve table. The constraint ensures that the bookId column of the reserve table references the bookId column of the book table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('reserve');"}
{"seed": "/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the bookrecord table to reference the reader table. This means that the acntnum column of the bookrecord table should be a foreign key that references the acntnum column of the reader table.\n\n-- Solution:\n```sql\nALTER TABLE bookrecord\n  ADD CONSTRAINT fk_bookrecord_reader\n    FOREIGN KEY (acntnum)\n    REFERENCES reader (acntnum);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the bookrecord table. The constraint is named fk_bookrecord_reader and it references the reader table. The acntnum column of the bookrecord table is the foreign key and the acntnum column of the reader table is the primary key.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('bookrecord');"}
{"seed": "/* Adds a foreign key constraint to the bookrecord table that references the book table. */\nalter table bookrecord\nadd constraint book_bookrecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE", "description": "Adds a foreign key constraint to the bookrecord table that references the book table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to add a foreign key constraint to the bookrecord table that references the book table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the bookrecord table that references the book table. This means that every book record must have a corresponding book in the book table.\n\n-- Solution:\n```sql\nALTER TABLE bookrecord\n  ADD CONSTRAINT fk_bookrecord_book\n    FOREIGN KEY (book_id)\n      REFERENCES book (book_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the bookrecord table that references the book table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('bookrecord');"}
{"seed": "/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values. */\nALTER TABLE PUBLIC.EMPLOYEE ADD IMAGE_DATA BLOB NULL", "description": "Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values.", "concepts": ["ALTER TABLE", "ADD", "BLOB", "NULL"], "instruction": "Write a SQL query to add a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values.", "response": "-- Reasoning:\nWe need to add a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. It should be a BLOB and can hold null values.\n\n-- Solution:\n```sql\nALTER TABLE PUBLIC.EMPLOYEE\n  ADD COLUMN IMAGE_DATA BLOB;\n```\n\n-- Explanation:\nThis ALTER statement updates the EMPLOYEE table schema by adding:\n  \u2022 IMAGE_DATA: a BLOB column that can hold null values\n\n-- Tests:\n-- 1. Verify new column appears\nPRAGMA table_info('EMPLOYEE');"}
{"seed": "/* Creates a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns. */\nCREATE UNIQUE INDEX sa.productbin_name_ind ON sa.table_productbin(parent_type,parent_id,\"NAME\")", "description": "Creates a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns.", "concepts": ["CREATE UNIQUE INDEX", "ON", "parent_type", "parent_id", "NAME"], "instruction": "Write a SQL query to create a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns.", "response": "-- Reasoning:\nWe need to create a unique index on the table_productbin table. The index should be on the parent_type, parent_id, and NAME columns.\n\n-- Solution:\n```sql\nCREATE UNIQUE INDEX productbin_name_ind ON table_productbin (parent_type, parent_id, NAME);\n```\n\n-- Explanation:\nThis statement creates a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('table_productbin');"}
{"seed": "/* Creates a table named chicken_lineage with four columns: id (integer primary key), lineage (varchar), chicken_color (varchar), and provider (varchar). */\nCREATE TABLE chicken_lineage (\n\tid INT NOT NULL AUTO_INCREMENT,\n\tlineage VARCHAR(15) NOT NULL,\n    chicken_color VARCHAR(15) NOT NULL,\n    provider VARCHAR(15) NOT NULL,\n\tPRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named chicken_lineage with four columns: id (integer primary key), lineage (varchar), chicken_color (varchar), and provider (varchar).", "concepts": ["CREATE TABLE", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "ENGINE", "DEFAULT"], "instruction": "Write a SQL query to create a table named chicken_lineage with four columns: id (integer primary key), lineage (varchar), chicken_color (varchar), and provider (varchar).", "response": "-- Reasoning:\nWe need a new table named chicken_lineage. It should have an integer primary key so that each chicken has a unique identifier, and a lineage column to store the chicken\u2019s lineage as text.\n\n-- Solution:\n```sql\nCREATE TABLE chicken_lineage (\n  id INT PRIMARY KEY,\n  lineage VARCHAR(255),\n  chicken_color VARCHAR(255),\n  provider VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the chicken_lineage table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 lineage: variable\u2010length string up to 255 characters\n  \u2022 chicken_color: variable\u2010length string up to 255 characters\n  \u2022 provider: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('chicken_lineage');"}
{"seed": "/* Creates a table named shed_manufacturer with three columns: id (integer primary key), manufacturer (varchar), and active (boolean). */\nCREATE TABLE shed_manufacturer (\n\tid INT NOT NULL AUTO_INCREMENT,\n\tmanufacturer VARCHAR(15) NOT NULL,\n\tPRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named shed_manufacturer with three columns: id (integer primary key), manufacturer (varchar), and active (boolean).", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named shed_manufacturer with three columns: id (integer primary key), manufacturer (varchar), and active (boolean).", "response": "-- Reasoning:\nWe need a new table named shed_manufacturer. It should have an integer primary key so that each manufacturer has a unique identifier, a name column to store the manufacturer\u2019s name as text, and an active column to indicate whether the manufacturer is still active.\n\n-- Solution:\n```sql\nCREATE TABLE shed_manufacturer (\n  id INTEGER PRIMARY KEY,\n  manufacturer VARCHAR(255),\n  active BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the shed_manufacturer table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 manufacturer: variable\u2010length string up to 255 characters\n  \u2022 active: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('shed_manufacturer');"}
{"seed": "/* Creates a table named shed with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column is a foreign key that references the id column in the shed_manufacturer table. */\nCREATE TABLE shed (\n  id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(15) NOT NULL,\n  type VARCHAR(15) NOT NULL,\n  capacity INT NOT NULL,\n  model VARCHAR(15) NOT NULL,\n  shed_manufacturer_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (shed_manufacturer_id) REFERENCES shed_manufacturer(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named shed with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column is a foreign key that references the id column in the shed_manufacturer table.", "concepts": ["CREATE TABLE", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named shed with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column is a foreign key that references the id column in the shed_manufacturer table.", "response": "-- Reasoning:\nWe need a new table named shed. It should have an integer primary key so that each shed has a unique identifier, and a name column to store the shed\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE shed (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  type VARCHAR(255),\n  capacity INT,\n  model VARCHAR(255),\n  shed_manufacturer_id INT,\n  FOREIGN KEY (shed_manufacturer_id) REFERENCES shed_manufacturer(id)\n);\n```\n\n-- Explanation:\nThis statement defines the shed table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 type: variable\u2010length string up to 255 characters\n  \u2022 capacity: integer\n  \u2022 model: variable\u2010length string up to 255 characters\n  \u2022 shed_manufacturer_id: integer, foreign key to shed_manufacturer.id\n\n-- Tests:\n-- 1. Verify table exists and schema is"}
{"seed": "/* Creates a table named chicken_lot with seven columns: id (integer primary key), birth_date (date), accommodation_date (date), initial_quantity (integer), current_quantity (integer), debicking (varchar), chicken_lineage_id (integer), and shed_id (integer). The id column is set to auto increment, the birth_date and accommodation_date columns are set to not null, and the initial_quantity, */\nCREATE TABLE chicken_lot (\n  id INT NOT NULL AUTO_INCREMENT,\n  birth_date DATE NOT NULL,\n  accommodation_date DATE NOT NULL,\n  initial_quantity INT NOT NULL,\n  current_quantity INT NOT NULL,\n  debicking VARCHAR(15) NOT NULL,\n  chicken_lineage_id  INT NOT NULL,\n  shed_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lineage_id) REFERENCES chicken_lineage(id),\n  FOREIGN KEY (shed_id) REFERENCES shed(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named chicken_lot with seven columns: id (integer primary key), birth_date (date), accommodation_date (date), initial_quantity (integer), current_quantity (integer), debicking (varchar), chicken_lineage_id (integer), and shed_id (integer). The id column is set to auto increment, the birth_date and accommodation_date columns are set to not null, and the initial_quantity,", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "ENGINE"], "instruction": "Write a SQL query to create a table named chicken_lot with seven columns: id (integer primary key), birth_date (date), accommodation_date (date), initial_quantity (integer), current_quantity (integer), debicking (varchar), chicken_lineage_id (integer), and shed_id (integer). The id column is set to auto increment, the birth_date and accommodation_date columns are set to not null, and", "response": "-- Reasoning:\nWe need a new table named chicken_lot. It should have an integer primary key so that each chicken lot has a unique identifier, and a birth_date and accommodation_date column to store the chicken\u2019s birth and accommodation dates.\n\n-- Solution:\n```sql\nCREATE TABLE chicken_lot (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  birth_date DATE NOT NULL,\n  accommodation_date DATE NOT NULL,\n  initial_quantity INTEGER,\n  current_quantity INTEGER,\n  debicking VARCHAR(255),\n  chicken_lineage_id INTEGER,\n  shed_id INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the chicken_lot table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 birth_date: date, not null\n  \u2022 accommodation_date: date, not null\n  \u2022 initial_quantity: integer\n  \u2022 current_quantity: integer\n  \u2022 debicking: variable\u2010length string up to 255 characters\n  \u2022 chicken_lineage_id: integer\n  \u2022 shed"}
{"seed": "/* Creates a table named creation_monitoring with 10 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), and chicken_lot_id (integer). The chicken_lot_id column is a foreign key that references the id column of the chicken_lot table. */\nCREATE TABLE creation_monitoring (\n  id INT NOT NULL AUTO_INCREMENT,\n  age_week INT NOT NULL,\n  age_day INT NOT NULL,\n  date_week DATE NOT NULL,\n  body_weight INT NOT NULL,\n  food INT NOT NULL,\n  water INT NOT NULL,\n  discard INT NOT NULL,\n  mortality INT NOT NULL,\n  chicken_lot_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named creation_monitoring with 10 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), and chicken_lot_id (integer). The chicken_lot_id column is a foreign key that references the id column of the chicken_lot table.", "concepts": ["CREATE TABLE", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named creation_monitoring with 10 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), and chicken_lot_id (integer). The chicken_lot_id column is a foreign key that references the id column of the chicken_lot table.", "response": "-- Reasoning:\nWe need a new table named creation_monitoring. It should have an integer primary key so that each row has a unique identifier, and a chicken_lot_id column to store the chicken_lot\u2019s id as an integer.\n\n-- Solution:\n```sql\nCREATE TABLE creation_monitoring (\n  id INT PRIMARY KEY,\n  age_week INT,\n  age_day INT,\n  date_week DATE,\n  body_weight INT,\n  food INT,\n  water INT,\n  discard INT,\n  mortality INT,\n  chicken_lot_id INT,\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n);\n```\n\n-- Explanation:\nThis statement defines the creation_monitoring table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 age_week: integer\n  \u2022 age_day: integer\n  \u2022 date_week: date\n  \u2022 body_weight: integer\n  \u2022 food: integer\n  \u2022 water: integer\n  \u2022 discard: integer\n  \u2022 mortality: integer\n  \u2022 chicken_lot_id: integer, foreign key to ch"}
{"seed": "/* Creates a table named production_monitoring with 14 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), total_production (integer), first_eggs (integer), second_eggs (integer), egg_weight (integer), and chicken_lot_id (integer). The chicken_ */\nCREATE TABLE production_monitoring (\n  id INT NOT NULL AUTO_INCREMENT,\n  age_week INT NOT NULL,\n  age_day INT NOT NULL,\n  date_week DATE NOT NULL,\n  body_weight INT NOT NULL,\n  food INT NOT NULL,\n  water INT NOT NULL,\n  discard INT NOT NULL,\n  mortality INT NOT NULL,\n  total_production INT NOT NULL,\n  first_eggs INT NOT NULL,\n  second_eggs INT NOT NULL,\n  egg_weight INT NOT NULL,\n  chicken_lot_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named production_monitoring with 14 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), total_production (integer), first_eggs (integer), second_eggs (integer), egg_weight (integer), and chicken_lot_id (integer). The chicken_", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN"], "instruction": "Write a SQL query to create a table named production_monitoring with 14 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), total_production (integer), first_eggs (integer), second_eggs (integer), egg_weight (integer), and chicken_lot_id (integer", "response": "-- Reasoning:\nWe need a new table named production_monitoring. It should have an integer primary key so that each row has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE production_monitoring (\n  id INT PRIMARY KEY,\n  age_week INT,\n  age_day INT,\n  date_week DATE,\n  body_weight INT,\n  food INT,\n  water INT,\n  discard INT,\n  mortality INT,\n  total_production INT,\n  first_eggs INT,\n  second_eggs INT,\n  egg_weight INT,\n  chicken_lot_id INT\n);\n```\n\n-- Explanation:\nThis statement defines the production_monitoring table with 14 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 age_week: integer\n  \u2022 age_day: integer\n  \u2022 date_week: date\n  \u2022 body_weight: integer\n  \u2022 food: integer\n  \u2022 water: integer\n  \u2022 discard: integer\n  \u2022 mortality: integer\n  \u2022 total_production: integer\n  \u2022 first_eggs: integer\n  \u2022 second"}
{"seed": "/* Inserts a new row into the shed_manufacturer table with the manufacturer Artabas. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Artabas')", "description": "Inserts a new row into the shed_manufacturer table with the manufacturer Artabas.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Kilbra')", "description": "Inserts a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column.", "response": "-- Reasoning:\nWe need to insert a new row into the shed_manufacturer table. It should have a value of Kilbra for the manufacturer column.\n\n-- Solution:\n```sql\nINSERT INTO shed_manufacturer (manufacturer)\nVALUES ('Kilbra');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM shed_manufacturer;"}
{"seed": "/* Inserts a new manufacturer named Plasson into the shed_manufacturer table. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Plasson')", "description": "Inserts a new manufacturer named Plasson into the shed_manufacturer table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new manufacturer named Plasson into the shed_manufacturer table.", "response": "-- Reasoning:\nWe need to insert a new manufacturer into the shed_manufacturer table. It should have a name of Plasson.\n\n-- Solution:\n```sql\nINSERT INTO shed_manufacturer (name)\nVALUES ('Plasson');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed_manufacturer table with a name of Plasson.\n\n-- Tests:\n-- 1. Verify new manufacturer appears\nSELECT * FROM shed_manufacturer;"}
{"seed": "/* Inserts a new manufacturer named Pr\u00f3prio into the shed_manufacturer table. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Pr\u00f3prio')", "description": "Inserts a new manufacturer named Pr\u00f3prio into the shed_manufacturer table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new manufacturer named Pr\u00f3prio into the shed_manufacturer table.", "response": "-- Reasoning:\nWe need to insert a new manufacturer into the shed_manufacturer table. It should have a name of Pr\u00f3prio.\n\n-- Solution:\n```sql\nINSERT INTO shed_manufacturer (name)\nVALUES ('Pr\u00f3prio');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed_manufacturer table with a name of Pr\u00f3prio.\n\n-- Tests:\n-- 1. Verify new manufacturer appears\nSELECT * FROM shed_manufacturer;"}
{"seed": "/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('Nick-Chick', 'Branca', 'H e N')", "description": "Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "response": "-- Reasoning:\nWe need to insert a new row into the chicken_lineage table. It should have the lineage, chicken_color, and provider columns.\n\n-- Solution:\n```sql\nINSERT INTO chicken_lineage (lineage, chicken_color, provider)\nVALUES ('Bantam', 'White', 'Chicken Coop');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the chicken_lineage table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM chicken_lineage;"}
{"seed": "/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('Nick-Brown', 'Vermelha', 'H e N')", "description": "Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "response": "-- Reasoning:\nWe need to insert a new row into the chicken_lineage table. It should have the lineage, chicken_color, and provider columns.\n\n-- Solution:\n```sql\nINSERT INTO chicken_lineage (lineage, chicken_color, provider)\nVALUES ('Bantam', 'White', 'Chicken Coop');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the chicken_lineage table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM chicken_lineage;"}
{"seed": "/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider values. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('W-80',  'Branca', 'Hy-Line')", "description": "Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider values.", "response": "-- Reasoning:\nWe need to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider values.\n\n-- Solution:\n```sql\nINSERT INTO chicken_lineage (lineage, chicken_color, provider)\nVALUES ('Bantam', 'White', 'Bantam Chicken');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the chicken_lineage table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM chicken_lineage;"}
{"seed": "/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('Hy-Line Brown',  'Vermelha', 'Hy-Line')", "description": "Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "response": "-- Reasoning:\nWe need to insert a new row into the chicken_lineage table. It should have the lineage, chicken_color, and provider columns.\n\n-- Solution:\n```sql\nINSERT INTO chicken_lineage (lineage, chicken_color, provider)\nVALUES ('Bantam', 'White', 'Chicken Coop');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the chicken_lineage table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM chicken_lineage;"}
{"seed": "/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('A1', 'Automatizado', 10080, 'P45-10', 1)", "description": "Inserts a new shed into the shed table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('A2', 'Automatizado', 10080, 'P45-10', 1)", "description": "Inserts a new shed into the shed table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('C1', 'Convencional', 3072, 'Madeira', 4)", "description": "Inserts a new shed into the shed table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new shed into the shed table with the given values.", "response": "-- Reasoning:\nWe need to insert a new shed into the shed table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO shed (shed_id, name, location)\nVALUES (1, '', '123 Main St');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed table with the given values:\n  \u2022 shed_id: 1\n  \u2022 name: \n  \u2022 location: 123 Main St\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM shed;"}
{"seed": "/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('C2', 'Convencional', 3072, 'Madeira', 4)", "description": "Inserts a new shed into the shed table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new shed into the shed table with the given values.", "response": "-- Reasoning:\nWe need to insert a new shed into the shed table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO shed (shed_id, name, location)\nVALUES (1, '', '123 Main St');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed table with the given values:\n  \u2022 shed_id: 1\n  \u2022 name: \n  \u2022 location: 123 Main St\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM shed;"}
