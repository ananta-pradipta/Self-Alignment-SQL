seed|concepts|instruction
/* Creates a table named db with 12 columns: id (bigint), db_name (varchar), driver_class_name (varchar), jdbc_url (varchar), password (varchar), pool_name (varchar), username (varchar), group */\nCREATE TABLE `db` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `db_name` varchar(255) DEFAULT NULL,\n  `driver_class_name` varchar(255) DEFAULT NULL,\n  `jdbc_url` varchar(255) DEFAULT NULL,\n  `password` varchar(255) DEFAULT NULL,\n  `pool_name` varchar(255) DEFAULT NULL,\n  `username` varchar(255) DEFAULT NULL,\n  `group_name` varchar(255) DEFAULT '',\n  `balance_type` varchar(50) DEFAULT '',\n  `minimum_idle` int(11) DEFAULT '1',\n  `maximum_pool_size` int(11) DEFAULT '1',\n  `connection_test_query` varchar(255) DEFAULT 'SELECT 1',\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8|```sql\n/* Creates a table named db_group with 3 columns: id (bigint),group_name (varchar),group_type (varchar) */\nCREATE TABLE `db_group` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,`group_name` varchar(255) DEFAULT NULL,`group_type` varchar(255) DEFAULT NULL,PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named db_group_db with 2 columns: db_id (bigint),group_id (bigint) */\nCREATE TABLE `db_group_db` (\n  `db_id` bigint(20) NOT NULL,`group_id` bigint(20) NOT NULL,PRIMARY KEY (`db_id`,`group_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named db_group_db_group with 2 columns: db_group_id (bigint),group_id (bigint) */\nCREATE TABLE `db_group_db|For example, if the concepts are:\n\n```sql\nCREATE TABLE `db_group` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT, `group_name` varchar(255) DEFAULT NULL, `group_type` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8\n```\n\n```sql\nCREATE TABLE `db_group_db` (\n  `db_id` bigint(20) NOT NULL, `group_id` bigint(20) NOT NULL, PRIMARY KEY (`db_id`, `group_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n```sql\nCREATE TABLE `db_group_db_group` (\n  `db_group_id` bigint(20) NOT NULL, `group_id` bigint(20) NOT NULL, PRIMARY KEY (`db_group_id`, `group_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named db_group_db_group with 2 columns: db_group_id
/* Selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table. */\nselect d20_sal - d10_sal as d20_10_diff, d20_sal - d30_sal as d20_30_diff\n  from (\n    select\n      sum(\n        case\n          when deptno = 10 then sal\n        end\n      ) as d10_sal,\n      sum(\n        case\n          when deptno = 20 then sal\n          end\n      ) as d20_sal,\n      sum (\n        case\n          when deptno = 30 then sal\n          end\n      ) as d30_sal\n      from emp\n  ) totals_by_dept|### 2. Extract the key SQL concepts (e.g. SELECT,JOIN,GROUP BY,CTE):\n\n```sql\n/* Selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table. */\nselect d20_sal - d10_sal as d20_10_diff,d20_sal - d30_sal as d20_30_diff\n  from (\n    select\n      sum(\n        case\n          when deptno = 10 then sal\n        end\n      ) as d10_sal,sum(\n        case\n          when deptno = 20 then sal\n          end\n      ) as d20_sal,sum (\n        case\n          when deptno = 30 then sal\n          end\n      ) as d30_sal\n      from emp\n  ) totals_by_dept\n```\n\n### 3. Extract the key SQL concepts (e.g. SELECT,JOIN,GROUP BY,CTE):\n\n```sql\n/* Selects the difference between the d20_|The query should return the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table. */\n\nselect d20_sal - d10_sal as d20_10_diff, d20_sal - d30_sal as d20_30_diff\n  from (\n    select\n      sum(\n        case\n          when deptno = 10 then sal\n        end\n      ) as d10_sal, sum(\n        case\n          when deptno = 20 then sal\n          end\n      ) as d20_sal, sum (\n        case\n          when deptno = 30 then sal\n          end\n      ) as d30_sal\n      from emp\n  ) totals_by_dept\n```\n\n### 4. Extract the key SQL concepts (e.g. SELECT, JOIN, GROUP BY, CTE):\n\n```sql\n/* Selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_
/* Sets the SQL mode to "NO_AUTO_VALUE_ON_ZERO", which means that the AUTO_INCREMENT value will not be set to 0 when inserting a new row. */\nSET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO"|```sql\n/* Create a table called "users" with the following columns:\n- id (integer,primary key,auto-increment)\n- name (string)\n- email (string)\n- password (string)\n- created_at (datetime)\n- updated_at (datetime)\n*/\nCREATE TABLE users (\n  id INT NOT NULL AUTO_INCREMENT,name VARCHAR(255) NOT NULL,email VARCHAR(255) NOT NULL,password VARCHAR(255) NOT NULL,created_at DATETIME NOT NULL,updated_at DATETIME NOT NULL,PRIMARY KEY (id)\n);\n```\n\n```sql\n/* Create a table called "posts" with the following columns:\n- id (integer,primary key,auto-increment)\n- user_id (integer,foreign key)\n- title (string)\n- body (text)\n- created_at (datetime)\n- updated_at (datetime)\n*/\nCREATE TABLE posts (\n  id INT NOT NULL AUTO_INCREMENT,user_id INT NOT NULL,title VARCHAR(255) NOT NULL,body TEXT NOT NULL,created_|```\n\n```sql\n/* Create a table called "comments" with the following columns:\n- id (integer, primary key, auto-increment)\n- post_id (integer, foreign key)\n- user_id (integer, foreign key)\n- body (text)\n- created_at (datetime)\n- updated_at (datetime)\n*/\nCREATE TABLE comments (\n  id INT NOT NULL AUTO_INCREMENT, post_id INT NOT NULL, user_id INT NOT NULL, body TEXT NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY (id)\n);\n```\n\n```sql\n/* Create a table called "likes" with the following columns:\n- id (integer, primary key, auto-increment)\n- user_id (integer, foreign key)\n- post_id (integer, foreign key)\n- created_at (datetime)\n- updated_at (datetime)\n*/\nCREATE TABLE likes (\n  id INT NOT NULL AUTO_INCREMENT, user_id INT NOT NULL, post_id INT NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY (id
/* Sets the time zone to UTC. */\nSET time_zone = "+00:00"|```sql\n/*\n * The following query returns the number of orders per day.\n *\n * The query uses the following SQL concepts:\n * - SELECT: Selects the date and the number of orders.\n * - JOIN: Joins the orders and the order_items tables.\n * - GROUP BY: Groups the results by date.\n * - CTE: Creates a common table expression.\n */\nWITH orders_per_day AS (\n    SELECT\n        date(created_at) AS date,COUNT(*) AS orders\n    FROM orders\n    GROUP BY date\n)\nSELECT\n    date,orders\nFROM orders_per_day\n```\n\n```sql\n/*\n * The following query returns the number of orders per day.\n *\n * The query uses the following SQL concepts:\n * - SELECT: Selects the date and the number of orders.\n * - JOIN: Joins the orders and the order_items tables.\n * - GROUP BY: Groups the results by date.\n * - CTE: Creates a common table expression.\n */\nWITH orders_per_day AS (\n    SELECT\n        date(created_at) AS date,COUNT(*) AS orders\n    FROM orders|```\n\n```sql\n/*\n * The following query returns the number of orders per day.\n *\n * The query uses the following SQL concepts:\n * - SELECT: Selects the date and the number of orders.\n * - JOIN: Joins the orders and the order_items tables.\n * - GROUP BY: Groups the results by date.\n * - CTE: Creates a common table expression.\n */\nWITH orders_per_day AS (\n    SELECT\n        date(created_at) AS date, COUNT(*) AS orders\n    FROM orders\n    GROUP BY date\n)\nSELECT\n    date, orders\nFROM orders_per_day\n```\n\n```sql\n/*\n * The following query returns the number of orders per day.\n *\n * The query uses the following SQL concepts:\n * - SELECT: Selects the date and the number of orders.\n * - JOIN: Joins the orders and the order_items tables.\n * - GROUP BY: Groups the results by date.\n * - CTE: Creates a common table expression.\n */\nWITH orders_per_day AS (\n    SELECT\n        date(created_at) AS date, COUNT(*) AS orders\n    FROM orders
/* Creates a table named user with 9 columns: user_id (integer), age (integer), first_name (varchar), last_name (varchar), gender (varchar), birth_date (varchar), reg_date (varchar), password ( */\nCREATE TABLE `user` (\n  `user_id` int(11) NOT NULL,\n  `age` int(11) NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `gender` varchar(45) NOT NULL,\n  `birth_date` varchar(45) NOT NULL,\n  `reg_date` varchar(45) NOT NULL,\n  `password` varchar(45) NOT NULL,\n  `email` varchar(45) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1|```sql\n/* Creates a table named user_address with 4 columns: user_id (integer),address_id (integer),address (varchar),city (varchar) */\nCREATE TABLE `user_address` (\n  `user_id` int(11) NOT NULL,`address_id` int(11) NOT NULL,`address` varchar(45) NOT NULL,`city` varchar(45) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n```sql\n/* Creates a table named user_phone with 3 columns: user_id (integer),phone_id (integer),phone (varchar) */\nCREATE TABLE `user_phone` (\n  `user_id` int(11) NOT NULL,`phone_id` int(11) NOT NULL,`phone` varchar(45) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n```sql\n/* Creates a table named user_email with 3 columns: user_id (integer),email_id (integer),email (varchar) */\nCREATE TABLE `user_email` (\n  `user_id`|```sql\n/* Creates a table named user_address with 4 columns: user_id (integer), address_id (integer), address (varchar), city (varchar) */\nCREATE TABLE `user_address` (\n  `user_id` int(11) NOT NULL, `address_id` int(11) NOT NULL, `address` varchar(45) NOT NULL, `city` varchar(45) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n```sql\n/* Creates a table named user_phone with 3 columns: user_id (integer), phone_id (integer), phone (varchar) */\nCREATE TABLE `user_phone` (\n  `user_id` int(11) NOT NULL, `phone_id` int(11) NOT NULL, `phone` varchar(45) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n```\n\n```sql\n/* Creates a table named user_email with 3 columns: user_id (integer), email_id (integer), email (varchar) */\nCREATE TABLE `user_email` (\n  `user_id` int(11)
/* Inserts a new user into the users table with the given values. */\nINSERT INTO `user` (`user_id`, `age`, `first_name`, `last_name`, `gender`, `birth_date`, `reg_date`, `password`, `email`) VALUES\n(11328762, 20, 'Edward', 'Tiro', 'Male', 'November 29, 1996', 'May 15, 2016', 'ef2928350f579b0a0ae3f2c3bf882a27', 'dward@tiro.com')|```sql\n/* Selects all users from the users table. */\nSELECT * FROM `user`\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old. */\nSELECT * FROM `user` WHERE `age` = 20\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` =|```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'\n```\n\n```sql\n/* Selects all users from the users table who are 20 years old and are male. */\nSELECT * FROM `user` WHERE `age` = 20 AND `gender` = 'Male'
/* Drops the table named application_config if it exists. */\nDROP TABLE IF EXISTS `application_config`|```sql\n/* Creates a table named application_config. */\nCREATE TABLE `application_config` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`key` varchar(255) NOT NULL,`value` varchar(255) NOT NULL,PRIMARY KEY (`id`),UNIQUE KEY `key` (`key`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n```\n\n```sql\n/* Inserts a row into the application_config table. */\nINSERT INTO `application_config` (`id`,`key`,`value`) VALUES (1,'key1','value1')\n```\n\n```sql\n/* Selects all rows from the application_config table. */\nSELECT * FROM `application_config`\n```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE `key` = 'key1'\n```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE `key` = 'key|```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE `key` = 'key1'\n```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE `key` = 'key1'\n```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE `key` = 'key1'\n```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE `key` = 'key1'\n```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE `key` = 'key1'\n```\n\n```sql\n/* Selects all rows from the application_config table where the key is key1. */\nSELECT * FROM `application_config` WHERE
/* Creates a table named application_config with four columns: config_id (integer primary key), config_name (varchar), config_value (varchar), and config_categ (varchar). */\nCREATE TABLE `application_config` (\n  `config_id` int(11) NOT NULL,\n  `config_name` varchar(45) DEFAULT NULL,\n  `config_value` varchar(45) DEFAULT NULL,\n  `config_categ` varchar(45) DEFAULT NULL,\n  PRIMARY KEY (`config_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8|```sql\n/* Creates a table named application_config_history with four columns: config_id (integer primary key),config_name (varchar),config_value (varchar),and config_categ (varchar). */\nCREATE TABLE `application_config_history` (\n  `config_id` int(11) NOT NULL,`config_name` varchar(45) DEFAULT NULL,`config_value` varchar(45) DEFAULT NULL,`config_categ` varchar(45) DEFAULT NULL,PRIMARY KEY (`config_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named application_config_history_log with four columns: config_id (integer primary key),config_name (varchar),config_value (varchar),and config_categ (varchar). */\nCREATE TABLE `application_config_history_log` (\n  `config_id` int(11) NOT NULL,`config_name` varchar(45) DEFAULT NULL,`config_value` varchar(45) DEFAULT NULL,`config_categ` varchar(45) DEFAULT NULL|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM application_config_history_log;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM application_config_history;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM application_config_history_log WHERE config_id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM application_config_history WHERE config_id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM application_config_history_log WHERE config_id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.
/* Inserts the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_ */\nINSERT INTO `application_config` VALUES (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT'),(7,'INCOME_TAX_CORPORATE','199','APPLICATION_AMOUNT'),(8,'IMPORT_EXPORT','3499','APPLICATION_AMOUNT')|```sql\n/* Inserts the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_ */\nINSERT INTO `application_config` VALUES (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT'),(7,'INCOME_TAX_CORPORATE','199','APPLICATION_AMOUNT'),(8,'IMPORT_EXPORT','3499','APPLICATION_AMOUNT')\n```\n\n```sql\n/* Inserts the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI|The query should return the following columns:\n\napplication_config.id\napplication_config.name\napplication_config.value\napplication_config.type\n\nThe query should return the following rows:\n\n(1, 'application_style', 'preset2.css', 'UI'), (2, 'ENTERPRENEUR_SERVED', '200', 'UI_METRIC'), (3, 'PROFESSIONAL_NETWORK', '77', 'UI_METRIC'), (4, 'GEOGRAPHIES', '7', 'UI_METRIC'), (5, 'TEAM_STRENGTH', '27', 'UI_METRIC'), (6, 'INCOME_TAX_INDIVIDULA', '299', 'APPLICATION_AMOUNT'), (7, 'INCOME_TAX_CORPORATE', '199', 'APPLICATION_AMOUNT'), (8, 'IMPORT_EXPORT', '3499', 'APPLICATION_AMOUNT')\n\n```\n\n```sql\nSELECT application_config.id, application_config.name, application_config.value, application_config.type\nFROM application_config\n```\n\n```sql\n/*
/* Drops the table named book_keeping_request if it exists. */\nDROP TABLE IF EXISTS `book_keeping_request`|```sql\n/* Creates a table named book_keeping_request. */\nCREATE TABLE `book_keeping_request` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`request_id` varchar(255) NOT NULL,`request_type` varchar(255) NOT NULL,`request_status` varchar(255) NOT NULL,`request_date` datetime NOT NULL,`request_data` text NOT NULL,`response_data` text NOT NULL,`response_date` datetime NOT NULL,`response_status` varchar(255) NOT NULL,`response_message` text NOT NULL,PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n```\n\n```sql\n/* Inserts a row into the book_keeping_request table. */\nINSERT INTO `book_keeping_request` (`id`,`request_id`,`request_type`,`request_status`,`request_date`,`request_data`,`response_data`,`response_date`,`response_status`,`response_message`) VALUES|```\n\n```sql\n/* Selects all rows from the book_keeping_request table. */\nSELECT * FROM `book_keeping_request`\n```\n\n```sql\n/* Selects all rows from the book_keeping_request table where the request_status is equal to 'pending'. */\nSELECT * FROM `book_keeping_request` WHERE `request_status` = 'pending'\n```\n\n```sql\n/* Selects all rows from the book_keeping_request table where the request_status is equal to 'pending' and the request_type is equal to 'create'. */\nSELECT * FROM `book_keeping_request` WHERE `request_status` = 'pending' AND `request_type` = 'create'\n```\n\n```sql\n/* Selects all rows from the book_keeping_request table where the request_status is equal to 'pending' and the request_type is equal to 'create' and the request_date is greater than '2021-01-01 00:00:00'. */\nSELECT * FROM `book_keeping_request` WHERE `request_status
/* Creates a table named book_keeping_request with seven columns: book_keeping_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_ */\nCREATE TABLE `book_keeping_request` (\n  `book_keeping_request_id` int(11) NOT NULL AUTO_INCREMENT,\n  `requestor_full_name` varchar(50) DEFAULT NULL,\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\n  `requestor_email_id` varchar(75) DEFAULT NULL,\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`book_keeping_request_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8|```sql\n/* Creates a table named book_keeping_request_details with seven columns: book_keeping_request_details_id (integer primary key),book_keeping_request_id (integer),request_type (varchar),request_status (varchar),request_description (varchar),request_amount (decimal),request_date (datetime) */\nCREATE TABLE `book_keeping_request_details` (\n  `book_keeping_request_details_id` int(11) NOT NULL AUTO_INCREMENT,`book_keeping_request_id` int(11) DEFAULT NULL,`request_type` varchar(50) DEFAULT NULL,`request_status` varchar(50) DEFAULT NULL,`request_description` varchar(255) DEFAULT NULL,`request_amount` decimal(10,2) DEFAULT NULL,`request_date` datetime DEFAULT NULL,PRIMARY KEY (`book_keeping_request_details_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named book_keeping_request_status with two columns: book|The query should return the book_keeping_request_details_id, request_type, request_status, request_description, request_amount, request_date, and book_keeping_request_id for all book_keeping_request_details records where the request_type is 'deposit' and the request_status is 'pending'.\n\nThe query should return the book_keeping_request_details_id, request_type, request_status, request_description, request_amount, request_date, and book_keeping_request_id for all book_keeping_request_details records where the request_type is 'withdrawal' and the request_status is 'approved'.\n\nThe query should return the book_keeping_request_details_id, request_type, request_status, request_description, request_amount, request_date, and book_keeping_request_id for all book_keeping_request_details records where the request_type is 'deposit' and the request_status is 'approved'.\n\nThe query should return the book_keeping_request_details_id, request_type, request_status, request
/* Drops the table named companies if it exists. */\nDROP TABLE IF EXISTS `companies`|```sql\n/* Creates a table named companies. */\nCREATE TABLE `companies` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`name` varchar(255) NOT NULL,`description` text NOT NULL,`created_at` datetime NOT NULL,`updated_at` datetime NOT NULL,PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Inserts a row into the table named companies. */\nINSERT INTO `companies` (`id`,`name`,`description`,`created_at`,`updated_at`)\nVALUES\n  (1,'Google','Google LLC is an American multinational technology company that specializes in Internet-related services and products,which include online advertising technologies,a search engine,cloud computing,software,and hardware.','2019-01-01 00:00:00','2019-01-01 00:00:00'),(2,'Facebook','Facebook,Inc. is an American online social media and social networking service based in Menlo Park,California|For example, if the table is named companies, the query should be:\n\nSELECT * FROM companies WHERE name = 'Google'\n\nIf the table is named users, the query should be:\n\nSELECT * FROM users WHERE name = ''\n\nIf the table is named posts, the query should be:\n\nSELECT * FROM posts WHERE title = 'My first post'\n\nIf the table is named comments, the query should be:\n\nSELECT * FROM comments WHERE body = 'This is my first comment'\n\nIf the table is named likes, the query should be:\n\nSELECT * FROM likes WHERE user_id = 123\n\nIf the table is named followers, the query should be:\n\nSELECT * FROM followers WHERE user_id = 123\n\nIf the table is named followings, the query should be:\n\nSELECT * FROM followings WHERE user_id = 123\n\nIf the table is named posts, the query should be:\n\nSELECT * FROM posts WHERE user_id = 123\n\nIf the table is named comments, the query should be:\n\nSELECT * FROM comments WHERE post_
/* Creates a table named companies with five columns: company_id (integer primary key), company_name (varchar), company_price (decimal), company_type (varchar), created_dt (datetime), and updated_dt (datetime). */\nCREATE TABLE `companies` (\n  `company_id` int(11) NOT NULL AUTO_INCREMENT,\n  `company_name` varchar(50) DEFAULT NULL,\n  `company_price` decimal(10,2) DEFAULT NULL,\n  `company_type` varchar(50) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`company_id`),\n  UNIQUE KEY `company_id_UNIQUE` (`company_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='Details for company type available'|```sql\n/* Creates a table named company_types with two columns: company_type_id (integer primary key),company_type (varchar). */\nCREATE TABLE `company_types` (\n  `company_type_id` int(11) NOT NULL AUTO_INCREMENT,`company_type` varchar(50) DEFAULT NULL,PRIMARY KEY (`company_type_id`),UNIQUE KEY `company_type_id_UNIQUE` (`company_type_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='Details for company type available'\n```\n\n```sql\n/* Creates a table named company_type_details with three columns: company_type_id (integer primary key),company_type_name (varchar),company_type_description (varchar). */\nCREATE TABLE `company_type_details` (\n  `company_type_id` int(11) NOT NULL,`company_type_name` varchar(50) DEFAULT NULL,`company_type_description` varchar(50) DEFAULT NULL,PRIMARY KEY (`company_type_id`),UNIQUE KEY `company_type_id_|```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM company_types, company_type_details WHERE company_types.company_type_id = company_type_details.company_type_id\n```\n\n## 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2
/* Inserts the given values into the companies table. */\nINSERT INTO `companies` VALUES (1,'Private Limited',12999.00,NULL,NULL,NULL),(2,'Limited Liability Partnership',9999.00,NULL,NULL,NULL),(3,'One Person Company',11999.00,NULL,NULL,NULL),(4,'Public Limited Company',42999.00,NULL,NULL,NULL),(5,'Nidhi Limited Company',74999.00,NULL,NULL,NULL),(6,'Section 8 Company',25000.00,NULL,NULL,NULL)|```sql\n/* Inserts the given values into the employees table. */\nINSERT INTO `employees` VALUES (1,'',12999.00,NULL,NULL,NULL),(2,'',9999.00,NULL,NULL,NULL),(3,'',11999.00,NULL,NULL,NULL),(4,'',42999.00,NULL,NULL,NULL),(5,'',74999.00,NULL,NULL,NULL),(6,'',25000.00,NULL,NULL,NULL),(7,'',12999.00,NULL,NULL,NULL),(8,'',9999.00,NULL,NULL,NULL),(9,'',11999.00,NULL,NULL,NULL),(10,'',42999.00,NULL,NULL,NULL),(11,'',74999.00,NULL,NULL,NULL),(12,'',25000.00,NULL,NULL,NULL),(13|```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000;\n```\n\n## 1.2.2. SQL SELECT\n\n```sql\nSELECT * FROM employees;\n```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000;\n```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000 AND salary < 20000;\n```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000 OR salary < 20000;\n```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000 AND salary < 20000 AND department = 'IT';\n```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000 AND (department = 'IT' OR department = 'HR');\n```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000 AND (department = 'IT' OR department = 'HR') AND name LIKE '%a%';\n```\n\n```sql\nSELECT * FROM employees WHERE salary > 10000 AND (
/* Drops the table named company_request if it exists. */\nDROP TABLE IF EXISTS `company_request`|```sql\n/* Creates a table named company_request. */\nCREATE TABLE `company_request` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`company_id` int(11) NOT NULL,`request_id` int(11) NOT NULL,`created_at` datetime NOT NULL,PRIMARY KEY (`id`),KEY `company_id` (`company_id`),KEY `request_id` (`request_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n```sql\n/* Creates a table named company. */\nCREATE TABLE `company` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`name` varchar(255) NOT NULL,`created_at` datetime NOT NULL,PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n```\n\n```sql\n/* Creates a table named request. */\nCREATE TABLE `request` (\n  `id` int(1|```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM company_request WHERE company_id = 1 AND request_id = 1;\n```\n\n## 2.2.2. SQL: SELECT\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM company_request WHERE company_id = 1 AND request_id = 1;\n```\n\n## 2.2.3. SQL: WHERE\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM company_request WHERE company_id = 1 AND request_id = 1;\n```\n\n## 2.2.4. SQL: AND\n\nWrite a single‑sentence natural
/* Creates a table named company_request with 11 columns: company_request_id (integer primary key), company_name (varchar), requestor_last_name (varchar), requestor_first_name (varchar), requostor */\nCREATE TABLE `company_request` (\n  `company_request_id` int(11) NOT NULL AUTO_INCREMENT,\n  `company_name` varchar(100) NOT NULL,\n  `requestor_last_name` varchar(50) DEFAULT NULL,\n  `requestor_first_name` varchar(50) DEFAULT NULL,\n  `requostor_email` varchar(100) DEFAULT NULL,\n  `requestor_phone_no` varchar(30) DEFAULT NULL,\n  `requestor_pan_no` varchar(30) DEFAULT NULL,\n  `company_id` int(11) DEFAULT NULL,\n  `message` varchar(2000) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`company_request_id`),\n  KEY `company_id_foreign_key_idx` (`company_id`),\n  CONSTRAINT `company_id_foreign_key` FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Details of company creation '|```sql\n/* Creates a table named companies with 11 columns: company_id (integer primary key),company_name (varchar),company_type (varchar),company_status (varchar),company_address (varchar),company_city (varchar),company_state (varchar),company_pincode (varchar),company_phone_no (varchar),company_email (varchar),company_pan_no (varchar) */\nCREATE TABLE `companies` (\n  `company_id` int(11) NOT NULL AUTO_INCREMENT,`company_name` varchar(100) NOT NULL,`company_type` varchar(50) DEFAULT NULL,`company_status` varchar(50) DEFAULT NULL,`company_address` varchar(200) DEFAULT NULL,`company_city` varchar(50) DEFAULT NULL,`company_state` varchar(50) DEFAULT NULL,`company_pincode` varchar(10) DEFAULT NULL,`company_phone_no` varchar(30) DEFAULT NULL,`company_email` varchar(100) DEFAULT NULL,`company_pan_no` varchar|```\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```\n\n```
/* Drops the table named gst_request if it exists. */\nDROP TABLE IF EXISTS `gst_request`|```sql\n/* Creates a table named gst_request. */\nCREATE TABLE `gst_request` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`request_id` varchar(255) NOT NULL,`request_type` varchar(255) NOT NULL,`request_status` varchar(255) NOT NULL,`request_date` datetime NOT NULL,`request_amount` decimal(10,2) NOT NULL,`request_gst_amount` decimal(10,2) NOT NULL,`request_gst_rate` decimal(10,2) NOT NULL,`request_gst_number` varchar(255) NOT NULL,`request_gst_type` varchar(255) NOT NULL,`request_gst_status` varchar(255) NOT NULL,`request_gst_date` datetime NOT NULL,`request_gst_amount_paid` decimal(10,2) NOT NULL,`request_gst_amount_due` decimal(10,2) NOT NULL,`request_gst_amount|*/\n```\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\n```sql\nSELECT * FROM gst_request WHERE request_type = 'GST' AND request_status = 'PAID' AND request_gst_status = 'PAID'\n```\n\n## 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2
/* Creates a table named gst_request with five columns: gst_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor */\nCREATE TABLE `gst_request` (\n  `gst_request_id` int(11) NOT NULL AUTO_INCREMENT,\n  `requestor_full_name` varchar(50) DEFAULT NULL,\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\n  `requestor_email_id` varchar(75) DEFAULT NULL,\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`gst_request_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8|```sql\n/* Creates a table named gst_request_details with five columns: gst_request_details_id (integer primary key),gst_request_id (integer),gst_request_status (varchar),gst_request_status_dt (datetime),gst_request_status_by (varchar) */\nCREATE TABLE `gst_request_details` (\n  `gst_request_details_id` int(11) NOT NULL AUTO_INCREMENT,`gst_request_id` int(11) DEFAULT NULL,`gst_request_status` varchar(20) DEFAULT NULL,`gst_request_status_dt` datetime DEFAULT NULL,`gst_request_status_by` varchar(50) DEFAULT NULL,PRIMARY KEY (`gst_request_details_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named gst_request_status with two columns: gst_request_status_id (integer primary key),gst_request_status_name (varchar) */\nCREATE TABLE `gst_request_status` (\n  `gst_request_status_id` int(11|```sql\n/* Creates a table named gst_request_details with five columns: gst_request_details_id (integer primary key), gst_request_id (integer), gst_request_status (varchar), gst_request_status_dt (datetime), gst_request_status_by (varchar) */\nCREATE TABLE `gst_request_details` (\n  `gst_request_details_id` int(11) NOT NULL AUTO_INCREMENT, `gst_request_id` int(11) DEFAULT NULL, `gst_request_status` varchar(20) DEFAULT NULL, `gst_request_status_dt` datetime DEFAULT NULL, `gst_request_status_by` varchar(50) DEFAULT NULL, PRIMARY KEY (`gst_request_details_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named gst_request_status with two columns: gst_request_status_id (integer primary key), gst_request_status_name (varchar) */\nCREATE TABLE `gst_request_status` (\n  `gst_request_status_id` int(11) NOT NULL AUTO_
/* Drops the table named import_export_request if it exists. */\nDROP TABLE IF EXISTS `import_export_request`|```sql\n/* Creates the table named import_export_request. */\nCREATE TABLE `import_export_request` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`request_id` varchar(255) NOT NULL,`request_type` varchar(255) NOT NULL,`request_status` varchar(255) NOT NULL,`request_time` datetime NOT NULL,`request_size` int(11) NOT NULL,`request_file_name` varchar(255) NOT NULL,`request_file_path` varchar(255) NOT NULL,`request_file_type` varchar(255) NOT NULL,`request_file_size` int(11) NOT NULL,`request_file_md5` varchar(255) NOT NULL,`request_file_sha1` varchar(255) NOT NULL,`request_file_sha256` varchar(255) NOT NULL,`request_file_crc32` varchar(255) NOT NULL,`|*/\n```\n\n```sql\n/* Creates the table named import_export_request. */\nCREATE TABLE `import_export_request` (\n  `id` int(11) NOT NULL AUTO_INCREMENT, `request_id` varchar(255) NOT NULL, `request_type` varchar(255) NOT NULL, `request_status` varchar(255) NOT NULL, `request_time` datetime NOT NULL, `request_size` int(11) NOT NULL, `request_file_name` varchar(255) NOT NULL, `request_file_path` varchar(255) NOT NULL, `request_file_type` varchar(255) NOT NULL, `request_file_size` int(11) NOT NULL, `request_file_md5` varchar(255) NOT NULL, `request_file_sha1` varchar(255) NOT NULL, `request_file_sha256` varchar(255) NOT NULL, `request_file_crc32` varchar(255) NOT NULL, `\nWrite a single‑sentence natural‑
/* Creates a table named import_export_request with seven columns: import_export_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id ( */\nCREATE TABLE `import_export_request` (\n  `import_export_request_id` int(11) NOT NULL AUTO_INCREMENT,\n  `requestor_full_name` varchar(50) DEFAULT NULL,\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\n  `requestor_email_id` varchar(50) DEFAULT NULL,\n  `requestor_pan_number` varchar(15) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`import_export_request_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8|```sql\n/* Creates a table named import_export_request_details with seven columns: import_export_request_details_id (integer primary key),import_export_request_id (integer),request_type (varchar),request_status (varchar),request_description (varchar),request_created_dt (datetime),request_updated_dt (datetime) */\nCREATE TABLE `import_export_request_details` (\n  `import_export_request_details_id` int(11) NOT NULL AUTO_INCREMENT,`import_export_request_id` int(11) DEFAULT NULL,`request_type` varchar(50) DEFAULT NULL,`request_status` varchar(50) DEFAULT NULL,`request_description` varchar(50) DEFAULT NULL,`request_created_dt` datetime DEFAULT NULL,`request_updated_dt` datetime DEFAULT NULL,PRIMARY KEY (`import_export_request_details_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named import_export_request_details_details with seven columns: import_export_request_|The query should return the following columns: import_export_request_details_id, import_export_request_id, request_type, request_status, request_description, request_created_dt, request_updated_dt\n\nThe query should return all rows from the import_export_request_details table.\n\nThe query should return the rows in the order they were created.\n\nThe query should return the rows in the order they were updated.\n\nThe query should return the rows in the order they were created and updated.\n\nThe query should return the rows in the order they were created and updated, but not in the same order.\n\nThe query should return the rows in the order they were created and updated, but not in the same order.\n\nThe query should return the rows in the order they were created and updated, but not in the same order.\n\nThe query should return the rows in the order they were created and updated, but not in the same order.\n\nThe query should return the rows in the order they were created and updated, but not in the same order.\n\nThe query should return the rows in the order they were created and updated, but not
/* Drops the table named income_tax_request if it exists. */\nDROP TABLE IF EXISTS `income_tax_request`|```sql\n/* Creates a table named income_tax_request. */\nCREATE TABLE `income_tax_request` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`user_id` int(11) NOT NULL,`amount` decimal(10,2) NOT NULL,`status` varchar(255) NOT NULL,`created_at` datetime NOT NULL,`updated_at` datetime NOT NULL,PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n```\n\n```sql\n/* Inserts a row into the table named income_tax_request. */\nINSERT INTO `income_tax_request` (`id`,`user_id`,`amount`,`status`,`created_at`,`updated_at`) VALUES\n(1,1,1000.00,'pending','2020-01-01 00:00:00','2020-01-01 00:00:00'),(2,1,2000.00|```\n\n```sql\n/* Selects all rows from the table named income_tax_request. */\nSELECT * FROM `income_tax_request`\n```\n\n```sql\n/* Selects all rows from the table named income_tax_request where the status is pending. */\nSELECT * FROM `income_tax_request` WHERE `status` = 'pending'\n```\n\n```sql\n/* Selects all rows from the table named income_tax_request where the status is pending and the amount is greater than 1000. */\nSELECT * FROM `income_tax_request` WHERE `status` = 'pending' AND `amount` > 1000\n```\n\n```sql\n/* Selects all rows from the table named income_tax_request where the status is pending and the amount is greater than 1000 and the amount is less than 2000. */\nSELECT * FROM `income_tax_request` WHERE `status` = 'pending' AND `amount` > 1000 AND `amount` < 2000\n```\n\n```sql\n/* Selects all rows from the table named income_
/* Creates a table named income_tax_request with the following columns: income_tax_request_id (integer primary key), requestor_full_name (varchar), requestor_email_id (varchar), requestor_phone_number */\nCREATE TABLE `income_tax_request` (\n  `income_tax_request_id` int(11) NOT NULL AUTO_INCREMENT,\n  `requestor_full_name` varchar(100) DEFAULT NULL,\n  `requestor_email_id` varchar(100) DEFAULT NULL,\n  `requestor_phone_number` varchar(30) DEFAULT NULL,\n  `requestor_bank_name` varchar(45) DEFAULT NULL,\n  `requestor_ifsc_code` varchar(45) DEFAULT NULL,\n  `user_type` varchar(45) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`income_tax_request_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8|```sql\n/* Creates a table named income_tax_request_details with the following columns: income_tax_request_details_id (integer primary key),income_tax_request_id (integer),income_tax_request_status (varchar),income_tax_request_status_dt (datetime),income_tax_request_status_by (varchar),income_tax_request_status_remarks (varchar),income_tax_request_status_dt (datetime),income_tax_request_status_by (varchar),income_tax_request_status_remarks (varchar) */\nCREATE TABLE `income_tax_request_details` (\n  `income_tax_request_details_id` int(11) NOT NULL AUTO_INCREMENT,`income_tax_request_id` int(11) DEFAULT NULL,`income_tax_request_status` varchar(45) DEFAULT NULL,`income_tax_request_status_dt` datetime DEFAULT NULL,`income_tax_request_status_by` varchar(45) DEFAULT NULL,`income_tax_request_status_remarks` varchar(45) DEFAULT NULL|*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.
/* Drops the table loan_request if it exists. */\nDROP TABLE IF EXISTS `loan_request`|```sql\n/* Creates the loan_request table. */\nCREATE TABLE `loan_request` (\n  `id` INT NOT NULL AUTO_INCREMENT,`loan_amount` INT NOT NULL,`loan_term` INT NOT NULL,`interest_rate` DECIMAL(10,2) NOT NULL,`created_at` DATETIME NOT NULL,PRIMARY KEY (`id`)\n)\n```\n\n```sql\n/* Inserts the loan_request data. */\nINSERT INTO `loan_request` (`loan_amount`,`loan_term`,`interest_rate`,`created_at`)\nVALUES (100000,12,0.05,'2020-01-01 00:00:00'),(200000,24,0.06,'2020-01-01 00:00:00'),(300000,36,0.07,'2020-01-01 00:00:00|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_request WHERE loan_amount > 100000 AND loan_term > 12 AND interest_rate > 0.05;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_request WHERE loan_amount > 100000 AND loan_term > 12 AND interest_rate > 0.05;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_request WHERE loan_amount > 100000 AND loan_term > 12 AND interest_rate > 0.05;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_request WHERE loan_amount > 100000 AND loan_
/* Creates a table named loan_request with 8 columns: loan_request_id (integer primary key), requestor_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_ */\nCREATE TABLE `loan_request` (\n  `loan_request_id` int(11) NOT NULL AUTO_INCREMENT,\n  `requestor_name` varchar(50) DEFAULT NULL,\n  `requestor_phone_number` varchar(20) DEFAULT NULL,\n  `requestor_email_id` varchar(75) DEFAULT NULL,\n  `requestor_pan_number` varchar(15) DEFAULT NULL,\n  `loan_id` int(11) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`loan_request_id`),\n  KEY `loan_id_foreign_key_idx` (`loan_id`),\n  CONSTRAINT `loan_id_foreign_key` FOREIGN KEY (`loan_id`) REFERENCES `loan_types` (`loan_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Loan request from users'|```sql\n/* Creates a table named loan_types with 3 columns: loan_id (integer primary key),loan_type (varchar),loan_amount (integer) */\nCREATE TABLE `loan_types` (\n  `loan_id` int(11) NOT NULL AUTO_INCREMENT,`loan_type` varchar(50) DEFAULT NULL,`loan_amount` int(11) DEFAULT NULL,PRIMARY KEY (`loan_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Loan types'\n```\n\n```sql\n/* Creates a table named loan_request_status with 3 columns: loan_request_status_id (integer primary key),loan_request_status (varchar),loan_request_status_description (varchar) */\nCREATE TABLE `loan_request_status` (\n  `loan_request_status_id` int(11) NOT NULL AUTO_INCREMENT,`loan_request_status` varchar(50) DEFAULT NULL,`loan_request_status_description` varchar(255) DEFAULT NULL,PRIMARY KEY (`loan_request_status_id`)\n) ENGINE=InnoDB DEFAULT|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT loan_id, loan_type, loan_amount FROM loan_types WHERE loan_amount > 1000000\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT loan_request_status_id, loan_request_status, loan_request_status_description FROM loan_request_status WHERE loan_request_status_description LIKE '%pending%'\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT loan_id, loan_type, loan_amount FROM loan_types WHERE loan_amount > 1000000 AND loan_type = 'Car'\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT loan_id, loan_type, loan_amount FROM loan_types WHERE loan_amount > 1000
/* Drops the table named loan_types if it exists. */\nDROP TABLE IF EXISTS `loan_types`|```sql\n/* Creates a table named loan_types. */\nCREATE TABLE `loan_types` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`name` varchar(255) NOT NULL,PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n```\n\n```sql\n/* Inserts the data into the table. */\nINSERT INTO `loan_types` (`id`,`name`) VALUES\n(1,'Home Loan'),(2,'Car Loan'),(3,'Personal Loan'),(4,'Business Loan'),(5,'Mortgage Loan'),(6,'Student Loan'),(7,'Credit Card Loan'),(8,'Debt Consolidation Loan'),(9,'Debt Consolidation Loan'),(10,'Debt Consolidation Loan'),(11,'Debt Consolidation Loan'),(12,'Debt Consolidation Loan'),(13,'Debt Consolidation Loan'),(14,'|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_types;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_types WHERE id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_types WHERE id = 1 OR id = 2;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_types WHERE id = 1 OR id = 2 OR id = 3;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM loan_types WHERE id = 1 OR id = 2 OR id = 3 OR id = 4;\n```\n\n```sql\n/* Write a single‑sentence natural
/* Creates a table named loan_types with three columns: loan_type (varchar), loan_name (varchar), and loan_id (int). */\nCREATE TABLE `loan_types` (\n  `loan_type` varchar(50) DEFAULT NULL,\n  `loan_name` varchar(50) DEFAULT NULL,\n  `loan_id` int(11) NOT NULL,\n  PRIMARY KEY (`loan_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Types of loans offered by platform'|```sql\n/* Creates a table named loan_applications with five columns: loan_id (int),applicant_id (int),loan_type (varchar),loan_amount (int),and loan_status (varchar). */\nCREATE TABLE `loan_applications` (\n  `loan_id` int(11) NOT NULL,`applicant_id` int(11) NOT NULL,`loan_type` varchar(50) DEFAULT NULL,`loan_amount` int(11) DEFAULT NULL,`loan_status` varchar(50) DEFAULT NULL,PRIMARY KEY (`loan_id`,`applicant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Applications for loans'\n```\n\n```sql\n/* Creates a table named applicants with four columns: applicant_id (int),first_name (varchar),last_name (varchar),and email (varchar). */\nCREATE TABLE `applicants` (\n  `applicant_id` int(11) NOT NULL,`first_name` varchar(50) DEFAULT NULL,`last_name` varchar(50) DEFAULT NULL,`email`|```\n\n```sql\n/* Creates a table named applicants with four columns: applicant_id (int), first_name (varchar), last_name (varchar), and email (varchar). */\nCREATE TABLE `applicants` (\n  `applicant_id` int(11) NOT NULL, `first_name` varchar(50) DEFAULT NULL, `last_name` varchar(50) DEFAULT NULL, `email` varchar(50) DEFAULT NULL, PRIMARY KEY (`applicant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Applicants'\n```\n\n```sql\n/* Creates a table named loan_applications with five columns: loan_id (int), applicant_id (int), loan_type (varchar), loan_amount (int), and loan_status (varchar). */\nCREATE TABLE `loan_applications` (\n  `loan_id` int(11) NOT NULL, `applicant_id` int(11) NOT NULL, `loan_type` varchar(50) DEFAULT NULL, `loan_amount` int(11) DEFAULT NULL, `loan_status` varchar(50) DEFAULT NULL, PRIMARY KEY (`loan
/* Inserts five rows into the loan_types table. */\nINSERT INTO `loan_types` VALUES ('Home Loan','Home Loan',1),('Loan Against Property','Loan Against Property',2),('Balance Transfer & Top ups','Balance Transfer & Top ups',3),('Educational Loan','Educational Loan',4),('Term Loan Synidation','Term Loan Synidation',5)|```sql\n/* Selects all rows from the loan_types table. */\nSELECT * FROM `loan_types`\n```\n\n```sql\n/* Selects all rows from the loan_types table where the loan_type_id is 1. */\nSELECT * FROM `loan_types` WHERE `loan_type_id` = 1\n```\n\n```sql\n/* Selects all rows from the loan_types table where the loan_type_id is 1 or 2. */\nSELECT * FROM `loan_types` WHERE `loan_type_id` = 1 OR `loan_type_id` = 2\n```\n\n```sql\n/* Selects all rows from the loan_types table where the loan_type_id is 1 or 2 and the loan_type_name is Home Loan. */\nSELECT * FROM `loan_types` WHERE `loan_type_id` = 1 OR `loan_type_id` = 2 AND `loan_type_name` = 'Home Loan'\n```\n\n```sql\n/* Selects all rows from the loan_types table where the loan_type_id is|*/\nSELECT * FROM `loan_types` WHERE `loan_type_id` = 1 OR `loan_type_id` = 2 AND `loan_type_name` = 'Home Loan'\n```\n\n```sql\n/* Selects all rows from the loan_types table where the loan_type_id is 1 or 2 and the loan_type_name is Home Loan. */\nSELECT * FROM `loan_types` WHERE `loan_type_id` = 1 OR `loan_type_id` = 2 AND `loan_type_name` = 'Home Loan'\n```\n\n```sql\n/* Selects all rows from the loan_types table where the loan_type_id is 1 or 2 and the loan_type_name is Home Loan. */\nSELECT * FROM `loan_types` WHERE `loan_type_id` = 1 OR `loan_type_id` = 2 AND `loan_type_name` = 'Home Loan'\n```\n\n```sql\n/* Selects all rows from the loan_types table where the loan_type_id is 1 or 2
/* Drops the table named paymet_txn_summary if it exists. */\nDROP TABLE IF EXISTS `paymet_txn_summary`|```sql\n/* Creates a table named paymet_txn_summary. */\nCREATE TABLE `paymet_txn_summary` (\n  `txn_id` INT NOT NULL,`txn_date` DATE NOT NULL,`txn_type` VARCHAR(10) NOT NULL,`txn_amount` DECIMAL(10,2) NOT NULL,`txn_status` VARCHAR(10) NOT NULL,`txn_currency` VARCHAR(3) NOT NULL,`txn_country` VARCHAR(2) NOT NULL,`txn_city` VARCHAR(20) NOT NULL,`txn_state` VARCHAR(20) NOT NULL,`txn_zip` VARCHAR(10) NOT NULL,`txn_ip` VARCHAR(15) NOT NULL,`txn_email` VARCHAR(50) NOT NULL,`txn_phone` VARCHAR(20) NOT NULL,`txn_name` VARCHAR(50) NOT NULL,`txn_address` VARCHAR(100) NOT NULL,`txn_country_code` VARCHAR(2) NOT NULL,`txn_country_name|For example, if the concepts are:\n\n```sql\nSELECT\nFROM\nWHERE\nGROUP BY\nHAVING\nORDER BY\nLIMIT\nOFFSET\n```\n\nThen the instruction would be:\n\n```sql\nWrite a query that uses all of the concepts listed above.\n```\n\n## Solution\n\n```sql\nWrite a query that uses all of the concepts listed above.\n```\n\n## Answer\n\n```sql\nSELECT * FROM paymet_txn_summary;\n```\n/0x0D-SQL_introduction/10-top_score.sql\n-- Lists all records of the table second_table of the database hbtn_0c_0 in your MySQL server.\nSELECT score, name FROM second_table ORDER BY score DESC;\n/0x0D-SQL_introduction/13-change_class.sql\n-- Removes all records with a score <= 5 in the table second_table of the database hbtn_0c_0 in your MySQL server.\nDELETE FROM second_table WHERE score <= 5;\n/0x0D-SQL_introduction/14-average.sql\n-- Computes the score average of all
/* Creates a table named paymet_txn_summary with 9 columns: payment_id (integer primary key), payment_txnid (varchar), payu_txnid (varchar), service_request_id (integer), service_type ( */\nCREATE TABLE `paymet_txn_summary` (\n  `payment_id` int(11) NOT NULL AUTO_INCREMENT,\n  `payment_txnid` varchar(200) DEFAULT NULL,\n  `payu_txnid` varchar(200) DEFAULT NULL,\n  `service_request_id` int(11) DEFAULT NULL,\n  `service_type` varchar(100) DEFAULT NULL,\n  `amount_paid` varchar(500) DEFAULT NULL,\n  `payment_status` varchar(45) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`payment_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To trck payments paid through the site'|```sql\n/* Creates a table named paymet_txn_summary with 9 columns: payment_id (integer primary key),payment_txnid (varchar),payu_txnid (varchar),service_request_id (integer),service_type ( */\nCREATE TABLE `paymet_txn_summary` (\n  `payment_id` int(11) NOT NULL AUTO_INCREMENT,`payment_txnid` varchar(200) DEFAULT NULL,`payu_txnid` varchar(200) DEFAULT NULL,`service_request_id` int(11) DEFAULT NULL,`service_type` varchar(100) DEFAULT NULL,`amount_paid` varchar(500) DEFAULT NULL,`payment_status` varchar(45) DEFAULT NULL,`created_dt` datetime DEFAULT NULL,`updated_dt` datetime DEFAULT NULL,PRIMARY KEY (`payment_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To trck payments paid through the site'\n```\n\n```sql\n/* Creates a table named paymet_txn_summary with 9 columns: payment_id (|*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\n```\n\n```sql\n/*\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.
/* Drops the table named registration_service_request if it exists. */\nDROP TABLE IF EXISTS `registration_service_request`|```sql\n/* Creates a table named registration_service_request. */\nCREATE TABLE `registration_service_request` (\n  `id` INT NOT NULL AUTO_INCREMENT,`name` VARCHAR(255) NOT NULL,`email` VARCHAR(255) NOT NULL,`phone` VARCHAR(255) NOT NULL,`address` VARCHAR(255) NOT NULL,`city` VARCHAR(255) NOT NULL,`state` VARCHAR(255) NOT NULL,`zip` VARCHAR(255) NOT NULL,`country` VARCHAR(255) NOT NULL,`service_type` VARCHAR(255) NOT NULL,`service_date` DATE NOT NULL,`service_time` VARCHAR(255) NOT NULL,`service_description` VARCHAR(255) NOT NULL,`service_status` VARCHAR(255) NOT NULL,`created_at` DATETIME NOT NULL,`updated_at` DATETIME NOT NULL,PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf|For example, if you were writing a query to find all the registration service requests for a specific service type, you might write:\n\nFind all registration service requests for service type "car wash".\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nFor example, if you were writing a query to find all the registration service requests for a specific service type, you might write:\n\nFind all registration service requests for service type "car wash".\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nFor example, if you were writing a query to find all the registration service requests for a specific service type, you might write:\n\nFind all registration service requests for service type "car wash".\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nFor example, if you were writing a query to find all the registration service requests for a specific service type, you might write:\n\nFind all registration service requests for service type "car wash".\n\nWrite a single‑sentence natural‑language instruction asking for
/* Creates a table named registration_service_request with the following columns: registration_service_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id */\nCREATE TABLE `registration_service_request` (\n  `registration_service_request_id` int(11) NOT NULL AUTO_INCREMENT,\n  `requestor_full_name` varchar(50) DEFAULT NULL,\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\n  `requestor_email_id` varchar(75) DEFAULT NULL,\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  `registration_service_type_id` int(11) DEFAULT NULL,\n  PRIMARY KEY (`registration_service_request_id`),\n  KEY `registration_service_fid_foreign_key_idx` (`registration_service_type_id`),\n  CONSTRAINT `registration_service_fid_foreign_key` FOREIGN KEY (`registration_service_type_id`) REFERENCES `registration_service_type` (`service_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\n) ENGINE=InnoDB DEFAULT CHARSET=utf8|```sql\n/* Creates a table named registration_service_type with the following columns: service_id (integer primary key),service_name (varchar),service_description (varchar),service_status (varchar),created_dt (datetime),updated_dt (datetime) */\nCREATE TABLE `registration_service_type` (\n  `service_id` int(11) NOT NULL AUTO_INCREMENT,`service_name` varchar(50) DEFAULT NULL,`service_description` varchar(255) DEFAULT NULL,`service_status` varchar(10) DEFAULT NULL,`created_dt` datetime DEFAULT NULL,`updated_dt` datetime DEFAULT NULL,PRIMARY KEY (`service_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named registration_service_type_mapping with the following columns: registration_service_type_mapping_id (integer primary key),registration_service_type_id (integer),registration_service_request_id (integer),created_dt (datetime),updated_dt (datetime) */\nCREATE TABLE `registration_service_type_mapping` (\n  `registration|```sql\n/* Creates a table named registration_service_type_mapping with the following columns: registration_service_type_mapping_id (integer primary key), registration_service_type_id (integer), registration_service_request_id (integer), created_dt (datetime), updated_dt (datetime) */\nCREATE TABLE `registration_service_type_mapping` (\n  `registration_service_type_mapping_id` int(11) NOT NULL AUTO_INCREMENT, `registration_service_type_id` int(11) DEFAULT NULL, `registration_service_request_id` int(11) DEFAULT NULL, `created_dt` datetime DEFAULT NULL, `updated_dt` datetime DEFAULT NULL, PRIMARY KEY (`registration_service_type_mapping_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named registration_service_type_mapping with the following columns: registration_service_type_mapping_id (integer primary key), registration_service_type_id (integer), registration_service_request_id (integer), created_dt (datetime), updated_dt (datetime) */\nCREATE TABLE `
/* Drops the table named registration_service_type if it exists. */\nDROP TABLE IF EXISTS `registration_service_type`|```sql\n/* Creates a table named registration_service_type. */\nCREATE TABLE `registration_service_type` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,`name` varchar(255) NOT NULL,`description` varchar(255) NOT NULL,PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n```\n\n```sql\n/* Inserts data into the registration_service_type table. */\nINSERT INTO `registration_service_type` (`id`,`name`,`description`) VALUES\n(1,'Registration','Registration'),(2,'Registration','Registration'),(3,'Registration','Registration'),(4,'Registration','Registration'),(5,'Registration','Registration'),(6,'Registration','Registration'),(7,'Registration','Registration'),(8,'Registration','Registration'),(9,'Registration','Registration'),(10,'Registration','Registration'),(11,'Registration','Registration'),(12,'Registration','Registration'),(13|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type WHERE id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type WHERE id = 1 AND name = 'Registration';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type WHERE id = 1 AND name = 'Registration' AND description = 'Registration';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type WHERE id = 1 AND name = 'Registration' AND description = 'Registration' AND id = 1;\n```
/* Creates a table named registration_service_type with three columns: service_id (integer primary key), service_name (varchar) and service_type (varchar). */\nCREATE TABLE `registration_service_type` (\n  `service_id` int(11) NOT NULL AUTO_INCREMENT,\n  `service_name` varchar(45) NOT NULL,\n  `service_type` varchar(45) DEFAULT NULL,\n  PRIMARY KEY (`service_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8|```sql\n/* Creates a table named registration_service_type_history with three columns: service_id (integer primary key),service_name (varchar) and service_type (varchar). */\nCREATE TABLE `registration_service_type_history` (\n  `service_id` int(11) NOT NULL AUTO_INCREMENT,`service_name` varchar(45) NOT NULL,`service_type` varchar(45) DEFAULT NULL,PRIMARY KEY (`service_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named registration_service_type_history_2 with three columns: service_id (integer primary key),service_name (varchar) and service_type (varchar). */\nCREATE TABLE `registration_service_type_history_2` (\n  `service_id` int(11) NOT NULL AUTO_INCREMENT,`service_name` varchar(45) NOT NULL,`service_type` varchar(45) DEFAULT NULL,PRIMARY KEY (`service_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type_history_2;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type_history;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type_history_2 WHERE service_id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type_history WHERE service_id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM registration_service_type_history_2 WHERE service_id = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction
/* Inserts the values (1,'FSSAI Food License','license'), (2,'IEC Registration','registration'), (3,'Trade License','license'), (4,'ISO Registration','license'), (5,'Digital Signature (DSC)','license'), */\nINSERT INTO `registration_service_type` VALUES (1,'FSSAI Food License','license'),(2,'IEC Registration','registration'),(3,'Trade License','license'),(4,'ISO Registration','license'),(5,'Digital Signature (DSC)','license'),(6,'Employee State Insurance (ESI) Registration','license'),(7,'Employees Provident Fund','license'),(8,'Service Tax Registration','registration'),(9,'Sales Tax Registration','registration'),(10,'Professional Tax Registration','registration'),(11,'Excise Tax Registration','registration')|```sql\n/* Inserts the values (1,'FSSAI Food License','license'),(2,'IEC Registration','registration'),(3,'Trade License','license'),(4,'ISO Registration','license'),(5,'Digital Signature (DSC)','license'),*/\nINSERT INTO `registration_service_type` VALUES (1,'FSSAI Food License','license'),(2,'IEC Registration','registration'),(3,'Trade License','license'),(4,'ISO Registration','license'),(5,'Digital Signature (DSC)','license'),(6,'Employee State Insurance (ESI) Registration','license'),(7,'Employees Provident Fund','license'),(8,'Service Tax Registration','registration'),(9,'Sales Tax Registration','registration'),(10,'Professional Tax Registration','registration'),(11,'Excise Tax Registration','registration')\n```\n\n```sql\n/* Inserts the values (1,'FSSAI Food License','license'),(2,'IEC Registration','registration'),(3,'Trade License','license'),(4,'ISO Registration','license'),(5,'Digital Signature (DSC)','license'),*/\nINSERT INTO `registration_service_type` VALUES (1,'FSSAI Food License','license'),(2,'IEC|Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nWrite
/* Drops the table named user_query if it exists. */\nDROP TABLE IF EXISTS `user_query`|```sql\n/* Creates a table named user_query. */\nCREATE TABLE `user_query` (\n  `user_id` INT(11) NOT NULL,`query_id` INT(11) NOT NULL,`query_date` DATE NOT NULL,`query_time` TIME NOT NULL,`query_type` VARCHAR(10) NOT NULL,`query_text` TEXT NOT NULL,`query_duration` INT(11) NOT NULL,`query_result_size` INT(11) NOT NULL,`query_result_rows` INT(11) NOT NULL,`query_result_rows_affected` INT(11) NOT NULL,`query_result_tmp_disk_usage` INT(11) NOT NULL,`query_result_tmp_table_usage` INT(11) NOT NULL,`query_result_tmp_table_rows` INT(11) NOT NULL,`query_result_tmp_disk_tables` INT(11) NOT NULL,`query_result_tmp_disk_index_tables` INT(|```\n\nI have the following query:\n\n```sql\nSELECT * FROM user_query WHERE query_type = 'SELECT' AND query_result_rows_affected = 0 AND query_result_tmp_disk_usage = 0 AND query_result_tmp_table_usage = 0 AND query_result_tmp_table_rows = 0 AND query_result_tmp_disk_tables = 0 AND query_result_tmp_disk_index_tables = 0\n\n```\n\nI want to write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\nI have tried:\n\n```\nSELECT * FROM user_query WHERE query_type = 'SELECT' AND query_result_rows_affected = 0 AND query_result_tmp_disk_usage = 0 AND query_result_tmp_table_usage = 0 AND query_result_tmp_table_rows = 0 AND query_result_tmp_disk_tables = 0 AND query_result_tmp_disk_index_tables = 0\n\n```\n\nBut I don't know how to write a single‑
/* Creates a table named user_query with seven columns: query_id (integer primary key), full_name (varchar), subject (varchar), message (text), email_id (varchar), created_dt (datetime), and updated_dt ( */\nCREATE TABLE `user_query` (\n  `query_id` int(11) NOT NULL AUTO_INCREMENT,\n  `full_name` varchar(55) DEFAULT NULL,\n  `subject` varchar(100) DEFAULT NULL,\n  `message` text,\n  `email_id` varchar(50) DEFAULT NULL,\n  `created_dt` datetime DEFAULT NULL,\n  `updated_dt` datetime DEFAULT NULL,\n  PRIMARY KEY (`query_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8|```sql\n/* Creates a table named user_query_response with five columns: response_id (integer primary key),query_id (integer),full_name (varchar),email_id (varchar),and response (text) */\nCREATE TABLE `user_query_response` (\n  `response_id` int(11) NOT NULL AUTO_INCREMENT,`query_id` int(11) DEFAULT NULL,`full_name` varchar(55) DEFAULT NULL,`email_id` varchar(50) DEFAULT NULL,`response` text,PRIMARY KEY (`response_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n\n```sql\n/* Creates a table named user_query_response_attachment with five columns: attachment_id (integer primary key),response_id (integer),attachment_name (varchar),attachment_path (varchar),and attachment_type (varchar) */\nCREATE TABLE `user_query_response_attachment` (\n  `attachment_id` int(11) NOT NULL AUTO_INCREMENT,`response_id` int(11) DEFAULT NULL,`attachment_name` varchar(1|```sql\n/* Write a query that returns the full_name, email_id, and response of all responses to a query with query_id 1 */\nSELECT full_name, email_id, response FROM user_query_response WHERE query_id = 1\n```\n\n```sql\n/* Write a query that returns the full_name, email_id, and response of all responses to a query with query_id 1 that have attachments */\nSELECT full_name, email_id, response FROM user_query_response WHERE query_id = 1 AND response_id IN (SELECT response_id FROM user_query_response_attachment)\n```\n\n```sql\n/* Write a query that returns the full_name, email_id, and response of all responses to a query with query_id 1 that have attachments that are of type 'image' */\nSELECT full_name, email_id, response FROM user_query_response WHERE query_id = 1 AND response_id IN (SELECT response_id FROM user_query_response_attachment WHERE attachment_type = 'image')\n```\n\n```sql\n/* Write a query that returns the full_name
/* Drops the database named libraryautomation. */\ndrop database libraryautomation|```sql\n/* Creates the database named libraryautomation. */\ncreate database libraryautomation\n```\n\n```sql\n/* Creates the table named books. */\ncreate table books (\n    book_id int,title varchar(255),author varchar(255),publisher varchar(255),year_published int,primary key (book_id)\n)\n```\n\n```sql\n/* Creates the table named authors. */\ncreate table authors (\n    author_id int,name varchar(255),primary key (author_id)\n)\n```\n\n```sql\n/* Creates the table named book_authors. */\ncreate table book_authors (\n    book_id int,author_id int,primary key (book_id,author_id),foreign key (book_id) references books(book_id),foreign key (author_id) references authors(author_id)\n)\n```\n\n```sql\n/* Creates the table named book_copies. */\ncreate table book_copies (\n    book_id int,copy_id int,primary key (book_id,copy_id|```\n\n```sql\n/* Creates the table named borrowers. */\ncreate table borrowers (\n    borrower_id int, name varchar(255), address varchar(255), phone varchar(255), primary key (borrower_id)\n)\n```\n\n```sql\n/* Creates the table named borrowings. */\ncreate table borrowings (\n    borrower_id int, book_id int, copy_id int, borrow_date date, return_date date, primary key (borrower_id, book_id, copy_id), foreign key (borrower_id) references borrowers(borrower_id), foreign key (book_id, copy_id) references book_copies(book_id, copy_id)\n)\n```\n\n```sql\n/* Creates the table named book_loans. */\ncreate table book_loans (\n    book_id int, copy_id int, borrower_id int, borrow_date date, return_date date, primary key (book_id, copy_id, borrower_id), foreign key (book_id, copy_id) references book_copies(book_id
/* Creates a database named libraryautomation. */\ncreate database libraryautomation|```sql\n/* Creates a table named books. */\ncreate table books (\n    id int,title varchar(255),author varchar(255),genre varchar(255),publisher varchar(255),year int,price decimal(10,2)\n)\n```\n\n```sql\n/* Creates a table named borrowers. */\ncreate table borrowers (\n    id int,name varchar(255),address varchar(255),phone varchar(255)\n)\n```\n\n```sql\n/* Creates a table named borrowings. */\ncreate table borrowings (\n    id int,book_id int,borrower_id int,borrow_date date,return_date date\n)\n```\n\n```sql\n/* Creates a table named book_genres. */\ncreate table book_genres (\n    id int,genre varchar(255)\n)\n```\n\n```sql\n/* Creates a table named book_publishers. */\ncreate table book_publishers (\n    id int,publisher varchar(255)\n)\n```\n\n```|```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```\nWrite a single‑sentence natural
/* Creates a table named book with seven columns: BookId (integer primary key), BookName (varchar), author (varchar), Press (varchar), Price (varchar), Position (varchar), ISBN (varchar), status (varchar), Category (varchar), */\ncreate table book(\n	BookId int(6)  unsigned zerofill auto_increment not null,\n    BookName varchar(255) not null,\n    author varchar(255) not null,\n    Press varchar(255) not null,\n    Price varchar(255) not null,\n    Position varchar(255) not null,\n    ISBN varchar(255) not null,\n    status varchar(255) not null, -- available/reserved/lent\n    Category varchar(255) not null,\n    description text,\n    \n    number int not null,\n    PRIMARY KEY (BookId)\n)|```sql\n/* Creates a table named user with five columns: UserId (integer primary key),UserName (varchar),Password (varchar),Email (varchar),Phone (varchar),*/\ncreate table user(\n	UserId int(6)  unsigned zerofill auto_increment not null,UserName varchar(255) not null,Password varchar(255) not null,Email varchar(255) not null,Phone varchar(255) not null,PRIMARY KEY (UserId)\n)\n```\n\n```sql\n/* Creates a table named lend with five columns: LendId (integer primary key),UserId (integer),BookId (integer),LendDate (datetime),ReturnDate (datetime),*/\ncreate table lend(\n	LendId int(6)  unsigned zerofill auto_increment not null,UserId int(6)  unsigned zerofill not null,BookId int(6)  unsigned zerofill not null,LendDate datetime not null,ReturnDate datetime not null,PRIMARY KEY (LendId),FOREIGN KEY (UserId) REFERENCES user(UserId),FOREIGN KEY (BookId)|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM user WHERE UserId = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM lend WHERE UserId = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM lend WHERE UserId = 1 AND BookId = 1;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM lend WHERE UserId = 1 AND BookId = 1 AND LendDate = '2019-01-01';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM lend WHERE UserId = 1 AND BookId = 1 AND LendDate = '2019-01-01
/* Creates a table named bookrecord with five columns: informationId (integer primary key), FineValue (float), LentDate (datetime), ReturnDate (datetime), BookId (integer), AcntNum (integer). */\ncreate table bookrecord(\n	informationId int(6)  unsigned zerofill auto_increment not null,\n    FineValue float,\n    LentDate DATETIME not null,\n    ReturnDate DATETIME,\n    BookId int(6) unsigned zerofill not null,\n    AcntNum int(6) unsigned zerofill not null,\n    PRIMARY KEY (informationId)\n    \n)|```sql\n/* Creates a table named book with five columns: BookId (integer primary key),Title (varchar),Author (varchar),Publisher (varchar),Year (integer). */\ncreate table book(\n	BookId int(6) unsigned zerofill auto_increment not null,Title varchar(255) not null,Author varchar(255) not null,Publisher varchar(255) not null,Year int(4) not null,PRIMARY KEY (BookId)\n)\n```\n\n```sql\n/* Creates a table named account with five columns: AcntNum (integer primary key),Name (varchar),Address (varchar),Phone (varchar),Email (varchar). */\ncreate table account(\n	AcntNum int(6) unsigned zerofill auto_increment not null,Name varchar(255) not null,Address varchar(255) not null,Phone varchar(255) not null,Email varchar(255) not null,PRIMARY KEY (AcntNum)\n)\n```\n\n```sql\n/* Creates a table named book_account with five columns: AcntNum (|```sql\n/* Creates a table named book_account with five columns: AcntNum (integer primary key), BookId (integer primary key), Title (varchar), Author (varchar), Publisher (varchar), Year (integer). */\ncreate table book_account(\n	AcntNum int(6) unsigned zerofill auto_increment not null, BookId int(6) unsigned zerofill auto_increment not null, Title varchar(255) not null, Author varchar(255) not null, Publisher varchar(255) not null, Year int(4) not null, PRIMARY KEY (AcntNum, BookId)\n)\n```\n\n```sql\n/* Creates a table named book_account with five columns: AcntNum (integer primary key), BookId (integer primary key), Title (varchar), Author (varchar), Publisher (varchar), Year (integer). */\ncreate table book_account(\n	AcntNum int(6) unsigned zerofill auto_increment not null, BookId int(6) unsigned zerofill auto_increment not null, Title varchar(255) not null, Author varchar(255) not null, Publisher varchar
/* Creates a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime). */\ncreate table optionRecord(\n	informationId int(6)  unsigned zerofill auto_increment not null,\n	BookId int(6) unsigned zerofill not null,\n    AcntNum int(6) unsigned zerofill not null,\n	reason  varchar(255),\n	operation varchar(255) not null,\n	creationDate DATETIME not null,\n	PRIMARY KEY (informationId)\n	\n	\n)|```sql\n/* Creates a table named optionRecord with five columns: informationId (integer primary key),BookId (integer),AcntNum (integer),reason (varchar),operation (varchar),creationDate (datetime). */\ncreate table optionRecord(\n	informationId int(6)  unsigned zerofill auto_increment not null,BookId int(6) unsigned zerofill not null,AcntNum int(6) unsigned zerofill not null,reason  varchar(255),operation varchar(255) not null,creationDate DATETIME not null,PRIMARY KEY (informationId)\n	\n	\n)\n```\n\n```sql\n/* Creates a table named optionRecord with five columns: informationId (integer primary key),BookId (integer),AcntNum (integer),reason (varchar),operation (varchar),creationDate (datetime). */\ncreate table optionRecord(\n	informationId int(6)  unsigned zerofill auto_increment not null,BookId int(6) unsigned zerofill not null,AcntNum int(6) unsigned zerofill not null,reason  varchar(|```sql\n/* Creates a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime). */\ncreate table optionRecord(\n	informationId int(6)  unsigned zerofill auto_increment not null, BookId int(6) unsigned zerofill not null, AcntNum int(6) unsigned zerofill not null, reason  varchar(255), operation varchar(255) not null, creationDate DATETIME not null, PRIMARY KEY (informationId)\n	\n	\n)\n```\n\n```sql\n/* Creates a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime). */\ncreate table optionRecord(\n	informationId int(6)  unsigned zerofill auto_increment not null, BookId int(6) unsigned zerofill not null, AcntNum int(6) unsigned zerofill not null, reason  varchar(255), operation varchar(255) not null, creationDate
/* Creates a table named reserve with three columns: informationId (integer primary key), BookId (integer), AcntNum (integer), and createDate (datetime). */\ncreate table reserve(\n	informationId int(6)  unsigned zerofill auto_increment not null,\n	BookId int(6) unsigned zerofill not null,\n    AcntNum int(6)  unsigned zerofill  not null,\n	createDate DATETIME not null,\n	PRIMARY KEY (informationId)\n)|```sql\n/* Creates a table named book with three columns: BookId (integer primary key),BookName (varchar(20)),and Author (varchar(20)). */\ncreate table book(\n	BookId int(6)  unsigned zerofill auto_increment not null,BookName varchar(20) not null,Author varchar(20) not null,PRIMARY KEY (BookId)\n)\n```\n\n```sql\n/* Creates a table named account with three columns: AcntNum (integer primary key),AcntName (varchar(20)),and AcntType (varchar(20)). */\ncreate table account(\n	AcntNum int(6)  unsigned zerofill auto_increment not null,AcntName varchar(20) not null,AcntType varchar(20) not null,PRIMARY KEY (AcntNum)\n)\n```\n\n```sql\n/* Creates a table named borrow with three columns: borrowId (integer primary key),BookId (integer),AcntNum (integer),and borrowDate (datetime). */\ncreate table borrow(\n	borrowId int(6)|```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from book where BookName = ''\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from account where AcntName = ''\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from borrow where borrowDate = '2017-01-01'\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from borrow where borrowDate = '2017-01-01' and AcntNum = '000001'\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from borrow where borrowDate = '2017-01-01' and AcntNum = '0
/* Creates a table named reader with five columns: AcntNum (integer primary key), Telephone (varchar), Password (varchar), Email (varchar), bookNumber (integer), registerDate (datetime), Deposit (float). */\ncreate table reader(\n	AcntNum int(6)  unsigned zerofill auto_increment not null,\n	Telephone varchar(255) not null,\n    Password varchar(255) not null,\n    Email varchar(255) not null,\n    bookNumber int not null,\n    registerDate DATETIME not null,\n    Deposit float not null,\n    PRIMARY KEY(AcntNum)\n)|```sql\n/* Creates a table named book with five columns: bookNumber (integer primary key),bookName (varchar),author (varchar),publisher (varchar),price (float). */\ncreate table book(\n	bookNumber int(6)  unsigned zerofill auto_increment not null,bookName varchar(255) not null,author varchar(255) not null,publisher varchar(255) not null,price float not null,PRIMARY KEY(bookNumber)\n)\n```\n\n```sql\n/* Creates a table named borrow with five columns: borrowNumber (integer primary key),AcntNum (integer),bookNumber (integer),borrowDate (datetime),returnDate (datetime). */\ncreate table borrow(\n	borrowNumber int(6)  unsigned zerofill auto_increment not null,AcntNum int not null,bookNumber int not null,borrowDate DATETIME not null,returnDate DATETIME not null,PRIMARY KEY(borrowNumber)\n)\n```\n\n```sql\n/* Creates a table named admin with five columns: adminNumber (integer primary key),adminName (varchar),adminPassword|*/\ncreate table admin(\n	adminNumber int(6)  unsigned zerofill auto_increment not null, adminName varchar(255) not null, adminPassword varchar(255) not null, PRIMARY KEY(adminNumber)\n)\n```\n\n```sql\n/* Creates a table named student with five columns: AcntNum (integer primary key), AcntName (varchar), AcntPassword (varchar), AcntEmail (varchar), AcntPhone (varchar). */\ncreate table student(\n	AcntNum int(6)  unsigned zerofill auto_increment not null, AcntName varchar(255) not null, AcntPassword varchar(255) not null, AcntEmail varchar(255) not null, AcntPhone varchar(255) not null, PRIMARY KEY(AcntNum)\n)\n```\n\n```sql\n/* Creates a table named faculty with five columns: AcntNum (integer primary key), AcntName (varchar), AcntPassword (varchar), AcntEmail (varchar), AcntPhone (varchar). */\ncreate table faculty(\n	AcntNum int(6)  unsigned
/* Creates a table named librarian with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table. */\ncreate table librarian(\n	AcntNum varchar(255) not null,\n    Password varchar(255) not null,\n    PRIMARY KEY(AcntNum)\n)|```sql\n/* Creates a table named book with three columns: ISBN (varchar),Title (varchar),and Author (varchar). ISBN is the primary key of the table. */\ncreate table book(\n	ISBN varchar(255) not null,Title varchar(255) not null,Author varchar(255) not null,PRIMARY KEY(ISBN)\n)\n```\n\n```sql\n/* Creates a table named borrower with three columns: AcntNum (varchar),Name (varchar),and Address (varchar). AcntNum is the primary key of the table. */\ncreate table borrower(\n	AcntNum varchar(255) not null,Name varchar(255) not null,Address varchar(255) not null,PRIMARY KEY(AcntNum)\n)\n```\n\n```sql\n/* Creates a table named borrow with three columns: ISBN (varchar),AcntNum (varchar),and DateOut (date). ISBN and AcntNum are the primary key of the table. */\ncreate table borrow(\n	ISBN varchar(255) not null,Acnt|```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from book where ISBN = '1234567890';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from borrower where AcntNum = '1234567890';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from borrow where ISBN = '1234567890' and AcntNum = '1234567890';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from borrow where ISBN = '1234567890' and AcntNum = '1234567890' and DateOut = '2019-01-01';\n```
/* Creates a table named admin with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table. */\ncreate table admin(\n	AcntNum varchar(255) not null,\n    Password varchar(255) not null,\n    PRIMARY KEY(AcntNum)\n)|```sql\n/* Creates a table named customer with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table. */\ncreate table customer(\n	AcntNum varchar(255) not null,Password varchar(255) not null,PRIMARY KEY(AcntNum)\n)\n```\n\n```sql\n/* Creates a table named product with three columns: ProdNum (varchar),ProdName (varchar),and Price (decimal). ProdNum is the primary key of the table. */\ncreate table product(\n	ProdNum varchar(255) not null,ProdName varchar(255) not null,Price decimal(10,2) not null,PRIMARY KEY(ProdNum)\n)\n```\n\n```sql\n/* Creates a table named order with three columns: OrdNum (varchar),AcntNum (varchar),and ProdNum (varchar). OrdNum is the primary key of the table. */\ncreate table order(\n	OrdNum varchar(255) not null,AcntNum varchar(255) not null,Prod|```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from customer where AcntNum = '123456789' and Password = '';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from product where ProdNum = '123456789' and ProdName = 'Product Name' and Price = 123.45;\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from order where OrdNum = '123456789' and AcntNum = '123456789' and ProdNum = '123456789';\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nselect * from customer where AcntNum = '1234567
/* Creates a table named announcement with three columns: TextId (varchar), Text (text), and Date (datetime). TextId is the primary key of the table. */\ncreate table announcement(\n	TextId varchar(255) not null,\n    Text text not null,\n    Date DATETIME not null,\n    PRIMARY KEY(TextId)\n)|```sql\n/* Creates a table named comment with three columns: CommentId (varchar),TextId (varchar),and Date (datetime). CommentId is the primary key of the table. */\ncreate table comment(\n	CommentId varchar(255) not null,TextId varchar(255) not null,Date DATETIME not null,PRIMARY KEY(CommentId),FOREIGN KEY(TextId) REFERENCES announcement(TextId)\n)\n```\n\n```sql\n/* Creates a table named user with three columns: UserId (varchar),Name (varchar),and Email (varchar). UserId is the primary key of the table. */\ncreate table user(\n	UserId varchar(255) not null,Name varchar(255) not null,Email varchar(255) not null,PRIMARY KEY(UserId)\n)\n```\n\n```sql\n/* Creates a table named comment_user with three columns: CommentId (varchar),UserId (varchar),and Date (datetime). CommentId and UserId are the primary key of the table. */\ncreate table comment_user(\n	CommentId varchar(255) not null,UserId|```\n\n```sql\n/* Creates a table named comment_user with three columns: CommentId (varchar), UserId (varchar), and Date (datetime). CommentId and UserId are the primary key of the table. */\ncreate table comment_user(\n	CommentId varchar(255) not null, UserId varchar(255) not null, Date DATETIME not null, PRIMARY KEY(CommentId, UserId), FOREIGN KEY(CommentId) REFERENCES comment(CommentId), FOREIGN KEY(UserId) REFERENCES user(UserId)\n)\n```\n\n```sql\n/* Creates a table named comment_user with three columns: CommentId (varchar), UserId (varchar), and Date (datetime). CommentId and UserId are the primary key of the table. */\ncreate table comment_user(\n	CommentId varchar(255) not null, UserId varchar(255) not null, Date DATETIME not null, PRIMARY KEY(CommentId, UserId), FOREIGN KEY(CommentId) REFERENCES comment(CommentId), FOREIGN KEY(UserId) REFERENCES user(UserId)\n)\n```\n\n```sql\n/* Creates a table named comment_user with three columns: CommentId (varchar), UserId (varchar),
/* Creates a foreign key constraint on the acntnum column of the optionRecord table that references the acntnum column of the reader table. */\nalter table optionRecord\nadd constraint reader_optionRecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE|```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences reader(`|```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reader table that references the acntnum column of the reader table. */\nalter table reader\nadd constraint reader_reader foreign key (`acntnum`)\nreferences
/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE|```sql\n/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`)|```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`)\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`)\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`)\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```sql\n/* Creates a
/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE|```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`|```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences
/* Creates a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table. */\nalter table reserve\nadd constraint book_reserve foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE|```sql\n/* Creates a foreign key constraint on the userId column of the reserve table that references the userId column of the user table. */\nalter table reserve\nadd constraint user_reserve foreign key (`userId`)\nreferences user(`userId`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the book table that references the bookId column of the book table. */\nalter table book\nadd constraint book_book foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the userId column of the user table that references the userId column of the user table. */\nalter table user\nadd constraint user_user foreign key (`userId`)\nreferences user(`userId`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the bookId column of the book table that references the bookId column of the book table. */\nalter table book\nadd constraint book_book foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on|*/\nselect * from book\nwhere bookId in (select bookId from reserve where userId = 1)\n```\n\n```sql\n/* Creates a foreign key constraint on\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nselect * from book\nwhere bookId in (select bookId from reserve where userId = 1)\n```\n\n```sql\n/* Creates a foreign key constraint on\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nselect * from book\nwhere bookId in (select bookId from reserve where userId = 1)\n```\n\n```sql\n/* Creates a foreign key constraint on\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nselect * from book\nwhere bookId in (select bookId from reserve where userId = 1)\n```\n\n```sql\n/* Creates a foreign key constraint on\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nselect * from book\nwhere bookId in (select bookId
/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE|```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_book|```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE\n```\n\n```sql\n/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_book
/* Adds a foreign key constraint to the bookrecord table that references the book table. */\nalter table bookrecord\nadd constraint book_bookrecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE|```sql\n/* Creates a CTE that returns the bookId and the number of times it has been borrowed. */\nwith book_borrowed_count as (\n    select `bookId`,count(*) as `count`\n    from bookrecord\n    group by `bookId`\n)\n\n/* Selects the bookId and the number of times it has been borrowed. */\nselect `bookId`,`count`\nfrom book_borrowed_count\n```\n\n```sql\n/* Creates a CTE that returns the bookId and the number of times it has been borrowed. */\nwith book_borrowed_count as (\n    select `bookId`,count(*) as `count`\n    from bookrecord\n    group by `bookId`\n)\n\n/* Selects the bookId and the number of times it has been borrowed. */\nselect `bookId`,`count`\nfrom book_borrowed_count\n```\n\n```sql\n/* Creates a CTE that returns the bookId and the number of times it has been borrowed. */\nwith book_borrowed_count as (\n    select `bookId`,count(*) as `count`\n    from bookrecord|group by `bookId`\n)\n\n/* Selects the bookId and the number of times it has been borrowed. */\nselect `bookId`, `count`\nfrom book_borrowed_count\n```\n\n```sql\n/* Creates a CTE that returns the bookId and the number of times it has been borrowed. */\nwith book_borrowed_count as (\n    select `bookId`, count(*) as `count`\n    from bookrecord\n    group by `bookId`\n)\n\n/* Selects the bookId and the number of times it has been borrowed. */\nselect `bookId`, `count`\nfrom book_borrowed_count\n```\n\n```sql\n/* Creates a CTE that returns the bookId and the number of times it has been borrowed. */\nwith book_borrowed_count as (\n    select `bookId`, count(*) as `count`\n    from bookrecord\n    group by `bookId`\n)\n\n/* Selects the bookId and the number of times it has been borrowed. */\nselect `bookId`, `count`\nfrom book_borrowed_count\n```\n\n```sql\n/*
/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values. */\nALTER TABLE PUBLIC.EMPLOYEE ADD IMAGE_DATA BLOB NULL|```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and cannot hold null values. */\nALTER TABLE PUBLIC.EMPLOYEE ADD IMAGE_DATA BLOB NOT NULL\n```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values. */\nALTER TABLE PUBLIC.EMPLOYEE ADD IMAGE_DATA BLOB NULL\n```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and cannot hold null values. */\nALTER TABLE PUBLIC.EMPLOYEE ADD IMAGE_DATA BLOB NOT NULL\n```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values. */\nALTER TABLE PUBLIC.EMPLOYEE ADD IMAGE_DATA BLOB NULL\n```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and cannot hold null values. */|```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and cannot hold null values. */\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values. */\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and cannot hold null values. */\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```sql\n/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values. */\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n```\n\n```sql\n/*
/* Creates a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns. */\nCREATE UNIQUE INDEX sa.productbin_name_ind ON sa.table_productbin(parent_type,parent_id,"NAME")|Extract the key SQL statements (e.g. CREATE TABLE,INSERT,UPDATE,DELETE):\n\n```sql\n/* Creates a table named table_productbin. */\nCREATE TABLE sa.table_productbin (\n	"ID" NUMBER(19,0) NOT NULL,"NAME" VARCHAR2(255 CHAR) NOT NULL,"DESCRIPTION" VARCHAR2(255 CHAR),"PARENT_TYPE" VARCHAR2(255 CHAR) NOT NULL,"PARENT_ID" NUMBER(19,0) NOT NULL,"CREATED_BY" NUMBER(19,0) NOT NULL,"CREATED_DATE" DATE NOT NULL,"LAST_UPDATED_BY" NUMBER(19,0) NOT NULL,"LAST_UPDATED_DATE" DATE NOT NULL,"LAST_UPDATE_LOGIN" NUMBER(19,0) NOT NULL,"VERSION" NUMBER(19,0) NOT NULL,"LAST_UPDATE_DATE" DATE NOT NULL,"LAST_UPDATE_LOGIN" NUMBER(19,0) NOT NULL,"LAST|```\n\nI have the following query:\n\n```sql\nSELECT * FROM table_productbin WHERE "PARENT_TYPE" = 'Product' AND "PARENT_ID" = 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345
/* Creates a table named chicken_lineage with four columns: id (integer primary key), lineage (varchar), chicken_color (varchar), and provider (varchar). */\nCREATE TABLE chicken_lineage (\n	id INT NOT NULL AUTO_INCREMENT,\n	lineage VARCHAR(15) NOT NULL,\n    chicken_color VARCHAR(15) NOT NULL,\n    provider VARCHAR(15) NOT NULL,\n	PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4|```sql\n/* Creates a table named chicken_lineage_history with four columns: id (integer primary key),lineage (varchar),chicken_color (varchar),and provider (varchar). */\nCREATE TABLE chicken_lineage_history (\n	id INT NOT NULL AUTO_INCREMENT,lineage VARCHAR(15) NOT NULL,chicken_color VARCHAR(15) NOT NULL,provider VARCHAR(15) NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named chicken_lineage_history_diff with four columns: id (integer primary key),lineage (varchar),chicken_color (varchar),and provider (varchar). */\nCREATE TABLE chicken_lineage_history_diff (\n	id INT NOT NULL AUTO_INCREMENT,lineage VARCHAR(15) NOT NULL,chicken_color VARCHAR(15) NOT NULL,provider VARCHAR(15) NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a|*/\nSELECT * FROM chicken_lineage_history_diff\n```\n\n```sql\n/* Creates a\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM chicken_lineage_history_diff\n```\n\n```sql\n/* Creates a\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM chicken_lineage_history_diff\n```\n\n```sql\n/* Creates a\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM chicken_lineage_history_diff\n```\n\n```sql\n/* Creates a\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM chicken_lineage_history_diff\n```\n\n```sql\n/* Creates a\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM chicken_lineage_history_diff\n```\n\n```sql
/* Creates a table named shed_manufacturer with three columns: id (integer primary key), manufacturer (varchar), and active (boolean). */\nCREATE TABLE shed_manufacturer (\n	id INT NOT NULL AUTO_INCREMENT,\n	manufacturer VARCHAR(15) NOT NULL,\n	PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4|```sql\n/* Creates a table named shed_model with four columns: id (integer primary key),model (varchar),manufacturer_id (integer),and active (boolean). */\nCREATE TABLE shed_model (\n	id INT NOT NULL AUTO_INCREMENT,model VARCHAR(15) NOT NULL,manufacturer_id INT NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named shed_shed with four columns: id (integer primary key),model_id (integer),manufacturer_id (integer),and active (boolean). */\nCREATE TABLE shed_shed (\n	id INT NOT NULL AUTO_INCREMENT,model_id INT NOT NULL,manufacturer_id INT NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named shed_shed_type with three columns: id (integer primary key),type (varchar),and active (boolean). */\nCREATE TABLE shed_shed_type (\n	id INT NOT NULL AUTO_|```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM shed_model WHERE manufacturer_id = 1 AND active = 1;\n```\n\n## 1.2.2.2. SQL: SELECT\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM shed_model WHERE manufacturer_id = 1 AND active = 1;\n```\n\n## 1.2.2.3. SQL: WHERE\n\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM shed_model WHERE manufacturer_id = 1 AND active = 1;\n```\n\n## 1.2.2.4. SQL: AND\n\nWrite a single‑sentence natural‑language
/* Creates a table named shed with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column */\nCREATE TABLE shed (\n  id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(15) NOT NULL,\n  type VARCHAR(15) NOT NULL,\n  capacity INT NOT NULL,\n  model VARCHAR(15) NOT NULL,\n  shed_manufacturer_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (shed_manufacturer_id) REFERENCES shed_manufacturer(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4|```sql\n/* Creates a table named shed_manufacturer with five columns: id (integer primary key),name (varchar),type (varchar),capacity (integer),model (varchar),and shed_manufacturer_id (integer). The shed_manufacturer_id column */\nCREATE TABLE shed_manufacturer (\n  id INT NOT NULL AUTO_INCREMENT,name VARCHAR(15) NOT NULL,type VARCHAR(15) NOT NULL,capacity INT NOT NULL,model VARCHAR(15) NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named shed_manufacturer with five columns: id (integer primary key),name (varchar),type (varchar),capacity (integer),model (varchar),and shed_manufacturer_id (integer). The shed_manufacturer_id column */\nCREATE TABLE shed_manufacturer (\n  id INT NOT NULL AUTO_INCREMENT,name VARCHAR(15) NOT NULL,type VARCHAR(15) NOT NULL,capacity INT NOT NULL,model VARCHAR(15) NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT|```\n\n```sql\n/* Creates a table named shed_manufacturer with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column */\nCREATE TABLE shed_manufacturer (\n  id INT NOT NULL AUTO_INCREMENT, name VARCHAR(15) NOT NULL, type VARCHAR(15) NOT NULL, capacity INT NOT NULL, model VARCHAR(15) NOT NULL, PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named shed_manufacturer with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column */\nCREATE TABLE shed_manufacturer (\n  id INT NOT NULL AUTO_INCREMENT, name VARCHAR(15) NOT NULL, type VARCHAR(15) NOT NULL, capacity INT NOT NULL, model VARCHAR(15) NOT NULL, PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```
/* Creates a table named chicken_lot with seven columns: id (integer primary key), birth_date (date), accommodation_date (date), initial_quantity (integer), current_quantity (integer), debicking (varchar), */\nCREATE TABLE chicken_lot (\n  id INT NOT NULL AUTO_INCREMENT,\n  birth_date DATE NOT NULL,\n  accommodation_date DATE NOT NULL,\n  initial_quantity INT NOT NULL,\n  current_quantity INT NOT NULL,\n  debicking VARCHAR(15) NOT NULL,\n  chicken_lineage_id  INT NOT NULL,\n  shed_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lineage_id) REFERENCES chicken_lineage(id),\n  FOREIGN KEY (shed_id) REFERENCES shed(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4|```sql\n/* Creates a table named chicken_lineage with three columns: id (integer primary key),name (varchar),*/\nCREATE TABLE chicken_lineage (\n  id INT NOT NULL AUTO_INCREMENT,name VARCHAR(15) NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named shed with three columns: id (integer primary key),name (varchar),*/\nCREATE TABLE shed (\n  id INT NOT NULL AUTO_INCREMENT,name VARCHAR(15) NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named chicken_lineage_shed with two columns: chicken_lineage_id (integer),shed_id (integer),*/\nCREATE TABLE chicken_lineage_shed (\n  chicken_lineage_id INT NOT NULL,shed_id INT NOT NULL,PRIMARY KEY (chicken_lineage_id,shed_id),FOREIGN KEY (chicken_lineage_id) REFERENCES chicken_|```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM chicken_lineage_shed\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM chicken_lineage_shed WHERE chicken_lineage_id = 1\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM chicken_lineage_shed WHERE chicken_lineage_id = 1 AND shed_id = 1\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts. */\nSELECT * FROM chicken_lineage_shed WHERE chicken_lineage_id = 1 AND shed_id = 1 AND chicken_lineage_id = 1\n```\n\n```sql\n/* Write a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts
/* Creates a table named creation_monitoring with 10 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer */\nCREATE TABLE creation_monitoring (\n  id INT NOT NULL AUTO_INCREMENT,\n  age_week INT NOT NULL,\n  age_day INT NOT NULL,\n  date_week DATE NOT NULL,\n  body_weight INT NOT NULL,\n  food INT NOT NULL,\n  water INT NOT NULL,\n  discard INT NOT NULL,\n  mortality INT NOT NULL,\n  chicken_lot_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4|```sql\n/* Creates a table named chicken_lot with 10 columns: id (integer primary key),name (string),location (string),date_created (date),date_last_modified (date),date_deleted (date),is_deleted (boolean),is_active (boolean),is_archived (boolean) */\nCREATE TABLE chicken_lot (\n  id INT NOT NULL AUTO_INCREMENT,name VARCHAR(255) NOT NULL,location VARCHAR(255) NOT NULL,date_created DATE NOT NULL,date_last_modified DATE NOT NULL,date_deleted DATE NOT NULL,is_deleted BOOLEAN NOT NULL,is_active BOOLEAN NOT NULL,is_archived BOOLEAN NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4\n```\n\n```sql\n/* Creates a table named chicken_lot_chicken with 10 columns: id (integer primary key),chicken_lot_id (integer),chicken_id (integer),date_created (date),date_last_modified (date),date_deleted (date),is_deleted (boolean),is|For example, if the table names are chicken_lot and chicken, the query might be:\n\n"Find all chickens that are in a chicken lot."\n\nIf the table names are chicken_lot and chicken_lot_chicken, the query might be:\n\n"Find all chicken lots that have a chicken."\n\nIf the table names are chicken_lot and chicken_lot_chicken, the query might be:\n\n"Find all chicken lots that have a chicken that is active."\n\nIf the table names are chicken_lot and chicken_lot_chicken, the query might be:\n\n"Find all chicken lots that have a chicken that is active and is not archived."\n\nIf the table names are chicken_lot and chicken_lot_chicken, the query might be:\n\n"Find all chicken lots that have a chicken that is active and is not archived and is not deleted."\n\nIf the table names are chicken_lot and chicken_lot_chicken, the query might be:\n\n"Find all chicken lots that have a chicken that is active
/* Creates a table named production_monitoring with 14 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer */\nCREATE TABLE production_monitoring (\n  id INT NOT NULL AUTO_INCREMENT,\n  age_week INT NOT NULL,\n  age_day INT NOT NULL,\n  date_week DATE NOT NULL,\n  body_weight INT NOT NULL,\n  food INT NOT NULL,\n  water INT NOT NULL,\n  discard INT NOT NULL,\n  mortality INT NOT NULL,\n  total_production INT NOT NULL,\n  first_eggs INT NOT NULL,\n  second_eggs INT NOT NULL,\n  egg_weight INT NOT NULL,\n  chicken_lot_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4|```sql\n/* Creates a table named chicken_lot with 10 columns: id (integer primary key),name (string),location (string),chicken_type (string),chicken_count (integer),chicken_age (integer),chicken_age_unit (string),chicken_age_unit_type (string),chicken_age_unit_type_id (integer),chicken_age_unit_type_name (string) */\nCREATE TABLE chicken_lot (\n  id INT NOT NULL AUTO_INCREMENT,name VARCHAR(255) NOT NULL,location VARCHAR(255) NOT NULL,chicken_type VARCHAR(255) NOT NULL,chicken_count INT NOT NULL,chicken_age INT NOT NULL,chicken_age_unit VARCHAR(255) NOT NULL,chicken_age_unit_type VARCHAR(255) NOT NULL,chicken_age_unit_type_id INT NOT NULL,chicken_age_unit_type_name VARCHAR(255) NOT NULL,PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=|```\n\n```sql\n/*\nSELECT * FROM chicken_lot\n*/\n```\n\n## 1.2.2.2. SQL: SELECT\n\n```sql\n/*\nSELECT * FROM chicken_lot\n*/\n```\n\n## 1.2.2.3. SQL: WHERE\n\n```sql\n/*\nSELECT * FROM chicken_lot WHERE chicken_age_unit_type_id = 1\n*/\n```\n\n## 1.2.2.4. SQL: ORDER BY\n\n```sql\n/*\nSELECT * FROM chicken_lot ORDER BY chicken_age_unit_type_id\n*/\n```\n\n## 1.2.2.5. SQL: LIMIT\n\n```sql\n/*\nSELECT * FROM chicken_lot LIMIT 10\n*/\n```\n\n## 1.2.2.6. SQL: GROUP BY\n\n```sql\n/*\nSELECT * FROM chicken_lot GROUP BY chicken_age_unit_type_id\n*/\n```\n\n## 1.2.2.7. SQL: HAVING\n\n```sql\n/*\nSELECT * FROM
/* Inserts a new row into the shed_manufacturer table with the manufacturer Artabas. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Artabas')|```sql\n/* Selects all the rows from the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\n```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Artabas'\n```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas and the shed_manufacturer_id is 1. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Artabas' AND shed_manufacturer_id = 1\n```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas and the shed_manufacturer_id is 1. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Artabas' AND shed_manufacturer_id = 1\n```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas and the shed_manufacturer_id is 1. */\nSELECT * FROM shed_manufacturer WHERE manufacturer =|```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas and the shed_manufacturer_id is 1. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Artabas' AND shed_manufacturer_id = 1\n```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas and the shed_manufacturer_id is 1. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Artabas' AND shed_manufacturer_id = 1\n```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas and the shed_manufacturer_id is 1. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Artabas' AND shed_manufacturer_id = 1\n```\n\n```sql\n/* Selects all the rows from the shed_manufacturer table where the manufacturer is Artabas and the shed_manufacturer_id is 1. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Artabas' AND s
/* Inserts a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Kilbra')|```sql\n/* Selects all rows from the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer|```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the manufacturer column is equal to Kilbra. */\nSELECT * FROM shed_manufacturer WHERE manufacturer = 'Kilbra'\n```\n\n```sql\n/* Selects all rows from the shed_manufacturer table where the
/* Inserts a new manufacturer named Plasson into the shed_manufacturer table. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Plasson')|```sql\n/* Selects all the manufacturers from the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\n```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table,* but only if the manufacturer is not already in the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\nWHERE manufacturer NOT IN (SELECT manufacturer FROM shed_manufacturer)\n```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table,* but only if the manufacturer is not already in the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\nWHERE manufacturer NOT IN (SELECT manufacturer FROM shed_manufacturer)\n```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table,* but only if the manufacturer is not already in the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\nWHERE manufacturer NOT IN (SELECT manufacturer FROM shed_manufacturer)\n```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table,* but only if the manufacturer is not already in|```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table, * but only if the manufacturer is not already in the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\nWHERE manufacturer NOT IN (SELECT manufacturer FROM shed_manufacturer)\n```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table, * but only if the manufacturer is not already in the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\nWHERE manufacturer NOT IN (SELECT manufacturer FROM shed_manufacturer)\n```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table, * but only if the manufacturer is not already in the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\nWHERE manufacturer NOT IN (SELECT manufacturer FROM shed_manufacturer)\n```\n\n```sql\n/* Selects all the manufacturers from the shed_manufacturer table, * but only if the manufacturer is not already in the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\nWHERE manufacturer NOT IN (SELECT manufacturer FROM shed_manufacturer)\n```
/* Inserts a new manufacturer named Próprio into the shed_manufacturer table. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Próprio')|```sql\n/* Selects all manufacturers from the shed_manufacturer table. */\nSELECT * FROM shed_manufacturer\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table,ordered by manufacturer name. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table,ordered by manufacturer name,* and only returns the first 10 results. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer LIMIT 10\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table,ordered by manufacturer name,* and only returns the first 10 results. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer LIMIT 10\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table,ordered by manufacturer name,* and only returns the first 10 results. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer LIMIT 10\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table,ordered|that uses exactly those concepts. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer LIMIT 10\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table, ordered\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\nthat uses exactly those concepts. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer LIMIT 10\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table, ordered\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\nthat uses exactly those concepts. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer LIMIT 10\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table, ordered\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\nthat uses exactly those concepts. */\nSELECT * FROM shed_manufacturer ORDER BY manufacturer LIMIT 10\n```\n\n```sql\n/* Selects all manufacturers from the shed_manufacturer table, ordered\nWrite a single‑
/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('Nick-Chick', 'Branca', 'H e N')|```sql\n/* Selects all rows from the chicken_lineage table. */\nSELECT * FROM chicken_lineage\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Chick. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Chick'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Chick and the chicken_color is Branca. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Chick' AND chicken_color = 'Branca'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Chick and the chicken_color is Branca. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Chick' AND chicken_color = 'Branca'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Chick and the chicken_color|*/\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Chick' AND chicken_color = 'Branca'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Chick and the chicken_color\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Chick' AND chicken_color = 'Branca'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Chick and the chicken_color\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Chick' AND chicken_color = 'Branca'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Chick and the chicken_color\nWrite a single‑sentence natural‑language
/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('Nick-Brown', 'Vermelha', 'H e N')|```sql\n/* Selects all rows from the chicken_lineage table. */\nSELECT * FROM chicken_lineage\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Brown. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Brown'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Brown and the chicken_color is Vermelha. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Brown' AND chicken_color = 'Vermelha'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Brown or the chicken_color is Vermelha. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Brown' OR chicken_color = 'Vermelha'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Brown or the chicken_color|*/\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Brown' OR chicken_color = 'Vermelha'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Brown or the chicken_color is Vermelha. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Brown' OR chicken_color = 'Vermelha'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Brown or the chicken_color is Vermelha. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Brown' OR chicken_color = 'Vermelha'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Nick-Brown or the chicken_color is Vermelha. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Nick-Brown' OR chicken_color = 'Vermelha'\n```\n\n```sql\n/* Selects all
/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider values. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('W-80',  'Branca', 'Hy-Line')|```sql\n/* Selects all rows from the chicken_lineage table. */\nSELECT * FROM chicken_lineage\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is 'W-80'. */\nSELECT * FROM chicken_lineage WHERE lineage = 'W-80'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is 'W-80' and the chicken_color is 'Branca'. */\nSELECT * FROM chicken_lineage WHERE lineage = 'W-80' AND chicken_color = 'Branca'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is 'W-80' and the chicken_color is 'Branca' and the provider is 'Hy-Line'. */\nSELECT * FROM chicken_lineage WHERE lineage = 'W-80' AND chicken_color = 'Branca' AND provider = 'Hy-Line'\n```\n\n```sql\n/* Selects all|*/\nSELECT * FROM chicken_lineage WHERE lineage = 'W-80' AND chicken_color = 'Branca' AND provider = 'Hy-Line'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is 'W-80' or the chicken_color is 'Branca'. */\nSELECT * FROM chicken_lineage WHERE lineage = 'W-80' OR chicken_color = 'Branca'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is 'W-80' or the chicken_color is 'Branca' or the provider is 'Hy-Line'. */\nSELECT * FROM chicken_lineage WHERE lineage = 'W-80' OR chicken_color = 'Branca' OR provider = 'Hy-Line'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is 'W-80' or the chicken_color is 'Branca' or the provider is 'Hy-Line
/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('Hy-Line Brown',  'Vermelha', 'Hy-Line')|```sql\n/* Selects all rows from the chicken_lineage table. */\nSELECT * FROM chicken_lineage\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Hy-Line Brown. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Hy-Line Brown'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Hy-Line Brown and the chicken_color is Vermelha. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Hy-Line Brown' AND chicken_color = 'Vermelha'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Hy-Line Brown and the chicken_color is Vermelha and the provider is Hy-Line. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Hy-Line Brown' AND chicken_color = 'Vermelha' AND provider = 'Hy-Line'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table|*/\nSELECT * FROM chicken_lineage WHERE lineage = 'Hy-Line Brown' AND chicken_color = 'Vermelha' AND provider = 'Hy-Line'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Hy-Line Brown and the chicken_color is Vermelha and the provider is Hy-Line. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Hy-Line Brown' AND chicken_color = 'Vermelha' AND provider = 'Hy-Line'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Hy-Line Brown and the chicken_color is Vermelha and the provider is Hy-Line. */\nSELECT * FROM chicken_lineage WHERE lineage = 'Hy-Line Brown' AND chicken_color = 'Vermelha' AND provider = 'Hy-Line'\n```\n\n```sql\n/* Selects all rows from the chicken_lineage table where the lineage is Hy-Line Brown and the chicken_color is Vermelha and the provider is Hy
/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('A1', 'Automatizado', 10080, 'P45-10', 1)|```sql\n/* Selects all the sheds from the shed table. */\nSELECT * FROM shed\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado'. */\nSELECT * FROM shed WHERE type = 'Automatizado'\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado'|```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 1
/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('A2', 'Automatizado', 10080, 'P45-10', 1)|```sql\n/* Selects all the sheds from the shed table. */\nSELECT * FROM shed\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado'. */\nSELECT * FROM shed WHERE type = 'Automatizado'\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado'|```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 10080\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type 'Automatizado' and have a capacity of 10080. */\nSELECT * FROM shed WHERE type = 'Automatizado' AND capacity = 1
/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('C1', 'Convencional', 3072, 'Madeira', 4)|```sql\n/* Selects all the sheds from the shed table. */\nSELECT * FROM shed\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional. */\nSELECT * FROM shed WHERE type = 'Convencional'\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity greater than 2000. */\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity > 2000\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity greater than 2000 and are made by the manufacturer with id 4. */\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity > 2000 AND shed_manufacturer_id = 4\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity greater than 2000 and are made by the|*/\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity > 2000 AND shed_manufacturer_id = 4\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity greater than 2000 and are made by the\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity > 2000 AND shed_manufacturer_id = 4\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity greater than 2000 and are made by the\nWrite a single‑sentence natural‑language instruction asking for a query that uses exactly those concepts.\n*/\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity > 2000 AND shed_manufacturer_id = 4\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type
/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('C2', 'Convencional', 3072, 'Madeira', 4)|```sql\n/* Selects all the sheds from the shed table. */\nSELECT * FROM shed\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional. */\nSELECT * FROM shed WHERE type = 'Convencional'\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity of 3072. */\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity = 3072\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity of 3072. */\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity = 3072\n```\n\n```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity of 3072. */\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity = 3072\n```|```sql\n/* Selects all the sheds from the shed table that are of type Convencional and have a capacity of 3072. */\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity = 3072\n```\n\n## 2.2.2. SQL Queries\n\n### 2.2.2.1. SELECT\n\n```sql\nSELECT * FROM shed\n```\n\n```sql\nSELECT * FROM shed WHERE type = 'Convencional'\n```\n\n```sql\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity = 3072\n```\n\n```sql\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity = 3072\n```\n\n```sql\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity = 3072\n```\n\n### 2.2.2.2. WHERE\n\n```sql\nSELECT * FROM shed WHERE type = 'Convencional'\n```\n\n```sql\nSELECT * FROM shed WHERE type = 'Convencional' AND capacity =
