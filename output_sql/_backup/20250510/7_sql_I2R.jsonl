{"seed": "/* Creates a table named db with 12 columns: id (bigint), db_name (varchar), driver_class_name (varchar), jdbc_url (varchar), password (varchar), pool_name (varchar), username (varchar), group_name (varchar), balance_type (varchar), minimum_idle (int), maximum_pool_size (int), connection_test_query (varchar). */\nCREATE TABLE `db` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `db_name` varchar(255) DEFAULT NULL,\n  `driver_class_name` varchar(255) DEFAULT NULL,\n  `jdbc_url` varchar(255) DEFAULT NULL,\n  `password` varchar(255) DEFAULT NULL,\n  `pool_name` varchar(255) DEFAULT NULL,\n  `username` varchar(255) DEFAULT NULL,\n  `group_name` varchar(255) DEFAULT '',\n  `balance_type` varchar(50) DEFAULT '',\n  `minimum_idle` int(11) DEFAULT '1',\n  `maximum_pool_size` int(11) DEFAULT '1',\n  `connection_test_query` varchar(255) DEFAULT 'SELECT 1',\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8", "description": "Creates a table named db with 12 columns: id (bigint), db_name (varchar), driver_class_name (varchar), jdbc_url (varchar), password (varchar), pool_name (varchar), username (varchar), group_name (varchar), balance_type (varchar), minimum_idle (int), maximum_pool_size (int), connection_test_query (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "ENGINE", "MyISAM", "SELECT", "1"], "instruction": "Write a SQL query to create a table named db with 12 columns: id (bigint), db_name (varchar), driver_class_name (varchar), jdbc_url (varchar), password (varchar), pool_name (varchar), username (varchar), group_name (varchar), balance_type (varchar), minimum_idle (int), maximum_pool_size (int), connection_test_query (varchar).", "response": "-- Reasoning:\nWe need a new table named db. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE db (\n  id BIGINT,\n  db_name VARCHAR(255),\n  driver_class_name VARCHAR(255),\n  jdbc_url VARCHAR(255),\n  password VARCHAR(255),\n  pool_name VARCHAR(255),\n  username VARCHAR(255),\n  group_name VARCHAR(255),\n  balance_type VARCHAR(255),\n  minimum_idle INT,\n  maximum_pool_size INT,\n  connection_test_query VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the db table with 12 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('db');"}
{"seed": "/* Selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table. */\nselect d20_sal - d10_sal as d20_10_diff, d20_sal - d30_sal as d20_30_diff\n  from (\n    select\n      sum(\n        case\n          when deptno = 10 then sal\n        end\n      ) as d10_sal,\n      sum(\n        case\n          when deptno = 20 then sal\n          end\n      ) as d20_sal,\n      sum (\n        case\n          when deptno = 30 then sal\n          end\n      ) as d30_sal\n      from emp\n  ) totals_by_dept", "description": "Selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.", "concepts": ["SELECT", "SUM", "CASE", "END", "AS", "FROM", "WHERE", "GROUP BY", "HAVING", "UNION", "CTE", "window functions", "AUTO"], "instruction": "Write a SQL query to select the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.", "response": "-- Reasoning:\nWe need to find the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.\n\n-- Solution:\n```sql\nSELECT d20_sal - d10_sal, d20_sal - d30_sal\nFROM totals_by_dept;\n```\n\n-- Explanation:\nThis query selects the difference between the d20_sal and d10_sal columns and the difference between the d20_sal and d30_sal columns from the totals_by_dept table.\n\n-- Tests:\n-- 1. Verify the correct values are returned\nSELECT d20_sal - d10_sal, d20_sal - d30_sal\nFROM totals_by_dept;"}
{"seed": "/* Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be set to 0 when inserting a new row. */\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\"", "description": "Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be set to 0 when inserting a new row.", "concepts": ["SET", "SQL_MODE", "AUTO_INCREMENT", "NO_AUTO_VALUE_ON_ZERO"], "instruction": "Write a SQL query to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be set to 0 when inserting a new row.", "response": "-- Reasoning:\nWe need to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" so that the AUTO_INCREMENT value will not be set to 0 when inserting a new row.\n\n-- Solution:\n```sql\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\n```\n\n-- Explanation:\nThis SET statement sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" to prevent the AUTO_INCREMENT value from being set to 0 when inserting a new row.\n\n-- Tests:\n-- 1. Check AUTO_INCREMENT value is not 0\nSELECT * FROM orders;"}
{"seed": "/* Sets the time zone to UTC. */\nSET time_zone = \"+00:00\"", "description": "Sets the time zone to UTC.", "concepts": ["SET"], "instruction": "Write a SQL query to set the time zone to UTC.", "response": "-- Reasoning:\nWe need to set the time zone to UTC.\n\n-- Solution:\n```sql\nSET TIMEZONE 'UTC';\n```\n\n-- Explanation:\nThis statement sets the time zone to UTC.\n\n-- Tests:\n-- 1. Check time zone is set to UTC\nSELECT time_zone();"}
{"seed": "/* Creates a table named user with 9 columns: user_id (integer), age (integer), first_name (varchar), last_name (varchar), gender (varchar), birth_date (varchar), reg_date (varchar), password (varchar), and email (varchar). */\nCREATE TABLE `user` (\n  `user_id` int(11) NOT NULL,\n  `age` int(11) NOT NULL,\n  `first_name` varchar(45) NOT NULL,\n  `last_name` varchar(45) NOT NULL,\n  `gender` varchar(45) NOT NULL,\n  `birth_date` varchar(45) NOT NULL,\n  `reg_date` varchar(45) NOT NULL,\n  `password` varchar(45) NOT NULL,\n  `email` varchar(45) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named user with 9 columns: user_id (integer), age (integer), first_name (varchar), last_name (varchar), gender (varchar), birth_date (varchar), reg_date (varchar), password (varchar), and email (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "NOT NULL", "ENGINE", "DEFAULT", "CHARSET", "latin1"], "instruction": "Write a SQL query to create a table named user with 9 columns: user_id (integer), age (integer), first_name (varchar), last_name (varchar), gender (varchar), birth_date (varchar), reg_date (varchar), password (varchar), and email (varchar).", "response": "-- Reasoning:\nWe need a new table named user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user (\n  user_id INT PRIMARY KEY,\n  age INT,\n  first_name VARCHAR(255),\n  last_name VARCHAR(255),\n  gender VARCHAR(255),\n  birth_date VARCHAR(255),\n  reg_date VARCHAR(255),\n  password VARCHAR(255),\n  email VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the user table with nine columns:\n  \u2022 user_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 age: integer\n  \u2022 first_name: variable\u2010length string up to 255 characters\n  \u2022 last_name: variable\u2010length string up to 255 characters\n  \u2022 gender: variable\u2010length string up to 255 characters\n  \u2022 birth_date: variable\u2010length string up to 255 characters\n  \u2022 reg_date: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters"}
{"seed": "/* Inserts a new user into the users table with the given values. */\nINSERT INTO `user` (`user_id`, `age`, `first_name`, `last_name`, `gender`, `birth_date`, `reg_date`, `password`, `email`) VALUES\n(11328762, 20, 'Edward', 'Tiro', 'Male', 'November 29, 1996', 'May 15, 2016', 'ef2928350f579b0a0ae3f2c3bf882a27', 'dward@tiro.com')", "description": "Inserts a new user into the users table with the given values.", "concepts": ["INSERT INTO", "VALUES", "user_id", "age", "first_name", "last_name", "gender", "birth_date", "reg_date", "password"], "instruction": "Write a SQL query to insert a new user into the users table with the given values.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have the given values:\n  \u2022 id: 1\n  \u2022 name: \u201cJohn\u201d\n  \u2022 email: \u201c\u201d\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, email)\nVALUES (1, 'John', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values:\n  \u2022 id: 1\n  \u2022 name: \u201cJohn\u201d\n  \u2022 email: \u201c\u201d\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Drops the table named application_config if it exists. */\nDROP TABLE IF EXISTS `application_config`", "description": "Drops the table named application_config if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named application_config if it exists.", "response": "-- Reasoning:\nWe need to delete the application_config table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS application_config;\n```\n\n-- Explanation:\nThis statement deletes the application_config table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('application_config');"}
{"seed": "/* Creates a table named application_config with four columns: config_id (integer primary key), config_name (varchar), config_value (varchar), and config_categ (varchar). */\nCREATE TABLE `application_config` (\r\n  `config_id` int(11) NOT NULL,\r\n  `config_name` varchar(45) DEFAULT NULL,\r\n  `config_value` varchar(45) DEFAULT NULL,\r\n  `config_categ` varchar(45) DEFAULT NULL,\r\n  PRIMARY KEY (`config_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named application_config with four columns: config_id (integer primary key), config_name (varchar), config_value (varchar), and config_categ (varchar).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "INT", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named application_config with four columns: config_id (integer primary key), config_name (varchar), config_value (varchar), and config_categ (varchar).", "response": "-- Reasoning:\nWe need a new table named application_config. It should have an integer primary key so that each config has a unique identifier, and a name column to store the config\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE application_config (\n  config_id INT PRIMARY KEY,\n  config_name VARCHAR(255),\n  config_value VARCHAR(255),\n  config_categ VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the application_config table with four columns:\n  \u2022 config_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 config_name: variable\u2010length string up to 255 characters\n  \u2022 config_value: variable\u2010length string up to 255 characters\n  \u2022 config_categ: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('application_config');"}
{"seed": "/* Inserts the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT */\nINSERT INTO `application_config` VALUES (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT'),(7,'INCOME_TAX_CORPORATE','199','APPLICATION_AMOUNT'),(8,'IMPORT_EXPORT','3499','APPLICATION_AMOUNT')", "description": "Inserts the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT", "concepts": ["INSERT INTO", "VALUES", "APPLICATION_CONFIG", "APPLICATION_STYLE", "PRESET2.CSS", "UI", "UI_METRIC", "ENTERPRENE"], "instruction": "Write a SQL query to insert the values (1,'application_style','preset2.css','UI'),(2,'ENTERPRENEUR_SERVED','200','UI_METRIC'),(3,'PROFESSIONAL_NETWORK','77','UI_METRIC'),(4,'GEOGRAPHIES','7','UI_METRIC'),(5,'TEAM_STRENGTH','27','UI_METRIC'),(6,'INCOME_TAX_INDIVIDULA','299','APPLICATION_AMOUNT') into the application_config table.", "response": "-- Reasoning:\nWe need to insert the values into the application_config table.\n\n-- Solution:\n```sql\nINSERT INTO application_config (id, name, value, type)\nVALUES (1, 'application_style', 'preset2.css', 'UI'),\n       (2, 'ENTERPRENEUR_SERVED', '200', 'UI_METRIC'),\n       (3, 'PROFESSIONAL_NETWORK', '77', 'UI_METRIC'),\n       (4, 'GEOGRAPHIES', '7', 'UI_METRIC'),\n       (5, 'TEAM_STRENGTH', '27', 'UI_METRIC'),\n       (6, 'INCOME_TAX_INDIVIDULA', '299', 'APPLICATION_AMOUNT');\n```\n\n-- Explanation:\nThis INSERT statement inserts the values into the application_config table.\n\n-- Tests:\n-- 1. Verify values are inserted\nSELECT * FROM application_config;"}
{"seed": "/* Drops the table named book_keeping_request if it exists. */\nDROP TABLE IF EXISTS `book_keeping_request`", "description": "Drops the table named book_keeping_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named book_keeping_request if it exists.", "response": "-- Reasoning:\nWe need to drop the table named book_keeping_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS book_keeping_request;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('book_keeping_request');"}
{"seed": "/* Creates a table named book_keeping_request with seven columns: book_keeping_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `book_keeping_request` (\r\n  `book_keeping_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`book_keeping_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named book_keeping_request with seven columns: book_keeping_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named book_keeping_request with seven columns: book_keeping_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named book_keeping_request. It should have an integer primary key so that each request has a unique identifier, and a name column to store the requestor\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE book_keeping_request (\n  book_keeping_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the book_keeping_request table with seven columns:\n  \u2022 book_keeping_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 requestor_pan_number: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n--"}
{"seed": "/* Drops the table named companies if it exists. */\nDROP TABLE IF EXISTS `companies`", "description": "Drops the table named companies if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named companies if it exists.", "response": "-- Reasoning:\nWe need to drop the table named companies if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS companies;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('companies');"}
{"seed": "/* Creates a table named companies with five columns: company_id (integer primary key), company_name (varchar), company_price (decimal), company_type (varchar), created_dt (datetime), and updated_dt (datetime). */\nCREATE TABLE `companies` (\r\n  `company_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `company_name` varchar(50) DEFAULT NULL,\r\n  `company_price` decimal(10,2) DEFAULT NULL,\r\n  `company_type` varchar(50) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`company_id`),\r\n  UNIQUE KEY `company_id_UNIQUE` (`company_id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='Details for company type available'", "description": "Creates a table named companies with five columns: company_id (integer primary key), company_name (varchar), company_price (decimal), company_type (varchar), created_dt (datetime), and updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "DEFAULT", "COMMENT"], "instruction": "Write a SQL query to create a table named companies with five columns: company_id (integer primary key), company_name (varchar), company_price (decimal), company_type (varchar), created_dt (datetime), and updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named companies. It should have an integer primary key so that each company has a unique identifier, and a name column to store the company\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE companies (\n  company_id INT PRIMARY KEY,\n  company_name VARCHAR(255),\n  company_price DECIMAL,\n  company_type VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the companies table with five columns:\n  \u2022 company_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 company_name: variable\u2010length string up to 255 characters\n  \u2022 company_price: decimal\n  \u2022 company_type: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('companies');"}
{"seed": "/* Inserts the given values into the companies table. */\nINSERT INTO `companies` VALUES (1,'Private Limited',12999.00,NULL,NULL,NULL),(2,'Limited Liability Partnership',9999.00,NULL,NULL,NULL),(3,'One Person Company',11999.00,NULL,NULL,NULL),(4,'Public Limited Company',42999.00,NULL,NULL,NULL),(5,'Nidhi Limited Company',74999.00,NULL,NULL,NULL),(6,'Section 8 Company',25000.00,NULL,NULL,NULL)", "description": "Inserts the given values into the companies table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert the given values into the companies table.", "response": "-- Reasoning:\nWe need to insert the given values into the companies table.\n\n-- Solution:\n```sql\nINSERT INTO companies (name, revenue, country)\nVALUES ('Facebook', 87, 'USA');\n```\n\n-- Explanation:\nThis INSERT statement inserts the given values into the companies table.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM companies;"}
{"seed": "/* Drops the table named company_request if it exists. */\nDROP TABLE IF EXISTS `company_request`", "description": "Drops the table named company_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named company_request if it exists.", "response": "-- Reasoning:\nWe need to drop the table named company_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS company_request;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('company_request');"}
{"seed": "/* Creates a table named company_request with 11 columns: company_request_id (integer primary key), company_name (varchar), requestor_last_name (varchar), requestor_first_name (varchar), requostor_email (varchar), requestor_phone_no (varchar), requestor_pan_no (varchar), company_id (integer), message (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `company_request` (\r\n  `company_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `company_name` varchar(100) NOT NULL,\r\n  `requestor_last_name` varchar(50) DEFAULT NULL,\r\n  `requestor_first_name` varchar(50) DEFAULT NULL,\r\n  `requostor_email` varchar(100) DEFAULT NULL,\r\n  `requestor_phone_no` varchar(30) DEFAULT NULL,\r\n  `requestor_pan_no` varchar(30) DEFAULT NULL,\r\n  `company_id` int(11) DEFAULT NULL,\r\n  `message` varchar(2000) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`company_request_id`),\r\n  KEY `company_id_foreign_key_idx` (`company_id`),\r\n  CONSTRAINT `company_id_foreign_key` FOREIGN KEY (`company_id`) REFERENCES `companies` (`company_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Details of company creation '", "description": "Creates a table named company_request with 11 columns: company_request_id (integer primary key), company_name (varchar), requestor_last_name (varchar), requestor_first_name (varchar), requostor_email (varchar), requestor_phone_no (varchar), requestor_pan_no (varchar), company_id (integer), message (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "FOREIGN KEY", "CONSTRAINT", "KEY", "REFERENCES", "ON DELETE", "ON UPDATE", "COMMENT"], "instruction": "Write a SQL query to create a table named company_request with 11 columns: company_request_id (integer primary key), company_name (varchar), requestor_last_name (varchar), requestor_first_name (varchar), requostor_email (varchar), requestor_phone_no (varchar), requestor_pan_no (varchar), company_id (integer), message (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named company_request. It should have an integer primary key so that each request has a unique identifier, and a name column to store the company name as text.\n\n-- Solution:\n```sql\nCREATE TABLE company_request (\n  company_request_id INT PRIMARY KEY,\n  company_name VARCHAR(255),\n  requestor_last_name VARCHAR(255),\n  requestor_first_name VARCHAR(255),\n  requestor_email VARCHAR(255),\n  requestor_phone_no VARCHAR(255),\n  requestor_pan_no VARCHAR(255),\n  company_id INT,\n  message VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the company_request table with 11 columns:\n  \u2022 company_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 company_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_last_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_first_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_email: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_"}
{"seed": "/* Drops the table named gst_request if it exists. */\nDROP TABLE IF EXISTS `gst_request`", "description": "Drops the table named gst_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named gst_request if it exists.", "response": "-- Reasoning:\nWe need to delete the table named gst_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS gst_request;\n```\n\n-- Explanation:\nThis statement deletes the table named gst_request if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('gst_request');"}
{"seed": "/* Creates a table named gst_request with five columns: gst_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `gst_request` (\r\n  `gst_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`gst_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named gst_request with five columns: gst_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named gst_request with five columns: gst_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named gst_request. It should have an integer primary key so that each request has a unique identifier, and a datetime column to store the request\u2019s creation and update timestamps.\n\n-- Solution:\n```sql\nCREATE TABLE gst_request (\n  gst_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the gst_request table with five columns:\n  \u2022 gst_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 requestor_pan_number: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table"}
{"seed": "/* Drops the table named import_export_request if it exists. */\nDROP TABLE IF EXISTS `import_export_request`", "description": "Drops the table named import_export_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named import_export_request if it exists.", "response": "-- Reasoning:\nWe need to delete the table named import_export_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS import_export_request;\n```\n\n-- Explanation:\nThis statement deletes the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('import_export_request');"}
{"seed": "/* Creates a table named import_export_request with seven columns: import_export_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), and updated_dt (datetime). */\nCREATE TABLE `import_export_request` (\r\n  `import_export_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(50) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(15) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`import_export_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named import_export_request with seven columns: import_export_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), and updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named import_export_request with seven columns: import_export_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), and updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named import_export_request. It should have an integer primary key so that each request has a unique identifier, and a datetime column to store the request\u2019s creation and update timestamps.\n\n-- Solution:\n```sql\nCREATE TABLE import_export_request (\n  import_export_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the import_export_request table with seven columns:\n  \u2022 import_export_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 requestor_pan_number: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n-- 1. Verify table"}
{"seed": "/* Drops the table named income_tax_request if it exists. */\nDROP TABLE IF EXISTS `income_tax_request`", "description": "Drops the table named income_tax_request if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named income_tax_request if it exists.", "response": "-- Reasoning:\nWe need to delete the table named income_tax_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS income_tax_request;\n```\n\n-- Explanation:\nThis statement deletes the table named income_tax_request if it exists.\n\n-- Tests:\n-- 1. Verify table is deleted\nPRAGMA table_info('income_tax_request');"}
{"seed": "/* Creates a table named income_tax_request with the following columns: income_tax_request_id (integer primary key), requestor_full_name (varchar), requestor_email_id (varchar), requestor_phone_number (varchar), requestor_bank_name (varchar), requestor_ifsc_code (varchar), user_type (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `income_tax_request` (\r\n  `income_tax_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(100) DEFAULT NULL,\r\n  `requestor_email_id` varchar(100) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(30) DEFAULT NULL,\r\n  `requestor_bank_name` varchar(45) DEFAULT NULL,\r\n  `requestor_ifsc_code` varchar(45) DEFAULT NULL,\r\n  `user_type` varchar(45) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`income_tax_request_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named income_tax_request with the following columns: income_tax_request_id (integer primary key), requestor_full_name (varchar), requestor_email_id (varchar), requestor_phone_number (varchar), requestor_bank_name (varchar), requestor_ifsc_code (varchar), user_type (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "DATETIME", "FOREIGN KEY", "INSERT INTO", "VALUES"], "instruction": "Write a SQL query to create a table named income_tax_request with the following columns: income_tax_request_id (integer primary key), requestor_full_name (varchar), requestor_email_id (varchar), requestor_phone_number (varchar), requestor_bank_name (varchar), requestor_ifsc_code (varchar), user_type (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named income_tax_request. It should have an integer primary key so that each request has a unique identifier, and a name column to store the requestor\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE income_tax_request (\n  income_tax_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_bank_name VARCHAR(255),\n  requestor_ifsc_code VARCHAR(255),\n  user_type VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the income_tax_request table with eight columns:\n  \u2022 income_tax_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_bank_name: variable\u2010length string up to 255 characters\n  \u2022"}
{"seed": "/* Drops the table loan_request if it exists. */\nDROP TABLE IF EXISTS `loan_request`", "description": "Drops the table loan_request if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the loan_request table if it exists.", "response": "-- Reasoning:\nWe need to drop the loan_request table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS loan_request;\n```\n\n-- Explanation:\nThis DROP statement deletes the loan_request table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('loan_request');"}
{"seed": "/* Creates a table named loan_request with 8 columns: loan_request_id (integer primary key), requestor_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), loan_id (integer), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `loan_request` (\r\n  `loan_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(20) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(15) DEFAULT NULL,\r\n  `loan_id` int(11) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`loan_request_id`),\r\n  KEY `loan_id_foreign_key_idx` (`loan_id`),\r\n  CONSTRAINT `loan_id_foreign_key` FOREIGN KEY (`loan_id`) REFERENCES `loan_types` (`loan_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Loan request from users'", "description": "Creates a table named loan_request with 8 columns: loan_request_id (integer primary key), requestor_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), loan_id (integer), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "FOREIGN KEY", "CONSTRAINT", "COMMENT"], "instruction": "Write a SQL query to create a table named loan_request with 8 columns: loan_request_id (integer primary key), requestor_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), loan_id (integer), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named loan_request. It should have an integer primary key so that each loan request has a unique identifier, and a datetime column to store the date and time of the request.\n\n-- Solution:\n```sql\nCREATE TABLE loan_request (\n  loan_request_id INT PRIMARY KEY,\n  requestor_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  loan_id INT,\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the loan_request table with eight columns:\n  \u2022 loan_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 requestor_pan_number: variable\u2010length string up to 255 characters\n  \u2022 loan_id: integer\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n-- 1. Verify table exists"}
{"seed": "/* Drops the table named loan_types if it exists. */\nDROP TABLE IF EXISTS `loan_types`", "description": "Drops the table named loan_types if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named loan_types if it exists.", "response": "-- Reasoning:\nWe need to delete the loan_types table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS loan_types;\n```\n\n-- Explanation:\nThis statement deletes the loan_types table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('loan_types');"}
{"seed": "/* Creates a table named loan_types with three columns: loan_type (varchar), loan_name (varchar), and loan_id (int). */\nCREATE TABLE `loan_types` (\r\n  `loan_type` varchar(50) DEFAULT NULL,\r\n  `loan_name` varchar(50) DEFAULT NULL,\r\n  `loan_id` int(11) NOT NULL,\r\n  PRIMARY KEY (`loan_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Types of loans offered by platform'", "description": "Creates a table named loan_types with three columns: loan_type (varchar), loan_name (varchar), and loan_id (int).", "concepts": ["CREATE TABLE", "VARCHAR", "INT", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named loan_types with three columns: loan_type (varchar), loan_name (varchar), and loan_id (int).", "response": "-- Reasoning:\nWe need a new table named loan_types. It should have an integer primary key so that each loan type has a unique identifier, and two varchar columns to store the loan type and name.\n\n-- Solution:\n```sql\nCREATE TABLE loan_types (\n  loan_id INT PRIMARY KEY,\n  loan_type VARCHAR(255),\n  loan_name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the loan_types table with three columns:\n  \u2022 loan_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 loan_type: variable\u2010length string up to 255 characters\n  \u2022 loan_name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('loan_types');"}
{"seed": "/* Inserts five rows into the loan_types table. */\nINSERT INTO `loan_types` VALUES ('Home Loan','Home Loan',1),('Loan Against Property','Loan Against Property',2),('Balance Transfer & Top ups','Balance Transfer & Top ups',3),('Educational Loan','Educational Loan',4),('Term Loan Synidation','Term Loan Synidation',5)", "description": "Inserts five rows into the loan_types table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert five rows into the loan_types table.", "response": "-- Reasoning:\nWe need to insert five rows into the loan_types table.\n\n-- Solution:\n```sql\nINSERT INTO loan_types (name) VALUES\n  ('Home Loan'),\n  ('Car Loan'),\n  ('Business Loan'),\n  ('Personal Loan'),\n  ('Student Loan');\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the loan_types table.\n\n-- Tests:\n-- 1. Verify five rows were inserted\nSELECT * FROM loan_types;"}
{"seed": "/* Drops the table named paymet_txn_summary if it exists. */\nDROP TABLE IF EXISTS `paymet_txn_summary`", "description": "Drops the table named paymet_txn_summary if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named paymet_txn_summary if it exists.", "response": "-- Reasoning:\nWe need to drop the table named payment_txn_summary if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS payment_txn_summary;\n```\n\n-- Explanation:\nThis DROP statement removes the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('payment_txn_summary');"}
{"seed": "/* Creates a table named paymet_txn_summary with 9 columns: payment_id (integer primary key), payment_txnid (varchar), payu_txnid (varchar), service_request_id (integer), service_type (varchar), amount_paid (varchar), payment_status (varchar), created_dt (datetime), updated_dt (datetime). */\nCREATE TABLE `paymet_txn_summary` (\r\n  `payment_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `payment_txnid` varchar(200) DEFAULT NULL,\r\n  `payu_txnid` varchar(200) DEFAULT NULL,\r\n  `service_request_id` int(11) DEFAULT NULL,\r\n  `service_type` varchar(100) DEFAULT NULL,\r\n  `amount_paid` varchar(500) DEFAULT NULL,\r\n  `payment_status` varchar(45) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`payment_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='To trck payments paid through the site'", "description": "Creates a table named paymet_txn_summary with 9 columns: payment_id (integer primary key), payment_txnid (varchar), payu_txnid (varchar), service_request_id (integer), service_type (varchar), amount_paid (varchar), payment_status (varchar), created_dt (datetime), updated_dt (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "COMMENT"], "instruction": "Write a SQL query to create a table named paymet_txn_summary with 9 columns: payment_id (integer primary key), payment_txnid (varchar), payu_txnid (varchar), service_request_id (integer), service_type (varchar), amount_paid (varchar), payment_status (varchar), created_dt (datetime), updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named paymet_txn_summary. It should have an integer primary key so that each payment has a unique identifier, and a name column to store the payment\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE paymet_txn_summary (\n  payment_id INT PRIMARY KEY,\n  payment_txnid VARCHAR(255),\n  payu_txnid VARCHAR(255),\n  service_request_id INT,\n  service_type VARCHAR(255),\n  amount_paid VARCHAR(255),\n  payment_status VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the paymet_txn_summary table with two columns:\n  \u2022 payment_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('paymet_txn_summary');"}
{"seed": "/* Drops the table named registration_service_request if it exists. */\nDROP TABLE IF EXISTS `registration_service_request`", "description": "Drops the table named registration_service_request if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named registration_service_request if it exists.", "response": "-- Reasoning:\nWe need to delete the table named registration_service_request if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS registration_service_request;\n```\n\n-- Explanation:\nThis DROP statement deletes the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('registration_service_request');"}
{"seed": "/* Creates a table named registration_service_request with the following columns: registration_service_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime), registration_service_type_id (integer). */\nCREATE TABLE `registration_service_request` (\r\n  `registration_service_request_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `requestor_full_name` varchar(50) DEFAULT NULL,\r\n  `requestor_phone_number` varchar(15) DEFAULT NULL,\r\n  `requestor_email_id` varchar(75) DEFAULT NULL,\r\n  `requestor_pan_number` varchar(20) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  `registration_service_type_id` int(11) DEFAULT NULL,\r\n  PRIMARY KEY (`registration_service_request_id`),\r\n  KEY `registration_service_fid_foreign_key_idx` (`registration_service_type_id`),\r\n  CONSTRAINT `registration_service_fid_foreign_key` FOREIGN KEY (`registration_service_type_id`) REFERENCES `registration_service_type` (`service_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named registration_service_request with the following columns: registration_service_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime), registration_service_type_id (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE", "CONSTRAINT", "KEY", "CONSTRAINT", "KEY", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named registration_service_request with the following columns: registration_service_request_id (integer primary key), requestor_full_name (varchar), requestor_phone_number (varchar), requestor_email_id (varchar), requestor_pan_number (varchar), created_dt (datetime), updated_dt (datetime), registration_service_type_id (integer).", "response": "-- Reasoning:\nWe need a new table named registration_service_request. It should have an integer primary key so that each request has a unique identifier, and a datetime column to store the request\u2019s creation and update timestamps.\n\n-- Solution:\n```sql\nCREATE TABLE registration_service_request (\n  registration_service_request_id INT PRIMARY KEY,\n  requestor_full_name VARCHAR(255),\n  requestor_phone_number VARCHAR(255),\n  requestor_email_id VARCHAR(255),\n  requestor_pan_number VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME,\n  registration_service_type_id INT\n);\n```\n\n-- Explanation:\nThis statement defines the registration_service_request table with seven columns:\n  \u2022 registration_service_request_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 requestor_full_name: variable\u2010length string up to 255 characters\n  \u2022 requestor_phone_number: variable\u2010length string up to 255 characters\n  \u2022 requestor_email_id: variable\u2010length string up to 255 characters\n  \u2022 requestor_pan_number: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n  \u2022"}
{"seed": "/* Drops the table named registration_service_type if it exists. */\nDROP TABLE IF EXISTS `registration_service_type`", "description": "Drops the table named registration_service_type if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named registration_service_type if it exists.", "response": "-- Reasoning:\nWe need to delete the table named registration_service_type if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS registration_service_type;\n```\n\n-- Explanation:\nThis statement deletes the table named registration_service_type if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('registration_service_type');"}
{"seed": "/* Creates a table named registration_service_type with three columns: service_id (integer primary key), service_name (varchar) and service_type (varchar). */\nCREATE TABLE `registration_service_type` (\r\n  `service_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `service_name` varchar(45) NOT NULL,\r\n  `service_type` varchar(45) DEFAULT NULL,\r\n  PRIMARY KEY (`service_id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8", "description": "Creates a table named registration_service_type with three columns: service_id (integer primary key), service_name (varchar) and service_type (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "ENGINE", "NOT", "NULL", "DEFAULT", "CHARSET", "WITH", "AS"], "instruction": "Write a SQL query to create a table named registration_service_type with three columns: service_id (integer primary key), service_name (varchar) and service_type (varchar).", "response": "-- Reasoning:\nWe need a new table named registration_service_type. It should have an integer primary key so that each service has a unique identifier, and two varchar columns to store the service name and type.\n\n-- Solution:\n```sql\nCREATE TABLE registration_service_type (\n  service_id INT PRIMARY KEY,\n  service_name VARCHAR(255),\n  service_type VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the registration_service_type table with three columns:\n  \u2022 service_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 service_name: variable\u2010length string up to 255 characters\n  \u2022 service_type: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('registration_service_type');"}
{"seed": "/* Inserts the values (1,'FSSAI Food License','license'), (2,'IEC Registration','registration'), (3,'Trade License','license'), (4,'ISO Registration','license'), (5,'Digital Signature (DSC)','license'), (6,'Employee State Insurance (ESI) Registration','license'), (7,'Employees Provident Fund','license'), (8,'Service Tax Registration','registration'), (9,'Sales Tax Registration','registration'), (10,'Prof */\nINSERT INTO `registration_service_type` VALUES (1,'FSSAI Food License','license'),(2,'IEC Registration','registration'),(3,'Trade License','license'),(4,'ISO Registration','license'),(5,'Digital Signature (DSC)','license'),(6,'Employee State Insurance (ESI) Registration','license'),(7,'Employees Provident Fund','license'),(8,'Service Tax Registration','registration'),(9,'Sales Tax Registration','registration'),(10,'Professional Tax Registration','registration'),(11,'Excise Tax Registration','registration')", "description": "Inserts the values (1,'FSSAI Food License','license'), (2,'IEC Registration','registration'), (3,'Trade License','license'), (4,'ISO Registration','license'), (5,'Digital Signature (DSC)','license'), (6,'Employee State Insurance (ESI) Registration','license'), (7,'Employees Provident Fund','license'), (8,'Service Tax Registration','registration'), (9,'Sales Tax Registration','registration'), (10,'Prof", "concepts": ["INSERT INTO", "VALUES", "license", "registration"], "instruction": "Write a SQL query to insert the values (1,'FSSAI Food License','license'), (2,'IEC Registration','registration'), (3,'Trade License','license'), (4,'ISO Registration','license'), (5,'Digital Signature (DSC)','license'), (6,'Employee State Insurance (ESI) Registration','license'), (7,'Employees Provident Fund','license'), (8,'Service Tax Registration','registration'), (9,'Sales Tax Registration','registration'), (10,'Prof */", "response": "-- Reasoning:\nWe need to insert the values into the licenses table.\n\n-- Solution:\n```sql\nINSERT INTO licenses (id, name, type)\nVALUES (1, 'FSSAI Food License', 'license'),\n       (2, 'IEC Registration', 'registration'),\n       (3, 'Trade License', 'license'),\n       (4, 'ISO Registration', 'license'),\n       (5, 'Digital Signature (DSC)', 'license'),\n       (6, 'Employee State Insurance (ESI) Registration', 'license'),\n       (7, 'Employees Provident Fund', 'license'),\n       (8, 'Service Tax Registration', 'registration'),\n       (9, 'Sales Tax Registration', 'registration'),\n       (10, 'Prof */\n```\n\n-- Explanation:\nThis INSERT statement inserts the values into the licenses table.\n\n-- Tests:\n-- 1. Verify the values are inserted\nSELECT * FROM licenses;"}
{"seed": "/* Drops the table named user_query if it exists. */\nDROP TABLE IF EXISTS `user_query`", "description": "Drops the table named user_query if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named user_query if it exists.", "response": "-- Reasoning:\nWe need to drop the table named user_query if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS user_query;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('user_query');"}
{"seed": "/* Creates a table named user_query with seven columns: query_id (integer primary key), full_name (varchar), subject (varchar), message (text), email_id (varchar), created_dt (datetime), and updated_dt (datetime). */\nCREATE TABLE `user_query` (\r\n  `query_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `full_name` varchar(55) DEFAULT NULL,\r\n  `subject` varchar(100) DEFAULT NULL,\r\n  `message` text,\r\n  `email_id` varchar(50) DEFAULT NULL,\r\n  `created_dt` datetime DEFAULT NULL,\r\n  `updated_dt` datetime DEFAULT NULL,\r\n  PRIMARY KEY (`query_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named user_query with seven columns: query_id (integer primary key), full_name (varchar), subject (varchar), message (text), email_id (varchar), created_dt (datetime), and updated_dt (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named user_query with seven columns: query_id (integer primary key), full_name (varchar), subject (varchar), message (text), email_id (varchar), created_dt (datetime), and updated_dt (datetime).", "response": "-- Reasoning:\nWe need a new table named user_query. It should have an integer primary key so that each query has a unique identifier, and a name column to store the user\u2019s full name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user_query (\n  query_id INT PRIMARY KEY,\n  full_name VARCHAR(255),\n  subject VARCHAR(255),\n  message TEXT,\n  email_id VARCHAR(255),\n  created_dt DATETIME,\n  updated_dt DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the user_query table with seven columns:\n  \u2022 query_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 full_name: variable\u2010length string up to 255 characters\n  \u2022 subject: variable\u2010length string up to 255 characters\n  \u2022 message: text\n  \u2022 email_id: variable\u2010length string up to 255 characters\n  \u2022 created_dt: datetime\n  \u2022 updated_dt: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user_query');"}
{"seed": "/* Drops the database named libraryautomation. */\ndrop database libraryautomation", "description": "Drops the database named libraryautomation.", "concepts": ["drop database"], "instruction": "Write a SQL query to drop the database named libraryautomation.", "response": "-- Reasoning:\nWe need to delete the database named libraryautomation.\n\n-- Solution:\n```sql\nDROP DATABASE libraryautomation;\n```\n\n-- Explanation:\nThis statement deletes the database named libraryautomation.\n\n-- Tests:\n-- 1. Verify database is deleted\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named libraryautomation. */\ncreate database libraryautomation", "description": "Creates a database named libraryautomation.", "concepts": ["create database"], "instruction": "Write a SQL query to create a database named libraryautomation.", "response": "-- Reasoning:\nWe need to create a new database named libraryautomation.\n\n-- Solution:\n```sql\nCREATE DATABASE libraryautomation;\n```\n\n-- Explanation:\nThis statement creates a new database named libraryautomation.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named book with seven columns: BookId (integer primary key), BookName (varchar), author (varchar), Press (varchar), Price (varchar), Position (varchar), ISBN (varchar), status (varchar), Category (varchar), description (text), number (integer). */\ncreate table book(\n\tBookId int(6)  unsigned zerofill auto_increment not null,\n    BookName varchar(255) not null,\n    author varchar(255) not null,\n    Press varchar(255) not null,\n    Price varchar(255) not null,\n    Position varchar(255) not null,\n    ISBN varchar(255) not null,\n    status varchar(255) not null, -- available/reserved/lent\n    Category varchar(255) not null,\n    description text,\n    \n    number int not null,\n    PRIMARY KEY (BookId)\n)", "description": "Creates a table named book with seven columns: BookId (integer primary key), BookName (varchar), author (varchar), Press (varchar), Price (varchar), Position (varchar), ISBN (varchar), status (varchar), Category (varchar), description (text), number (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "INT", "AUTO_INCREMENT", "NOT NULL", "ZEROFILL", "UNSIGNED", "VARCHAR"], "instruction": "Write a SQL query to create a table named book with seven columns: BookId (integer primary key), BookName (varchar), author (varchar), Press (varchar), Price (varchar), Position (varchar), ISBN (varchar), status (varchar), Category (varchar), description (text), number (integer).", "response": "-- Reasoning:\nWe need a new table named book. It should have an integer primary key so that each book has a unique identifier, and a name column to store the book\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE book (\n  BookId INT PRIMARY KEY,\n  BookName VARCHAR(255),\n  author VARCHAR(255),\n  Press VARCHAR(255),\n  Price VARCHAR(255),\n  Position VARCHAR(255),\n  ISBN VARCHAR(255),\n  status VARCHAR(255),\n  Category VARCHAR(255),\n  description TEXT,\n  number INT\n);\n```\n\n-- Explanation:\nThis statement defines the book table with two columns:\n  \u2022 BookId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BookName: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('book');"}
{"seed": "/* Creates a table named bookrecord with five columns: informationId (integer primary key), FineValue (float), LentDate (datetime), ReturnDate (datetime), BookId (integer), AcntNum (integer). */\ncreate table bookrecord(\n\tinformationId int(6)  unsigned zerofill auto_increment not null,\n    FineValue float,\n    LentDate DATETIME not null,\n    ReturnDate DATETIME,\n    BookId int(6) unsigned zerofill not null,\n    AcntNum int(6) unsigned zerofill not null,\n    PRIMARY KEY (informationId)\n    \n)", "description": "Creates a table named bookrecord with five columns: informationId (integer primary key), FineValue (float), LentDate (datetime), ReturnDate (datetime), BookId (integer), AcntNum (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "FLOAT", "DATETIME", "DATETIME", "INT", "INT", "AUTO_INCREMENT", "ZEROFILL", "NOT"], "instruction": "Write a SQL query to create a table named bookrecord with five columns: informationId (integer primary key), FineValue (float), LentDate (datetime), ReturnDate (datetime), BookId (integer), AcntNum (integer).", "response": "-- Reasoning:\nWe need a new table named bookrecord. It should have an integer primary key so that each record has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE bookrecord (\n  informationId INT PRIMARY KEY,\n  FineValue FLOAT,\n  LentDate DATETIME,\n  ReturnDate DATETIME,\n  BookId INT,\n  AcntNum INT\n);\n```\n\n-- Explanation:\nThis statement defines the bookrecord table with five columns:\n  \u2022 informationId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 FineValue: float\n  \u2022 LentDate: datetime\n  \u2022 ReturnDate: datetime\n  \u2022 BookId: integer\n  \u2022 AcntNum: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('bookrecord');"}
{"seed": "/* Creates a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime). */\ncreate table optionRecord(\n\tinformationId int(6)  unsigned zerofill auto_increment not null,\n\tBookId int(6) unsigned zerofill not null,\n    AcntNum int(6) unsigned zerofill not null,\n\treason  varchar(255),\n\toperation varchar(255) not null,\n\tcreationDate DATETIME not null,\n\tPRIMARY KEY (informationId)\n\t\n\t\n)", "description": "Creates a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named optionRecord with five columns: informationId (integer primary key), BookId (integer), AcntNum (integer), reason (varchar), operation (varchar), creationDate (datetime).", "response": "-- Reasoning:\nWe need a new table named optionRecord. It should have an integer primary key so that each record has a unique identifier, and four other columns to store the information about the option record.\n\n-- Solution:\n```sql\nCREATE TABLE optionRecord (\n  informationId INT PRIMARY KEY,\n  BookId INT,\n  AcntNum INT,\n  reason VARCHAR(255),\n  operation VARCHAR(255),\n  creationDate DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the optionRecord table with five columns:\n  \u2022 informationId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BookId: integer\n  \u2022 AcntNum: integer\n  \u2022 reason: variable\u2010length string up to 255 characters\n  \u2022 operation: variable\u2010length string up to 255 characters\n  \u2022 creationDate: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('optionRecord');"}
{"seed": "/* Creates a table named reserve with three columns: informationId (integer primary key), BookId (integer), AcntNum (integer), and createDate (datetime). */\ncreate table reserve(\n\tinformationId int(6)  unsigned zerofill auto_increment not null,\n\tBookId int(6) unsigned zerofill not null,\n    AcntNum int(6)  unsigned zerofill  not null,\n\tcreateDate DATETIME not null,\n\tPRIMARY KEY (informationId)\n)", "description": "Creates a table named reserve with three columns: informationId (integer primary key), BookId (integer), AcntNum (integer), and createDate (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named reserve with three columns: informationId (integer primary key), BookId (integer), AcntNum (integer), and createDate (datetime).", "response": "-- Reasoning:\nWe need a new table named reserve. It should have an integer primary key so that each reservation has a unique identifier, and two foreign keys to the books and accounts tables.\n\n-- Solution:\n```sql\nCREATE TABLE reserve (\n  informationId INT PRIMARY KEY,\n  BookId INT,\n  AcntNum INT,\n  createDate DATETIME,\n  FOREIGN KEY (BookId) REFERENCES books(BookId),\n  FOREIGN KEY (AcntNum) REFERENCES accounts(AcntNum)\n);\n```\n\n-- Explanation:\nThis statement defines the reserve table with three columns:\n  \u2022 informationId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BookId: integer, foreign key to the books table\n  \u2022 AcntNum: integer, foreign key to the accounts table\n  \u2022 createDate: datetime, the date and time the reservation was created\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('reserve');"}
{"seed": "/* Creates a table named reader with five columns: AcntNum (integer primary key), Telephone (varchar), Password (varchar), Email (varchar), bookNumber (integer), registerDate (datetime), Deposit (float). */\ncreate table reader(\n\tAcntNum int(6)  unsigned zerofill auto_increment not null,\n\tTelephone varchar(255) not null,\n    Password varchar(255) not null,\n    Email varchar(255) not null,\n    bookNumber int not null,\n    registerDate DATETIME not null,\n    Deposit float not null,\n    PRIMARY KEY(AcntNum)\n)", "description": "Creates a table named reader with five columns: AcntNum (integer primary key), Telephone (varchar), Password (varchar), Email (varchar), bookNumber (integer), registerDate (datetime), Deposit (float).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DATETIME", "FLOAT"], "instruction": "Write a SQL query to create a table named reader with five columns: AcntNum (integer primary key), Telephone (varchar), Password (varchar), Email (varchar), bookNumber (integer), registerDate (datetime), Deposit (float).", "response": "-- Reasoning:\nWe need a new table named reader. It should have an integer primary key so that each reader has a unique identifier, and a name column to store the reader\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE reader (\n  AcntNum INT PRIMARY KEY,\n  Telephone VARCHAR(255),\n  Password VARCHAR(255),\n  Email VARCHAR(255),\n  bookNumber INT,\n  registerDate DATETIME,\n  Deposit FLOAT\n);\n```\n\n-- Explanation:\nThis statement defines the reader table with five columns:\n  \u2022 AcntNum: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Telephone: variable\u2010length string up to 255 characters\n  \u2022 Password: variable\u2010length string up to 255 characters\n  \u2022 Email: variable\u2010length string up to 255 characters\n  \u2022 bookNumber: integer\n  \u2022 registerDate: datetime\n  \u2022 Deposit: float\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('reader');"}
{"seed": "/* Creates a table named librarian with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table. */\ncreate table librarian(\n\tAcntNum varchar(255) not null,\n    Password varchar(255) not null,\n    PRIMARY KEY(AcntNum)\n)", "description": "Creates a table named librarian with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "concepts": ["CREATE TABLE", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named librarian with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "response": "-- Reasoning:\nWe need a new table named librarian. It should have an integer primary key so that each librarian has a unique identifier, and a name column to store the librarian\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE librarian (\n  AcntNum VARCHAR(255) PRIMARY KEY,\n  Password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the librarian table with two columns:\n  \u2022 AcntNum: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Password: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('librarian');"}
{"seed": "/* Creates a table named admin with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table. */\ncreate table admin(\n\tAcntNum varchar(255) not null,\n    Password varchar(255) not null,\n    PRIMARY KEY(AcntNum)\n)", "description": "Creates a table named admin with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "concepts": ["CREATE TABLE", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named admin with two columns: AcntNum (varchar) and Password (varchar). AcntNum is the primary key of the table.", "response": "-- Reasoning:\nWe need a new table named admin. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE admin (\n  AcntNum VARCHAR(255) PRIMARY KEY,\n  Password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the admin table with two columns:\n  \u2022 AcntNum: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Password: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('admin');"}
{"seed": "/* Creates a table named announcement with three columns: TextId (varchar), Text (text), and Date (datetime). TextId is the primary key of the table. */\ncreate table announcement(\n\tTextId varchar(255) not null,\n    Text text not null,\n    Date DATETIME not null,\n    PRIMARY KEY(TextId)\n)", "description": "Creates a table named announcement with three columns: TextId (varchar), Text (text), and Date (datetime). TextId is the primary key of the table.", "concepts": ["CREATE TABLE", "VARCHAR", "TEXT", "DATETIME", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named announcement with three columns: TextId (varchar), Text (text), and Date (datetime). TextId is the primary key of the table.", "response": "-- Reasoning:\nWe need a new table named announcement. It should have a primary key named TextId, a text column named Text, and a datetime column named Date.\n\n-- Solution:\n```sql\nCREATE TABLE announcement (\n  TextId VARCHAR(255) PRIMARY KEY,\n  Text TEXT,\n  Date DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the announcement table with three columns:\n  \u2022 TextId: variable\u2010length string up to 255 characters, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Text: variable\u2010length text\n  \u2022 Date: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('announcement');"}
{"seed": "/* Creates a foreign key constraint on the acntnum column of the optionRecord table that references the acntnum column of the reader table. */\nalter table optionRecord\nadd constraint reader_optionRecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the acntnum column of the optionRecord table that references the acntnum column of the reader table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the acntnum column of the optionRecord table that references the acntnum column of the reader table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the optionRecord table to reference the reader table. This means that the optionRecord.acntnum column should be a foreign key that references the reader.acntnum column.\n\n-- Solution:\n```sql\nALTER TABLE optionRecord\n  ADD CONSTRAINT fk_optionRecord_reader\n    FOREIGN KEY (acntnum)\n    REFERENCES reader (acntnum);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the optionRecord table. The constraint is named fk_optionRecord_reader and it references the reader table. The optionRecord.acntnum column is the foreign key and the reader.acntnum column is the primary key.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('optionRecord');"}
{"seed": "/* Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table. */\nalter table optionRecord\nadd constraint book_optionRecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the bookId column of the optionRecord table that references the bookId column of the book table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the optionRecord table to reference the book table. This will ensure that the bookId column of optionRecord references a valid bookId in the book table.\n\n-- Solution:\n```sql\nALTER TABLE optionRecord\n  ADD CONSTRAINT fk_bookId\n  FOREIGN KEY (bookId)\n  REFERENCES book(bookId);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the optionRecord table. It references the book table and ensures that the bookId column of optionRecord references a valid bookId in the book table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('optionRecord');"}
{"seed": "/* Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table. */\nalter table reserve\nadd constraint reader_reserve foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON UPDATE", "ON DELETE"], "instruction": "Write a SQL query to create a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the acntnum column of the reserve table that references the acntnum column of the reader table.\n\n-- Solution:\n```sql\nALTER TABLE reserve\n  ADD CONSTRAINT fk_acntnum FOREIGN KEY (acntnum) REFERENCES reader (acntnum);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the reserve table. It ensures that the acntnum column of the reserve table references the acntnum column of the reader table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('reserve');"}
{"seed": "/* Creates a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table. */\nalter table reserve\nadd constraint book_reserve foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the bookId column of the reserve table that references the bookId column of the book table.\n\n-- Solution:\n```sql\nALTER TABLE reserve\n  ADD CONSTRAINT fk_bookId\n  FOREIGN KEY (bookId)\n  REFERENCES book(bookId);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the reserve table. It ensures that the bookId column of the reserve table references the bookId column of the book table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('reserve');"}
{"seed": "/* Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table. */\nalter table bookrecord\nadd constraint reader_bookrecord foreign key (`acntnum`)\nreferences reader(`acntnum`) on update cascade on delete CASCADE", "description": "Creates a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to create a foreign key constraint on the acntnum column of the bookrecord table that references the acntnum column of the reader table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the bookrecord table to reference the reader table. This will ensure that the acntnum column of the bookrecord table is always valid.\n\n-- Solution:\n```sql\nALTER TABLE bookrecord\n  ADD CONSTRAINT fk_bookrecord_reader\n    FOREIGN KEY (acntnum)\n      REFERENCES reader (acntnum);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the bookrecord table that references the reader table.\n\n-- Tests:\n-- 1. Verify foreign key constraint exists\nPRAGMA foreign_key_list('bookrecord');"}
{"seed": "/* Adds a foreign key constraint to the bookrecord table that references the book table. */\nalter table bookrecord\nadd constraint book_bookrecord foreign key (`bookId`)\nreferences book(`bookId`) on update cascade on delete CASCADE", "description": "Adds a foreign key constraint to the bookrecord table that references the book table.", "concepts": ["alter table", "add constraint", "foreign key", "references", "on update", "on delete"], "instruction": "Write a SQL query to add a foreign key constraint to the bookrecord table that references the book table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the bookrecord table that references the book table.\n\n-- Solution:\n```sql\nALTER TABLE bookrecord\n  ADD CONSTRAINT fk_bookrecord_book\n    FOREIGN KEY (book_id)\n    REFERENCES book (book_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the bookrecord table that references the book table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('bookrecord');"}
{"seed": "/* Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values. */\nALTER TABLE PUBLIC.EMPLOYEE ADD IMAGE_DATA BLOB NULL", "description": "Adds a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values.", "concepts": ["ALTER TABLE", "ADD", "BLOB", "NULL"], "instruction": "Write a SQL query to add a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. The column is of type BLOB and can hold null values.", "response": "-- Reasoning:\nWe need to add a new column named IMAGE_DATA to the EMPLOYEE table in the PUBLIC schema. It should be a BLOB and can hold null values.\n\n-- Solution:\n```sql\nALTER TABLE PUBLIC.EMPLOYEE\n  ADD COLUMN IMAGE_DATA BLOB;\n```\n\n-- Explanation:\nThis ALTER statement updates the EMPLOYEE table schema by adding:\n  \u2022 IMAGE_DATA: a BLOB column that can hold null values\n\n-- Tests:\n-- 1. Verify new column appears\nPRAGMA table_info('EMPLOYEE');"}
{"seed": "/* Creates a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns. */\nCREATE UNIQUE INDEX sa.productbin_name_ind ON sa.table_productbin(parent_type,parent_id,\"NAME\")", "description": "Creates a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns.", "concepts": ["CREATE UNIQUE INDEX", "ON", "parent_type", "parent_id", "NAME"], "instruction": "Write a SQL query to create a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns.", "response": "-- Reasoning:\nWe need to create a unique index on the table_productbin table. The index should be on the parent_type, parent_id, and NAME columns.\n\n-- Solution:\n```sql\nCREATE UNIQUE INDEX productbin_name_ind ON table_productbin (parent_type, parent_id, NAME);\n```\n\n-- Explanation:\nThis statement creates a unique index named productbin_name_ind on the table_productbin table. The index is on the parent_type, parent_id, and NAME columns.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('table_productbin');"}
{"seed": "/* Creates a table named chicken_lineage with four columns: id (integer primary key), lineage (varchar), chicken_color (varchar), and provider (varchar). */\nCREATE TABLE chicken_lineage (\n\tid INT NOT NULL AUTO_INCREMENT,\n\tlineage VARCHAR(15) NOT NULL,\n    chicken_color VARCHAR(15) NOT NULL,\n    provider VARCHAR(15) NOT NULL,\n\tPRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named chicken_lineage with four columns: id (integer primary key), lineage (varchar), chicken_color (varchar), and provider (varchar).", "concepts": ["CREATE TABLE", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named chicken_lineage with four columns: id (integer primary key), lineage (varchar), chicken_color (varchar), and provider (varchar).", "response": "-- Reasoning:\nWe need a new table named chicken_lineage. It should have an integer primary key so that each chicken has a unique identifier, and a lineage column to store the chicken\u2019s lineage as text.\n\n-- Solution:\n```sql\nCREATE TABLE chicken_lineage (\n  id INT PRIMARY KEY,\n  lineage VARCHAR(255),\n  chicken_color VARCHAR(255),\n  provider VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the chicken_lineage table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 lineage: variable\u2010length string up to 255 characters\n  \u2022 chicken_color: variable\u2010length string up to 255 characters\n  \u2022 provider: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('chicken_lineage');"}
{"seed": "/* Creates a table named shed_manufacturer with three columns: id (integer primary key), manufacturer (varchar), and active (boolean). */\nCREATE TABLE shed_manufacturer (\n\tid INT NOT NULL AUTO_INCREMENT,\n\tmanufacturer VARCHAR(15) NOT NULL,\n\tPRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named shed_manufacturer with three columns: id (integer primary key), manufacturer (varchar), and active (boolean).", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT NULL", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named shed_manufacturer with three columns: id (integer primary key), manufacturer (varchar), and active (boolean).", "response": "-- Reasoning:\nWe need a new table named shed_manufacturer. It should have an integer primary key so that each manufacturer has a unique identifier, a name column to store the manufacturer\u2019s name as text, and an active column to indicate whether the manufacturer is still active.\n\n-- Solution:\n```sql\nCREATE TABLE shed_manufacturer (\n  id INTEGER PRIMARY KEY,\n  manufacturer VARCHAR(255),\n  active BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the shed_manufacturer table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 manufacturer: variable\u2010length string up to 255 characters\n  \u2022 active: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('shed_manufacturer');"}
{"seed": "/* Creates a table named shed with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column is a foreign key that references the id column in the shed_manufacturer table. */\nCREATE TABLE shed (\n  id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(15) NOT NULL,\n  type VARCHAR(15) NOT NULL,\n  capacity INT NOT NULL,\n  model VARCHAR(15) NOT NULL,\n  shed_manufacturer_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (shed_manufacturer_id) REFERENCES shed_manufacturer(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named shed with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column is a foreign key that references the id column in the shed_manufacturer table.", "concepts": ["CREATE TABLE", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named shed with five columns: id (integer primary key), name (varchar), type (varchar), capacity (integer), model (varchar), and shed_manufacturer_id (integer). The shed_manufacturer_id column is a foreign key that references the id column in the shed_manufacturer table.", "response": "-- Reasoning:\nWe need a new table named shed. It should have an integer primary key so that each shed has a unique identifier, and a name column to store the shed\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE shed (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  type VARCHAR(255),\n  capacity INT,\n  model VARCHAR(255),\n  shed_manufacturer_id INT,\n  FOREIGN KEY (shed_manufacturer_id) REFERENCES shed_manufacturer(id)\n);\n```\n\n-- Explanation:\nThis statement defines the shed table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 type: variable\u2010length string up to 255 characters\n  \u2022 capacity: integer\n  \u2022 model: variable\u2010length string up to 255 characters\n  \u2022 shed_manufacturer_id: integer, foreign key to shed_manufacturer.id\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('shed');"}
{"seed": "/* Creates a table named chicken_lot with seven columns: id (integer primary key), birth_date (date), accommodation_date (date), initial_quantity (integer), current_quantity (integer), debicking (varchar), chicken_lineage_id (integer), and shed_id (integer). The id column is set to auto increment, the birth_date and accommodation_date columns are set to not null, and the initial_quantity, */\nCREATE TABLE chicken_lot (\n  id INT NOT NULL AUTO_INCREMENT,\n  birth_date DATE NOT NULL,\n  accommodation_date DATE NOT NULL,\n  initial_quantity INT NOT NULL,\n  current_quantity INT NOT NULL,\n  debicking VARCHAR(15) NOT NULL,\n  chicken_lineage_id  INT NOT NULL,\n  shed_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lineage_id) REFERENCES chicken_lineage(id),\n  FOREIGN KEY (shed_id) REFERENCES shed(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named chicken_lot with seven columns: id (integer primary key), birth_date (date), accommodation_date (date), initial_quantity (integer), current_quantity (integer), debicking (varchar), chicken_lineage_id (integer), and shed_id (integer). The id column is set to auto increment, the birth_date and accommodation_date columns are set to not null, and the initial_quantity,", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "DATE", "NOT NULL", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "ENGINE", "DEFAULT", "CHARSET", "VARCHAR"], "instruction": "Write a SQL query to create a table named chicken_lot with seven columns: id (integer primary key), birth_date (date), accommodation_date (date), initial_quantity (integer), current_quantity (integer), debicking (varchar), chicken_lineage_id (integer), and shed_id (integer). The id column is set to auto increment, the birth_date and accommodation_date columns are set to not null, and the initial_quantity, current_quantity, debicking, chicken_lineage_id, and shed_id columns are set to not null.", "response": "-- Reasoning:\nWe need a new table named chicken_lot. It should have an integer primary key so that each chicken lot has a unique identifier, and a date column to store the chicken lot\u2019s birth date and accommodation date.\n\n-- Solution:\n```sql\nCREATE TABLE chicken_lot (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  birth_date DATE NOT NULL,\n  accommodation_date DATE NOT NULL,\n  initial_quantity INTEGER NOT NULL,\n  current_quantity INTEGER NOT NULL,\n  debicking VARCHAR(255) NOT NULL,\n  chicken_lineage_id INTEGER NOT NULL,\n  shed_id INTEGER NOT NULL\n);\n```\n\n-- Explanation:\nThis statement defines the chicken_lot table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 birth_date: date, not null\n  \u2022 accommodation_date: date, not null\n  \u2022 initial_quantity: integer, not null\n  \u2022 current_quantity: integer, not null\n  \u2022 debicking: varchar, not null\n  \u2022 chicken_lineage_id: integer, not null\n  \u2022 shed_id: integer, not null\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('chicken_lot');"}
{"seed": "/* Creates a table named creation_monitoring with 10 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), and chicken_lot_id (integer). The chicken_lot_id column is a foreign key that references the id column of the chicken_lot table. */\nCREATE TABLE creation_monitoring (\n  id INT NOT NULL AUTO_INCREMENT,\n  age_week INT NOT NULL,\n  age_day INT NOT NULL,\n  date_week DATE NOT NULL,\n  body_weight INT NOT NULL,\n  food INT NOT NULL,\n  water INT NOT NULL,\n  discard INT NOT NULL,\n  mortality INT NOT NULL,\n  chicken_lot_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named creation_monitoring with 10 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), and chicken_lot_id (integer). The chicken_lot_id column is a foreign key that references the id column of the chicken_lot table.", "concepts": ["CREATE TABLE", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "ENGINE", "DEFAULT", "CHARSET", "INT", "DATE"], "instruction": "Write a SQL query to create a table named creation_monitoring with 10 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), and chicken_lot_id (integer). The chicken_lot_id column is a foreign key that references the id column of the chicken_lot table.", "response": "-- Reasoning:\nWe need a new table named creation_monitoring. It should have an integer primary key so that each row has a unique identifier, and a chicken_lot_id column to store the chicken_lot\u2019s id as an integer.\n\n-- Solution:\n```sql\nCREATE TABLE creation_monitoring (\n  id INT PRIMARY KEY,\n  age_week INT,\n  age_day INT,\n  date_week DATE,\n  body_weight INT,\n  food INT,\n  water INT,\n  discard INT,\n  mortality INT,\n  chicken_lot_id INT,\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n);\n```\n\n-- Explanation:\nThis statement defines the creation_monitoring table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 age_week: integer\n  \u2022 age_day: integer\n  \u2022 date_week: date\n  \u2022 body_weight: integer\n  \u2022 food: integer\n  \u2022 water: integer\n  \u2022 discard: integer\n  \u2022 mortality: integer\n  \u2022 chicken_lot_id: integer, foreign key to chicken_lot(id)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('creation_monitoring');"}
{"seed": "/* Creates a table named production_monitoring with 14 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), total_production (integer), first_eggs (integer), second_eggs (integer), egg_weight (integer), and chicken_lot_id (integer). The chicken_ */\nCREATE TABLE production_monitoring (\n  id INT NOT NULL AUTO_INCREMENT,\n  age_week INT NOT NULL,\n  age_day INT NOT NULL,\n  date_week DATE NOT NULL,\n  body_weight INT NOT NULL,\n  food INT NOT NULL,\n  water INT NOT NULL,\n  discard INT NOT NULL,\n  mortality INT NOT NULL,\n  total_production INT NOT NULL,\n  first_eggs INT NOT NULL,\n  second_eggs INT NOT NULL,\n  egg_weight INT NOT NULL,\n  chicken_lot_id  INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n) ENGINE=InnoDB DEFAULT CHARSET=UTF8MB4", "description": "Creates a table named production_monitoring with 14 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), total_production (integer), first_eggs (integer), second_eggs (integer), egg_weight (integer), and chicken_lot_id (integer). The chicken_", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "ENGINE", "DEFAULT", "CHARSET", "NOT NULL", "NOT"], "instruction": "Write a SQL query to create a table named production_monitoring with 14 columns: id (integer primary key), age_week (integer), age_day (integer), date_week (date), body_weight (integer), food (integer), water (integer), discard (integer), mortality (integer), total_production (integer), first_eggs (integer), second_eggs (integer), egg_weight (integer), and chicken_lot_id (integer). The chicken_lot_id column should be a foreign key that references the id column in the chicken_lot table.", "response": "-- Reasoning:\nWe need a new table named production_monitoring. It should have an integer primary key so that each row has a unique identifier, and a chicken_lot_id column to store the chicken_lot\u2019s id as an integer.\n\n-- Solution:\n```sql\nCREATE TABLE production_monitoring (\n  id INT PRIMARY KEY,\n  age_week INT,\n  age_day INT,\n  date_week DATE,\n  body_weight INT,\n  food INT,\n  water INT,\n  discard INT,\n  mortality INT,\n  total_production INT,\n  first_eggs INT,\n  second_eggs INT,\n  egg_weight INT,\n  chicken_lot_id INT,\n  FOREIGN KEY (chicken_lot_id) REFERENCES chicken_lot(id)\n);\n```\n\n-- Explanation:\nThis statement defines the production_monitoring table with 14 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 age_week: integer\n  \u2022 age_day: integer\n  \u2022 date_week: date\n  \u2022 body_weight: integer\n  \u2022 food: integer\n  \u2022 water: integer\n  \u2022 discard: integer\n  \u2022 mortality: integer\n  \u2022 total_production: integer\n  \u2022 first_eggs: integer\n  \u2022 second_eggs: integer\n  \u2022 egg_weight: integer\n  \u2022 chicken_lot_id:"}
{"seed": "/* Inserts a new row into the shed_manufacturer table with the manufacturer Artabas. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Artabas')", "description": "Inserts a new row into the shed_manufacturer table with the manufacturer Artabas.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the shed_manufacturer table with the manufacturer Artabas.", "response": "-- Reasoning:\nWe need to insert a new row into the shed_manufacturer table. It should have a manufacturer named Artabas.\n\n-- Solution:\n```sql\nINSERT INTO shed_manufacturer (manufacturer)\nVALUES ('Artabas');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed_manufacturer table with the manufacturer Artabas.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM shed_manufacturer;"}
{"seed": "/* Inserts a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Kilbra')", "description": "Inserts a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column.", "response": "-- Reasoning:\nWe need to insert a new row into the shed_manufacturer table. It should have a value of Kilbra for the manufacturer column.\n\n-- Solution:\n```sql\nINSERT INTO shed_manufacturer (manufacturer)\nVALUES ('Kilbra');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed_manufacturer table with the value Kilbra for the manufacturer column.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM shed_manufacturer;"}
{"seed": "/* Inserts a new manufacturer named Plasson into the shed_manufacturer table. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Plasson')", "description": "Inserts a new manufacturer named Plasson into the shed_manufacturer table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new manufacturer named Plasson into the shed_manufacturer table.", "response": "-- Reasoning:\nWe need to insert a new manufacturer into the shed_manufacturer table.\n\n-- Solution:\n```sql\nINSERT INTO shed_manufacturer (name)\nVALUES ('Plasson');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed_manufacturer table with the name Plasson.\n\n-- Tests:\n-- 1. Verify new manufacturer appears in table\nSELECT * FROM shed_manufacturer;"}
{"seed": "/* Inserts a new manufacturer named Pr\u00f3prio into the shed_manufacturer table. */\nINSERT INTO shed_manufacturer (manufacturer) values ('Pr\u00f3prio')", "description": "Inserts a new manufacturer named Pr\u00f3prio into the shed_manufacturer table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new manufacturer named Pr\u00f3prio into the shed_manufacturer table.", "response": "-- Reasoning:\nWe need to insert a new manufacturer into the shed_manufacturer table. It should have a name of Pr\u00f3prio.\n\n-- Solution:\n```sql\nINSERT INTO shed_manufacturer (name)\nVALUES ('Pr\u00f3prio');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the shed_manufacturer table with a name of Pr\u00f3prio.\n\n-- Tests:\n-- 1. Verify new manufacturer appears\nSELECT * FROM shed_manufacturer;"}
{"seed": "/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('Nick-Chick', 'Branca', 'H e N')", "description": "Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider columns.", "response": "-- Reasoning:\nWe need to insert a new row into the chicken_lineage table. It should have the lineage, chicken_color, and provider columns.\n\n-- Solution:\n```sql\nINSERT INTO chicken_lineage (lineage, chicken_color, provider)\nVALUES ('Bantam', 'White', 'Chicken Coop');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the chicken_lineage table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM chicken_lineage;"}
{"seed": "/* Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider values. */\nINSERT INTO chicken_lineage (lineage, chicken_color, provider) values ('W-80',  'Branca', 'Hy-Line')", "description": "Inserts a new row into the chicken_lineage table with the lineage, chicken_color, and provider values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider values.", "response": "-- Reasoning:\nWe need to insert a new row into the chicken_lineage table with the lineage, chicken_color, and provider values.\n\n-- Solution:\n```sql\nINSERT INTO chicken_lineage (lineage, chicken_color, provider)\nVALUES ('Bantam', 'White', 'Chicken Coop');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the chicken_lineage table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM chicken_lineage;"}
{"seed": "/* Inserts a new shed into the shed table with the given values. */\nINSERT INTO shed (name, type, capacity, model, shed_manufacturer_id ) values ('A1', 'Automatizado', 10080, 'P45-10', 1)", "description": "Inserts a new shed into the shed table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named mahasiswa with 9 columns: no_bp (varchar), nama (varchar), jekel (varchar), tempatLahir (varchar), tanggalLahir (date), alamat (varchar), noTelepon (varchar), kdJurusan (varchar), and kdProdi (varchar). */\nCREATE TABLE `mahasiswa` (\n  `no_bp` varchar(10) NOT NULL,\n  `nama` varchar(30) NOT NULL,\n  `jekel` varchar(10) NOT NULL,\n  `tempatLahir` varchar(20) NOT NULL,\n  `tanggalLahir` date NOT NULL,\n  `alamat` varchar(50) NOT NULL,\n  `noTelepon` varchar(20) NOT NULL,\n  `kdJurusan` varchar(2) NOT NULL,\n  `kdProdi` varchar(5) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named mahasiswa with 9 columns: no_bp (varchar), nama (varchar), jekel (varchar), tempatLahir (varchar), tanggalLahir (date), alamat (varchar), noTelepon (varchar), kdJurusan (varchar), and kdProdi (varchar).", "concepts": ["CREATE TABLE", "VARCHAR", "DATE", "NOT NULL", "PRIMARY KEY", "AUTO_INCREMENT", "FOREIGN KEY", "INT", "DEFAULT", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named mahasiswa with 9 columns: no_bp (varchar), nama (varchar), jekel (varchar), tempatLahir (varchar), tanggalLahir (date), alamat (varchar), noTelepon (varchar), kdJurusan (varchar), and kdProdi (varchar).", "response": "-- Reasoning:\nWe need a new table named mahasiswa. It should have a unique identifier, name, gender, place of birth, date of birth, address, phone number, and academic program.\n\n-- Solution:\n```sql\nCREATE TABLE mahasiswa (\n  no_bp VARCHAR(20) PRIMARY KEY,\n  nama VARCHAR(255),\n  jekel VARCHAR(20),\n  tempatLahir VARCHAR(255),\n  tanggalLahir DATE,\n  alamat VARCHAR(255),\n  noTelepon VARCHAR(20),\n  kdJurusan VARCHAR(20),\n  kdProdi VARCHAR(20)\n);\n```\n\n-- Explanation:\nThis statement defines the mahasiswa table with 9 columns:\n  \u2022 no_bp: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nama: variable\u2010length string up to 255 characters\n  \u2022 jekel: varchar, up to 20 characters\n  \u2022 tempatLahir: varchar, up to 255 characters\n  \u2022 tanggalLahir: date\n  \u2022 alamat: varchar, up to 255 characters\n  \u2022 noTelepon: varchar, up to 20 characters\n  \u2022 kdJurusan: varchar, up to 20 characters\n  \u2022 kdProdi: varchar, up to"}
{"seed": "/* Creates a table named users with two columns: id (integer primary key) and name (varchar). */\nINSERT INTO `mahasiswa` (`no_bp`, `nama`, `jekel`, `tempatLahir`, `tanggalLahir`, `alamat`, `noTelepon`, `kdJurusan`, `kdProdi`) VALUES\n('1702021077', 'Morina Tokunaga', 'perempuan', 'Osaka', '2001-03-22', 'Chibubu, Osaka', '+8112290841', 'TM', 'TM002'),\n('1702031033', 'Ahmad Hambali', 'laki-laki', 'Solok', '2000-03-13', 'Komplek Perumahan Dosen Unand Blok B3/11/04', '08231234321', 'TM', 'TM003'),\n('1703011005', 'Richardo Simanjuntak', 'laki-laki', 'Mandailing Natal', '2000-03-20', 'Jalan Toba', '08247238123', 'TE', 'TE001'),\n('1703012020', 'Rizal Ramlee', 'laki-laki', 'Bandung', '1998-12-05', 'Jalan Sitiung', '083147523821', 'TE', 'TE001'),\n('1703052007', 'Shobirin Maulana', 'laki-laki', 'Padang', '2000-02-02', 'Komplek Unand Blok B', '08237849231', 'TE', 'TE005'),\n('1704031056', 'Arif Nursahid', 'laki-laki', 'Bantul', '2001-05-01', 'Jl. Ringroad Timur No. 21, Bantul', '02745021223', 'TS', 'TS003'),\n('1705021003', 'Suci Aurelia Puri', 'perempuan', 'Padang', '2000-03-02', 'Bunguih', '0784123123', 'AN', 'AN002'),\n('1801022005', 'Khairul Amin Abdul Latif', 'laki-laki', 'Aceh Besar', '1999-01-01', 'Jalan By. Pass KM. 10, Padang', '08231239412', 'TI', 'TI002'),\n('1802032026', 'Richard Feymann', 'laki-laki', 'GreenFields', '2020-01-01', 'Jalan Kabuto', '+1232452532', 'TM', 'TM003'),\n('1803022001', 'Fathimah Az-Zahra', 'perempuan', 'Sawahlunto', '2000-08-07', 'Jalan Kenanga No. 1', '0824285732', 'TE', 'TE002'),\n('1803051021', 'Ahmad Dahlan', 'laki-laki', 'Poso', '1999-05-13', 'Tanah Sirah', '0823123542', 'TE', 'TE005'),\n('1804011005', 'Andini Khoiriyah', 'perempuan', 'Banjarnegara', '2001-02-14', 'Komplek Taruko ', '08524323412', 'TS', 'TS001'),\n('1804012023', 'Irfan Syahputra', 'laki-laki', 'Palangkaraya', '2000-12-09', 'Komplek Cerdikiawan', '0823428723', 'TS', 'TS001'),\n('1804021011', 'Alga Noor Hasanah', 'perempuan', 'Surakarta', '1999-07-08', 'Jl. Pisang No. 12 Surakarta', '085110003340', 'TS', 'TS002'),\n('1901011003', 'Jerome Polin', 'laki-laki', 'Surabaya', '1999-10-31', 'Jl. Kapalo Koto', '08219248239', 'TI', 'TI003'),\n('1901021015', 'Ahmad Affandi', 'laki-laki', 'Jakarta', '2001-05-31', 'Komplek Cendana No. 14 Padang', '08834212312', 'TI', 'TI002'),\n('1902011002', 'Ahmad Hariawan', 'laki-laki', 'PadangPanjang', '2001-04-15', 'Komplek griya Insani ', '0822823921', 'TM', 'TM001'),\n('1902012005', 'Rudy Hambali', 'laki-laki', 'Bukittinggi', '2003-02-22', 'Mess Polisi', '0820193123', 'TM', 'TM001'),\n('1903021002', 'Chintya Rahma Ayunani', 'perempuan', 'Padang', '2001-02-15', 'Komplek Griya Insani Pemai No. 15', '08573482391', 'TE', 'TE002'),\n('1903031011', 'Hatta Rajasa', 'laki-laki', 'Solo', '2002-10-07', 'Jalan Simpang Raja Ampat', '07519238721', 'TE', 'TE003'),\n('1904022003', 'Hariyanto', 'laki-laki', 'Klaten', '2002-02-02', 'Jl. Pisang No.11 Surakarta', '0812423212', 'TS', 'TS002'),\n('1904032024', 'Galih Wahyu', 'laki-laki', 'Surakarta', '2001-02-06', 'Jl. Kol. Ahmad Hosen No. 55 Surakarta', '+62823835531', 'TS', 'TS003'),\n('1905011003', 'Tri Wahyu Putra', 'laki-laki', 'Muarolabuh', '2001-05-23', 'Jl. Andalas No. 14 Padang', '07512352412', 'AN', 'AN001'),\n('1906021022', 'Muhammad Fajri', 'laki-laki', 'Padang', '2002-08-08', 'Jl. Bagindo Aziz Chan', '082383543241', 'AK', 'AK002'),\n('1907012029', 'Furaidah', 'perempuan', 'Malang', '2001-01-05', 'Jl. Semarang No. 5', '0341123532', 'BI', 'BI001'),\n('2001011001', 'Abdul Latif Sijabat', 'laki-laki', 'Medan', '2000-03-13', 'Jalan. Sitompul No. 15 Medan', '0823457321', 'TI', 'TI001'),\n('2001012002', 'Annisa Azzahra', 'perempuan', 'Padang', '2002-07-09', 'Jalan Jend. Sudirman, Padang', '0882392123', 'TI', 'TI003'),\n('2001012020', 'Kamado Tanjiro', 'laki-laki', 'Tohoku', '2000-02-19', 'Shibuya, Tokyo', '+0112715566', 'TI', 'TI001'),\n('2002022022', 'Michida Haruno', 'perempuan', 'Kyoto', '2003-05-31', 'Yamanashi, Hokkaido', '+81092391824', 'TM', 'TM002'),\n('2003032044', 'Rizal Mahfan At-Tirmidzi', 'laki-laki', 'Payakumbuh', '2020-01-01', 'Kompek Perumnas Indarung', '08528379842', 'TE', 'TE003'),\n('2003041055', 'Ingga Pratama', 'laki-laki', 'Padang', '2000-03-19', 'Komplek Unand Blok B', '088212314532', 'TE', 'TE004'),\n('2003042005', 'Annisa Al-Fatani', 'perempuan', 'Pasaman', '2020-01-01', 'Jalan Sebatas Kenangan', '0858923123', 'TE', 'TE004'),\n('2004041001', 'Muklis', 'laki-laki', 'Mojokerto', '2001-08-06', 'Jalan Ki Hajar Dewantara No. 11 Klaten', '0272 3322442', 'TS', 'TS004'),\n('2004042021', 'Miyanto', 'laki-laki', 'Brebes', '2000-06-19', 'Jalan Ki Hajar Dewantara No. 11 Klaten', '0272 4422131', 'TS', 'TS004'),\n('2005022021', 'Kekeyi Kaka Kekeyu', 'perempuan', 'Bukittinggi', '2005-02-06', 'Komplek Perum. Griya Indah', '0723812312', 'AN', 'AN002'),\n('2005022027', 'Jesica Iskandar', 'perempuan', 'Padang', '2020-01-01', 'Jl. Andalas No. 11', '0809223412', 'AN', 'AN001'),\n('2006011002', 'Muhammad Fauzan', 'laki-laki', 'Padang', '2003-01-01', 'Jl. Dr. Soetomo No. 5', '085492398123', 'AK', 'AK001'),\n('2006012004', 'Muhammad Faldi Dzaky', 'laki-laki', 'Padang', '2003-06-03', 'Jl. Dr. Soetomo No. 16', '085492398773', 'AK', 'AK001'),\n('2006022002', 'Muhammad Fikri', 'laki-laki', 'Padang Panjang', '1997-02-01', 'Jl. Dr. Soetomo No. 5', '92463178683', 'AK', 'AK002'),\n('2007011001', 'Zuliati Rohmah', 'perempuan', 'Surabaya', '2003-12-21', 'Jl. A Yani No. 11 Surabaya', '031849231', 'BI', 'BI001')", "description": "Creates a table named users with two columns: id (integer primary key) and name (varchar).", "concepts": ["CREATE TABLE", "INSERT INTO", "VALUES", "INSERT INTO", "VALUES", "INSERT INTO", "VALUES", "INSERT INTO", "VALUES", "INSERT INTO", "VALUES", "INSERT INTO"], "instruction": "Write a SQL query to create a table named users with two columns: id (integer primary key) and name (varchar).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the users table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Creates a table named prodi with four columns: kdjurusan (varchar), namajurusan (varchar), kdProdi (varchar), and NamaProdi (varchar). */\nCREATE TABLE `prodi` (\n  `kdjurusan` varchar(5) NOT NULL,\n  `namajurusan` varchar(30) NOT NULL,\n  `kdProdi` varchar(5) NOT NULL,\n  `NamaProdi` varchar(30) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named prodi with four columns: kdjurusan (varchar), namajurusan (varchar), kdProdi (varchar), and NamaProdi (varchar).", "concepts": ["CREATE TABLE", "VARCHAR", "NOT NULL", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named prodi with four columns: kdjurusan (varchar), namajurusan (varchar), kdProdi (varchar), and NamaProdi (varchar).", "response": "-- Reasoning:\nWe need a new table named prodi. It should have four columns:\n  \u2022 kdjurusan: varchar,\n  \u2022 namajurusan: varchar,\n  \u2022 kdProdi: varchar,\n  \u2022 NamaProdi: varchar\n\n-- Solution:\n```sql\nCREATE TABLE prodi (\n  kdjurusan VARCHAR(255),\n  namajurusan VARCHAR(255),\n  kdProdi VARCHAR(255),\n  NamaProdi VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the prodi table with four columns:\n  \u2022 kdjurusan: varchar\n  \u2022 namajurusan: varchar\n  \u2022 kdProdi: varchar\n  \u2022 NamaProdi: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('prodi');"}
{"seed": "/* Inserts 15 rows into the prodi table. */\nINSERT INTO `prodi` (`kdjurusan`, `namajurusan`, `kdProdi`, `NamaProdi`) VALUES\n('AK', 'Akuntansi', 'AK001', 'D3 Akuntansi'),\n('AK', 'Akuntansi', 'AK002', 'D4 Akuntansi'),\n('AN', 'Administrasi Niaga', 'AN001', 'D3 Administrasi Bisnis'),\n('AN', 'Administrasi Niaga', 'AN002', 'D3 Usaha Perjalanan Wisata'),\n('BI', 'Bahasa Inggris', 'BI001', 'D3 Bahasa Inggris'),\n('TE', 'Teknik Elektro', 'TE001', 'D3 Teknik Listrik'),\n('TE', 'Teknik Elektro', 'TE002', 'D3 Teknik Elektro'),\n('TE', 'Teknik Elektro', 'TE003', 'D3 Teknik Telekomunikasi'),\n('TE', 'Teknik Elektro', 'TE004', 'D4 Teknik Elektro'),\n('TE', 'Teknik Elektro', 'TE005', 'D4 Teknik Telekomunikasi'),\n('TI', 'Teknologi Informasi', 'TI001', 'D3 Teknik Komputer'),\n('TI', 'Teknologi Informasi', 'TI002', 'D3 Manajemen Informatika'),\n('TI', 'Teknologi Informasi', 'TI003', 'D4 Rekayasa Perangkat Lunak'),\n('TM', 'Teknik Mesin', 'TM001', 'D3 Teknik Mesin'),\n('TM', 'Teknik Mesin', 'TM002', 'D3 Teknik Alat Berat'),\n('TM', 'Teknik Mesin', 'TM003', 'D4 Teknik Manufaktur'),\n('TS', 'Teknik Sipil', 'TS001', 'D3 Teknik Sipil'),\n('TS', 'Teknik Sipil', 'TS002', 'D4 Perencanaan Irigasi Rawa'),\n('TS', 'Teknik Sipil', 'TS003', 'D4 Manajemen Rek. Konstruksi'),\n('TS', 'Teknik Sipil', 'TS004', 'D4 Perancangan Jalan Jembatan')", "description": "Inserts 15 rows into the prodi table.", "concepts": ["INSERT INTO", "VALUES", "CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "VARCHAR", "INT", "D3", "D4", "D3 Ak"], "instruction": "Write a SQL query to insert 15 rows into the prodi table.", "response": "-- Reasoning:\nWe need to insert 15 rows into the products table.\n\n-- Solution:\n```sql\nINSERT INTO products (product_id, name)\nVALUES (1, 'Apple'), (2, 'Banana'), (3, 'Orange'), (4, 'Pear'), (5, 'Grape'), (6, 'Strawberry'), (7, 'Blueberry'), (8, 'Peach'), (9, 'Cherry'), (10, 'Pineapple'), (11, 'Mango'), (12, 'Kiwi'), (13, 'Lemon'), (14, 'Lime'), (15, 'Coconut');\n```\n\n-- Explanation:\nThis INSERT statement inserts 15 rows into the products table.\n\n-- Tests:\n-- 1. Verify 15 rows are inserted\nSELECT * FROM products;"}
{"seed": "/* Creates a table named uangkuliah with seven columns: nopembayaran (varchar), no_bp (varchar), semester (varchar), tahunAjaran (varchar), jenispembayaran (varchar), golongan (varchar), jumlah (bigint), and tanggalpembayaran (timestamp). */\nCREATE TABLE `uangkuliah` (\n  `nopembayaran` varchar(5) NOT NULL,\n  `no_bp` varchar(10) NOT NULL,\n  `semester` varchar(2) NOT NULL,\n  `tahunAjaran` varchar(10) NOT NULL,\n  `jenispembayaran` varchar(20) NOT NULL,\n  `golongan` varchar(2) NOT NULL,\n  `jumlah` bigint(20) NOT NULL,\n  `tanggalpembayaran` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named uangkuliah with seven columns: nopembayaran (varchar), no_bp (varchar), semester (varchar), tahunAjaran (varchar), jenispembayaran (varchar), golongan (varchar), jumlah (bigint), and tanggalpembayaran (timestamp).", "concepts": ["CREATE TABLE", "VARCHAR", "BIGINT", "TIMESTAMP"], "instruction": "Write a SQL query to create a table named uangkuliah with seven columns: nopembayaran (varchar), no_bp (varchar), semester (varchar), tahunAjaran (varchar), jenispembayaran (varchar), golongan (varchar), jumlah (bigint), and tanggalpembayaran (timestamp).", "response": "-- Reasoning:\nWe need a new table named uangkuliah. It should have a primary key, a varchar column for the payment number, a varchar column for the student number, a varchar column for the semester, a varchar column for the academic year, a varchar column for the payment type, a varchar column for the student class, a bigint column for the amount, and a timestamp column for the payment date.\n\n-- Solution:\n```sql\nCREATE TABLE uangkuliah (\n  nopembayaran VARCHAR(255),\n  no_bp VARCHAR(255),\n  semester VARCHAR(255),\n  tahunAjaran VARCHAR(255),\n  jenispembayaran VARCHAR(255),\n  golongan VARCHAR(255),\n  jumlah BIGINT,\n  tanggalpembayaran TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the uangkuliah table with seven columns:\n  \u2022 nopembayaran: varchar, primary key\n  \u2022 no_bp: varchar\n  \u2022 semester: varchar\n  \u2022 tahunAjaran: varchar\n  \u2022 jenispembayaran: varchar\n  \u2022 golongan: varchar\n  \u2022 jumlah: bigint\n  \u2022 tanggalpembayaran: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('uangkuliah');"}
{"seed": "/* Inserts three rows into the uangkuliah table. */\nINSERT INTO `uangkuliah` (`nopembayaran`, `no_bp`, `semester`, `tahunAjaran`, `jenispembayaran`, `golongan`, `jumlah`, `tanggalpembayaran`) VALUES\n('NE001', '1702031033', '5', '2020/2021', 'e-Wallet', '5', 5000000, '2020-06-23 08:20:17'),\n('TB001', '1702021077', '5', '2020/2021', 'Transfer Bank', '3', 2500000, '2020-06-23 08:19:26'),\n('UK001', '2001011001', '1', '2020/2021', 'Tunai', '0', 0, '2020-06-23 00:54:45')", "description": "Inserts three rows into the uangkuliah table.", "concepts": ["INSERT INTO", "VALUES", "`uangkuliah`", "`nopembayaran`", "`no_bp`", "`semester`", "`tahunAjaran"], "instruction": "Write a SQL query to insert three rows into the uangkuliah table.", "response": "-- Reasoning:\nWe need to insert three rows into the uangkuliah table.\n\n-- Solution:\n```sql\nINSERT INTO uangkuliah (nama, nim, nilai)\nVALUES ('', '1234567890', 90),\n       ('', '1234567891', 80),\n       ('', '1234567892', 70);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the uangkuliah table:\n  \u2022  with NIM 1234567890 and score 90\n  \u2022  with NIM 1234567891 and score 80\n  \u2022  with NIM 1234567892 and score 70\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM uangkuliah;"}
{"seed": "/* Adds a primary key constraint to the mahasiswa table on the no_bp column. */\nALTER TABLE `mahasiswa`\n  ADD PRIMARY KEY (`no_bp`),\n  ADD KEY `kdJurusan`", "description": "Adds a primary key constraint to the mahasiswa table on the no_bp column.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "KEY", "KEY"], "instruction": "Write a SQL query to add a primary key constraint to the mahasiswa table on the no_bp column.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the mahasiswa table on the no_bp column. This will ensure that each student has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE mahasiswa\n  ADD PRIMARY KEY (no_bp);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the mahasiswa table on the no_bp column.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mahasiswa');"}
{"seed": "/* Adds a primary key constraint to the kdjurusan and kdProdi columns in the prodi table. */\nALTER TABLE `prodi`\n  ADD PRIMARY KEY (`kdjurusan`,`kdProdi`)", "description": "Adds a primary key constraint to the kdjurusan and kdProdi columns in the prodi table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the kdjurusan and kdProdi columns in the prodi table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the kdjurusan and kdProdi columns in the prodi table. This will ensure that each row has a unique combination of jurusan and prodi.\n\n-- Solution:\n```sql\nALTER TABLE prodi\n  ADD CONSTRAINT pk_prodi PRIMARY KEY (kdjurusan, kdProdi);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the prodi table. It ensures that each row has a unique combination of jurusan and prodi.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA table_info('prodi');"}
{"seed": "/* Adds a primary key constraint to the nopembayaran column in the uangkuliah table. */\nALTER TABLE `uangkuliah`\n  ADD PRIMARY KEY (`nopembayaran`),\n  ADD KEY `nobp`", "description": "Adds a primary key constraint to the nopembayaran column in the uangkuliah table.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "PRIMARY KEY", "KEY", "nopembayaran", "nobp"], "instruction": "Write a SQL query to add a primary key constraint to the nopembayaran column in the uangkuliah table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the nopembayaran column in the uangkuliah table. This will ensure that each row has a unique identifier and that no two rows have the same nopembayaran value.\n\n-- Solution:\n```sql\nALTER TABLE uangkuliah\n  ADD PRIMARY KEY (nopembayaran);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the nopembayaran column in the uangkuliah table.\n\n-- Tests:\n-- 1. Check primary key constraint is added\nPRAGMA table_info('uangkuliah');"}
{"seed": "/* Adds a foreign key constraint to the mahasiswa table. */\nALTER TABLE `mahasiswa`\n  ADD CONSTRAINT `mahasiswa_ibfk_1` FOREIGN KEY (`kdJurusan`,`kdProdi`) REFERENCES `prodi` (`kdjurusan`, `kdProdi`)", "description": "Adds a foreign key constraint to the mahasiswa table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to add a foreign key constraint to the mahasiswa table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the mahasiswa table. This constraint will ensure that the id_dosen column in the mahasiswa table references the id column in the dosen table.\n\n-- Solution:\n```sql\nALTER TABLE mahasiswa\n  ADD CONSTRAINT fk_dosen FOREIGN KEY (id_dosen) REFERENCES dosen(id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the mahasiswa table. The constraint ensures that the id_dosen column references the id column in the dosen table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('mahasiswa');"}
{"seed": "/* Adds a foreign key constraint to the uangkuliah table that references the no_bp column in the mahasiswa table. */\nALTER TABLE `uangkuliah`\n  ADD CONSTRAINT `uangkuliah_ibfk_1` FOREIGN KEY (`no_bp`) REFERENCES `mahasiswa` (`no_bp`)", "description": "Adds a foreign key constraint to the uangkuliah table that references the no_bp column in the mahasiswa table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to add a foreign key constraint to the uangkuliah table that references the no_bp column in the mahasiswa table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the uangkuliah table that references the no_bp column in the mahasiswa table.\n\n-- Solution:\n```sql\nALTER TABLE uangkuliah\n  ADD CONSTRAINT fk_uangkuliah_mahasiswa\n    FOREIGN KEY (no_bp)\n    REFERENCES mahasiswa (no_bp);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the uangkuliah table that references the no_bp column in the mahasiswa table.\n\n-- Tests:\n-- 1. Check foreign key constraint is added\nPRAGMA foreign_key_list('uangkuliah');"}
{"seed": "/* Selects the referencing_entity_name, referencing_desciption, referenced_database_name, referencing_schema, referencing_minor_id, referencing_class_desc, referenced_schema_name, referenced_entity_name from the sys.sql_expression_dependencies table. */\nSELECT distinct OBJECT_NAME(referencing_id) AS referencing_entity_name,   \r\n    o.type_desc AS referencing_desciption, \r\n\t--@@SERVERNAME as referenced_server_name, \r\n\tISNULL(referenced_database_name, db_name()) AS referenced_database_name, \r\n\ts.name as referencing_schema, \r\n    COALESCE(COL_NAME(referencing_id, referencing_minor_id), '(n/a)') AS referencing_minor_id,   \r\n    referencing_class_desc,  \r\n\tISNULL(referenced_schema_name, 'dbo') AS referenced_schema_name,\r\n    referenced_entity_name\r\n    --COALESCE(COL_NAME(referenced_id, referenced_minor_id), '(n/a)') AS referenced_column_name,  \r\n    --is_caller_dependent, is_ambiguous  \r\nFROM sys.sql_expression_dependencies AS sed  WITH(NOLOCK)\r\nINNER JOIN sys.objects AS o WITH(NOLOCK) ON sed.referencing_id = o.object_id  \r\ninner join sys.schemas s on o.schema_id = s.schema_id\r\nwhere o.type_desc = 'SQL_STORED_PROCEDURE' or o.type_desc = 'VIEW'", "description": "Selects the referencing_entity_name, referencing_desciption, referenced_database_name, referencing_schema, referencing_minor_id, referencing_class_desc, referenced_schema_name, referenced_entity_name from the sys.sql_expression_dependencies table.", "concepts": ["SELECT", "FROM", "WHERE", "WITH", "INNER JOIN", "ON", "AS", "COALESCE", "OBJECT_NAME", "ISNULL", "IS", "DISTINCT"], "instruction": "Write a SQL query to list the referencing_entity_name, referencing_desciption, referenced_database_name, referencing_schema, referencing_minor_id, referencing_class_desc, referenced_schema_name, referenced_entity_name from the sys.sql_expression_dependencies table.", "response": "-- Reasoning:\nWe need to list the referencing_entity_name, referencing_desciption, referenced_database_name, referencing_schema, referencing_minor_id, referencing_class_desc, referenced_schema_name, referenced_entity_name from the sys.sql_expression_dependencies table.\n\n-- Solution:\n```sql\nSELECT\n  referencing_entity_name,\n  referencing_desciption,\n  referenced_database_name,\n  referencing_schema,\n  referencing_minor_id,\n  referencing_class_desc,\n  referenced_schema_name,\n  referenced_entity_name\nFROM sys.sql_expression_dependencies;\n```\n\n-- Explanation:\nThis query lists the referencing_entity_name, referencing_desciption, referenced_database_name, referencing_schema, referencing_minor_id, referencing_class_desc, referenced_schema_name, referenced_entity_name from the sys.sql_expression_dependencies table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys.sql_expression_dependencies');"}
{"seed": "/* Inserts five rows into the objednavky table. */\nINSERT INTO objednavky (partner_id, datum)\nVALUES\n    (1, '2019-04-02 14:00:00'),\n    (2, '2019-05-23 14:00:00'),\n    (3, '2019-06-16 14:00:00'),\n    (1, '2019-07-13 14:00:00'),\n    (4, '2019-08-04 14:00:00')", "description": "Inserts five rows into the objednavky table.", "concepts": ["INSERT INTO", "VALUES", "objednavky", "partner_id", "datum"], "instruction": "Write a SQL query to insert five rows into the objednavky table.", "response": "-- Reasoning:\nWe need to insert five rows into the objednavky table.\n\n-- Solution:\n```sql\nINSERT INTO objednavky (id, cislo_objednavky, datum_objednavky, cislo_zakaznika, cislo_zbozi)\nVALUES (1, 1, '2020-01-01', 1, 1),\n       (2, 2, '2020-01-02', 2, 2),\n       (3, 3, '2020-01-03', 3, 3),\n       (4, 4, '2020-01-04', 4, 4),\n       (5, 5, '2020-01-05', 5, 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the objednavky table.\n\n-- Tests:\n-- 1. Verify five rows are inserted\nSELECT * FROM objednavky;"}
{"seed": "/* Selects all columns from the usuarios table in the projeto_cursos database. */\nSELECT * FROM projeto_cursos.usuarios", "description": "Selects all columns from the usuarios table in the projeto_cursos database.", "concepts": ["SELECT", "FROM", "usuarios"], "instruction": "Write a SQL query to select all columns from the usuarios table in the projeto_cursos database.", "response": "-- Reasoning:\nWe need to select all columns from the usuarios table in the projeto_cursos database.\n\n-- Solution:\n```sql\nSELECT * FROM usuarios;\n```\n\n-- Explanation:\nThis query selects all columns from the usuarios table in the projeto_cursos database.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('usuarios');"}
{"seed": "/* Counts the number of rows in the usuarios table. */\nSELECT COUNT(*) FROM usuarios", "description": "Counts the number of rows in the usuarios table.", "concepts": ["SELECT", "COUNT", "FROM", "usuarios"], "instruction": "Write a SQL query to count the number of rows in the usuarios table.", "response": "-- Reasoning:\nWe need to count the number of rows in the usuarios table.\n\n-- Solution:\n```sql\nSELECT COUNT(*) FROM usuarios;\n```\n\n-- Explanation:\nThis query counts the number of rows in the usuarios table.\n\n-- Tests:\n-- 1. Verify count is correct\nSELECT COUNT(*) FROM usuarios;"}
{"seed": "/* Selects the number of users with type 3 from the usuarios table. */\nSELECT COUNT(*) FROM usuarios\nWHERE tipo_usuario_fk = 3", "description": "Selects the number of users with type 3 from the usuarios table.", "concepts": ["SELECT", "COUNT", "FROM", "WHERE"], "instruction": "Write a SQL query to count the number of users with type 3 from the usuarios table.", "response": "-- Reasoning:\nWe need to count the number of users with type 3 from the usuarios table.\n\n-- Solution:\n```sql\nSELECT COUNT(*)\nFROM usuarios\nWHERE type = 3;\n```\n\n-- Explanation:\nThis query counts the number of rows in the usuarios table where the type column is equal to 3.\n\n-- Tests:\n-- 1. Verify count is correct\nSELECT COUNT(*)\nFROM usuarios\nWHERE type = 3;"}
{"seed": "/* Selects all columns from the cursos table. */\nSELECT * FROM cursos", "description": "Selects all columns from the cursos table.", "concepts": ["SELECT", "*"], "instruction": "Write a SQL query to select all columns from the cursos table.", "response": "-- Reasoning:\nWe need to select all columns from the cursos table.\n\n-- Solution:\n```sql\nSELECT * FROM cursos;\n```\n\n-- Explanation:\nThis query selects all columns from the cursos table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM cursos;"}
{"seed": "/* Selects the average price of all courses from the cursos table. */\nSELECT AVG(preco)\nFROM cursos", "description": "Selects the average price of all courses from the cursos table.", "concepts": ["SELECT", "AVG", "FROM"], "instruction": "Write a SQL query to select the average price of all courses from the cursos table.", "response": "-- Reasoning:\nWe need to find the average price of all courses.\n\n-- Solution:\n```sql\nSELECT AVG(price)\nFROM cursos;\n```\n\n-- Explanation:\nThis query calculates the average price of all courses in the cursos table.\n\n-- Tests:\n-- 1. Verify average price is correct\nSELECT AVG(price)\nFROM cursos;"}
{"seed": "/* Selects the minimum price from the cursos table. */\nSELECT MIN(preco)\nFROM cursos", "description": "Selects the minimum price from the cursos table.", "concepts": ["SELECT", "MIN", "FROM", "INT"], "instruction": "Write a SQL query to select the minimum price from the cursos table.", "response": "-- Reasoning:\nWe need to find the minimum price from the cursos table.\n\n-- Solution:\n```sql\nSELECT MIN(price)\nFROM cursos;\n```\n\n-- Explanation:\nThis query returns the minimum price from the cursos table.\n\n-- Tests:\n-- 1. Verify the minimum price is 100\nSELECT MIN(price)\nFROM cursos;"}
{"seed": "/* Selects the maximum price of all courses from the cursos table. */\nSELECT MAX(preco)\nFROM cursos", "description": "Selects the maximum price of all courses from the cursos table.", "concepts": ["SELECT", "MAX", "FROM"], "instruction": "Write a SQL query to select the maximum price of all courses from the cursos table.", "response": "-- Reasoning:\nWe need to find the maximum price of all courses.\n\n-- Solution:\n```sql\nSELECT MAX(price)\nFROM cursos;\n```\n\n-- Explanation:\nThis query selects the maximum price from the cursos table.\n\n-- Tests:\n-- 1. Verify the maximum price is correct\nSELECT MAX(price)\nFROM cursos;"}
{"seed": "/* Selects the sum of the preco column from the cursos table. */\nSELECT SUM(preco)\nFROM cursos", "description": "Selects the sum of the preco column from the cursos table.", "concepts": ["SELECT", "SUM", "FROM"], "instruction": "Write a SQL query to select the sum of the preco column from the cursos table.", "response": "-- Reasoning:\nWe need to select the sum of the preco column from the cursos table.\n\n-- Solution:\n```sql\nSELECT SUM(preco) FROM cursos;\n```\n\n-- Explanation:\nThis query returns the sum of the preco column from the cursos table.\n\n-- Tests:\n-- 1. Verify the sum of the preco column\nSELECT SUM(preco) FROM cursos;"}
{"seed": "/* Selects the minimum, maximum, sum, and average price of all courses. */\nSELECT MIN(preco), MAX(preco), SUM(preco), AVG(preco)\nFROM cursos", "description": "Selects the minimum, maximum, sum, and average price of all courses.", "concepts": ["MIN", "MAX", "SUM", "AVG"], "instruction": "Write a SQL query to select the minimum, maximum, sum, and average price of all courses.", "response": "-- Reasoning:\nWe need to find the minimum, maximum, sum, and average price of all courses.\n\n-- Solution:\n```sql\nSELECT\n  MIN(price) AS min_price,\n  MAX(price) AS max_price,\n  SUM(price) AS total_price,\n  AVG(price) AS average_price\nFROM courses;\n```\n\n-- Explanation:\nThis query uses the MIN, MAX, SUM, and AVG functions to calculate the minimum, maximum, sum, and average price of all courses.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT\n  MIN(price) AS min_price,\n  MAX(price) AS max_price,\n  SUM(price) AS total_price,\n  AVG(price) AS average_price\nFROM courses;"}
{"seed": "/* Selects the minimum, maximum, average, and sum of the price column from the cursos table. */\nSELECT /* com ALIAS, renomeia os nomes na coluna*/\nMIN(preco) AS 'minimo', \nMAX(preco) AS 'm\u00e1ximo',\nAVG(preco) AS 'm\u00e9dia',\nSUM(preco) AS 'soma'\nFROM cursos", "description": "Selects the minimum, maximum, average, and sum of the price column from the cursos table.", "concepts": ["SELECT", "MIN", "MAX", "AVG", "SUM"], "instruction": "Write a SQL query to select the minimum, maximum, average, and sum of the price column from the cursos table.", "response": "-- Reasoning:\nWe need to select the minimum, maximum, average, and sum of the price column from the cursos table.\n\n-- Solution:\n```sql\nSELECT\n  MIN(price),\n  MAX(price),\n  AVG(price),\n  SUM(price)\nFROM cursos;\n```\n\n-- Explanation:\nThis query selects the minimum, maximum, average, and sum of the price column from the cursos table.\n\n-- Tests:\n-- 1. Verify the results are correct\nSELECT\n  MIN(price),\n  MAX(price),\n  AVG(price),\n  SUM(price)\nFROM cursos;"}
{"seed": "/* Counts the number of users for each type of user. */\nSELECT tipo_usuario_fk, COUNT(*)\nFROM usuarios\nGROUP BY tipo_usuario_fk", "description": "Counts the number of users for each type of user.", "concepts": ["SELECT", "COUNT", "GROUP BY", "FROM", "usuarios", "tipo_usuario_fk"], "instruction": "Write a SQL query to count the number of users for each type of user.", "response": "-- Reasoning:\nWe need to count the number of users for each type of user.\n\n-- Solution:\n```sql\nSELECT type, COUNT(*) AS count\nFROM users\nGROUP BY type;\n```\n\n-- Explanation:\nThis query uses the GROUP BY clause to group the users by type and count the number of users in each group.\n\n-- Tests:\n-- 1. Verify the query returns the correct result\nSELECT type, COUNT(*) AS count\nFROM users\nGROUP BY type;"}
{"seed": "/* Selects the tipo_usuari_fk column from the usuarios table. */\nSELECT tipo_usuari_fk FROM usuarios", "description": "Selects the tipo_usuari_fk column from the usuarios table.", "concepts": ["SELECT", "FROM", "tipo_usuari_fk"], "instruction": "Write a SQL query to select the tipo_usuari_fk column from the usuarios table.", "response": "-- Reasoning:\nWe need to select the tipo_usuari_fk column from the usuarios table.\n\n-- Solution:\n```sql\nSELECT tipo_usuari_fk\nFROM usuarios;\n```\n\n-- Explanation:\nThis query selects the tipo_usuari_fk column from the usuarios table.\n\n-- Tests:\n-- 1. Verify column exists and has correct data type\nPRAGMA table_info('usuarios');"}
{"seed": "/* Selects the name of the user and the type of the user from the users table and the type_user table. */\nSELECT u.nome AS usuario, t.nome AS tipo\nFROM usuarios AS u\nINNER JOIN tipo_usuario AS t\nON u.tipo_usuario_fk = t.id_tipo_usuario", "description": "Selects the name of the user and the type of the user from the users table and the type_user table.", "concepts": ["SELECT", "AS", "INNER JOIN", "ON"], "instruction": "Write a SQL query to select the name of the user and the type of the user from the users table and the type_user table.", "response": "-- Reasoning:\nWe need to select the name of the user and the type of the user from the users table and the type_user table.\n\n-- Solution:\n```sql\nSELECT u.name, tu.type_user\nFROM users u\nINNER JOIN type_user tu\nON u.type_user_id = tu.type_user_id;\n```\n\n-- Explanation:\nThis query joins the users table with the type_user table on the type_user_id column. It then selects the name and type_user columns from the joined table.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT * FROM users;"}
{"seed": "/* Selects the name and type of all users from the users table. */\nSELECT usuarios.nome , tipo_usuario.nome\nFROM usuarios\nINNER JOIN tipo_usuario\nON usuarios.tipo_usuario_fk = tipo_usuario.id_tipo_usuario", "description": "Selects the name and type of all users from the users table.", "concepts": ["SELECT", "FROM", "INNER JOIN", "ON", "usuarios", "tipo_usuario", "nome", "tipo_usuario_fk", "id_tipo_usuario"], "instruction": "Write a SQL query to list the name and type of all users from the users table.", "response": "-- Reasoning:\nWe need to list the name and type of all users from the users table.\n\n-- Solution:\n```sql\nSELECT name, type FROM users;\n```\n\n-- Explanation:\nThis query selects the name and type columns from the users table.\n\n-- Tests:\n-- 1. Verify query returns correct results\nSELECT name, type FROM users;"}
{"seed": "/* Selects the name of the course and the name of the teacher for all courses from the cursos table. */\nSELECT c.nome AS curso , u.nome AS professor\nFROM cursos AS c\nINNER JOIN usuarios AS u\nON c.professor_fk = u.id_usuario", "description": "Selects the name of the course and the name of the teacher for all courses from the cursos table.", "concepts": ["SELECT", "AS", "INNER JOIN", "ON"], "instruction": "Write a SQL query to list the name of the course and the name of the teacher for all courses from the cursos table.", "response": "-- Reasoning:\nWe need to list the name of the course and the name of the teacher for all courses from the cursos table.\n\n-- Solution:\n```sql\nSELECT\n  c.name AS course,\n  t.name AS teacher\nFROM cursos c\nJOIN teachers t ON c.teacher_id = t.id;\n```\n\n-- Explanation:\nThis query joins the cursos table with the teachers table on the teacher_id column. It then selects the name columns from both tables and aliases them as course and teacher.\n\n-- Tests:\n-- 1. Verify the output is correct\nSELECT\n  c.name AS course,\n  t.name AS teacher\nFROM cursos c\nJOIN teachers t ON c.teacher_id = t.id;"}
{"seed": "/* Inserts a new row into the cursos table with the given values. */\nINSERT INTO cursos (nome, descricao, preco, tag, image)\nVALUES\n('Drinks Maneiros',\n'Aprenda a fazer drinks sensacionais',\n3000,\n'drinks',\n'happyhour.png')", "description": "Inserts a new row into the cursos table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the cursos table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the cursos table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO cursos (nome, descricao, carga, totaulas, ano)\nVALUES ('Algoritmos', 'L\u00f3gica de Programa\u00e7\u00e3o', 40, 32, 2018);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the cursos table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM cursos;"}
{"seed": "/* Selects the name of the course and the name of the teacher for all courses from the cursos table. The LEFT JOIN clause is used to include all courses, even if they have no teacher. */\nSELECT cursos.nome AS cursos, usuarios.nome AS professor\nFROM cursos\nLEFT JOIN usuarios\nON cursos.professor_fk = usuarios.id_usuario", "description": "Selects the name of the course and the name of the teacher for all courses from the cursos table. The LEFT JOIN clause is used to include all courses, even if they have no teacher.", "concepts": ["SELECT", "AS", "FROM", "LEFT JOIN", "ON"], "instruction": "Write a SQL query to list the name of the course and the name of the teacher for all courses from the cursos table. The LEFT JOIN clause is used to include all courses, even if they have no teacher.", "response": "-- Reasoning:\nWe need to list the name of the course and the name of the teacher for all courses from the cursos table. The LEFT JOIN clause is used to include all courses, even if they have no teacher.\n\n-- Solution:\n```sql\nSELECT c.name AS course, t.name AS teacher\nFROM cursos AS c\nLEFT JOIN teachers AS t\nON c.teacher_id = t.id;\n```\n\n-- Explanation:\nThis query uses a LEFT JOIN to include all courses, even if they have no teacher.\n\n-- Tests:\n-- 1. Verify the output is correct\nSELECT * FROM cursos;"}
{"seed": "/* Selects the name of the course and the name of the teacher for all courses from the cursos table, and the name of the teacher for all teachers from the usuarios table. */\nSELECT cursos.nome AS cursos, usuarios.nome AS professor\nFROM cursos\nRIGHT JOIN usuarios\nON cursos.professor_fk = usuarios.id_usuario", "description": "Selects the name of the course and the name of the teacher for all courses from the cursos table, and the name of the teacher for all teachers from the usuarios table.", "concepts": ["SELECT", "AS", "FROM", "RIGHT JOIN", "ON"], "instruction": "Write a SQL query to list the name of the course and the name of the teacher for all courses from the cursos table, and the name of the teacher for all teachers from the usuarios table.", "response": "-- Reasoning:\nWe need to list the name of the course and the name of the teacher for all courses from the cursos table, and the name of the teacher for all teachers from the usuarios table.\n\n-- Solution:\n```sql\nSELECT\n  cursos.nombre AS course_name,\n  usuarios.nombre AS teacher_name\nFROM cursos\nINNER JOIN usuarios\n  ON cursos.id_usuario = usuarios.id;\n```\n\n-- Explanation:\nThis query joins the cursos and usuarios tables on the id_usuario column, and selects the course_name and teacher_name columns from both tables.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT\n  cursos.nombre AS course_name,\n  usuarios.nombre AS teacher_name\nFROM cursos\nINNER JOIN usuarios\n  ON cursos.id_usuario = usuarios.id;"}
{"seed": "/* Selects the first_name and last_name of all employees from the employees table and renames the columns to First Name and Last Name. */\nSELECT first_name as 'First Name', last_name as 'Last Name' from employees", "description": "Selects the first_name and last_name of all employees from the employees table and renames the columns to First Name and Last Name.", "concepts": ["SELECT", "AS", "FROM", "employees"], "instruction": "Write a SQL query to list the first_name and last_name of all employees from the employees table and rename the columns to First Name and Last Name.", "response": "-- Reasoning:\nWe need to list the first_name and last_name of all employees from the employees table.\n\n-- Solution:\n```sql\nSELECT first_name AS \"First Name\", last_name AS \"Last Name\"\nFROM employees;\n```\n\n-- Explanation:\nThis query selects the first_name and last_name columns from the employees table and renames them to First Name and Last Name.\n\n-- Tests:\n-- 1. Verify columns are renamed\nPRAGMA table_info('employees');"}
{"seed": "/* Selects all columns from the employees table where the department_id is 50. */\nSELECT * FROM employees WHERE department_id=50", "description": "Selects all columns from the employees table where the department_id is 50.", "concepts": ["SELECT", "FROM", "WHERE", "department_id"], "instruction": "Write a SQL query to select all columns from the employees table where the department_id is 50.", "response": "-- Reasoning:\nWe need to select all columns from the employees table where the department_id is 50.\n\n-- Solution:\n```sql\nSELECT * FROM employees WHERE department_id = 50;\n```\n\n-- Explanation:\nThis query selects all columns from the employees table where the department_id is 50.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT * FROM employees WHERE department_id = 50;"}
{"seed": "/* Selects all columns from the employees table and orders the results by first_name in descending order. */\nSELECT * FROM employees ORDER BY first_name DESC", "description": "Selects all columns from the employees table and orders the results by first_name in descending order.", "concepts": ["SELECT", "ORDER BY", "DESC"], "instruction": "Write a SQL query to select all columns from the employees table and order the results by first_name in descending order.", "response": "-- Reasoning:\nWe need to select all columns from the employees table and order the results by first_name in descending order.\n\n-- Solution:\n```sql\nSELECT * FROM employees ORDER BY first_name DESC;\n```\n\n-- Explanation:\nThis query selects all columns from the employees table and orders the results by first_name in descending order.\n\n-- Tests:\n-- 1. Verify results are ordered by first_name in descending order\nSELECT * FROM employees ORDER BY first_name DESC;"}
{"seed": "/* Selects the first_name, last_name, and salary of all employees from the employees table, and also calculates the PF (12% of salary) for each employee. */\nSELECT first_name, last_name, salary, salary*0.12 as PF FROM employees", "description": "Selects the first_name, last_name, and salary of all employees from the employees table, and also calculates the PF (12% of salary) for each employee.", "concepts": ["SELECT", "FROM", "AS", "employees"], "instruction": "Write a SQL query to list the first_name, last_name, and salary of all employees from the employees table, and also calculates the PF (12% of salary) for each employee.", "response": "-- Reasoning:\nWe need to list the first_name, last_name, and salary of all employees from the employees table, and also calculates the PF (12% of salary) for each employee.\n\n-- Solution:\n```sql\nSELECT first_name, last_name, salary, salary * 0.12 AS PF\nFROM employees;\n```\n\n-- Explanation:\nThis query selects the first_name, last_name, and salary of all employees from the employees table, and also calculates the PF (12% of salary) for each employee.\n\n-- Tests:\n-- 1. Verify the output is correct\nSELECT first_name, last_name, salary, salary * 0.12 AS PF\nFROM employees;"}
{"seed": "/* Selects the minimum and maximum salary from the employees table. */\nSELECT MIN(salary) as MIN, MAX(salary) as MAX FROM employees", "description": "Selects the minimum and maximum salary from the employees table.", "concepts": ["SELECT", "MIN", "MAX", "FROM", "employees"], "instruction": "Write a SQL query to find the minimum and maximum salary from the employees table.", "response": "-- Reasoning:\nWe need to find the minimum and maximum salary from the employees table.\n\n-- Solution:\n```sql\nSELECT MIN(salary), MAX(salary)\nFROM employees;\n```\n\n-- Explanation:\nThis query uses the MIN and MAX functions to find the minimum and maximum salaries in the employees table.\n\n-- Tests:\n-- 1. Verify the correct values are returned\nSELECT MIN(salary), MAX(salary)\nFROM employees;"}
{"seed": "/* Selects the first_name, last_name, and salary columns from the employees table and renames the salary column to Monthly Salary. */\nSELECT first_name as 'First Name', last_name as 'Last Name', round(salary/12, 2) as 'Monthly Salary' FROM employees", "description": "Selects the first_name, last_name, and salary columns from the employees table and renames the salary column to Monthly Salary.", "concepts": ["SELECT", "AS", "FROM", "employees", "round", "salary", "First Name", "Last Name", "Monthly Salary"], "instruction": "Write a SQL query to select the first_name, last_name, and salary columns from the employees table and rename the salary column to Monthly Salary.", "response": "-- Reasoning:\nWe need to select the first_name, last_name, and salary columns from the employees table. We also want to rename the salary column to Monthly Salary.\n\n-- Solution:\n```sql\nSELECT first_name, last_name, salary AS \"Monthly Salary\"\nFROM employees;\n```\n\n-- Explanation:\nThis query selects the first_name, last_name, and salary columns from the employees table and renames the salary column to Monthly Salary.\n\n-- Tests:\n-- 1. Verify column names and data types are correct\nPRAGMA table_info('employees');"}
{"seed": "/* Creates a database named absensi_karyawan if it does not already exist. */\nCREATE DATABASE IF NOT EXISTS `absensi_karyawan` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci", "description": "Creates a database named absensi_karyawan if it does not already exist.", "concepts": ["CREATE DATABASE", "IF", "NOT", "EXISTS", "DEFAULT", "CHARACTER", "COLLATE"], "instruction": "Write a SQL query to create a database named absensi_karyawan if it does not already exist.", "response": "-- Reasoning:\nWe need to create a database named absensi_karyawan if it does not already exist.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS absensi_karyawan;\n```\n\n-- Explanation:\nThis statement creates a database named absensi_karyawan if it does not already exist.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named absensi with three columns: nma (varchar), tgl (varchar), and ktr (varchar). */\nCREATE TABLE IF NOT EXISTS `absensi` (\n  `nma` varchar(50) NOT NULL,\n  `tgl` varchar(50) NOT NULL,\n  `ktr` varchar(50) NOT NULL,\n  PRIMARY KEY (`nma`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named absensi with three columns: nma (varchar), tgl (varchar), and ktr (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "PRIMARY KEY", "VARCHAR", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named absensi with three columns: nma (varchar), tgl (varchar), and ktr (varchar).", "response": "-- Reasoning:\nWe need a new table named absensi. It should have three columns:\n  \u2022 nma: variable\u2010length string up to 255 characters\n  \u2022 tgl: variable\u2010length string up to 255 characters\n  \u2022 ktr: variable\u2010length string up to 255 characters\n\n-- Solution:\n```sql\nCREATE TABLE absensi (\n  nma VARCHAR(255),\n  tgl VARCHAR(255),\n  ktr VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the absensi table with three columns:\n  \u2022 nma: variable\u2010length string up to 255 characters\n  \u2022 tgl: variable\u2010length string up to 255 characters\n  \u2022 ktr: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('absensi');"}
{"seed": "/* Inserts four rows into the absensi table. */\nINSERT INTO `absensi` (`nma`, `tgl`, `ktr`) VALUES\n('Ari', '17/07/2017', 'hadir'),\n('heru', '17/07/2017', 'hadir'),\n('m.fauzi', '17/07/2017', 'hadir'),\n('Tedja', '17/07/2017', 'hadir')", "description": "Inserts four rows into the absensi table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert four rows into the absensi table.", "response": "-- Reasoning:\nWe need to insert four rows into the absensi table.\n\n-- Solution:\n```sql\nINSERT INTO absensi (id_absensi, id_pegawai, id_shift, id_absen, tanggal, jam_masuk, jam_pulang)\nVALUES (1, 1, 1, 1, '2020-01-01', '08:00:00', '17:00:00'),\n       (2, 2, 2, 2, '2020-01-01', '08:00:00', '17:00:00'),\n       (3, 3, 3, 3, '2020-01-01', '08:00:00', '17:00:00'),\n       (4, 4, 4, 4, '2020-01-01', '08:00:00', '17:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the absensi table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM absensi;"}
{"seed": "/* Creates a table named login with three columns: id_pegawai (integer primary key), username (varchar), password (varchar), and level (enum). */\nCREATE TABLE IF NOT EXISTS `login` (\n  `id_pegawai` int(30) NOT NULL AUTO_INCREMENT,\n  `username` varchar(50) NOT NULL,\n  `password` varchar(50) NOT NULL,\n  `level` enum('admin','karyawan','','') NOT NULL,\n  PRIMARY KEY (`id_pegawai`,`password`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named login with three columns: id_pegawai (integer primary key), username (varchar), password (varchar), and level (enum).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "ENUM"], "instruction": "Write a SQL query to create a table named login with three columns: id_pegawai (integer primary key), username (varchar), password (varchar), and level (enum).", "response": "-- Reasoning:\nWe need a new table named login. It should have an integer primary key so that each login has a unique identifier, and a username and password column to store the user\u2019s credentials.\n\n-- Solution:\n```sql\nCREATE TABLE login (\n  id_pegawai INT PRIMARY KEY,\n  username VARCHAR(255),\n  password VARCHAR(255),\n  level ENUM('admin', 'user')\n);\n```\n\n-- Explanation:\nThis statement defines the login table with three columns:\n  \u2022 id_pegawai: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 level: enumerated value of either admin or user\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('login');"}
{"seed": "/* Drops the database named bamazon_db if it exists. */\nDROP DATABASE IF EXISTS bamazon_db", "description": "Drops the database named bamazon_db if it exists.", "concepts": ["DROP DATABASE"], "instruction": "Write a SQL query to drop the database named bamazon_db if it exists.", "response": "-- Reasoning:\nWe need to drop the database named bamazon_db if it exists.\n\n-- Solution:\n```sql\nDROP DATABASE IF EXISTS bamazon_db;\n```\n\n-- Explanation:\nThis DROP statement drops the database named bamazon_db if it exists.\n\n-- Tests:\n-- 1. Verify database is dropped\nSHOW DATABASES;"}
{"seed": "/* Creates a database named bamazon_db. */\nCREATE DATABASE bamazon_db", "description": "Creates a database named bamazon_db.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named bamazon_db.", "response": "-- Reasoning:\nWe need to create a new database named bamazon_db.\n\n-- Solution:\n```sql\nCREATE DATABASE bamazon_db;\n```\n\n-- Explanation:\nThis statement creates a new database named bamazon_db.\n\n-- Tests:\n-- 1. Verify database exists\nSHOW DATABASES;"}
{"seed": "/* Creates a table named products with five columns: item_id (integer primary key), product_name (varchar), department_name (varchar), price (decimal), and stock_quantity (integer). */\nCREATE TABLE products (\n  item_id INT NOT NULL AUTO_INCREMENT,\n  product_name VARCHAR(45) NOT NULL,\n  department_name VARCHAR(50) NOT NULL\n  price DECIMAL(10,2) NOT NULL,\n  stock_quantity INT NOT NULL,\n  PRIMARY KEY (item_id)\n)", "description": "Creates a table named products with five columns: item_id (integer primary key), product_name (varchar), department_name (varchar), price (decimal), and stock_quantity (integer).", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DECIMAL", "NOT NULL", "INT", "NOT NULL"], "instruction": "Write a SQL query to create a table named products with five columns: item_id (integer primary key), product_name (varchar), department_name (varchar), price (decimal), and stock_quantity (integer).", "response": "-- Reasoning:\nWe need a new table named products. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE products (\n  item_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  department_name VARCHAR(255),\n  price DECIMAL,\n  stock_quantity INT\n);\n```\n\n-- Explanation:\nThis statement defines the products table with five columns:\n  \u2022 item_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 product_name: variable\u2010length string up to 255 characters\n  \u2022 department_name: variable\u2010length string up to 255 characters\n  \u2022 price: decimal number\n  \u2022 stock_quantity: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('products');"}
{"seed": "/* Inserts a new product into the products table with the given values. */\nINSERT INTO products (product_name, department_name, price, stock_quantity)\nVALUES (\"Iphone X\", \"Electronics\", 925.50, 10)", "description": "Inserts a new product into the products table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new product into the products table with the given values.", "response": "-- Reasoning:\nWe need to insert a new product into the products table. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO products (product_id, name)\nVALUES (1, 'iPhone');\n```\n\n-- Explanation:\nThis statement inserts a new row into the products table with the given values:\n  \u2022 product_id: 1\n  \u2022 name: 'iPhone'\n\n-- Tests:\n-- 1. Verify new product appears in table\nSELECT * FROM products;"}
{"seed": "/* Selects the model name and the number of orders for each model from the FactZamowienia table. The model name is selected from the Dim_Modele table. The query uses the OFFSET and FETCH NEXT clauses to select the top half of the models based on the number of orders. */\nSELECT sdm.Mod_Nazwa, SUM(fz.Ilosc) AS Ile_szt_Zamowien\nFROM FactZamowienia fz WITH (READUNCOMMITTED)\nINNER JOIN Salon.Dim_Modele sdm WITH (READUNCOMMITTED) ON sdm.Mod_Id = fz.Mod_Id \nGROUP BY sdm.Mod_Nazwa\nORDER BY SUM(fz.Ilosc) DESC\nOFFSET (SELECT Count(*) FROM Salon.Dim_Modele)/2  ROWS \nFETCH NEXT (SELECT Count(*) FROM Salon.Dim_Modele)/2", "description": "Selects the model name and the number of orders for each model from the FactZamowienia table. The model name is selected from the Dim_Modele table. The query uses the OFFSET and FETCH NEXT clauses to select the top half of the models based on the number of orders.", "concepts": ["SELECT", "FROM", "INNER JOIN", "ON", "GROUP BY", "ORDER BY", "OFFSET", "FETCH NEXT", "WITH", "READUNCOMMITTED", "COUNT", "SUM"], "instruction": "Write a SQL query to list the model name and the number of orders for each model from the FactZamowienia table, grouped by model, and sorted from highest to lowest. The model name is selected from the Dim_Modele table. The query uses the OFFSET and FETCH NEXT clauses to select the top half of the models based on the number of orders.", "response": "-- Reasoning:\nWe need to list the model name and the number of orders for each model from the FactZamowienia table, grouped by model, and sorted from highest to lowest. The model name is selected from the Dim_Modele table. The query uses the OFFSET and FETCH NEXT clauses to select the top half of the models based on the number of orders.\n\n-- Solution:\n```sql\nSELECT\n  model_name,\n  COUNT(order_id) AS order_count\nFROM\n  FactZamowienia\n  INNER JOIN Dim_Modele\n    ON FactZamowienia.model_id = Dim_Modele.model_id\nGROUP BY\n  model_name\nORDER BY\n  order_count DESC\nOFFSET 0 ROWS\nFETCH NEXT 50 PERCENT ROWS ONLY;\n```\n\n-- Explanation:\nThis query uses the OFFSET and FETCH NEXT clauses to select the top half of the models based on the number of orders.\n\n-- Tests:\n-- 1. Verify the query returns the correct number of rows\nSELECT COUNT(*) FROM (\n  SELECT\n    model_name,\n    COUNT(order_id) AS order_count\n  FROM\n    FactZamowienia\n    INNER JOIN Dim_Modele\n      ON FactZamowienia.model_id = Dim_Modele.model_id\n  GROUP BY\n    model_name\n  ORDER BY\n    order_"}
{"seed": "/* Drops the table named personnel if it exists. */\nDROP TABLE IF EXISTS `personnel`", "description": "Drops the table named personnel if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named personnel if it exists.", "response": "-- Reasoning:\nWe need to delete the table named personnel if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS personnel;\n```\n\n-- Explanation:\nThis statement deletes the table named personnel if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('personnel');"}
{"seed": "/* Sets the client character set to utf8mb4. */\nSET character_set_client = utf8mb4", "description": "Sets the client character set to utf8mb4.", "concepts": ["SET", "character_set_client", "utf8mb4"], "instruction": "Write a SQL query to set the client character set to utf8mb4.", "response": "-- Reasoning:\nWe need to change the client character set to utf8mb4. This is a standard character set that supports emojis and other special characters.\n\n-- Solution:\n```sql\nSET NAMES utf8mb4;\n```\n\n-- Explanation:\nThis SET statement changes the client character set to utf8mb4.\n\n-- Tests:\n-- 1. Verify character set is utf8mb4\nSELECT @@character_set_client;"}
{"seed": "/* Creates a table named personnel with 10 columns: id (integer primary key), personnel_name (varchar), personnel_sex (int), personnel_phone (varchar), personnel_idnum (varchar), depart_id (int), restaurant_id (int), personnel_date (varchar). */\nCREATE TABLE `personnel` (\n  `id` int(5) NOT NULL AUTO_INCREMENT,\n  `personnel_name` varchar(20) NOT NULL COMMENT '\u8ba2\u9910\u4eba\u59d3\u540d',\n  `personnel_sex` int(2) DEFAULT NULL COMMENT '\u8ba2\u9910\u4eba\u6027\u522b',\n  `personnel_phone` varchar(20) NOT NULL COMMENT '\u8ba2\u9910\u4eba\u7535\u8bdd',\n  `personnel_idnum` varchar(20) DEFAULT NULL COMMENT '\u8ba2\u9910\u4eba\u8eab\u4efd\u8bc1\u53f7',\n  `depart_id` int(5) DEFAULT NULL COMMENT '\u5916\u952e\uff1a\u6240\u5c5e\u90e8\u95e8',\n  `restaurant_id` int(5) DEFAULT NULL COMMENT '\u5916\u952e\uff1a\u8ba2\u9910\u9910\u5385',\n  `personnel_date` varchar(20) NOT NULL COMMENT '\u521b\u5efa\u65f6\u95f4',\n  PRIMARY KEY (`id`),\n  KEY `depart_id` (`depart_id`),\n  KEY `restaurant_id` (`restaurant_id`),\n  CONSTRAINT `personnel_ibfk_1` FOREIGN KEY (`depart_id`) REFERENCES `depart` (`id`),\n  CONSTRAINT `personnel_ibfk_2` FOREIGN KEY (`restaurant_id`) REFERENCES `restaurant` (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named personnel with 10 columns: id (integer primary key), personnel_name (varchar), personnel_sex (int), personnel_phone (varchar), personnel_idnum (varchar), depart_id (int), restaurant_id (int), personnel_date (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "COMMENT", "VARCHAR", "INT", "DEFAULT", "KEY", "REFERENCES", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named personnel with 10 columns: id (integer primary key), personnel_name (varchar), personnel_sex (int), personnel_phone (varchar), personnel_idnum (varchar), depart_id (int), restaurant_id (int), personnel_date (varchar).", "response": "-- Reasoning:\nWe need a new table named personnel. It should have an integer primary key so that each personnel has a unique identifier, and a name column to store the personnel\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE personnel (\n  id INT PRIMARY KEY,\n  personnel_name VARCHAR(255),\n  personnel_sex INT,\n  personnel_phone VARCHAR(255),\n  personnel_idnum VARCHAR(255),\n  depart_id INT,\n  restaurant_id INT,\n  personnel_date VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the personnel table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 personnel_name: variable\u2010length string up to 255 characters\n  \u2022 personnel_sex: integer\n  \u2022 personnel_phone: variable\u2010length string up to 255 characters\n  \u2022 personnel_idnum: variable\u2010length string up to 255 characters\n  \u2022 depart_id: integer\n  \u2022 restaurant_id: integer\n  \u2022 personnel_date: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('personnel');"}
{"seed": "/* Inserts 12 rows into the personnel table. */\nINSERT INTO `personnel` VALUES (1,'\u5f20\u4e09',1,'17863606234','341221199702197681',2,1,'2019-05-01'),(2,'\u674e\u56db',1,'17863636234','341221199202197681',2,1,'2019-02-01'),(3,'\u5f20\u6653\u5e86',1,'17863306234','341221199752197681',2,1,'2019-05-02'),(4,'\u5f20\u5e86',1,'17863301234','341221199752197981',2,1,'2009-05-02'),(5,'\u5f20\u6653',1,'17863316234','341221199752197681',2,1,'2019-01-02'),(6,'\u738b\u4e94',0,'17863312234','341291199752197681',2,1,'2010-01-02'),(7,'\u5f20\u519b',0,'17863311234','341291109752197681',2,1,'2000-01-02'),(8,'\u5218\u585e\u65af',0,'17863911234','341291107752197681',2,1,'2012-01-02'),(9,'\u5218\u65af',1,'17863211234','341291197752197681',2,1,'2012-12-02'),(10,'\u5218\u4e8c',0,'17863293234','341291197707597681',2,1,'2013-12-02'),(11,'\u5218\u4e09',1,'17863223234','341293397707597681',2,1,'2014-12-02'),(12,'\u5f20\u4e09',1,'17863606234','341221199702197681',2,2,'2019-11-01'),(13,'\u674e\u56db',1,'17863636234','341221199202197681',2,3,'2019-05-08'),(17,'\u96f6\u96f6',1,'17863606765',NULL,26,4,'2019-05-09'),(18,'\u5f20\u6653\u5e86',1,'17863306234','341221199752197681',2,1,'2019-05-09'),(19,'\u96f6\u96f6',1,'17863606765',NULL,26,5,'2019-05-09'),(20,'\u6b23\u5c0f\u840c',3,'17863676912',NULL,26,5,'2019-05-09'),(21,'\u4e8c\u4e09',0,'13034596799','9876543',2,2,'2019-05-11')", "description": "Inserts 12 rows into the personnel table.", "concepts": ["INSERT INTO", "VALUES", "personnel", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "window functions", "CTE", "UNION", "HAV"], "instruction": "Write a SQL query to insert 12 rows into the personnel table.", "response": "-- Reasoning:\nWe need to insert 12 rows into the personnel table.\n\n-- Solution:\n```sql\nINSERT INTO personnel (id, name) VALUES\n  (1, ''),\n  (2, ''),\n  (3, ''),\n  (4, ''),\n  (5, ''),\n  (6, ''),\n  (7, ''),\n  (8, ''),\n  (9, ''),\n  (10, ''),\n  (11, ''),\n  (12, '');\n```\n\n-- Explanation:\nThis INSERT statement inserts 12 rows into the personnel table.\n\n-- Tests:\n-- 1. Verify 12 rows are inserted\nSELECT * FROM personnel;"}
{"seed": "/* Selects the action_id of all actions in the oa_flow_wfaction table where the def_id is equal to new_def_id. */\nselect action_id from oa_flow_wfaction where def_id = new_def_id", "description": "Selects the action_id of all actions in the oa_flow_wfaction table where the def_id is equal to new_def_id.", "concepts": ["select", "from", "where"], "instruction": "Write a SQL query to select the action_id of all actions in the oa_flow_wfaction table where the def_id is equal to new_def_id.", "response": "-- Reasoning:\nWe need to select the action_id of all actions in the oa_flow_wfaction table where the def_id is equal to new_def_id.\n\n-- Solution:\n```sql\nSELECT action_id\nFROM oa_flow_wfaction\nWHERE def_id = 'new_def_id';\n```\n\n-- Explanation:\nThis query selects the action_id column from the oa_flow_wfaction table where the def_id column is equal to new_def_id.\n\n-- Tests:\n-- 1. Verify the correct action_id is returned\nSELECT action_id\nFROM oa_flow_wfaction\nWHERE def_id = 'new_def_id';"}
{"seed": "/* Drops the index named ix_ap_trans_01 from the ap_transactions table. */\nDROP INDEX ix_ap_trans_01", "description": "Drops the index named ix_ap_trans_01 from the ap_transactions table.", "concepts": ["DROP INDEX"], "instruction": "Write a SQL query to drop the index named ix_ap_trans_01 from the ap_transactions table.", "response": "-- Reasoning:\nWe need to drop the index named ix_ap_trans_01 from the ap_transactions table.\n\n-- Solution:\n```sql\nDROP INDEX ix_ap_trans_01;\n```\n\n-- Explanation:\nThis DROP INDEX statement removes the index named ix_ap_trans_01 from the ap_transactions table.\n\n-- Tests:\n-- 1. Verify index is gone\nPRAGMA index_list('ap_transactions');"}
{"seed": "/* Modifies the add_prop_transaction table to add a new column named add_prop_transaction_id of type VARCHAR2(255) and set it to not null. */\nALTER TABLE add_prop_transaction MODIFY add_prop_transaction_id VARCHAR2(255) NOT NULL", "description": "Modifies the add_prop_transaction table to add a new column named add_prop_transaction_id of type VARCHAR2(255) and set it to not null.", "concepts": ["ALTER TABLE", "MODIFY", "NOT NULL", "VARCHAR2"], "instruction": "Write a SQL query to modify the add_prop_transaction table to add a new column named add_prop_transaction_id of type VARCHAR2(255) and set it to not null.", "response": "-- Reasoning:\nWe need to modify the existing add_prop_transaction table by adding a new column named add_prop_transaction_id. It should be a VARCHAR(255) and not allow NULLs so that every add_prop_transaction has a defined id.\n\n-- Solution:\n```sql\nALTER TABLE add_prop_transaction\n  ADD COLUMN add_prop_transaction_id VARCHAR(255) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the add_prop_transaction table schema by adding:\n  \u2022 add_prop_transaction_id: a non\u2010nullable varchar column up to 255 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('add_prop_transaction');"}
{"seed": "/* Modifies the add_prop_transaction table by adding a property_key column of type VARCHAR2(50) and setting it to NOT NULL. */\nALTER TABLE add_prop_transaction MODIFY property_key VARCHAR2(50) NOT NULL", "description": "Modifies the add_prop_transaction table by adding a property_key column of type VARCHAR2(50) and setting it to NOT NULL.", "concepts": ["ALTER TABLE", "MODIFY", "VARCHAR2", "NOT NULL"], "instruction": "Write a SQL query to modify the add_prop_transaction table by adding a property_key column of type VARCHAR2(50) and setting it to NOT NULL.", "response": "-- Reasoning:\nWe need to modify the add_prop_transaction table by adding a new column named property_key. It should be a VARCHAR(50) and not allow NULLs so that every property has a defined key.\n\n-- Solution:\n```sql\nALTER TABLE add_prop_transaction\n  ADD COLUMN property_key VARCHAR(50) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the add_prop_transaction table schema by adding:\n  \u2022 property_key: a non\u2010nullable varchar column up to 50 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('add_prop_transaction');"}
{"seed": "/* Creates a primary key constraint on the add_prop_transaction table with the add_prop_transaction_id and property_key columns. */\nALTER TABLE add_prop_transaction ADD CONSTRAINT pk_add_prop_transaction PRIMARY KEY (add_prop_transaction_id, property_key)", "description": "Creates a primary key constraint on the add_prop_transaction table with the add_prop_transaction_id and property_key columns.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the add_prop_transaction table with the add_prop_transaction_id and property_key columns.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the add_prop_transaction table. This will ensure that each row has a unique identifier and that the property_key column is not null.\n\n-- Solution:\n```sql\nALTER TABLE add_prop_transaction\n  ADD PRIMARY KEY (add_prop_transaction_id, property_key);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the add_prop_transaction table. It ensures that each row has a unique identifier and that the property_key column is not null.\n\n-- Tests:\n-- 1. Check primary key constraint is added\nPRAGMA table_info('add_prop_transaction');"}
{"seed": "/* Creates a foreign key constraint named fk_add_prop_tran2fin_txn on the add_prop_transaction table that references the id column of the fin_txn table. */\nALTER TABLE add_prop_transaction ADD CONSTRAINT fk_add_prop_tran2fin_txn FOREIGN KEY (add_prop_transaction_id) REFERENCES fin_txn(id)", "description": "Creates a foreign key constraint named fk_add_prop_tran2fin_txn on the add_prop_transaction table that references the id column of the fin_txn table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "REFERENCES"], "instruction": "Write a SQL query to create a foreign key constraint named fk_add_prop_tran2fin_txn on the add_prop_transaction table that references the id column of the fin_txn table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the add_prop_transaction table that references the id column of the fin_txn table.\n\n-- Solution:\n```sql\nALTER TABLE add_prop_transaction\n  ADD CONSTRAINT fk_add_prop_tran2fin_txn\n  FOREIGN KEY (id)\n  REFERENCES fin_txn(id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the add_prop_transaction table that references the id column of the fin_txn table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('add_prop_transaction');"}
{"seed": "/* Creates an index named ix_ap_trans_01 on the add_prop_transaction table. */\nCREATE INDEX ix_ap_trans_01 ON add_prop_transaction(add_prop_transaction_id)", "description": "Creates an index named ix_ap_trans_01 on the add_prop_transaction table.", "concepts": ["CREATE INDEX", "ix_ap_trans_01", "ON", "add_prop_transaction", "add_prop_transaction_id"], "instruction": "Write a SQL query to create an index named ix_ap_trans_01 on the add_prop_transaction table.", "response": "-- Reasoning:\nWe need to create an index on the add_prop_transaction table to speed up queries that access this table.\n\n-- Solution:\n```sql\nCREATE INDEX ix_ap_trans_01 ON add_prop_transaction;\n```\n\n-- Explanation:\nThis statement creates an index named ix_ap_trans_01 on the add_prop_transaction table.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('add_prop_transaction');"}
{"seed": "/* Inserts 6 rows into the PriceFmts table. */\ninsert into Farm.PriceFmts(Format, Comment, FileExtention, ParserClassName)\r\nvalues ('NativeDelimWIN', '\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 Windows \u0431\u0435\u0437 Jet', '.txt', 'DelimiterTextParser1251'),\r\n('NativeDelimDOS', '\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 DOS \u0431\u0435\u0437 Jet', '.txt', 'DelimiterTextParser866'),\r\n('NativeFixedWIN', '\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0448\u0438\u0440\u0438\u043d\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 Windows \u0431\u0435\u0437 Jet', '.txt', 'FixedTextParser1251'),\r\n('NativeFixedDOS', '\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0448\u0438\u0440\u0438\u043d\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 DOS \u0431\u0435\u0437 Jet', '.txt', 'FixedTextParser866'),\r\n('NativeXls', 'Excel-\u0444\u0430\u0439\u043b', '.xls', 'ExcelParser'),\r\n('NativeDbf', 'DBF-\u0444\u0430\u0439\u043b', '.dbf', 'PriceDbfParser')", "description": "Inserts 6 rows into the PriceFmts table.", "concepts": ["INSERT INTO", "VALUES", "Farm", "PriceFmts", "Format", "Comment", "FileExtention", "ParserClassName"], "instruction": "Write a SQL query to insert 6 rows into the PriceFmts table.", "response": "-- Reasoning:\nWe need to insert 6 rows into the PriceFmts table. Each row should have a unique identifier, a name, and a price.\n\n-- Solution:\n```sql\nINSERT INTO PriceFmts (id, name, price)\nVALUES (1, 'USD', 1.00),\n       (2, 'EUR', 0.85),\n       (3, 'GBP', 0.75),\n       (4, 'JPY', 100.00),\n       (5, 'CAD', 1.25),\n       (6, 'AUD', 0.70);\n```\n\n-- Explanation:\nThis INSERT statement inserts 6 rows into the PriceFmts table. Each row has a unique identifier, a name, and a price.\n\n-- Tests:\n-- 1. Verify 6 rows are inserted\nSELECT * FROM PriceFmts;"}
{"seed": "/* Drops the table named account if it exists. */\nDROP TABLE IF EXISTS `account`", "description": "Drops the table named account if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named account if it exists.", "response": "-- Reasoning:\nWe need to drop the table named account if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS account;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('account');"}
{"seed": "/* Sets the client character set to the default character set. */\nSET @saved_cs_client     = @@character_set_client", "description": "Sets the client character set to the default character set.", "concepts": ["SET"], "instruction": "Write a SQL query to set the client character set to the default character set.", "response": "-- Reasoning:\nWe need to set the client character set to the default character set.\n\n-- Solution:\n```sql\nSET NAMES 'utf8';\n```\n\n-- Explanation:\nThis statement sets the client character set to utf8.\n\n-- Tests:\n-- 1. Check client character set is utf8\nPRAGMA encoding;"}
{"seed": "/* Sets the client character set to utf8. */\nSET character_set_client = utf8", "description": "Sets the client character set to utf8.", "concepts": ["SET", "character_set_client", "utf8"], "instruction": "Write a SQL query to set the client character set to utf8.", "response": "-- Reasoning:\nWe need to set the client character set to utf8 so that the database can handle non\u2010English characters.\n\n-- Solution:\n```sql\nSET NAMES utf8;\n```\n\n-- Explanation:\nThis SET statement sets the client character set to utf8.\n\n-- Tests:\n-- 1. Check client character set is utf8\nPRAGMA encoding;"}
{"seed": "/* Creates a table named account with five columns: userid (integer primary key), email (text), username (varchar), weiboid (bigint), renrenid (bigint), doubanid (bigint), and lastlogin (timestamp). */\nCREATE TABLE `account` (\n  `userid` int(11) NOT NULL auto_increment,\n  `email` text NOT NULL,\n  `username` varchar(32) NOT NULL,\n  `weiboid` bigint(20) default NULL,\n  `renrenid` bigint(20) default NULL,\n  `doubanid` bigint(20) default NULL,\n  `lastlogin` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n  PRIMARY KEY  (`userid`,`email`(255))\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named account with five columns: userid (integer primary key), email (text), username (varchar), weiboid (bigint), renrenid (bigint), doubanid (bigint), and lastlogin (timestamp).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "BIGINT", "TIMESTAMP", "DEFAULT", "ON UPDATE", "AUTO_INCREMENT", "ENGINE", "CHARSET", "TEXT"], "instruction": "Write a SQL query to create a table named account with five columns: userid (integer primary key), email (text), username (varchar), weiboid (bigint), renrenid (bigint), doubanid (bigint), and lastlogin (timestamp).", "response": "-- Reasoning:\nWe need a new table named account. It should have an integer primary key so that each user has a unique identifier, and a username column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE account (\n  userid INTEGER PRIMARY KEY,\n  email TEXT,\n  username VARCHAR(255),\n  weiboid BIGINT,\n  renrenid BIGINT,\n  doubanid BIGINT,\n  lastlogin TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the account table with five columns:\n  \u2022 userid: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 weiboid: integer\n  \u2022 renrenid: integer\n  \u2022 doubanid: integer\n  \u2022 lastlogin: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('account');"}
{"seed": "/* Sets the client character set to the value of the saved_cs_client variable. */\nSET character_set_client = @saved_cs_client", "description": "Sets the client character set to the value of the saved_cs_client variable.", "concepts": ["SET"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Drops the table named equipment if it exists. */\nDROP TABLE IF EXISTS `equipment`", "description": "Drops the table named equipment if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the equipment table if it exists.", "response": "-- Reasoning:\nWe need to drop the equipment table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS equipment;\n```\n\n-- Explanation:\nThis DROP statement removes the equipment table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('equipment');"}
{"seed": "/* Creates a table named equipment with 100 columns. */\nCREATE TABLE `equipment` (\n  `id` int(11) NOT NULL auto_increment,\n  `attr_496` text,\n  `attr_556` text,\n  `attr_557` text,\n  `attr_7` text,\n  `attr_277` text,\n  `attr_334` text,\n  `attr_255` text,\n  `attr_279` text,\n  `attr_278` text,\n  `attr_256` text,\n  `attr_511` text,\n  `attr_332` text,\n  `attr_314` text,\n  `attr_312` text,\n  `attr_399` text,\n  `attr_315` text,\n  `attr_313` text,\n  `attr_539` text,\n  `attr_401` text,\n  `attr_345` text,\n  `attr_285` text,\n  `attr_405` text,\n  `attr_286` text,\n  `attr_287` text,\n  `attr_505` text,\n  `attr_289` text,\n  `attr_351` text,\n  `attr_355` text,\n  `attr_292` text,\n  `attr_295` text,\n  `attr_353` text,\n  `attr_352` text,\n  `attr_288` text,\n  `attr_309` text,\n  `attr_307` text,\n  `attr_305` text,\n  `attr_297` text,\n  `attr_298` text,\n  `attr_301` text,\n  `attr_303` text,\n  `attr_335` text,\n  `attr_336` text,\n  `attr_337` text,\n  `attr_404` text,\n  `attr_340` text,\n  `attr_342` text,\n  `attr_341` text,\n  `attr_522` text,\n  `attr_343` text,\n  `attr_273` text,\n  `attr_274` text,\n  `attr_275` text,\n  `attr_281` text,\n  `attr_412` text,\n  `attr_413` text,\n  `attr_414` text,\n  `attr_310` text,\n  `attr_488` text,\n  `attr_491` text,\n  `attr_489` text,\n  `attr_321` text,\n  `attr_323` text,\n  `attr_490` text,\n  `attr_328` text,\n  `attr_368` text,\n  `attr_494` text,\n  `attr_548` text,\n  `attr_283` text,\n  `attr_397` text,\n  `attr_398` text,\n  `attr_5` text,\n  `attr_13` text,\n  `attr_15` text,\n  `attr_16` text,\n  `attr_21` text,\n  `attr_333` text,\n  `attr_24` text,\n  `attr_25` text,\n  `attr_26` text,\n  `attr_27` text,\n  `attr_540` text,\n  `attr_754` text,\n  `attr_31` text,\n  `attr_329` text,\n  `attr_499` text,\n  `attr_492` text,\n  `item_name` text,\n  `item_brand` text,\n  `item_type` text,\n  `item_image` text,\n  `attr_402` text,\n  `attr_370` text,\n  `attr_290` text,\n  `attr_510` text,\n  `attr_330` text,\n  `attr_344` text,\n  `attr_403` text,\n  `attr_12` text,\n  `attr_19` text,\n  `attr_483` text,\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=2620 DEFAULT CHARSET=utf8", "description": "Creates a table named equipment with 100 columns.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "ENGINE", "VARCHAR", "INT", "DEFAULT", "INSERT INTO", "VALUES", "UPDATE", "DELETE", "JOIN", "WHERE"], "instruction": "Write a SQL query to create a table named equipment with 100 columns.", "response": "-- Reasoning:\nWe need a new table named equipment. It should have 100 columns, each of which is a VARCHAR(255).\n\n-- Solution:\n```sql\nCREATE TABLE equipment (\n  col1 VARCHAR(255),\n  col2 VARCHAR(255),\n  col3 VARCHAR(255),\n  col4 VARCHAR(255),\n  col5 VARCHAR(255),\n  col6 VARCHAR(255),\n  col7 VARCHAR(255),\n  col8 VARCHAR(255),\n  col9 VARCHAR(255),\n  col10 VARCHAR(255),\n  col11 VARCHAR(255),\n  col12 VARCHAR(255),\n  col13 VARCHAR(255),\n  col14 VARCHAR(255),\n  col15 VARCHAR(255),\n  col16 VARCHAR(255),\n  col17 VARCHAR(255),\n  col18 VARCHAR(255),\n  col19 VARCHAR(255),\n  col20 VARCHAR(255),\n  col21 VARCHAR(255),\n  col22 VARCHAR(255),\n  col23 VARCHAR(255),\n  col24 VARCHAR(255),\n  col25 VARCHAR(255),\n  col26 VARCHAR(255),\n  col2"}
{"seed": "/* Updates the upload_path option in the @PREFIX@options table to the value @UPLOAD_DIR@. */\nUPDATE @PREFIX@options\nSET option_value='@UPLOAD_DIR@'\nWHERE option_name='upload_path'", "description": "Updates the upload_path option in the @PREFIX@options table to the value @UPLOAD_DIR@.", "concepts": ["UPDATE", "SET", "WHERE"], "instruction": "Write a SQL query to update the upload_path option in the @PREFIX@options table to the value @UPLOAD_DIR@.", "response": "-- Reasoning:\nWe need to update the upload_path option in the @PREFIX@options table to the value @UPLOAD_DIR@.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@options\n  SET value = '@UPLOAD_DIR@'\n  WHERE name = 'upload_path';\n```\n\n-- Explanation:\nThis UPDATE statement updates the value of the upload_path option in the @PREFIX@options table to the value @UPLOAD_DIR@.\n\n-- Tests:\n-- 1. Verify upload_path is updated\nSELECT value FROM @PREFIX@options WHERE name = 'upload_path';"}
{"seed": "/* Updates the user with ID 1 in the users table. */\nUPDATE @PREFIX@users\nSET\n    user_login='Jebegood',\n    user_nicename='Jebegood',\n    display_name='Jebegood',\n    user_email='tribalstaff@gmail.com'\nWHERE ID=1", "description": "Updates the user with ID 1 in the users table.", "concepts": ["UPDATE", "SET", "WHERE", "ID"], "instruction": "Write a SQL query to update the user with ID 1 in the users table.", "response": "-- Reasoning:\nWe need to update the user with ID 1 in the users table.\n\n-- Solution:\n```sql\nUPDATE users\n  SET name = ''\n  WHERE id = 1;\n```\n\n-- Explanation:\nThis UPDATE statement updates the name of the user with ID 1 to ''.\n\n-- Tests:\n-- 1. Verify user name is updated\nSELECT * FROM users WHERE id = 1;"}
{"seed": "/* Replaces the contents of the @PREFIX@terms table with the contents of the spip_rubriques table. */\nREPLACE INTO @PREFIX@terms (\n    term_id,\n    name,\n    slug,\n    term_group\n)\nSELECT\n    id_rubrique,\n    titre,\n    CONCAT(\"rub\",id_rubrique),\n    1\nFROM\n    @SPIP_DB@.spip_rubriques", "description": "Replaces the contents of the @PREFIX@terms table with the contents of the spip_rubriques table.", "concepts": ["REPLACE INTO", "SELECT", "CONCAT", "FROM"], "instruction": "Write a SQL query to replace the contents of the @PREFIX@terms table with the contents of the spip_rubriques table.", "response": "-- Reasoning:\nWe need to replace the contents of the @PREFIX@terms table with the contents of the spip_rubriques table.\n\n-- Solution:\n```sql\nINSERT INTO @PREFIX@terms (id_rubrique, titre, lang)\n  SELECT id_rubrique, titre, lang\n  FROM spip_rubriques;\n```\n\n-- Explanation:\nThis INSERT statement copies the contents of the spip_rubriques table into the @PREFIX@terms table.\n\n-- Tests:\n-- 1. Verify the contents of the @PREFIX@terms table match the contents of the spip_rubriques table\nSELECT * FROM @PREFIX@terms;"}
{"seed": "/* Inserts the id_rubrique and id_rubrique of all rubriques from the spip_rubriques table into the term_taxonomy table. */\nREPLACE INTO @PREFIX@term_taxonomy (\n    term_taxonomy_id,\n    term_id,\n    taxonomy,\n    parent,\n    description\n)\nSELECT\n    id_rubrique,\n    id_rubrique,\n    'category',\n    0,\n    ''\nFROM\n    @SPIP_DB@.spip_rubriques", "description": "Inserts the id_rubrique and id_rubrique of all rubriques from the spip_rubriques table into the term_taxonomy table.", "concepts": ["REPLACE INTO", "SELECT", "FROM", "WHERE", "INTO", "VALUES", "REPLACE", "SELECT", "FROM", "WHERE", "INTO", "VALUES", "REPLACE", "SELECT", "FROM"], "instruction": "Write a SQL query to insert the id_rubrique and id_rubrique of all rubriques from the spip_rubriques table into the term_taxonomy table.", "response": "-- Reasoning:\nWe need to insert the id_rubrique and id_rubrique of all rubriques from the spip_rubriques table into the term_taxonomy table.\n\n-- Solution:\n```sql\nINSERT INTO term_taxonomy (term_id, taxonomy)\n  SELECT id_rubrique, 'rubrique' FROM spip_rubriques;\n```\n\n-- Explanation:\nThis INSERT statement inserts the id_rubrique and id_rubrique of all rubriques from the spip_rubriques table into the term_taxonomy table.\n\n-- Tests:\n-- 1. Verify new rows appear in term_taxonomy\nSELECT * FROM term_taxonomy;"}
{"seed": "/* Updates the slug column of the terms table with the url column of the spip_urls table. */\nUPDATE @PREFIX@terms, @SPIP_DB@.spip_urls\nSET slug = @SPIP_DB@.spip_urls.url\nWHERE @SPIP_DB@.spip_urls.id_objet = term_id\nAND @SPIP_DB@.spip_urls.type = \"rubrique\"", "description": "Updates the slug column of the terms table with the url column of the spip_urls table.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "OR", "NOT", "IN", "LIKE", "BETWEEN", "IS", "NULL", "NOT NULL", "EXISTS", "NOT EXISTS"], "instruction": "Write a SQL query to update the slug column of the terms table with the url column of the spip_urls table.", "response": "-- Reasoning:\nWe need to update the slug column of the terms table with the url column of the spip_urls table.\n\n-- Solution:\n```sql\nUPDATE terms\nSET slug = (\n  SELECT url\n  FROM spip_urls\n  WHERE terms.id = spip_urls.id\n);\n```\n\n-- Explanation:\nThis UPDATE statement updates the slug column of the terms table with the url column of the spip_urls table.\n\n-- Tests:\n-- 1. Verify slug column is updated\nSELECT slug FROM terms;"}
{"seed": "/* This query inserts the data from the spip_articles table into the @PREFIX@posts table. */\nREPLACE INTO @PREFIX@posts (\n    ID\n    , post_author\n    , post_date, post_date_gmt\n    , post_excerpt\n    , post_content\n    , post_content_filtered\n    , post_title\n    , post_name\n    , to_ping , pinged\n    , post_modified,\n    post_modified_gmt,\n    post_status\n)\nSELECT\n    p.id_article\n    , 1\n    , p.date, p.date\n    , p.descriptif\n    , concat(p.chapo, p.texte)\n    , ''\n    , titre\n    , COALESCE(REPLACE(REPLACE(l.url, ' ', ''), ',', '-'), CONCAT('art', p.id_article))\n    , '', ''\n    , p.date_modif,\n    p.date_modif,\n    CASE p.statut WHEN 'prepa' THEN 'draft' WHEN 'prop' THEN 'pending' WHEN 'publie' THEN 'publish' WHEN 'refuse' THEN 'trash' END\nFROM\n  @SPIP_DB@.spip_articles AS p\n  LEFT JOIN @SPIP_DB@.spip_urls AS l ON l.id_objet = p.id_article AND l.type = 'article'", "description": "This query inserts the data from the spip_articles table into the @PREFIX@posts table.", "concepts": ["REPLACE INTO", "SELECT", "CONCAT", "COALESCE", "CASE"], "instruction": "Write a SQL query to insert the data from the spip_articles table into the @PREFIX@posts table.", "response": "-- Reasoning:\nWe need to copy the data from the spip_articles table into the @PREFIX@posts table.\n\n-- Solution:\n```sql\nINSERT INTO @PREFIX@posts (id_article, titre, texte, statut, lang, date, maj)\nSELECT id_article, titre, texte, statut, lang, date, maj\nFROM spip_articles;\n```\n\n-- Explanation:\nThis INSERT statement copies the data from the spip_articles table into the @PREFIX@posts table.\n\n-- Tests:\n-- 1. Verify data is copied\nSELECT * FROM @PREFIX@posts;"}
{"seed": "/* This query inserts the data from the spip_breves table into the @PREFIX@posts table. */\nREPLACE INTO @PREFIX@posts (\n    ID\n    , post_author\n    , post_date,\n    post_date_gmt\n    , post_excerpt\n    , post_content\n    , post_content_filtered\n    , post_title\n    , post_name\n    , to_ping,\n    pinged\n    , post_modified,\n    post_modified_gmt,\n    post_status,\n    post_type\n)\nSELECT\n    b.id_breve + @NEWS_ID_OFFSET@,\n    1,\n    b.date_heure,\n    b.date_heure,\n    '',\n    b.texte,\n    '',\n    titre,\n    COALESCE(REPLACE(l.url, ' ', ''), CONCAT('breve', b.id_breve)),\n    '',\n    '',\n    b.date_heure,\n    b.date_heure,\n    CASE b.statut WHEN 'prepa' THEN 'draft' WHEN 'prop' THEN 'pending' WHEN 'publie' THEN 'publish' WHEN 'refuse' THEN 'trash' END,\n    'news'\nFROM\n  @SPIP_DB@.spip_breves AS b\n  LEFT JOIN @SPIP_DB@.spip_urls AS l ON l.id_objet = b.id_breve AND l.type = 'breve'", "description": "This query inserts the data from the spip_breves table into the @PREFIX@posts table.", "concepts": ["REPLACE INTO", "INTO", "VALUES", "SELECT", "COALESCE", "CONCAT", "REPLACE", "CASE"], "instruction": "Write a SQL query to insert the data from the spip_breves table into the @PREFIX@posts table.", "response": "-- Reasoning:\nWe need to insert the data from the spip_breves table into the @PREFIX@posts table.\n\n-- Solution:\n```sql\nINSERT INTO @PREFIX@posts (id_breve, titre, texte, statut, lang, maj)\nSELECT id_breve, titre, texte, statut, lang, maj\nFROM spip_breves;\n```\n\n-- Explanation:\nThis INSERT statement copies the data from the spip_breves table into the @PREFIX@posts table.\n\n-- Tests:\n-- 1. Verify data is copied\nSELECT * FROM @PREFIX@posts;"}
{"seed": "/* Replaces the contents of the @PREFIX@term_relationships table with the results of the query. */\nREPLACE INTO @PREFIX@term_relationships (\n    object_id,\n    term_taxonomy_id\n)\nSELECT\n    p.id_article,\n    p.id_rubrique\nFROM\n    @SPIP_DB@.spip_articles AS p", "description": "Replaces the contents of the @PREFIX@term_relationships table with the results of the query.", "concepts": ["REPLACE INTO", "SELECT", "FROM", "AS", "AS", "AS", "AS", "AS", "AS", "AS", "AS", "AS", "AS", "AS", "AS"], "instruction": "Write a SQL query to replace the contents of the @PREFIX@term_relationships table with the results of the query.", "response": "-- Reasoning:\nWe need to replace the contents of the term_relationships table with the results of the query.\n\n-- Solution:\n```sql\nINSERT INTO term_relationships (object_id, term_taxonomy_id, term_order)\n  SELECT object_id, term_taxonomy_id, term_order\n  FROM @PREFIX@term_relationships;\n```\n\n-- Explanation:\nThis INSERT statement inserts the results of the query into the term_relationships table.\n\n-- Tests:\n-- 1. Verify table is empty\nSELECT * FROM term_relationships;\n\n-- 2. Verify table is populated\nSELECT * FROM @PREFIX@term_relationships;"}
{"seed": "/* Inserts the id_breve and id_rubrique of all breves into the term_relationships table. */\nREPLACE INTO @PREFIX@term_relationships (\n    object_id,\n    term_taxonomy_id\n)\nSELECT\n    b.id_breve + @NEWS_ID_OFFSET@,\n    b.id_rubrique\nFROM\n    @SPIP_DB@.spip_breves AS b", "description": "Inserts the id_breve and id_rubrique of all breves into the term_relationships table.", "concepts": ["REPLACE INTO", "SELECT", "FROM", "AS", "@PREFIX@", "@NEWS_ID_OFFSET@"], "instruction": "Write a SQL query to insert the id_breve and id_rubrique of all breves into the term_relationships table.", "response": "-- Reasoning:\nWe need to insert the id_breve and id_rubrique of all breves into the term_relationships table.\n\n-- Solution:\n```sql\nINSERT INTO term_relationships (object_id, term_taxonomy_id)\n  SELECT id_breve, id_rubrique FROM breves;\n```\n\n-- Explanation:\nThis INSERT statement inserts the id_breve and id_rubrique of all breves into the term_relationships table.\n\n-- Tests:\n-- 1. Verify new rows appear in term_relationships\nSELECT * FROM term_relationships;"}
{"seed": "/* Updates the count column of the term_taxonomy table with the number of term relationships for each term taxonomy. */\nUPDATE @PREFIX@term_taxonomy tt\nSET count=(SELECT COUNT(1) FROM @PREFIX@term_relationships rel WHERE rel.term_taxonomy_id = tt.term_taxonomy_id)", "description": "Updates the count column of the term_taxonomy table with the number of term relationships for each term taxonomy.", "concepts": ["UPDATE", "@PREFIX@term_taxonomy", "tt", "COUNT", "term_taxonomy_id", "term_relationships", "rel", "term_taxonomy_id"], "instruction": "Write a SQL query to update the count column of the term_taxonomy table with the number of term relationships for each term taxonomy.", "response": "-- Reasoning:\nWe need to update the count column of the term_taxonomy table with the number of term relationships for each term taxonomy.\n\n-- Solution:\n```sql\nUPDATE term_taxonomy\nSET count = (\n  SELECT COUNT(*)\n  FROM term_relationships\n  WHERE term_taxonomy_id = term_taxonomy.term_taxonomy_id\n);\n```\n\n-- Explanation:\nThis UPDATE statement updates the count column of the term_taxonomy table with the number of term relationships for each term taxonomy.\n\n-- Tests:\n-- 1. Verify count column is updated\nSELECT * FROM term_taxonomy;"}
{"seed": "/* Inserts all documents from the spip_documents table into the @PREFIX@posts table. */\nINSERT INTO @PREFIX@posts (\n    ID,\n    post_author,\n    post_date,\n    post_date_gmt,\n    post_excerpt,\n    post_content,\n    post_content_filtered,\n    post_title,\n    to_ping,\n    pinged,\n    post_modified,\n    post_modified_gmt,\n    post_type,\n    GUID,\n    post_mime_type,\n    post_status\n)\nSELECT\n    d.id_document + @ATTACHMENT_ID_OFFSET@,\n    1,\n    d.date,\n    d.date,\n    d.descriptif,\n    d.descriptif,\n    '',\n    d.titre,\n    '',\n    '',\n    d.date,\n    d.date,\n    'attachment',\n    CONCAT('IMG/', d.fichier),\n    CASE d.extension WHEN 'jpg' THEN 'image/jpeg' WHEN 'png' THEN 'image/png' WHEN 'gif' THEN 'image/gif' WHEN 'pdf' THEN 'application/pdf' WHEN 'zip' THEN 'application/zip' WHEN 'xls' THEN 'application/vnd.ms-excel' WHEN 'doc' THEN 'application/msword' WHEN 'mp3' THEN 'audio/mpeg' WHEN 'bmp' THEN 'image/x-ms-bmp' WHEN 'docx' THEN 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' WHEN 'xlsx' THEN 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' END,\n    'private'\nFROM\n  @SPIP_DB@.spip_documents d\nWHERE\n  d.extension != 'html'", "description": "Inserts all documents from the spip_documents table into the @PREFIX@posts table.", "concepts": ["INSERT INTO", "SELECT", "VALUES", "CONCAT", "CASE", "WHEN", "THEN", "ELSE", "END", "@PREFIX@", "@ATTACHMENT_ID_OFFSET@"], "instruction": "Write a SQL query to insert all documents from the spip_documents table into the @PREFIX@posts table.", "response": "-- Reasoning:\nWe need to insert all documents from the spip_documents table into the @PREFIX@posts table.\n\n-- Solution:\n```sql\nINSERT INTO @PREFIX@posts (id_post, id_rubrique, titre, texte, statut, lang, date, maj)\nSELECT id_document, id_rubrique, titre, texte, statut, lang, date, maj\nFROM spip_documents;\n```\n\n-- Explanation:\nThis INSERT statement copies all documents from the spip_documents table into the @PREFIX@posts table.\n\n-- Tests:\n-- 1. Verify new documents appear in @PREFIX@posts\nSELECT * FROM @PREFIX@posts;"}
{"seed": "/* Inserts the attachment file names into the postmeta table. */\nINSERT INTO @PREFIX@postmeta (\n    meta_id,\n    post_id,\n    meta_key,\n    meta_value\n)\nSELECT\n    d.id_document + @ATTACHMENT_ID_OFFSET@,\n    d.id_document + @ATTACHMENT_ID_OFFSET@,\n    '_wp_attached_file',\n    d.fichier\nFROM\n  @SPIP_DB@.spip_documents d\nWHERE\n  d.extension != 'html'", "description": "Inserts the attachment file names into the postmeta table.", "concepts": ["INSERT INTO", "VALUES", "SELECT", "FROM", "WHERE", "d.id_document", "d.fichier", "d.extension", "_wp_attached"], "instruction": "Write a SQL query to insert the attachment file names into the postmeta table.", "response": "-- Reasoning:\nWe need to insert the attachment file names into the postmeta table.\n\n-- Solution:\n```sql\nINSERT INTO postmeta (post_id, meta_key, meta_value)\nSELECT ID, '_wp_attached_file', guid\nFROM posts\nWHERE post_type = 'attachment';\n```\n\n-- Explanation:\nThis INSERT statement inserts the attachment file names into the postmeta table.\n\n-- Tests:\n-- 1. Verify new rows are inserted\nSELECT * FROM postmeta\nWHERE meta_key = '_wp_attached_file';"}
{"seed": "/* Inserts the data from the spip_forum table into the @PREFIX@comments table. */\nREPLACE INTO @PREFIX@comments (\n      comment_ID\n    , comment_post_ID\n    , comment_author\n    , comment_author_email\n    , comment_author_url\n    , comment_date\n    , comment_date_gmt\n    , comment_content\n    , comment_parent\n    , comment_approved\n)\nSELECT\n      id_forum\n    , id_article\n    , auteur\n    , email_auteur\n    , url_site\n    , date_heure\n    , date_heure\n    , texte\n    , id_parent\n    , 1\nFROM\n    @SPIP_DB@.spip_forum\nWHERE\n    statut = 'publie'", "description": "Inserts the data from the spip_forum table into the @PREFIX@comments table.", "concepts": ["REPLACE INTO", "SELECT", "FROM", "WHERE"], "instruction": "Write a SQL query to insert the data from the spip_forum table into the @PREFIX@comments table.", "response": "-- Reasoning:\nWe need to copy the data from the spip_forum table into the @PREFIX@comments table.\n\n-- Solution:\n```sql\nINSERT INTO @PREFIX@comments (id_comment, id_article, date, title, statut, lang, id_auteur, ip, mail, site, texte, id_parent, id_forum, id_objet, objet)\nSELECT id_comment, id_article, date, title, statut, lang, id_auteur, ip, mail, site, texte, id_parent, id_forum, id_objet, objet\nFROM spip_forum;\n```\n\n-- Explanation:\nThis INSERT statement copies the data from the spip_forum table into the @PREFIX@comments table.\n\n-- Tests:\n-- 1. Verify data is copied\nSELECT * FROM @PREFIX@comments;"}
{"seed": "/* Updates the comment_count column of all posts in the @PREFIX@posts table by selecting the number of comments for each post from the @PREFIX@comments table. */\nUPDATE @PREFIX@posts p\nSET p.comment_count = (SELECT COUNT(1) FROM @PREFIX@comments c WHERE c.comment_post_ID = p.ID)", "description": "Updates the comment_count column of all posts in the @PREFIX@posts table by selecting the number of comments for each post from the @PREFIX@comments table.", "concepts": ["UPDATE", "SET", "SELECT", "COUNT", "FROM", "WHERE"], "instruction": "Write a SQL query to update the comment_count column of all posts in the @PREFIX@posts table by selecting the number of comments for each post from the @PREFIX@comments table.", "response": "-- Reasoning:\nWe need to update the comment_count column of all posts in the @PREFIX@posts table by selecting the number of comments for each post from the @PREFIX@comments table.\n\n-- Solution:\n```sql\nUPDATE posts\nSET comment_count = (\n  SELECT COUNT(*)\n  FROM comments\n  WHERE comments.post_id = posts.id\n);\n```\n\n-- Explanation:\nThis UPDATE statement updates the comment_count column of all posts in the @PREFIX@posts table by selecting the number of comments for each post from the @PREFIX@comments table.\n\n-- Tests:\n-- 1. Verify comment_count is updated correctly\nSELECT * FROM posts;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table to replace all occurrences of '{{{' with ' <h1> '. */\nupdate @PREFIX@posts set post_content = replace(post_content, '{{{', ' <h1> ') where instr(post_content, '{{{') > 0", "description": "Updates the post_content column of the @PREFIX@posts table to replace all occurrences of '{{{' with ' <h1> '.", "concepts": ["UPDATE", "REPLACE", "WHERE", "INSTR", "@PREFIX@posts", "SET", "H1"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table to replace all occurrences of '{{{' with ' <h1> '.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table to replace all occurrences of '{{{' with ' <h1> '.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '{{{', '<h1>');\n```\n\n-- Explanation:\nThis UPDATE statement replaces all occurrences of '{{{' with ' <h1> ' in the post_content column of the posts table.\n\n-- Tests:\n-- 1. Verify that the replacement occurred\nSELECT post_content FROM @PREFIX@posts WHERE post_id = 1;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table to replace the string '}}}' with ' </h1> ' wherever it appears in the post_content column. */\nupdate @PREFIX@posts set post_content = replace(post_content, '}}}', ' </h1> ') where instr(post_content, '}}}') > 0", "description": "Updates the post_content column of the @PREFIX@posts table to replace the string '}}}' with ' </h1> ' wherever it appears in the post_content column.", "concepts": ["UPDATE", "REPLACE", "WHERE", "INSTR"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table to replace the string '}}}' with ' </h1> ' wherever it appears in the post_content column.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table to replace the string '}}}' with ' </h1> ' wherever it appears in the post_content column.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '}}}', ' </h1> ')\n```\n\n-- Explanation:\nThis UPDATE statement updates the post_content column of the posts table by replacing the string '}}}' with ' </h1> ' wherever it appears in the post_content column.\n\n-- Tests:\n-- 1. Verify the replacement occurred\nSELECT post_content FROM @PREFIX@posts WHERE post_id = 1;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table to replace all occurrences of '{{' with ' <b> '. */\nupdate @PREFIX@posts set post_content = replace(post_content, '{{', ' <b> ') where instr(post_content, '{{') > 0", "description": "Updates the post_content column of the @PREFIX@posts table to replace all occurrences of '{{' with ' <b> '.", "concepts": ["UPDATE", "REPLACE", "WHERE", "INSTR", "@PREFIX@posts", "SET", "post_content", "replace", "instr", "where", "post_content"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table to replace all occurrences of '{{' with ' <b> '.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table to replace all occurrences of '{{' with ' <b> '.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '{{', ' <b> ');\n```\n\n-- Explanation:\nThis UPDATE statement replaces all occurrences of '{{' with ' <b> ' in the post_content column of the posts table.\n\n-- Tests:\n-- 1. Verify that the replacement occurred\nSELECT post_content FROM @PREFIX@posts WHERE post_id = 1;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of '}}' with ' </b> ' in the post_content column. */\nupdate @PREFIX@posts set post_content = replace(post_content, '}}', ' </b> ') where instr(post_content, '}}') > 0", "description": "Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of '}}' with ' </b> ' in the post_content column.", "concepts": ["UPDATE", "REPLACE", "WHERE", "INSTR", "@PREFIX@posts", "post_content"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table by replacing all occurrences of '}}' with ' </b> ' in the post_content column.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table by replacing all occurrences of '}}' with ' </b> ' in the post_content column.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '}}', ' </b> ');\n```\n\n-- Explanation:\nThis UPDATE statement updates the post_content column of the posts table by replacing all occurrences of '}}' with ' </b> ' in the post_content column.\n\n-- Tests:\n-- 1. Verify post_content column is updated\nSELECT post_content FROM @PREFIX@posts;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of '{' with ' <i> '. */\nupdate @PREFIX@posts set post_content = replace(post_content, '{', ' <i> ') where instr(post_content, '{') > 0", "description": "Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of '{' with ' <i> '.", "concepts": ["UPDATE", "REPLACE", "INSTR", "WHERE"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table by replacing all occurrences of '{' with ' <i> '.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table by replacing all occurrences of '{' with ' <i> '.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '{', ' <i> ');\n```\n\n-- Explanation:\nThis UPDATE statement replaces all occurrences of '{' with ' <i> ' in the post_content column of the posts table.\n\n-- Tests:\n-- 1. Verify that the replacement occurred\nSELECT post_content FROM @PREFIX@posts WHERE post_id = 1;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of '}' with ' </i> ' in the post_content column. */\nupdate @PREFIX@posts set post_content = replace(post_content, '}', ' </i> ') where instr(post_content, '}') > 0", "description": "Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of '}' with ' </i> ' in the post_content column.", "concepts": ["UPDATE", "REPLACE", "WHERE", "INSTR", "@PREFIX@posts", "post_content"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table by replacing all occurrences of '}' with ' </i> ' in the post_content column.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table by replacing all occurrences of '}' with ' </i> ' in the post_content column.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '}', ' </i> ');\n```\n\n-- Explanation:\nThis UPDATE statement updates the post_content column of the posts table by replacing all occurrences of '}' with ' </i> ' in the post_content column.\n\n-- Tests:\n-- 1. Verify that the post_content column has been updated\nSELECT post_content FROM @PREFIX@posts;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table to replace all occurrences of [[ with <blockquote>. */\nupdate @PREFIX@posts set post_content = replace(post_content, '[[', ' <blockquote> ') where instr(post_content, '[[') > 0", "description": "Updates the post_content column of the @PREFIX@posts table to replace all occurrences of [[ with <blockquote>.", "concepts": ["UPDATE", "REPLACE", "INSTR", "WHERE"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table to replace all occurrences of [[ with <blockquote>.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table to replace all occurrences of [[ with <blockquote>.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '[[', '<blockquote>');\n```\n\n-- Explanation:\nThis UPDATE statement replaces all occurrences of [[ with <blockquote> in the post_content column of the posts table.\n\n-- Tests:\n-- 1. Verify that the post_content column has been updated\nSELECT post_content FROM @PREFIX@posts;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of ']]' with ' </blockquote> ' in the post_content column. */\nupdate @PREFIX@posts set post_content = replace(post_content, ']]', ' </blockquote> ') where instr(post_content, ']]') > 0", "description": "Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of ']]' with ' </blockquote> ' in the post_content column.", "concepts": ["UPDATE", "REPLACE", "INSTR", "WHERE"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table by replacing all occurrences of ']]' with ' </blockquote> ' in the post_content column.", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table by replacing all occurrences of ']]' with ' </blockquote> ' in the post_content column.\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, ']]', ' </blockquote> ')\n```\n\n-- Explanation:\nThis UPDATE statement updates the post_content column of the posts table by replacing all occurrences of ']]' with ' </blockquote> ' in the post_content column.\n\n-- Tests:\n-- 1. Verify the post_content column is updated\nSELECT post_content FROM @PREFIX@posts WHERE post_id = 1;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of *] with </strong></i> . */\nupdate @PREFIX@posts set post_content = replace(post_content, '*]', ' </strong></i> ') where instr(post_content, '*]') > 0", "description": "Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of *] with </strong></i> .", "concepts": ["UPDATE", "REPLACE", "INSTR", "WHERE"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table by replacing all occurrences of *] with </strong></i> .", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table by replacing all occurrences of *] with </strong></i> .\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '*]', '</strong></i>')\n```\n\n-- Explanation:\nThis UPDATE statement replaces all occurrences of *] with </strong></i> in the post_content column of the posts table.\n\n-- Tests:\n-- 1. Verify the post_content column has been updated\nSELECT post_content FROM @PREFIX@posts;"}
{"seed": "/* Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of * with </strong></i> . */\nupdate @PREFIX@posts set post_content = replace(post_content, '[*', ' </strong></i> ') where instr(post_content, '*]') > 0", "description": "Updates the post_content column of the @PREFIX@posts table by replacing all occurrences of * with </strong></i> .", "concepts": ["UPDATE", "REPLACE", "INSTR", "WHERE"], "instruction": "Write a SQL query to update the post_content column of the @PREFIX@posts table by replacing all occurrences of * with </strong></i> .", "response": "-- Reasoning:\nWe need to update the post_content column of the posts table by replacing all occurrences of * with </strong></i> .\n\n-- Solution:\n```sql\nUPDATE @PREFIX@posts\n  SET post_content = REPLACE(post_content, '*', '</strong></i>');\n```\n\n-- Explanation:\nThis UPDATE statement replaces all occurrences of * with </strong></i> in the post_content column of the posts table.\n\n-- Tests:\n-- 1. Verify post_content column is updated\nSELECT post_content FROM @PREFIX@posts;"}
{"seed": "/* Creates a table named kategoria with two columns: id (integer) and nev (varchar). */\nCREATE TABLE `kategoria`\n(\n    `id`  int                                       NOT NULL,\n    `nev` varchar(32) COLLATE utf8mb4_hungarian_ci NOT NULL,\n    primary key (id)\n)", "description": "Creates a table named kategoria with two columns: id (integer) and nev (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named kategoria with two columns: id (integer) and nev (varchar).", "response": "-- Reasoning:\nWe need a new table named kategoria. It should have an integer primary key so that each category has a unique identifier, and a name column to store the category\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE kategoria (\n  id INT PRIMARY KEY,\n  nev VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the kategoria table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nev: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('kategoria');"}
{"seed": "/* Creates a table named felszereles with five columns: id (integer primary key), nev (varchar), suly (integer), kategoriaId (integer), and a foreign key constraint named FK_kategoriak_kategoriaId that references the kategoria table. */\nCREATE TABLE `felszereles`\n(\n    `id`          int                                        NOT NULL,\n    `nev`         varchar(32) COLLATE utf8mb4_hungarian_ci NOT NULL,\n    `suly`        int                                        NOT NULL,\n    `kategoriaId` int                                        NOT NULL,\n    primary key (id),\n    key `kategoriaId` (`kategoriaId`),\n    CONSTRAINT FK_kategoriak_kategoriaId FOREIGN KEY (kategoriaId)\n        REFERENCES kategoria (id)\n)", "description": "Creates a table named felszereles with five columns: id (integer primary key), nev (varchar), suly (integer), kategoriaId (integer), and a foreign key constraint named FK_kategoriak_kategoriaId that references the kategoria table.", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "INT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named felszereles with five columns: id (integer primary key), nev (varchar), suly (integer), kategoriaId (integer), and a foreign key constraint named FK_kategoriak_kategoriaId that references the kategoria table.", "response": "-- Reasoning:\nWe need a new table named felszereles. It should have an integer primary key so that each felszereles has a unique identifier, and a name column to store the felszereles\u2019 name as text.\n\n-- Solution:\n```sql\nCREATE TABLE felszereles (\n  id INT PRIMARY KEY,\n  nev VARCHAR(255),\n  suly INT,\n  kategoriaId INT,\n  FOREIGN KEY (kategoriaId) REFERENCES kategoria(id)\n);\n```\n\n-- Explanation:\nThis statement defines the felszereles table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nev: variable\u2010length string up to 255 characters\n  \u2022 suly: integer\n  \u2022 kategoriaId: integer, foreign key to kategoria table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('felszereles');"}
{"seed": "/* Creates a table named vendeg with two columns: id (integer primary key) and nev (varchar). */\nCREATE TABLE `vendeg`\n(\n    `id`  int                                        NOT NULL,\n    `nev` varchar(64) COLLATE utf8mb4_hungarian_ci NOT NULL,\n    primary key (id)\n)", "description": "Creates a table named vendeg with two columns: id (integer primary key) and nev (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named vendeg with two columns: id (integer primary key) and nev (varchar).", "response": "-- Reasoning:\nWe need a new table named vendeg. It should have an integer primary key so that each vendeg has a unique identifier, and a name column to store the vendeg\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE vendeg (\n  id INT PRIMARY KEY,\n  nev VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the vendeg table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nev: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('vendeg');"}
{"seed": "/* Creates a table named haviberlet with five columns: id (integer primary key), vendegId (integer foreign key), honap (integer), ar (integer). */\nCREATE TABLE `haviBerlet`\n(\n    `id`       int NOT NULL,\n    `vendegId` int NOT NULL,\n    `honap`    int NOT NULL,\n    `ar`       int NOT NULL,\n    primary key (id),\n    KEY `vendegId` (`vendegId`),\n    CONSTRAINT FK_vendegId_in_haviberlet FOREIGN KEY (vendegId)\n        REFERENCES vendeg (id)\n)", "description": "Creates a table named haviberlet with five columns: id (integer primary key), vendegId (integer foreign key), honap (integer), ar (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "KEY", "CONSTRAINT", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "KEY", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named haviberlet with five columns: id (integer primary key), vendegId (integer foreign key), honap (integer), ar (integer).", "response": "-- Reasoning:\nWe need a new table named haviberlet. It should have an integer primary key so that each haviberlet has a unique identifier, and a foreign key vendegId to reference the id of the vendeg table.\n\n-- Solution:\n```sql\nCREATE TABLE haviberlet (\n  id INT PRIMARY KEY,\n  vendegId INT,\n  honap INT,\n  ar INT,\n  FOREIGN KEY (vendegId) REFERENCES vendeg(id)\n);\n```\n\n-- Explanation:\nThis statement defines the haviberlet table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 vendegId: integer, foreign key to the vendeg table\n  \u2022 honap: integer\n  \u2022 ar: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('haviberlet');"}
{"seed": "/* Creates a table named kolcsonzes with seven columns: id (integer primary key), vendegId (integer), felszerelesId (integer), datum (date), idotartam (integer), visszahozta (boolean), and foreign keys for vendegId and felszerelesId. */\nCREATE TABLE `kolcsonzes`\n(\n    `id`            int  NOT NULL AUTO_INCREMENT,\n    `vendegId`      int  NOT NULL,\n    `felszerelesId` int  NOT NULL,\n    `datum`         date NOT NULL,\n    `idotartam`     int  NOT NULL,\n    `visszahozta`   boolean default false,\n    primary key (id),\n    KEY `vendegId` (`vendegId`),\n    KEY `felszerelesId` (`felszerelesId`),\n    CONSTRAINT FK_vendegId_in_kolcsonzes FOREIGN KEY (vendegId)\n        REFERENCES vendeg (id),\n    CONSTRAINT FK_felszerelesId_in_felszerelesId FOREIGN KEY (felszerelesId)\n        REFERENCES felszereles (id)\n)", "description": "Creates a table named kolcsonzes with seven columns: id (integer primary key), vendegId (integer), felszerelesId (integer), datum (date), idotartam (integer), visszahozta (boolean), and foreign keys for vendegId and felszerelesId.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "DATE", "BOOLEAN", "FOREIGN KEY", "CONSTRAINT", "KEY", "REFERENCES", "DEFAULT"], "instruction": "Write a SQL query to create a table named kolcsonzes with seven columns: id (integer primary key), vendegId (integer), felszerelesId (integer), datum (date), idotartam (integer), visszahozta (boolean), and foreign keys for vendegId and felszerelesId.", "response": "-- Reasoning:\nWe need a new table named kolcsonzes. It should have an integer primary key so that each kolcsonzes has a unique identifier, and a foreign key for vendegId and felszerelesId.\n\n-- Solution:\n```sql\nCREATE TABLE kolcsonzes (\n  id INT PRIMARY KEY,\n  vendegId INT,\n  felszerelesId INT,\n  datum DATE,\n  idotartam INT,\n  visszahozta BOOLEAN,\n  FOREIGN KEY (vendegId) REFERENCES vendeg(id),\n  FOREIGN KEY (felszerelesId) REFERENCES felszereles(id)\n);\n```\n\n-- Explanation:\nThis statement defines the kolcsonzes table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 vendegId: integer, foreign key to the vendeg table\n  \u2022 felszerelesId: integer, foreign key to the felszereles table\n  \u2022 datum: date\n  \u2022 idotartam: integer\n  \u2022 visszahozta: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('kolcsonzes');"}
{"seed": "/* Inserts the given data into the kategoria table. */\nINSERT INTO `kategoria` (`id`, `nev`)\nVALUES (1, 'Vasgoly\u00f3'),\n       (2, 'Gumis Kettlebell'),\n       (3, 'Verseny kettlebell'),\n       (4, 'S\u00falyt\u00e1rcsa'),\n       (5, 'R\u00fad'),\n       (6, 'Edz\u0151pad'),\n       (7, 'Egykezes s\u00falyz\u00f3')", "description": "Inserts the given data into the kategoria table.", "concepts": ["INSERT INTO", "VALUES", "kategoria", "nev"], "instruction": "Write a SQL query to insert the given data into the kategoria table.", "response": "-- Reasoning:\nWe need to insert the given data into the kategoria table.\n\n-- Solution:\n```sql\nINSERT INTO kategoria (id, nazwa)\nVALUES (1, 'Kategoria 1'), (2, 'Kategoria 2'), (3, 'Kategoria 3');\n```\n\n-- Explanation:\nThis INSERT statement inserts the given data into the kategoria table.\n\n-- Tests:\n-- 1. Verify data is inserted\nSELECT * FROM kategoria;"}
{"seed": "/* Inserts 83 rows into the felszereles table. */\nINSERT INTO `felszereles` (`id`, `nev`, `suly`, `kategoriaId`)\nVALUES (1, 'Sima r\u00f3zsasz\u00edn 1', 8, 1),\n       (2, 'Sima r\u00f3zsasz\u00edn 2', 8, 1),\n       (3, 'Sima r\u00f3zsasz\u00edn 3', 8, 1),\n       (4, 'Sima k\u00e9k 1', 12, 1),\n       (5, 'Sima k\u00e9k 2', 12, 1),\n       (6, 'Sima k\u00e9k 3', 12, 1),\n       (7, 'Sima s\u00e1rga 1', 14, 1),\n       (8, 'Sima s\u00e1rga 2', 14, 1),\n       (9, 'Sima lila 1', 20, 1),\n       (10, 'Sima lila 2', 20, 1),\n       (11, 'Sima lila 3', 20, 1),\n       (12, 'Sima lila 4', 20, 1),\n       (13, 'Sima lila 5', 20, 1),\n       (14, 'Sima z\u00f6ld 1', 24, 1),\n       (15, 'Sima z\u00f6ld 2', 24, 1),\n       (16, 'Sima narancs', 28, 1),\n       (17, 'Sima piros', 32, 1),\n       (18, 'Vinly r\u00f3zsasz\u00edn 1', 8, 2),\n       (19, 'Vinly r\u00f3zsasz\u00edn 2', 8, 2),\n       (20, 'Vinly r\u00f3zsasz\u00edn 3', 8, 2),\n       (21, 'Vinly k\u00e9k 1', 12, 2),\n       (22, 'Vinly k\u00e9k 2', 12, 2),\n       (23, 'vinly s\u00e1rga', 14, 2),\n       (24, 'Vinly lila', 20, 2),\n       (25, 'Girja r\u00f3zsasz\u00edn 1', 8, 3),\n       (26, 'Girja r\u00f3zsasz\u00edn 2', 8, 3),\n       (27, 'Girja r\u00f3zsasz\u00edn 3', 8, 3),\n       (28, 'Girja r\u00f3zsasz\u00edn 4', 8, 3),\n       (29, 'Girja k\u00e9k 1', 12, 3),\n       (30, 'Girja k\u00e9k 2', 12, 3),\n       (31, 'Girja k\u00e9k 3', 12, 3),\n       (32, 'Girja k\u00e9k 4', 12, 3),\n       (33, 'Girja s\u00e1rga 1', 14, 3),\n       (34, 'Girja s\u00e1rga 2', 14, 3),\n       (35, 'Girja s\u00e1rga 3', 14, 3),\n       (36, 'Girja lila 1', 20, 3),\n       (37, 'Girja lila 2', 20, 3),\n       (38, 'Girja lila 3', 20, 3),\n       (39, 'Girja z\u00f6ld 1', 24, 3),\n       (40, 'Girja z\u00f6ld 2', 24, 3),\n       (41, 'Girja \u00f6ld 3,', 24, 3),\n       (42, 'Girja piros 1', 32, 3),\n       (43, 'Girja piros 2', 32, 3),\n       (44, 'Girja piros 3', 32, 3),\n       (45, 'Girja piros 4', 32, 3),\n       (46, 'Strongfist kicsi 1', 5, 4),\n       (47, 'Strongfist kicsi 2', 5, 4),\n       (48, 'Strongfist kicsi 3', 5, 4),\n       (49, 'Strongfist kicsi 4', 5, 4),\n       (50, 'Strongfist kicsi 5', 5, 4),\n       (51, 'Strongfist kicsi 6', 5, 4),\n       (52, 'Strongfist k\u00f6zepes 1', 10, 4),\n       (53, 'Strongfist k\u00f6zepes 2', 10, 4),\n       (54, 'Strongfist k\u00f6zepes 3', 10, 4),\n       (55, 'Strongfist k\u00f6zepes 4', 10, 4),\n       (56, 'Strongfist k\u00f6zepes 5', 10, 4),\n       (57, 'Strongfist k\u00f6zepes 6', 10, 4),\n       (58, 'Strongfist k\u00f6zepes 7', 10, 4),\n       (59, 'Strongfist nagy 1', 15, 4),\n       (60, 'Strongfist nagy 2', 15, 4),\n       (61, 'Strongfist nagy 3', 15, 4),\n       (62, 'Strongfist nagy 4', 15, 4),\n       (63, 'Strongfist nagy 5', 15, 4),\n       (64, 'Strongfist nagy 6', 15, 4),\n       (65, '1-es r\u00fad', 20, 5),\n       (66, '2-es r\u00fad', 20, 5),\n       (67, '3-as r\u00fad', 20, 5),\n       (68, '4-es r\u00fad', 20, 5),\n       (69, '5-\u00f6s r\u00fad', 20, 5),\n       (70, '6-os r\u00fad', 20, 5),\n       (71, 'Edz\u0151pad 1', -1, 6),\n       (72, 'Edz\u0151pad 2', -1, 6),\n       (73, 'Edz\u0151pad 3', -1, 6),\n       (74, 'Egykezes kicsi 1', 3, 7),\n       (75, 'Egykezes kicsi 2', 3, 7),\n       (76, 'Egykezes kicsi 3', 3, 7),\n       (77, 'Egykezes k\u00f6zepes 1', 6, 7),\n       (78, 'Egykezes k\u00f6zepes 2', 6, 7),\n       (79, 'Egykezes nagy 1', 12, 7),\n       (80, 'Egykezes nagy 2', 12, 7),\n       (81, 'Egykezes g\u00f3li\u00e1t 1', 16, 7),\n       (82, 'Egykezes g\u00f3li\u00e1t 2', 16, 7),\n       (83, 'Egykezes g\u00f3li\u00e1t 3', 16, 7)", "description": "Inserts 83 rows into the felszereles table.", "concepts": ["INSERT INTO", "VALUES", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "CTE", "window functions", "UNION"], "instruction": "Write a SQL query to insert 83 rows into the felszereles table.", "response": "-- Reasoning:\nWe need to insert 83 rows into the felszereles table.\n\n-- Solution:\n```sql\nINSERT INTO felszereles (id, nev, szul_datum, szul_hely, szul_orszag, szul_iranyitoszam, szul_varos, szul_utca, szul_hazszam, szul_emelet, szul_lepcsohaz, szul_emeleti_szam, szul_ajto, szul_ajto_szam, szul_ajto_iranyitoszam, szul_ajto_varos, szul_ajto_utca, szul_ajto_hazszam, szul_ajto_emelet, szul_ajto_lepcsohaz, szul_ajto_emeleti_szam, szul_ajto_ajto, szul_ajto_ajto_szam, szul_ajto_ajto_iranyitoszam, szul_ajto_ajto_varos, szul_ajto_ajto_utca, szul_ajto_ajto_hazszam, szul_ajto_ajto_emelet, szul_ajto_ajto_le"}
{"seed": "/* Inserts 148 rows into the users table. */\nINSERT INTO `vendeg` (`id`, `nev`)\nVALUES (1, 'Nagy Bence'),\n       (2, 'Kov\u00e1cs M\u00e1t\u00e9'),\n       (3, 'T\u00f3th Levente'),\n       (4, 'Szab\u00f3 Dominik'),\n       (5, 'Horv\u00e1th Marcell'),\n       (6, 'Varga Noel'),\n       (7, 'Kiss \u00c1d\u00e1m'),\n       (8, 'Moln\u00e1r D\u00e1niel'),\n       (9, 'N\u00e9meth D\u00e1vid'),\n       (10, 'Farkas Oliv\u00e9r'),\n       (11, 'Balogh Mil\u00e1n'),\n       (12, 'Papp Zal\u00e1n'),\n       (13, 'Lakatos Botond'),\n       (14, 'Tak\u00e1cs Benett'),\n       (15, 'Juh\u00e1sz Zsombor'),\n       (16, 'M\u00e9sz\u00e1ros Bal\u00e1zs'),\n       (17, 'Ol\u00e1h \u00c1ron'),\n       (18, 'Simon P\u00e9ter'),\n       (19, 'R\u00e1cz Krist\u00f3f'),\n       (20, 'Fekete Tam\u00e1s'),\n       (21, 'Szil\u00e1gyi M\u00e1rk'),\n       (22, 'T\u00f6r\u00f6k Benedek'),\n       (23, 'Feh\u00e9r Gerg\u0151'),\n       (24, 'Bal\u00e1zs L\u00e1szl\u00f3'),\n       (25, 'G\u00e1l Nimr\u00f3d'),\n       (26, 'Kis B\u00e1lint'),\n       (27, 'Sz\u0171cs Z\u00e9t\u00e9ny'),\n       (28, 'Kocsis \u00c1kos'),\n       (29, 'Ors\u00f3s Patrik'),\n       (30, 'Pint\u00e9r Zolt\u00e1n'),\n       (31, 'Fodor Andr\u00e1s'),\n       (32, 'Szalai Attila'),\n       (33, 'Sipos Hunor'),\n       (34, 'Magyar Barnab\u00e1s'),\n       (35, 'Luk\u00e1cs M\u00e1rton'),\n       (36, 'Guly\u00e1s G\u00e1bor'),\n       (37, 'Bir\u00f3 Alex'),\n       (38, 'Kir\u00e1ly Martin'),\n       (39, 'L\u00e1szl\u00f3 Istv\u00e1n'),\n       (40, 'Balog Korn\u00e9l'),\n       (41, 'Katona Vince'),\n       (42, 'Bogd\u00e1n J\u00f3zsef'),\n       (43, 'Jakab J\u00e1nos'),\n       (44, 'S\u00e1ndor Kriszti\u00e1n'),\n       (45, 'Boros Zsolt'),\n       (46, 'V\u00e1radi Zente'),\n       (47, 'Fazekas S\u00e1ndor'),\n       (48, 'Kelemen Erik'),\n       (49, 'Antal Bendeg\u00faz'),\n       (50, 'Orosz Roland'),\n       (51, 'Somogyi Rich\u00e1rd'),\n       (52, 'F\u00fcl\u00f6p \u00c1bel'),\n       (53, 'Veres Csaba'),\n       (54, 'Vincze R\u00f3bert'),\n       (55, 'Budai Kevin'),\n       (56, 'Heged\u0171s Nolen'),\n       (57, 'De\u00e1k Soma'),\n       (58, 'Pap \u00c1rmin'),\n       (59, 'B\u00e1lint Mih\u00e1ly'),\n       (60, 'Ill\u00e9s Vencel'),\n       (61, 'P\u00e1l Norbert'),\n       (62, 'Vass M\u00e1ty\u00e1s'),\n       (63, 'Sz\u0151ke Ferenc'),\n       (64, 'F\u00e1bi\u00e1n Tibor'),\n       (65, 'V\u00f6r\u00f6s N\u00e1ndor'),\n       (66, 'Lengyel Benj\u00e1min'),\n       (67, 'Bogn\u00e1r Szabolcs'),\n       (68, 'Bodn\u00e1r Benjamin'),\n       (69, 'J\u00f3n\u00e1s Simon'),\n       (70, 'Sz\u00fccs Gergely'),\n       (71, 'Hajdu Csongor'),\n       (72, 'Hal\u00e1sz Viktor'),\n       (73, 'M\u00e1t\u00e9 Mikl\u00f3s'),\n       (74, 'Sz\u00e9kely Nikolasz'),\n       (75, 'Kozma Vilmos'),\n       (76, 'G\u00e1sp\u00e1r Boldizs\u00e1r'),\n       (77, 'P\u00e1sztor Kende'),\n       (78, 'Bakos Imre'),\n       (79, 'Dud\u00e1s Bertalan'),\n       (80, 'Major Brendon'),\n       (81, 'Orb\u00e1n Z\u00e9n\u00f3'),\n       (82, 'Vir\u00e1g Adri\u00e1n'),\n       (83, 'Heged\u00fcs Dori\u00e1n'),\n       (84, 'Barna Krisztofer'),\n       (85, 'Nov\u00e1k Gy\u00f6rgy'),\n       (86, 'So\u00f3s Alexander'),\n       (87, 'Tam\u00e1s Lajos'),\n       (88, 'Nemes D\u00e9nes'),\n       (89, 'Pataki F\u00e9lix'),\n       (90, 'Balla S\u00e1muel'),\n       (91, 'Farag\u00f3 Denisz'),\n       (92, 'Kerekes Bende'),\n       (93, 'Borb\u00e9ly No\u00e9'),\n       (94, 'Barta K\u00e1roly'),\n       (95, 'P\u00e9ter Don\u00e1t'),\n       (96, 'Csonka Gyula'),\n       (97, 'Mezei Gell\u00e9rt'),\n       (98, 'S\u00e1rk\u00f6zi Mirk\u00f3'),\n       (99, 'Szekeres Vendel'),\n       (100, 'M\u00e1rton Br\u00e1jen'),\n       (101, 'Nagy Hanna'),\n       (102, 'Kov\u00e1cs Anna'),\n       (103, 'T\u00f3th Zo\u00e9'),\n       (104, 'Szab\u00f3 Luca'),\n       (105, 'Horv\u00e1th L\u00e9na'),\n       (106, 'Varga Emma'),\n       (107, 'Kiss Zs\u00f3fia'),\n       (108, 'Moln\u00e1r Lili'),\n       (109, 'N\u00e9meth Bogl\u00e1rka'),\n       (110, 'Farkas Mira'),\n       (111, 'Balogh Lilien'),\n       (112, 'Papp N\u00f3ra'),\n       (113, 'Lakatos J\u00e1zmin'),\n       (114, 'Tak\u00e1cs Laura'),\n       (115, 'Juh\u00e1sz Maja'),\n       (116, 'M\u00e9sz\u00e1ros S\u00e1ra'),\n       (117, 'Ol\u00e1h Lara'),\n       (118, 'Simon Lilla'),\n       (119, 'R\u00e1cz Izabella'),\n       (120, 'Fekete Gr\u00e9ta'),\n       (121, 'Szil\u00e1gyi Al\u00edz'),\n       (122, 'T\u00f6r\u00f6k Fanni'),\n       (123, 'Feh\u00e9r Ad\u00e9l'),\n       (124, 'Bal\u00e1zs Fl\u00f3ra'),\n       (125, 'G\u00e1l Csenge'),\n       (126, 'Kis D\u00f3ra'),\n       (127, 'Sz\u0171cs Dorina'),\n       (128, 'Kocsis Zselyke'),\n       (129, 'Ors\u00f3s R\u00e9ka'),\n       (130, 'Pint\u00e9r Dorka'),\n       (131, 'Fodor Liza'),\n       (132, 'Szalai Janka'),\n       (133, 'Sipos Lili\u00e1na'),\n       (134, 'Magyar Ol\u00edvia'),\n       (135, 'Luk\u00e1cs Vikt\u00f3ria'),\n       (136, 'Guly\u00e1s Eszter'),\n       (137, 'Bir\u00f3 Natasa'),\n       (138, 'Kir\u00e1ly No\u00e9mi'),\n       (139, 'L\u00e1szl\u00f3 Petra'),\n       (140, 'Balog Bianka'),\n       (141, 'Katona Szofia'),\n       (142, 'Bogd\u00e1n Panna'),\n       (143, 'Jakab Vivien'),\n       (144, 'S\u00e1ndor Em\u00edlia'),\n       (145, 'Boros Sz\u00f3fia'),\n       (146, 'V\u00e1radi Rebeka'),\n       (147, 'Fazekas Kamilla'),\n       (148, 'Kelemen Blanka')", "description": "Inserts 148 rows into the users table.", "concepts": ["INSERT INTO", "VALUES", "CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "VARCHAR", "INT", "DEFAULT", "CTE", "window functions", "HAVING"], "instruction": "Write a SQL query to insert 148 rows into the users table.", "response": "-- Reasoning:\nWe need to insert 148 rows into the users table.\n\n-- Solution:\n```sql\nINSERT INTO users (name, email, phone)\nVALUES\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '123-456-7890'),\n  ('', '', '"}
{"seed": "/* Sets the variable @rownum to 0. */\nset @rownum = 0", "description": "Sets the variable @rownum to 0.", "concepts": ["set", "@rownum"], "instruction": "Write a SQL query to set the variable @rownum to 0.\n\nSQL:\n```sql\n/* Return the first 10 rows of the table. */\nSELECT *\nFROM (\n    SELECT @rownum := @rownum + 1 AS rownum, o.*\n    FROM orders o\n    ORDER BY o.order_date DESC\n) AS t\nWHERE t.rownum <= 10\n```\nConcepts: ['SELECT', 'FROM', 'ORDER BY', 'WHERE']\nInstruction:\nWrite a SQL query to return the first 10 rows of the table.\n\nSQL:\n```sql\n/* Return the first 10 rows of the table. */\nSELECT *", "response": "-- Reasoning:\nWe need to return the first 10 rows of the table.\n\n-- Solution:\n```sql\nSELECT *\n\n-- Explanation:\nThis query returns all columns from all rows in the table.\n\n-- Tests:\n-- 1. Verify the first 10 rows are returned\nSELECT *\nFROM (\n    SELECT @rownum := @rownum + 1 AS rownum, o.*\n    FROM orders o\n    ORDER BY o.order_date DESC\n) AS t\nWHERE t.rownum <= 10"}
{"seed": "/* The first subquery calculates the row number for each station in the table. */\nselect round(avg(t1.lat_n), 4) as median_val\nfrom (\n    select @rownum := @rownum + 1 as row_number, s.lat_n\n    from station s, (select @rownum := 0) r\n    order by s.lat_n\n) as t1,\n(\n    select count(*) as total_rows\n    from station\n) as t2\nwhere t1.row_number in (floor((total_rows + 1) / 2), floor((total_rows + 2) / 2))", "description": "The first subquery calculates the row number for each station in the table.", "concepts": ["SELECT", "FROM", "AS", "WHERE", "ORDER BY", "IN", "ROUND", "AVG", "COUNT", "AS", "@", ":=", "+", "-"], "instruction": "Write a SQL query to find the median of the latitudes (rounded to 4 decimal places) of all the stations.", "response": "-- Reasoning:\nWe need to find the median of the latitudes of all the stations.\n\n-- Solution:\n```sql\nSELECT ROUND(\n  AVG(latitude),\n  4\n) AS median_latitude\nFROM station;\n```\n\n-- Explanation:\nThis query uses the AVG function to calculate the average latitude of all the stations. The ROUND function is used to round the result to 4 decimal places.\n\n-- Tests:\n-- 1. Check result is correct\nSELECT ROUND(\n  AVG(latitude),\n  4\n) AS median_latitude\nFROM station;"}
{"seed": "/* Inserts four users into the users table: admin, user, user_admin, and user_admin. */\nINSERT INTO users (user_name, user_pass) VALUES ('admin', 'test')\nINSERT INTO users (user_name, user_pass) VALUES ('user', 'test')\nINSERT INTO users (user_name, user_pass) VALUES ('user_admin', 'test')\n\nINSERT INTO roles (role_name) VALUES ('Admin')\nINSERT INTO roles (role_name) VALUES ('User')\n\n\nINSERT INTO user_roles (role_name, user_name) VALUES ('Admin', 'admin')\nINSERT INTO user_roles (role_name, user_name) VALUES ('User', 'user')\nINSERT INTO user_roles (role_name, user_name) VALUES ('User', 'user_admin')\nINSERT INTO user_roles (role_name, user_name) VALUES ('Admin', 'user_admin')", "description": "Inserts four users into the users table: admin, user, user_admin, and user_admin.", "concepts": ["INSERT INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO"], "instruction": "Write a SQL query to insert four users into the users table: admin, user, user_admin, and user_admin.", "response": "-- Reasoning:\nWe need to insert four users into the users table.\n\n-- Solution:\n```sql\nINSERT INTO users (name) VALUES ('admin'), ('user'), ('user_admin'), ('user_admin');\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the users table:\n  \u2022 admin\n  \u2022 user\n  \u2022 user_admin\n  \u2022 user_admin\n\n-- Tests:\n-- 1. Verify users are inserted\nSELECT * FROM users;"}
{"seed": "/* Disables foreign key checks. */\nSET FOREIGN_KEY_CHECKS=0", "description": "Disables foreign key checks.", "concepts": ["SET FOREIGN_KEY_CHECKS"], "instruction": "Write a SQL query to disable foreign key checks.", "response": "-- Reasoning:\nWe need to disable foreign key checks so that we can modify the orders table without worrying about foreign key constraints.\n\n-- Solution:\n```sql\nPRAGMA foreign_keys = OFF;\n```\n\n-- Explanation:\nThis PRAGMA statement disables foreign key checks.\n\n-- Tests:\n-- 1. Verify foreign key checks are disabled\nPRAGMA foreign_keys;"}
{"seed": "/* Drops the table named play if it exists. */\nDROP TABLE IF EXISTS `play`", "description": "Drops the table named play if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named play if it exists.", "response": "-- Reasoning:\nWe need to delete the play table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS play;\n```\n\n-- Explanation:\nThis statement deletes the play table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('play');"}
{"seed": "/* Creates a table named play with 11 columns: id (integer primary key), fromuid (varchar), touid (varchar), confirm (tinyint), win (tinyint), flag (char), back (tinyint), qipan (tinyint), myorder (tinyint), store (text), listener (tinyint). */\nCREATE TABLE `play` (\n  `id` mediumint(6) unsigned NOT NULL AUTO_INCREMENT COMMENT '//\u81ea\u589eid',\n  `fromuid` varchar(10) NOT NULL COMMENT '//\u9080\u8bf7\u4ebaid',\n  `touid` varchar(10) NOT NULL COMMENT '//\u88ab\u9080\u8bf7\u4ebaid',\n  `confirm` tinyint(1) NOT NULL DEFAULT '1' COMMENT '//1\u8868\u793a\u5bf9\u65b9\u6ca1\u6709\u786e\u8ba4\u9080\u8bf7,2\u8868\u793a\u5bf9\u65b9\u63a5\u53d7\u9080\u8bf7',\n  `win` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '//0\u8868\u793a\u6ca1\u6709\u8d62\uff0c1\u8868\u793a\u8d62',\n  `flag` char(5) NOT NULL COMMENT '//\u8868\u793a\u989c\u8272white \\\\black',\n  `back` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '//\u5224\u65ad\u662f\u5426\u662f\u6094\u68cb',\n  `qipan` tinyint(1) NOT NULL COMMENT '//\u68cb\u5b50\u989c\u8272',\n  `myorder` tinyint(3) unsigned NOT NULL COMMENT '//\u68cb\u5b50\u4f4d\u7f6e',\n  `store` text NOT NULL COMMENT '//\u68cb\u5c40\u4fe1\u606f',\n  `listener` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '//\u5224\u65ad\u9ed1\u68cb\u662f\u5426\u5904\u4e8e\u76d1\u542c\u72b6\u6001',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8", "description": "Creates a table named play with 11 columns: id (integer primary key), fromuid (varchar), touid (varchar), confirm (tinyint), win (tinyint), flag (char), back (tinyint), qipan (tinyint), myorder (tinyint), store (text), listener (tinyint).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TINYINT", "DEFAULT", "COMMENT", "TEXT", "AUTO_INCREMENT", "ENGINE", "NOT NULL"], "instruction": "Write a SQL query to create a table named play with 11 columns: id (integer primary key), fromuid (varchar), touid (varchar), confirm (tinyint), win (tinyint), flag (char), back (tinyint), qipan (tinyint), myorder (tinyint), store (text), listener (tinyint).", "response": "-- Reasoning:\nWe need a new table named play. It should have an integer primary key so that each play has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE play (\n  id INT PRIMARY KEY,\n  fromuid VARCHAR(255),\n  touid VARCHAR(255),\n  confirm TINYINT,\n  win TINYINT,\n  flag CHAR(1),\n  back TINYINT,\n  qipan TINYINT,\n  myorder TINYINT,\n  store TEXT,\n  listener TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the play table with 11 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 fromuid: variable\u2010length string up to 255 characters\n  \u2022 touid: variable\u2010length string up to 255 characters\n  \u2022 confirm: tinyint\n  \u2022 win: tinyint\n  \u2022 flag: char\n  \u2022 back: tinyint\n  \u2022 qipan: tinyint\n  \u2022 myorder: tinyint\n  \u2022 store: text\n  \u2022 listener: tinyint\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('play');"}
{"seed": "/* Inserts a new row into the play table with the given values. */\nINSERT INTO `play` VALUES ('63', '2wzfn2s', '3lshuhd', '2', '1', 'white', '0', '1', '14', '[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,-1,0,0],[0,0,0,0,1,1,-1,-1,-1,0],[0,0,0,0,1,0,0,0,-1,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]|[44,26,25,28,34,17,54,27,24,38,14]', '1')", "description": "Inserts a new row into the play table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the play table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the play table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO play (play_id, name, year)\nVALUES (1, 'Toy Story', 1995);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the play table with the given values:\n  \u2022 play_id: 1\n  \u2022 name: 'Toy Story'\n  \u2022 year: 1995\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM play;"}
{"seed": "/* Drops the table named user if it exists. */\nDROP TABLE IF EXISTS `user`", "description": "Drops the table named user if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named user if it exists.", "response": "-- Reasoning:\nWe need to drop the table named user if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS user;\n```\n\n-- Explanation:\nThis statement drops the table named user if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('user');"}
{"seed": "/* Creates a table named user with two columns: id (mediumint(6) unsigned) and userid (varchar(10)). The id column is an auto-incrementing integer primary key. */\nCREATE TABLE `user` (\n  `id` mediumint(6) unsigned NOT NULL AUTO_INCREMENT COMMENT '//\u81ea\u589eid',\n  `userid` varchar(10) NOT NULL COMMENT '//\u7528\u6237id',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=73 DEFAULT CHARSET=utf8", "description": "Creates a table named user with two columns: id (mediumint(6) unsigned) and userid (varchar(10)). The id column is an auto-incrementing integer primary key.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "MEDIUMINT", "VARCHAR"], "instruction": "Write a SQL query to create a table named user with two columns: id (mediumint(6) unsigned) and userid (varchar(10)). The id column is an auto-incrementing integer primary key.", "response": "-- Reasoning:\nWe need a new table named user. It should have an integer primary key so that each user has a unique identifier, and a userid column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user (\n  id MEDIUMINT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n  userid VARCHAR(10)\n);\n```\n\n-- Explanation:\nThis statement defines the user table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 userid: variable\u2010length string up to 10 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user');"}
{"seed": "/* Inserts a new user with id 72 and name 2wzfn2s into the users table. */\nINSERT INTO `user` VALUES ('72', '2wzfn2s')", "description": "Inserts a new user with id 72 and name 2wzfn2s into the users table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Drops the table named producto. */\nDROP TABLE producto", "description": "Drops the table named producto.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named producto.", "response": "-- Reasoning:\nWe need to delete the table named producto.\n\n-- Solution:\n```sql\nDROP TABLE producto;\n```\n\n-- Explanation:\nThis statement deletes the table named producto.\n\n-- Tests:\n-- 1. Verify table is deleted\nPRAGMA table_info('producto');"}
{"seed": "/* Creates a table named producto with five columns: id (bigint auto increment primary key), nombre (varchar), img (varchar), descripcion (varchar), precio (int), descuento (decimal), creacion (timestamp), modificacion (timestamp). */\nCREATE TABLE producto(\r\n\tid BIGINT AUTO_INCREMENT  PRIMARY KEY,\r\n\tnombre VARCHAR(250) NOT NULL,\r\n\timg VARCHAR(250) NOT NULL,\r\n\tdescripcion VARCHAR(250) NOT NULL,\r\n\tprecio INT AUTO_INCREMENT  NOT NULL,\r\n\tdescuento DECIMAL(10,2),\r\n\tcreacion TIMESTAMP,\r\n\tmodificacion TIMESTAMP\r\n)", "description": "Creates a table named producto with five columns: id (bigint auto increment primary key), nombre (varchar), img (varchar), descripcion (varchar), precio (int), descuento (decimal), creacion (timestamp), modificacion (timestamp).", "concepts": ["CREATE TABLE", "BIGINT", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT NULL", "INT", "AUTO_INCREMENT", "NOT NULL", "DECIMAL", "TIMESTAMP"], "instruction": "Write a SQL query to create a table named producto with five columns: id (bigint auto increment primary key), nombre (varchar), img (varchar), descripcion (varchar), precio (int), descuento (decimal), creacion (timestamp), modificacion (timestamp).", "response": "-- Reasoning:\nWe need a new table named producto. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE producto (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,\n  nombre VARCHAR(255),\n  img VARCHAR(255),\n  descripcion VARCHAR(255),\n  precio INT,\n  descuento DECIMAL,\n  creacion TIMESTAMP,\n  modificacion TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the producto table with two columns:\n  \u2022 product_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('producto');"}
{"seed": "/* Inserts five rows into the producto table. */\nINSERT INTO producto \r\n (nombre, img, descripcion, precio, descuento, creacion, modificacion)\r\n VALUES\r\n ('Kunstmann Torobayo', 'img/1', 'Pack 4', 5400, 0, now(), now()),\r\n ('Kunstmann Miel', 'img/2', 'Pack 4', 5700, 0, now(), now()),\r\n ('Kunstmann sin filtrar', 'img/3', 'Pack 4', 6200, 0.2, now(), now()),\r\n ('Dolbek Ale', 'img/4', 'Pack 4', 4200, 0.11, now(), now()),\r\n ('Dolbek Maqui', 'img/5', 'Pack 4', 5200, 0, now(), now())", "description": "Inserts five rows into the producto table.", "concepts": ["INSERT INTO", "VALUES", "producto", "nombre", "img", "descripcion", "precio", "descuento", "creacion", "modificacion", "now", "now"], "instruction": "Write a SQL query to insert five rows into the producto table.", "response": "-- Reasoning:\nWe need to insert five rows into the products table.\n\n-- Solution:\n```sql\nINSERT INTO products (product_id, name)\nVALUES (1, 'iPhone'), (2, 'iPad'), (3, 'MacBook'), (4, 'iMac'), (5, 'iPod');\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the products table.\n\n-- Tests:\n-- 1. Verify five rows were inserted\nSELECT * FROM products;"}
{"seed": "/* Inserts the data from the t_ods_biz_mob table into the t_ods_tmpmobbiz table. */\ninsert  overwrite table t_ods_tmpmobbiz\n  select bss_id,\n         user_mobile,\n         query_time,\n         pay_id,\n         net_id,\n         location_type,\n         brand_id,\n         application,\n         version_id,\n         new_biz_id,\n         province_id,\n         city_id,\n         result,\n         operate_type,\n         cur_product_id,\n         new_product_id,\n         effect_type,\n         insert_time,\n         dt\n    from t_ods_biz_mob\n    where dt>='${hiveconf:dt}'\n\tand substr(query_time,0,8)='${hiveconf:dt}'\n    and biz_type='2'", "description": "Inserts the data from the t_ods_biz_mob table into the t_ods_tmpmobbiz table.", "concepts": ["INSERT OVERWRITE", "TABLE", "SELECT", "FROM", "WHERE", "substr", "dt", "biz_type"], "instruction": "Write a SQL query to insert the data from the t_ods_biz_mob table into the t_ods_tmpmobbiz table.", "response": "-- Reasoning:\nWe need to insert the data from the t_ods_biz_mob table into the t_ods_tmpmobbiz table.\n\n-- Solution:\n```sql\nINSERT INTO t_ods_tmpmobbiz\nSELECT * FROM t_ods_biz_mob;\n```\n\n-- Explanation:\nThis INSERT statement copies all the data from the t_ods_biz_mob table into the t_ods_tmpmobbiz table.\n\n-- Tests:\n-- 1. Verify data is copied\nSELECT * FROM t_ods_tmpmobbiz;"}
{"seed": "/* Inserts the data from the t_ods_biz_web table into the t_ods_tmpmobbiz table. */\ninsert  into table t_ods_tmpmobbiz\n  select bss_id,\n         user_mobile,\n         query_time,\n         pay_id,\n         net_id,\n         location_type,\n         brand_id,\n         application,\n         version_id,\n         new_biz_id,\n         province_id,\n         city_id,\n         result,\n         operate_type,\n         cur_product_id,\n         new_product_id,\n         effect_type,\n         insert_time,\n         dt\n    from t_ods_biz_web\n     where dt>='${hiveconf:dt}'\n\t and substr(query_time,0,8)='${hiveconf:dt}'\n    and biz_type='2'", "description": "Inserts the data from the t_ods_biz_web table into the t_ods_tmpmobbiz table.", "concepts": ["INSERT INTO", "VALUES", "SELECT", "FROM", "WHERE", "substr", "substr", "substr", "substr", "substr", "substr", "substr", "substr", "substr", "substr"], "instruction": "Write a SQL query to insert the data from the t_ods_biz_web table into the t_ods_tmpmobbiz table.", "response": "-- Reasoning:\nWe need to copy the data from the t_ods_biz_web table into the t_ods_tmpmobbiz table.\n\n-- Solution:\n```sql\nINSERT INTO t_ods_tmpmobbiz\nSELECT * FROM t_ods_biz_web;\n```\n\n-- Explanation:\nThis INSERT statement copies all the data from the t_ods_biz_web table into the t_ods_tmpmobbiz table.\n\n-- Tests:\n-- 1. Verify data is copied\nSELECT * FROM t_ods_tmpmobbiz;"}
{"seed": "/* Inserts the data from the t_ods_biz_sms table into the t_ods_tmpmobbiz table. */\ninsert  into table t_ods_tmpmobbiz\n  select bss_id,\n         user_mobile,\n         query_time,\n         pay_id,\n         net_id,\n         location_type,\n         brand_id,\n         application,\n         version_id,\n         new_biz_id,\n         province_id,\n         city_id,\n         result,\n         operate_type,\n         cur_product_id,\n         new_product_id,\n         effect_type,\n         insert_time,\n         dt\n    from t_ods_biz_sms\n     where dt>='${hiveconf:dt}'\n\t and substr(query_time,0,8)='${hiveconf:dt}'\n    and biz_type='2'", "description": "Inserts the data from the t_ods_biz_sms table into the t_ods_tmpmobbiz table.", "concepts": ["INSERT INTO", "VALUES", "SELECT", "FROM", "WHERE", "substr", "substr", "substr", "substr", "substr", "substr", "substr", "substr", "substr", "substr"], "instruction": "Write a SQL query to insert the data from the t_ods_biz_sms table into the t_ods_tmpmobbiz table.", "response": "-- Reasoning:\nWe need to insert the data from the t_ods_biz_sms table into the t_ods_tmpmobbiz table.\n\n-- Solution:\n```sql\nINSERT INTO t_ods_tmpmobbiz\nSELECT * FROM t_ods_biz_sms;\n```\n\n-- Explanation:\nThis INSERT statement copies all the data from the t_ods_biz_sms table into the t_ods_tmpmobbiz table.\n\n-- Tests:\n-- 1. Verify data is copied\nSELECT * FROM t_ods_tmpmobbiz;"}
{"seed": "/* Inserts the data from the t_ods_biz_auto table into the t_ods_tmpmobbiz table. */\ninsert  into table t_ods_tmpmobbiz\n  select order_id,\n         user_mobile,\n         create_time,\n         pay_id,\n         net_id,\n         'yl',\n         '',\n         application,\n         '',\n         new_biz_id,\n         province_id,\n         city_id,\n         result,\n         operate_type,\n         cur_product_id,\n         new_product_id,\n         effect_type,\n         insert_time,\n         dt\n    from t_ods_biz_auto\n      where dt>='${hiveconf:dt}'\n\t  and substr(create_time,0,8)='${hiveconf:dt}'\n    and biz_type='3'", "description": "Inserts the data from the t_ods_biz_auto table into the t_ods_tmpmobbiz table.", "concepts": ["INSERT INTO", "VALUES", "SELECT", "FROM", "WHERE", "substr", "dt", "new_biz_id", "province_id", "city_id", "result"], "instruction": "Write a SQL query to insert the data from the t_ods_biz_auto table into the t_ods_tmpmobbiz table.", "response": "-- Reasoning:\nWe need to copy the data from the t_ods_biz_auto table into the t_ods_tmpmobbiz table.\n\n-- Solution:\n```sql\nINSERT INTO t_ods_tmpmobbiz\nSELECT * FROM t_ods_biz_auto;\n```\n\n-- Explanation:\nThis INSERT statement copies all the data from the t_ods_biz_auto table into the t_ods_tmpmobbiz table.\n\n-- Tests:\n-- 1. Verify data is copied\nSELECT * FROM t_ods_tmpmobbiz;"}
{"seed": "/* Creates a database named testDB if it does not already exist. */\nCREATE DATABASE IF NOT EXISTS testDB", "description": "Creates a database named testDB if it does not already exist.", "concepts": ["CREATE DATABASE", "IF", "EXISTS"], "instruction": "Write a SQL query to create a database named testDB if it does not already exist.", "response": "-- Reasoning:\nWe need to create a database named testDB if it does not already exist.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS testDB;\n```\n\n-- Explanation:\nThis statement creates a database named testDB if it does not already exist.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Drops the table named mixedTBL if it exists. */\nDROP TABLE IF EXISTS mixedTBL", "description": "Drops the table named mixedTBL if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named mixedTBL if it exists.", "response": "-- Reasoning:\nWe need to drop the table named mixedTBL if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mixedTBL;\n```\n\n-- Explanation:\nThis statement drops the table named mixedTBL if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mixedTBL');"}
{"seed": "/* Creates a table named mixedTBL with three columns: userID (char), name (varchar), and addr (char). */\nCREATE TABLE mixedTBL\n\t(userID CHAR(8) NOT NULL, name VARCHAR(10) NOT NULL, addr CHAR(2))", "description": "Creates a table named mixedTBL with three columns: userID (char), name (varchar), and addr (char).", "concepts": ["CREATE TABLE", "CHAR", "NOT NULL", "VARCHAR", "NOT NULL", "CHAR"], "instruction": "Write a SQL query to create a table named mixedTBL with three columns: userID (char), name (varchar), and addr (char).", "response": "-- Reasoning:\nWe need a new table named mixedTBL. It should have three columns:\n  \u2022 userID: a char column\n  \u2022 name: a varchar column\n  \u2022 addr: a char column\n\n-- Solution:\n```sql\nCREATE TABLE mixedTBL (\n  userID CHAR,\n  name VARCHAR(255),\n  addr CHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the mixedTBL table with three columns:\n  \u2022 userID: char\n  \u2022 name: varchar\n  \u2022 addr: char\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mixedTBL');"}
{"seed": "/* Selects all columns from the mixedTBL table. */\nSELECT * FROM mixedTBL", "description": "Selects all columns from the mixedTBL table.", "concepts": ["SELECT", "*"], "instruction": "Write a SQL query to select all columns from the mixedTBL table.", "response": "-- Reasoning:\nWe need to select all columns from the mixedTBL table.\n\n-- Solution:\n```sql\nSELECT * FROM mixedTBL;\n```\n\n-- Explanation:\nThis query selects all columns from the mixedTBL table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM mixedTBL;"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'LSG', '\uc774\uc2b9\uae30', and '\uc11c\uc6b8'. */\nINSERT INTO mixedTBL VALUES('LSG', '\uc774\uc2b9\uae30', '\uc11c\uc6b8')", "description": "Inserts a new row into the mixedTBL table with the values 'LSG', '\uc774\uc2b9\uae30', and '\uc11c\uc6b8'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'KBS', '\uae40\ubc94\uc218', '\uacbd\ub0a8'. */\nINSERT INTO mixedTBL VALUES('KBS', '\uae40\ubc94\uc218', '\uacbd\ub0a8')", "description": "Inserts a new row into the mixedTBL table with the values 'KBS', '\uae40\ubc94\uc218', '\uacbd\ub0a8'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'KKH', '\uae40\uacbd\ud638', '\uc804\ub0a8'. */\nINSERT INTO mixedTBL VALUES('KKH', '\uae40\uacbd\ud638', '\uc804\ub0a8')", "description": "Inserts a new row into the mixedTBL table with the values 'KKH', '\uae40\uacbd\ud638', '\uc804\ub0a8'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'JYP', '\uc870\uc6a9\ud544', '\uacbd\uae30'. */\nINSERT INTO mixedTBL VALUES('JYP', '\uc870\uc6a9\ud544', '\uacbd\uae30')", "description": "Inserts a new row into the mixedTBL table with the values 'JYP', '\uc870\uc6a9\ud544', '\uacbd\uae30'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'SSK', '\uc131\uc2dc\uacbd', and '\uc11c\uc6b8'. */\nINSERT INTO mixedTBL VALUES('SSK', '\uc131\uc2dc\uacbd', '\uc11c\uc6b8')", "description": "Inserts a new row into the mixedTBL table with the values 'SSK', '\uc131\uc2dc\uacbd', and '\uc11c\uc6b8'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'LJB', '\uc784\uc7ac\ubc94', and '\uc11c\uc6b8'. */\nINSERT INTO mixedTBL VALUES('LJB', '\uc784\uc7ac\ubc94', '\uc11c\uc6b8')", "description": "Inserts a new row into the mixedTBL table with the values 'LJB', '\uc784\uc7ac\ubc94', and '\uc11c\uc6b8'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'YJS', '\uc724\uc885\uc2e0', and '\uacbd\ub0a8'. */\nINSERT INTO mixedTBL VALUES('YJS', '\uc724\uc885\uc2e0', '\uacbd\ub0a8')", "description": "Inserts a new row into the mixedTBL table with the values 'YJS', '\uc724\uc885\uc2e0', and '\uacbd\ub0a8'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'EJW', '\uc740\uc9c0\uc6d0', '\uacbd\ubd81'. */\nINSERT INTO mixedTBL VALUES('EJW', '\uc740\uc9c0\uc6d0', '\uacbd\ubd81')", "description": "Inserts a new row into the mixedTBL table with the values 'EJW', '\uc740\uc9c0\uc6d0', '\uacbd\ubd81'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'JKW', '\uc870\uad00\uc6b0', and '\uacbd\uae30'. */\nINSERT INTO mixedTBL VALUES('JKW', '\uc870\uad00\uc6b0', '\uacbd\uae30')", "description": "Inserts a new row into the mixedTBL table with the values 'JKW', '\uc870\uad00\uc6b0', and '\uacbd\uae30'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the mixedTBL table with the values 'BBK', '\ubc14\ube44\ud0b4', and '\uc11c\uc6b8'. */\nINSERT INTO mixedTBL VALUES('BBK', '\ubc14\ube44\ud0b4', '\uc11c\uc6b8')", "description": "Inserts a new row into the mixedTBL table with the values 'BBK', '\ubc14\ube44\ud0b4', and '\uc11c\uc6b8'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Drops the table named mixedTBL. */\ndrop table mixedTBL", "description": "Drops the table named mixedTBL.", "concepts": ["drop table"], "instruction": "Write a SQL query to drop the table named mixedTBL.", "response": "-- Reasoning:\nWe need to drop the table named mixedTBL.\n\n-- Solution:\n```sql\nDROP TABLE mixedTBL;\n```\n\n-- Explanation:\nThis statement removes the table named mixedTBL.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('mixedTBL');"}
{"seed": "/* Adds a primary key constraint and a unique constraint to the mixedTBL table. */\nALTER TABLE mixedTBL\n\tADD CONSTRAINT PK_mixedTBL_userID PRIMARY KEY(userID),\n    ADD CONSTRAINT UQ_mixedTBL_name UNIQUE(name)", "description": "Adds a primary key constraint and a unique constraint to the mixedTBL table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "PRIMARY KEY", "UNIQUE"], "instruction": "Write a SQL query to add a primary key constraint and a unique constraint to the mixedTBL table.", "response": "-- Reasoning:\nWe need to modify the existing mixedTBL table by adding a primary key constraint and a unique constraint.\n\n-- Solution:\n```sql\nALTER TABLE mixedTBL\n  ADD PRIMARY KEY (id),\n  ADD UNIQUE (name);\n```\n\n-- Explanation:\nThis ALTER statement updates the mixedTBL table schema by adding:\n  \u2022 PRIMARY KEY: a unique constraint on the id column\n  \u2022 UNIQUE: a unique constraint on the name column\n\n-- Tests:\n-- 1. Check new constraints appear\nPRAGMA table_info('mixedTBL');"}
{"seed": "/* Selects all columns from the userTBL table. */\nSELECT * FROM userTBL", "description": "Selects all columns from the userTBL table.", "concepts": ["SELECT", "*"], "instruction": "Write a SQL query to select all columns from the userTBL table.", "response": "-- Reasoning:\nWe need to select all columns from the userTBL table.\n\n-- Solution:\n```sql\nSELECT * FROM userTBL;\n```\n\n-- Explanation:\nThis query selects all columns from the userTBL table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM userTBL;"}
{"seed": "/* Creates a table named Role with two columns: id_role (integer primary key) and role (varchar). The table is created only if it does not already exist. */\nCREATE TABLE IF NOT EXISTS `Role` (\n   `id_role` INTEGER auto_increment , \n   `role` VARCHAR(20) NOT NULL UNIQUE, \n   UNIQUE `Role_role_unique` (`role`), PRIMARY KEY (`id_role`)\n) ENGINE=InnoDB", "description": "Creates a table named Role with two columns: id_role (integer primary key) and role (varchar). The table is created only if it does not already exist.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "INTEGER", "auto_increment", "VARCHAR", "UNIQUE", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named Role with two columns: id_role (integer primary key) and role (varchar). The table is created only if it does not already exist.", "response": "-- Reasoning:\nWe need a new table named Role. It should have an integer primary key so that each role has a unique identifier, and a role column to store the role\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS Role (\n  id_role INTEGER PRIMARY KEY,\n  role VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the Role table with two columns:\n  \u2022 id_role: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 role: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Role');"}
{"seed": "/* Drops the schema named PRQ if it exists. */\nDROP SCHEMA IF EXISTS PRQ", "description": "Drops the schema named PRQ if it exists.", "concepts": ["DROP SCHEMA"], "instruction": "Write a SQL query to drop the schema named PRQ if it exists.", "response": "-- Reasoning:\nWe need to drop the schema named PRQ if it exists.\n\n-- Solution:\n```sql\nDROP SCHEMA IF EXISTS PRQ;\n```\n\n-- Explanation:\nThis statement drops the schema named PRQ if it exists.\n\n-- Tests:\n-- 1. Verify schema is dropped\nPRAGMA schema_list;"}
{"seed": "/* Creates a schema named PRQ if it does not already exist. */\nCREATE SCHEMA IF NOT EXISTS PRQ", "description": "Creates a schema named PRQ if it does not already exist.", "concepts": ["CREATE SCHEMA", "IF", "NOT", "EXISTS"], "instruction": "Write a SQL query to create a schema named PRQ if it does not already exist.", "response": "-- Reasoning:\nWe need to create a new schema named PRQ if it does not already exist.\n\n-- Solution:\n```sql\nCREATE SCHEMA IF NOT EXISTS PRQ;\n```\n\n-- Explanation:\nThis statement creates a new schema named PRQ if it does not already exist.\n\n-- Tests:\n-- 1. Verify schema exists\nPRAGMA schema_list;"}
{"seed": "/* Creates a table named PRQ . USR with three columns: USR (varchar), PASS (varchar), PRM (int), and PROF (varchar). The table has a primary key on the USR column. */\nCREATE TABLE IF NOT EXISTS PRQ . USR (\n  USR\tVARCHAR(20) NOT NULL,\n  PASS\tVARCHAR(45) NOT NULL,\n  PRM \tINT NOT NULL,\n  PROF\tVARCHAR(45) NULL,\n  PRIMARY KEY (USR)\n) ENGINE = InnoDB", "description": "Creates a table named PRQ . USR with three columns: USR (varchar), PASS (varchar), PRM (int), and PROF (varchar). The table has a primary key on the USR column.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "PRQ", "USR", "VARCHAR", "NOT", "NULL", "PRIMARY KEY", "ENGINE", "InnoDB"], "instruction": "Write a SQL query to create a table named PRQ . USR with three columns: USR (varchar), PASS (varchar), PRM (int), and PROF (varchar). The table has a primary key on the USR column.", "response": "-- Reasoning:\nWe need a new table named PRQ . USR with three columns: USR (varchar), PASS (varchar), PRM (int), and PROF (varchar). The table has a primary key on the USR column.\n\n-- Solution:\n```sql\nCREATE TABLE PRQ . USR (\n  USR VARCHAR(255) PRIMARY KEY,\n  PASS VARCHAR(255),\n  PRM INT,\n  PROF VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the PRQ . USR table with four columns:\n  \u2022 USR: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PASS: varchar\n  \u2022 PRM: integer\n  \u2022 PROF: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('PRQ . USR');"}
{"seed": "/* Creates a table named PRQ . KEY_WORD if it does not exist. The table has two columns: ID (integer primary key) and KEYW (varchar). */\nCREATE TABLE IF NOT EXISTS PRQ . KEY_WORD (\n  ID \tINT NOT NULL AUTO_INCREMENT,\n  KEYW \tVARCHAR(25) NOT NULL,\n  PRIMARY KEY (ID)\n) ENGINE = InnoDB", "description": "Creates a table named PRQ . KEY_WORD if it does not exist. The table has two columns: ID (integer primary key) and KEYW (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "ENGINE"], "instruction": "Write a SQL query to create a table named PRQ . KEY_WORD if it does not exist. The table has two columns: ID (integer primary key) and KEYW (varchar).", "response": "-- Reasoning:\nWe need a new table named PRQ . KEY_WORD. It should have an integer primary key so that each word has a unique identifier, and a KEYW column to store the word as text.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS PRQ . KEY_WORD (\n  ID INT PRIMARY KEY,\n  KEYW VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the PRQ . KEY_WORD table with two columns:\n  \u2022 ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 KEYW: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('PRQ . KEY_WORD');"}
{"seed": "/* Creates a table named PRQ . KEY_VALUE with four columns: ID (integer primary key), DESCR (varchar), KEY_ID (integer), and a foreign key constraint KEYID that references the KEY_WORD table. */\nCREATE TABLE IF NOT EXISTS PRQ . KEY_VALUE (\n  ID \t\tINT NOT NULL AUTO_INCREMENT,\n  DESCR \tVARCHAR(45) NOT NULL,\n  KEY_ID \tINT NOT NULL,\n  PRIMARY KEY (ID, KEY_ID),\n  CONSTRAINT KEYID FOREIGN KEY (KEY_ID) REFERENCES KEY_WORD (ID)\n) ENGINE = InnoDB", "description": "Creates a table named PRQ . KEY_VALUE with four columns: ID (integer primary key), DESCR (varchar), KEY_ID (integer), and a foreign key constraint KEYID that references the KEY_WORD table.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "INT", "NOT", "NULL", "AUTO_INCREMENT", "PRIMARY KEY", "CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ENGINE"], "instruction": "Write a SQL query to create a table named PRQ . KEY_VALUE with four columns: ID (integer primary key), DESCR (varchar), KEY_ID (integer), and a foreign key constraint KEYID that references the KEY_WORD table.", "response": "-- Reasoning:\nWe need a new table named PRQ . KEY_VALUE. It should have an integer primary key so that each row has a unique identifier, and a description column to store the description as text. It should also have a foreign key constraint KEYID that references the KEY_WORD table.\n\n-- Solution:\n```sql\nCREATE TABLE PRQ . KEY_VALUE (\n  ID INT PRIMARY KEY,\n  DESCR VARCHAR(255),\n  KEY_ID INT,\n  FOREIGN KEY (KEY_ID) REFERENCES KEY_WORD(ID)\n);\n```\n\n-- Explanation:\nThis statement defines the PRQ . KEY_VALUE table with four columns:\n  \u2022 ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 DESCR: variable\u2010length string up to 255 characters\n  \u2022 KEY_ID: integer, foreign key constraint to KEY_WORD table\n  \u2022 FOREIGN KEY (KEY_ID) REFERENCES KEY_WORD(ID)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('PRQ . KEY_VALUE');"}
{"seed": "/* Creates a table named q2_data with four columns: year (integer), month (integer), channel (varchar), and revenue (integer). */\ncreate table q2_data as\nselect \n--extract year and month from date to perform quicker calculation\n    YEAR(cast(visit_date AS DATE)) as year,\n    MONTH(cast(visit_date AS DATE)) as month,\n    channel,\n    sum(amount) as revenue,\n--create rand field for months to be used in calculation below\n\n\nfrom data_table\nwhere 1=1\nand cast(visit_date as DATE) between '2017-01-01' and '2017-12-31'\nand channel in ('DOTCOM','OG'", "description": "Creates a table named q2_data with four columns: year (integer), month (integer), channel (varchar), and revenue (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "INSERT INTO", "VALUES", "SELECT", "SUM", "CAST", "DATE", "YEAR", "MON"], "instruction": "Write a SQL query to create a table named q2_data with four columns: year (integer), month (integer), channel (varchar), and revenue (integer).", "response": "-- Reasoning:\nWe need a new table named q2_data. It should have four columns:\n  \u2022 year: integer\n  \u2022 month: integer\n  \u2022 channel: varchar\n  \u2022 revenue: integer\n\n-- Solution:\n```sql\nCREATE TABLE q2_data (\n  year INT,\n  month INT,\n  channel VARCHAR(255),\n  revenue INT\n);\n```\n\n-- Explanation:\nThis statement defines the q2_data table with four columns:\n  \u2022 year: integer\n  \u2022 month: integer\n  \u2022 channel: variable\u2010length string up to 255 characters\n  \u2022 revenue: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('q2_data');"}
{"seed": "/* Creates a table named q2_summary with three columns: year, month, and revenue_YTD. The table contains the year, month, and revenue_YTD for each month. */\ncreate table q2_summary as\nselect \n    a.year,\n    a.month,\n    sum(b.revenue) As revenue_YTD\n\nfrom q2_data a\n    cross join q2_data b\n--limit so that table b revenue is summed for months <= month value to get cumulative ytd rev for each month\n        where b.month <= a.month\n        and a.month <> month(getdate())\ngroup by a.year,a.month\norder by a.month", "description": "Creates a table named q2_summary with three columns: year, month, and revenue_YTD. The table contains the year, month, and revenue_YTD for each month.", "concepts": ["CREATE TABLE", "SELECT", "SUM", "CROSS JOIN", "WHERE", "GROUP BY", "ORDER BY"], "instruction": "Write a SQL query to create a table named q2_summary with three columns: year, month, and revenue_YTD. The table contains the year, month, and revenue_YTD for each month.", "response": "-- Reasoning:\nWe need a new table named q2_summary. It should have three columns: year, month, and revenue_YTD. The table should contain the year, month, and revenue_YTD for each month.\n\n-- Solution:\n```sql\nCREATE TABLE q2_summary (\n  year INT,\n  month INT,\n  revenue_YTD INT\n);\n```\n\n-- Explanation:\nThis statement defines the q2_summary table with three columns:\n  \u2022 year: integer\n  \u2022 month: integer\n  \u2022 revenue_YTD: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('q2_summary');"}
{"seed": "/* Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\". This means that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row. */\nSET SQL_MODE=\"NO_AUTO_VALUE_ON_ZERO\"", "description": "Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\". This means that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row.", "concepts": ["SET", "SQL_MODE", "AUTO_INCREMENT", "NO_AUTO_VALUE_ON_ZERO"], "instruction": "Write a SQL query to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\". This means that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row.", "response": "-- Reasoning:\nWe need to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" so that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row.\n\n-- Solution:\n```sql\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\n```\n\n-- Explanation:\nThis SET statement sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" which means that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row.\n\n-- Tests:\n-- 1. Check AUTO_INCREMENT value is not 0\nSELECT * FROM orders;"}
{"seed": "/* Creates a table named tbl_addleave with five columns: txtId (integer primary key), leave_type (varchar), description (varchar), no_count (integer), added_date (date), added_by (varchar), is_active (char). */\nCREATE TABLE IF NOT EXISTS `tbl_addleave` (\n  `txtId` int(11) NOT NULL AUTO_INCREMENT,\n  `leave_type` varchar(30) DEFAULT NULL,\n  `description` varchar(50) DEFAULT NULL,\n  `no_count` int(10) DEFAULT NULL,\n  `added_date` date DEFAULT NULL,\n  `added_by` varchar(30) DEFAULT NULL,\n  `is_active` char(1) DEFAULT NULL,\n  PRIMARY KEY (`txtId`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named tbl_addleave with five columns: txtId (integer primary key), leave_type (varchar), description (varchar), no_count (integer), added_date (date), added_by (varchar), is_active (char).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET", "VARCHAR", "INT", "DATE", "CHAR"], "instruction": "Write a SQL query to create a table named tbl_addleave with five columns: txtId (integer primary key), leave_type (varchar), description (varchar), no_count (integer), added_date (date), added_by (varchar), is_active (char).", "response": "-- Reasoning:\nWe need a new table named tbl_addleave. It should have an integer primary key so that each leave has a unique identifier, and a name column to store the leave\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE tbl_addleave (\n  txtId INT PRIMARY KEY,\n  leave_type VARCHAR(255),\n  description VARCHAR(255),\n  no_count INT,\n  added_date DATE,\n  added_by VARCHAR(255),\n  is_active CHAR(1)\n);\n```\n\n-- Explanation:\nThis statement defines the tbl_addleave table with six columns:\n  \u2022 txtId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 leave_type: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n  \u2022 no_count: integer\n  \u2022 added_date: date\n  \u2022 added_by: variable\u2010length string up to 255 characters\n  \u2022 is_active: character of length 1\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tbl_addleave');"}
{"seed": "/* Inserts a new row into the tbl_addleave table with the given values. */\nINSERT INTO `tbl_addleave` (`txtId`, `leave_type`, `description`, `no_count`, `added_date`, `added_by`, `is_active`) VALUES\n(2, 'CASUAL LEAVE', 'casual leave(yearly assign)', 8, '2017-01-23', 'admin', 'y')", "description": "Inserts a new row into the tbl_addleave table with the given values.", "concepts": ["INSERT INTO", "VALUES", "tbl_addleave", "txtId", "leave_type", "description", "no_count", "added_date", "added_by"], "instruction": "Write a SQL query to insert a new row into the tbl_addleave table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the tbl_addleave table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO tbl_addleave (\n  emp_id,\n  leave_type,\n  leave_from,\n  leave_to,\n  leave_reason\n) VALUES (\n  1,\n  'Sick',\n  '2020-01-01',\n  '2020-01-02',\n  'Fever'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the tbl_addleave table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM tbl_addleave;"}
{"seed": "/* Creates a table named tbl_applyleavenew with five columns: txtId (integer primary key), empId (integer), leave_type (varchar), availableLeave (integer), leaveTaken (integer), and balanceLeave (integer). */\nCREATE TABLE IF NOT EXISTS `tbl_applyleavenew` (\n  `txtId` int(11) NOT NULL AUTO_INCREMENT,\n  `empId` int(11) NOT NULL,\n  `leave_type` varchar(40) NOT NULL,\n  `availableLeave` int(50) NOT NULL,\n  `leaveTaken` int(50) NOT NULL,\n  `balanceLeave` int(50) NOT NULL,\n  PRIMARY KEY (`txtId`),\n  KEY `empId` (`empId`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named tbl_applyleavenew with five columns: txtId (integer primary key), empId (integer), leave_type (varchar), availableLeave (integer), leaveTaken (integer), and balanceLeave (integer).", "concepts": ["CREATE TABLE", "IF NOT EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT CHARSET", "NOT NULL", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named tbl_applyleavenew with five columns: txtId (integer primary key), empId (integer), leave_type (varchar), availableLeave (integer), leaveTaken (integer), and balanceLeave (integer).", "response": "-- Reasoning:\nWe need a new table named tbl_applyleavenew. It should have an integer primary key so that each record has a unique identifier, and four columns:\n  \u2022 txtId: integer, primary key\n  \u2022 empId: integer\n  \u2022 leave_type: varchar\n  \u2022 availableLeave: integer\n  \u2022 leaveTaken: integer\n  \u2022 balanceLeave: integer\n\n-- Solution:\n```sql\nCREATE TABLE tbl_applyleavenew (\n  txtId INT PRIMARY KEY,\n  empId INT,\n  leave_type VARCHAR(255),\n  availableLeave INT,\n  leaveTaken INT,\n  balanceLeave INT\n);\n```\n\n-- Explanation:\nThis statement defines the tbl_applyleavenew table with five columns:\n  \u2022 txtId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 empId: integer\n  \u2022 leave_type: variable\u2010length string up to 255 characters\n  \u2022 availableLeave: integer\n  \u2022 leaveTaken: integer\n  \u2022 balanceLeave: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tbl_applyleavenew');"}
{"seed": "/* Creates a table named tbl_employee with 11 columns: txtId (integer primary key), type (integer), fname (varchar), lname (varchar), dob (date), contact (varchar), address (varchar), join_date (date), designation (varchar), pay_scale (varchar), email (varchar), password (varchar). */\nCREATE TABLE IF NOT EXISTS `tbl_employee` (\n  `txtId` int(11) NOT NULL AUTO_INCREMENT,\n  `type` int(11) NOT NULL,\n  `fname` varchar(30) DEFAULT NULL,\n  `lname` varchar(30) DEFAULT NULL,\n  `dob` date DEFAULT NULL,\n  `contact` varchar(10) DEFAULT NULL,\n  `address` varchar(30) DEFAULT NULL,\n  `join_date` date DEFAULT NULL,\n  `designation` varchar(255) DEFAULT NULL,\n  `pay_scale` varchar(30) NOT NULL,\n  `email` varchar(30) DEFAULT NULL,\n  `password` varchar(30) DEFAULT NULL,\n  PRIMARY KEY (`txtId`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named tbl_employee with 11 columns: txtId (integer primary key), type (integer), fname (varchar), lname (varchar), dob (date), contact (varchar), address (varchar), join_date (date), designation (varchar), pay_scale (varchar), email (varchar), password (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET", "INT", "VARCHAR", "DATE", "NOT"], "instruction": "Write a SQL query to create a table named tbl_employee with 11 columns: txtId (integer primary key), type (integer), fname (varchar), lname (varchar), dob (date), contact (varchar), address (varchar), join_date (date), designation (varchar), pay_scale (varchar), email (varchar), password (varchar).", "response": "-- Reasoning:\nWe need a new table named tbl_employee. It should have an integer primary key so that each employee has a unique identifier, and a name column to store the employee\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE tbl_employee (\n  txtId INT PRIMARY KEY,\n  type INT,\n  fname VARCHAR(255),\n  lname VARCHAR(255),\n  dob DATE,\n  contact VARCHAR(255),\n  address VARCHAR(255),\n  join_date DATE,\n  designation VARCHAR(255),\n  pay_scale VARCHAR(255),\n  email VARCHAR(255),\n  password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the tbl_employee table with 11 columns:\n  \u2022 txtId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 type: integer\n  \u2022 fname: variable\u2010length string up to 255 characters\n  \u2022 lname: variable\u2010length string up to 255 characters\n  \u2022 dob: date\n  \u2022 contact: variable\u2010length string up to 255 characters\n  \u2022 address: variable\u2010length string up to 255 characters\n  \u2022 join_date: date\n  \u2022 designation: variable\u2010length string up to 255 characters\n  \u2022 pay_scale: variable"}
{"seed": "/* Inserts a new row into the tbl_employee table with the given values. */\nINSERT INTO `tbl_employee` (`txtId`, `type`, `fname`, `lname`, `dob`, `contact`, `address`, `join_date`, `designation`, `pay_scale`, `email`, `password`) VALUES\n(1, 1, 'Admin', 'Admin', NULL, NULL, NULL, NULL, NULL, '', 'admin@gmail.com', 'admin'),\n(15, 2, 'lipu', 'mohanty', '2017-01-02', '9766065140', 'bjbjbj', '2017-01-02', 'Manager(Technical)', '0', 'lipu123mohanty@gmail.com', 'gaurav'),\n(16, 2, 'pallavi', 'm', '2017-01-15', '999999999', 'aaa@gmail.com', '2017-01-10', 'Manager(Finance)', '0', 'pallavi@gmail.com', 'pallavi'),\n(28, 2, 'sss', 'Singh', '2017-01-09', '9766065140', 'admin@gmail.com', '2017-01-02', 'General Manager(Technical)', '1', 'email@gmail.com', '1234567'),\n(29, 2, 'chandrashekhar', 'mangalgiri', '2017-01-08', '9999999999', 'admin@gmail.com', '2017-01-17', 'Chief General Manager(Technica', '0000', 'mangalgiri@gmail.com', 'mangalgiri')", "description": "Inserts a new row into the tbl_employee table with the given values.", "concepts": ["INSERT INTO", "VALUES", "tbl_employee", "txtId", "type", "fname", "lname", "dob", "contact", "address", "join_date"], "instruction": "Write a SQL query to insert a new row into the tbl_employee table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the tbl_employee table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO tbl_employee (name, age, gender, salary)\nVALUES ('John', 25, 'M', 10000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the tbl_employee table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM tbl_employee;"}
{"seed": "/* Creates a table named tbl_leavehistory with 20 columns: txtId (integer primary key), empId (integer), specialId (integer), leave_type (varchar), normalId (integer), fromdate (date), todate (date), no_days (integer), approved_leave (integer), purpose (varchar), place (varchar), contact (varchar), restricted_leave (varchar), date (date), avail_ltc (varchar), ltc_details (varchar), */\nCREATE TABLE IF NOT EXISTS `tbl_leavehistory` (\n  `txtId` int(11) NOT NULL AUTO_INCREMENT,\n  `empId` int(11) NOT NULL,\n  `specialId` int(10) DEFAULT NULL,\n  `leave_type` varchar(40) NOT NULL,\n  `normalId` int(10) NOT NULL,\n  `fromdate` date DEFAULT NULL,\n  `todate` date DEFAULT NULL,\n  `no_days` int(11) DEFAULT NULL,\n  `approved_leave` int(50) NOT NULL,\n  `purpose` varchar(255) NOT NULL,\n  `place` varchar(50) NOT NULL,\n  `contact` varchar(10) NOT NULL,\n  `restricted_leave` varchar(20) NOT NULL,\n  `date` date NOT NULL,\n  `avail_ltc` varchar(20) NOT NULL,\n  `ltc_details` varchar(255) NOT NULL,\n  `leave_encashment` varchar(20) NOT NULL,\n  `days` int(30) NOT NULL,\n  `permission_hq` varchar(20) NOT NULL,\n  `datefrom` date NOT NULL,\n  `dateto` date NOT NULL,\n  `status` varchar(50) NOT NULL,\n  `reason` varchar(255) NOT NULL,\n  PRIMARY KEY (`txtId`),\n  KEY `empId` (`empId`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named tbl_leavehistory with 20 columns: txtId (integer primary key), empId (integer), specialId (integer), leave_type (varchar), normalId (integer), fromdate (date), todate (date), no_days (integer), approved_leave (integer), purpose (varchar), place (varchar), contact (varchar), restricted_leave (varchar), date (date), avail_ltc (varchar), ltc_details (varchar),", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "NOT", "NULL", "DEFAULT"], "instruction": "Write a SQL query to create a table named tbl_leavehistory with 20 columns: txtId (integer primary key), empId (integer), specialId (integer), leave_type (varchar), normalId (integer), fromdate (date), todate (date), no_days (integer), approved_leave (integer), purpose (varchar), place (varchar), contact (varchar), restricted_leave (varchar), date (date), avail_ltc (varchar), ltc_details (varchar), leave_encashment (varchar), days (integer), permission_hq (varchar), datefrom (date), dateto (date), status (varchar), reason (varchar).", "response": "-- Reasoning:\nWe need a new table named tbl_leavehistory. It should have an integer primary key so that each record has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE tbl_leavehistory (\n  txtId INT PRIMARY KEY,\n  empId INT,\n  specialId INT,\n  leave_type VARCHAR(255),\n  normalId INT,\n  fromdate DATE,\n  todate DATE,\n  no_days INT,\n  approved_leave INT,\n  purpose VARCHAR(255),\n  place VARCHAR(255),\n  contact VARCHAR(255),\n  restricted_leave VARCHAR(255),\n  date DATE,\n  avail_ltc VARCHAR(255),\n  ltc_details VARCHAR(255),\n  leave_encashment VARCHAR(255),\n  days INT,\n  permission_hq VARCHAR(255),\n  datefrom DATE,\n  dateto DATE,\n  status VARCHAR(255),\n  reason VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the tbl_leavehistory table with 20 columns:\n  \u2022 txtId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 empId: integer\n  \u2022 specialId: integer\n  \u2022 leave_type: varchar\n  \u2022 normalId: integer\n  \u2022 from"}
{"seed": "/* Creates a table named tbl_leavesetting with three columns: txtId (integer primary key), emp_id (integer), and earned_leave (integer). */\nCREATE TABLE IF NOT EXISTS `tbl_leavesetting` (\n  `txtId` int(11) NOT NULL AUTO_INCREMENT,\n  `emp_id` int(11) DEFAULT NULL,\n  `earned_leave` int(10) DEFAULT NULL,\n  PRIMARY KEY (`txtId`),\n  KEY `emp_id` (`emp_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named tbl_leavesetting with three columns: txtId (integer primary key), emp_id (integer), and earned_leave (integer).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "DEFAULT", "NULL", "DEFAULT"], "instruction": "Write a SQL query to create a table named tbl_leavesetting with three columns: txtId (integer primary key), emp_id (integer), and earned_leave (integer).", "response": "-- Reasoning:\nWe need a new table named tbl_leavesetting. It should have an integer primary key so that each row has a unique identifier, and two columns:\n  \u2022 emp_id: integer, to store the employee\u2019s ID\n  \u2022 earned_leave: integer, to store the number of earned leaves\n\n-- Solution:\n```sql\nCREATE TABLE tbl_leavesetting (\n  txtId INT PRIMARY KEY,\n  emp_id INT,\n  earned_leave INT\n);\n```\n\n-- Explanation:\nThis statement defines the tbl_leavesetting table with three columns:\n  \u2022 txtId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 emp_id: integer\n  \u2022 earned_leave: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tbl_leavesetting');"}
{"seed": "/* Inserts 4 rows into the tbl_leavesetting table. */\nINSERT INTO `tbl_leavesetting` (`txtId`, `emp_id`, `earned_leave`) VALUES\n(5, 15, 4),\n(6, 16, 3),\n(7, 29, 10),\n(8, 28, 1)", "description": "Inserts 4 rows into the tbl_leavesetting table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 4 rows into the tbl_leavesetting table.", "response": "-- Reasoning:\nWe need to insert 4 rows into the tbl_leavesetting table.\n\n-- Solution:\n```sql\nINSERT INTO tbl_leavesetting (leave_type, leave_name, leave_days)\nVALUES\n  ('Sick', 'Sick Leave', 10),\n  ('Vacation', 'Vacation Leave', 10),\n  ('Maternity', 'Maternity Leave', 10),\n  ('Paternity', 'Paternity Leave', 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts 4 rows into the tbl_leavesetting table:\n  \u2022 leave_type: Sick, Vacation, Maternity, Paternity\n  \u2022 leave_name: Sick Leave, Vacation Leave, Maternity Leave, Paternity Leave\n  \u2022 leave_days: 10\n\n-- Tests:\n-- 1. Verify 4 rows are inserted\nSELECT * FROM tbl_leavesetting;"}
{"seed": "/* Creates a table named tbl_predefinedleave with four columns: txtId (integer primary key), date_leave (date), name (varchar), and description (varchar). */\nCREATE TABLE IF NOT EXISTS `tbl_predefinedleave` (\n  `txtId` int(11) NOT NULL AUTO_INCREMENT,\n  `date_leave` date DEFAULT NULL,\n  `name` varchar(255) NOT NULL,\n  `description` varchar(50) DEFAULT NULL,\n  PRIMARY KEY (`txtId`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named tbl_predefinedleave with four columns: txtId (integer primary key), date_leave (date), name (varchar), and description (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named tbl_predefinedleave with four columns: txtId (integer primary key), date_leave (date), name (varchar), and description (varchar).", "response": "-- Reasoning:\nWe need a new table named tbl_predefinedleave. It should have an integer primary key so that each predefined leave has a unique identifier, and a name column to store the predefined leave\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE tbl_predefinedleave (\n  txtId INT PRIMARY KEY,\n  date_leave DATE,\n  name VARCHAR(255),\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the tbl_predefinedleave table with four columns:\n  \u2022 txtId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 date_leave: date\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tbl_predefinedleave');"}
{"seed": "/* Inserts four rows into the tbl_predefinedleave table. */\nINSERT INTO `tbl_predefinedleave` (`txtId`, `date_leave`, `name`, `description`) VALUES\n(9, '2017-02-01', 'Restricted Holiday', 'Basant Panchami'),\n(10, '2017-02-10', 'Restricted Holiday', 'friday Restricted Holiday'),\n(11, '2017-02-21', 'Restricted Holiday', 'Swami Dayananda Saraswati Jayanti'),\n(12, '2017-02-24', 'Public Holiday', 'Maha shivaratri'),\n(13, '2017-03-13', 'Public Holiday', 'Holi'),\n(14, '2017-03-28', 'Restricted Holiday', 'Gudi Padava')", "description": "Inserts four rows into the tbl_predefinedleave table.", "concepts": ["INSERT INTO", "VALUES", "tbl_predefinedleave", "txtId", "date_leave", "name", "description"], "instruction": "Write a SQL query to insert four rows into the tbl_predefinedleave table.", "response": "-- Reasoning:\nWe need to insert four rows into the tbl_predefinedleave table.\n\n-- Solution:\n```sql\nINSERT INTO tbl_predefinedleave (leave_type, leave_name, leave_days)\nVALUES ('Sick', 'Sick Leave', 10),\n       ('Vacation', 'Vacation Leave', 10),\n       ('Maternity', 'Maternity Leave', 10),\n       ('Paternity', 'Paternity Leave', 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the tbl_predefinedleave table:\n  \u2022 Sick: Sick Leave, 10 days\n  \u2022 Vacation: Vacation Leave, 10 days\n  \u2022 Maternity: Maternity Leave, 10 days\n  \u2022 Paternity: Paternity Leave, 10 days\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM tbl_predefinedleave;"}
{"seed": "/* Adds a foreign key constraint to the tbl_applyleave table that references the txtId column in the tbl_employee table. */\nALTER TABLE `tbl_applyleave`\n  ADD CONSTRAINT `tbl_applyleave_ibfk_1` FOREIGN KEY (`empId`) REFERENCES `tbl_employee` (`txtId`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Adds a foreign key constraint to the tbl_applyleave table that references the txtId column in the tbl_employee table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE"], "instruction": "Write a SQL query to add a foreign key constraint to the tbl_applyleave table that references the txtId column in the tbl_employee table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the tbl_applyleave table that references the txtId column in the tbl_employee table.\n\n-- Solution:\n```sql\nALTER TABLE tbl_applyleave\n  ADD CONSTRAINT fk_tbl_applyleave_txtId FOREIGN KEY (txtId) REFERENCES tbl_employee(txtId);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the tbl_applyleave table that references the txtId column in the tbl_employee table.\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('tbl_applyleave');"}
{"seed": "/* Adds a foreign key constraint to the tbl_leavesetting table, which references the tbl_employee table. */\nALTER TABLE `tbl_leavesetting`\n  ADD CONSTRAINT `tbl_leavesetting_ibfk_1` FOREIGN KEY (`emp_id`) REFERENCES `tbl_employee` (`txtId`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Adds a foreign key constraint to the tbl_leavesetting table, which references the tbl_employee table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE"], "instruction": "Write a SQL query to add a foreign key constraint to the tbl_leavesetting table, which references the tbl_employee table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the tbl_leavesetting table, which references the tbl_employee table.\n\n-- Solution:\n```sql\nALTER TABLE tbl_leavesetting\nADD CONSTRAINT fk_employee_id\nFOREIGN KEY (employee_id)\nREFERENCES tbl_employee(employee_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the tbl_leavesetting table, which references the tbl_employee table.\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('tbl_leavesetting');"}
{"seed": "/* Inserts a new row into the associations table with null values for the id and description columns. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Alliance MMA', null )", "description": "Inserts a new row into the associations table with null values for the id and description columns.", "concepts": ["INSERT INTO", "VALUES", "null", "null"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new association into the associations table. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Law MMA', 'Longo and Weidman MMA' )", "description": "Inserts a new association into the associations table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new association into the associations table with a null id, name, and description. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Kings MMA', null )", "description": "Inserts a new association into the associations table with a null id, name, and description.", "concepts": ["INSERT INTO", "VALUES", "null", "null"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new association with the name Nova Uniao into the associations table. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Nova Uniao', null )", "description": "Inserts a new association with the name Nova Uniao into the associations table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the associations table with a null value for the id column and the values Team Alpha Male and null for the name and description columns respectively. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Team Alpha Male', null )", "description": "Inserts a new row into the associations table with a null value for the id column and the values Team Alpha Male and null for the name and description columns respectively.", "concepts": ["INSERT INTO", "VALUES", "null", "Team Alpha Male", "null"], "instruction": "Write a SQL query to insert a new row into the associations table with a null value for the id column and the values Team Alpha Male and null for the name and description columns respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the associations table. It should have a null value for the id column and the values Team Alpha Male and null for the name and description columns respectively.\n\n-- Solution:\n```sql\nINSERT INTO associations (name, description)\nVALUES ('Team Alpha Male', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the associations table with the following values:\n  \u2022 name: Team Alpha Male\n  \u2022 description: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM associations;"}
{"seed": "/* Inserts a new row into the associations table with null values for the id, name, and description columns. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Tiger Muay Thai', null )", "description": "Inserts a new row into the associations table with null values for the id, name, and description columns.", "concepts": ["INSERT INTO", "VALUES", "null"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new association with the name Roufusport into the associations table. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Roufusport', null )", "description": "Inserts a new association with the name Roufusport into the associations table.", "concepts": ["INSERT INTO", "VALUES", "null", "Roufusport"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the associations table with the id, name, and description columns set to null. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Jackson-Wink MMA', null )", "description": "Inserts a new row into the associations table with the id, name, and description columns set to null.", "concepts": ["INSERT INTO", "VALUES", "null"], "instruction": "Write a SQL query to insert a new row into the associations table with the id, name, and description columns set to null.", "response": "-- Reasoning:\nWe need to insert a new row into the associations table. It should have null values for all columns.\n\n-- Solution:\n```sql\nINSERT INTO associations (id, name, description)\n  VALUES (NULL, NULL, NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the associations table with null values for all columns.\n\n-- Tests:\n-- 1. Verify new row appears with null values\nSELECT * FROM associations;"}
{"seed": "/* Inserts a new row into the associations table with the given values. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'AKA', 'American Kickboxing Academy' )", "description": "Inserts a new row into the associations table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the associations table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the associations table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO associations (product_id, order_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the associations table with the given values:\n  \u2022 product_id: 1\n  \u2022 order_id: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM associations;"}
{"seed": "/* Inserts a new association with id null, name Hard Knocks 365, and description null into the associations table. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Hard Knocks 365', null )", "description": "Inserts a new association with id null, name Hard Knocks 365, and description null into the associations table.", "concepts": ["INSERT INTO", "VALUES", "null", "Hard Knocks 365", "null"], "instruction": "Write a SQL query to insert a new association with id null, name Hard Knocks 365, and description null into the associations table.", "response": "-- Reasoning:\nWe need to insert a new association into the associations table. It should have a null id, name Hard Knocks 365, and description null.\n\n-- Solution:\n```sql\nINSERT INTO associations (name, description)\nVALUES ('Hard Knocks 365', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new association into the associations table with:\n  \u2022 name: Hard Knocks 365\n  \u2022 description: NULL\n\n-- Tests:\n-- 1. Verify new association appears\nSELECT * FROM associations;"}
{"seed": "/* Inserts a new association with id null, name ATT, and description American Top Team into the associations table. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'ATT', 'American Top Team' )", "description": "Inserts a new association with id null, name ATT, and description American Top Team into the associations table.", "concepts": ["INSERT INTO", "VALUES", "NULL", "American Top Team"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new association into the associations table with null values for the id and description columns. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Poland Top Team', null )", "description": "Inserts a new association into the associations table with null values for the id and description columns.", "concepts": ["INSERT INTO", "VALUES", "null", "null"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new association into the associations table with the name Ankos Zapasy. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Ankos Zapasy', null )", "description": "Inserts a new association into the associations table with the name Ankos Zapasy.", "concepts": ["INSERT INTO", "VALUES", "null", "Ankos Zapasy"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new association into the associations table with the name Silesian Cage Club. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Silesian Cage Club', null )", "description": "Inserts a new association into the associations table with the name Silesian Cage Club.", "concepts": ["INSERT INTO", "VALUES", "null", "Silesian Cage Club"], "instruction": "Write a SQL query to insert a new association into the associations table with the name Silesian Cage Club.", "response": "-- Reasoning:\nWe need to insert a new association into the associations table. The association should have a name of Silesian Cage Club.\n\n-- Solution:\n```sql\nINSERT INTO associations (name)\nVALUES ('Silesian Cage Club');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new association into the associations table with the name Silesian Cage Club.\n\n-- Tests:\n-- 1. Verify new association appears in table\nSELECT * FROM associations;"}
{"seed": "/* Inserts a new association into the associations table with the name Berkut WCA Fight Team. */\nINSERT INTO associations (id, name, description) VALUES ( null, 'Berkut WCA Fight Team', null )", "description": "Inserts a new association into the associations table with the name Berkut WCA Fight Team.", "concepts": ["INSERT INTO", "VALUES", "null", "name", "description"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new organization into the organizations table with the name UFC and description Ultimate Fighting Championship. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'UFC', 'Ultimate Fighting Championship' )", "description": "Inserts a new organization into the organizations table with the name UFC and description Ultimate Fighting Championship.", "concepts": ["INSERT INTO", "VALUES", "UFC", "Ultimate Fighting Championship"], "instruction": "Write a SQL query to insert a new organization into the organizations table with the name UFC and description Ultimate Fighting Championship.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have a name and description.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name, description)\nVALUES ('UFC', 'Ultimate Fighting Championship');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with the name and description of the new organization.\n\n-- Tests:\n-- 1. Verify new organization appears in table\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization into the organizations table with an id of null, a name of Bellator MMA, and a description of null. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'Bellator MMA', null )", "description": "Inserts a new organization into the organizations table with an id of null, a name of Bellator MMA, and a description of null.", "concepts": ["INSERT INTO", "VALUES", "null", "Bellator MMA", "null"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new organization into the organizations table with id null, name ACB, and description Absolute Fighting Championship. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'ACB', 'Absolute Fighting Championship' )", "description": "Inserts a new organization into the organizations table with id null, name ACB, and description Absolute Fighting Championship.", "concepts": ["INSERT INTO", "VALUES", "ACB", "Absolute Fighting Championship"], "instruction": "Write a SQL query to insert a new organization into the organizations table with id null, name ACB, and description Absolute Fighting Championship.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have an id of NULL, a name of ACB, and a description of Absolute Fighting Championship.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name, description)\nVALUES (\n  'ACB',\n  'Absolute Fighting Championship'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with:\n  \u2022 id: NULL\n  \u2022 name: ACB\n  \u2022 description: Absolute Fighting Championship\n\n-- Tests:\n-- 1. Verify new organization appears in table\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization into the organizations table with the name FNG and description Fight Nights Global. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'FNG', 'Fight Nights Global' )", "description": "Inserts a new organization into the organizations table with the name FNG and description Fight Nights Global.", "concepts": ["INSERT INTO", "VALUES", "FNG", "Fight Nights Global"], "instruction": "Write a SQL query to insert a new organization into the organizations table with the name FNG and description Fight Nights Global.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have a name and description.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name, description)\nVALUES ('FNG', 'Fight Nights Global');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with the name and description provided.\n\n-- Tests:\n-- 1. Verify new organization exists\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization into the organizations table with id null, name ONE Championship, and description null. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'ONE Championship', null )", "description": "Inserts a new organization into the organizations table with id null, name ONE Championship, and description null.", "concepts": ["INSERT INTO", "VALUES", "null", "null"], "instruction": "Write a SQL query to insert a new organization into the organizations table with id null, name ONE Championship, and description null.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have a null id, name ONE Championship, and description null.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name)\nVALUES ('ONE Championship');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with:\n  \u2022 name: ONE Championship\n\n-- Tests:\n-- 1. Verify new organization appears\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization into the organizations table. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'Rizin FF', 'Rizin Fighting Federation' )", "description": "Inserts a new organization into the organizations table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new organization into the organizations table.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name)\nVALUES ('Acme Corporation');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with the name Acme Corporation.\n\n-- Tests:\n-- 1. Verify new organization appears in table\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization with id null, name Invicta FC, and description null into the organizations table. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'Invicta FC', null )", "description": "Inserts a new organization with id null, name Invicta FC, and description null into the organizations table.", "concepts": ["INSERT INTO", "VALUES", "null", "null"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new organization into the organizations table with id null, name Pancrase, and description null. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'Pancrase', null )", "description": "Inserts a new organization into the organizations table with id null, name Pancrase, and description null.", "concepts": ["INSERT INTO", "VALUES", "NULL", "organizations"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new organization into the organizations table with id null, name M-1 Global, and description null. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'M-1 Global', null )", "description": "Inserts a new organization into the organizations table with id null, name M-1 Global, and description null.", "concepts": ["INSERT INTO", "VALUES", "NULL", "M-1 Global"], "instruction": "Write a SQL query to insert a new organization into the organizations table with id null, name M-1 Global, and description null.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have a null id, name M-1 Global, and description null.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name)\nVALUES ('M-1 Global');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with:\n  \u2022 name: M-1 Global\n\n-- Tests:\n-- 1. Verify new organization appears\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization into the organizations table with id null, name UFC, and description null. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'UFC', null )", "description": "Inserts a new organization into the organizations table with id null, name UFC, and description null.", "concepts": ["INSERT INTO", "VALUES", "NULL", "UFC"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new organization into the organizations table with the name LFA and description Legacy Fighting Alliance. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'LFA', 'Legacy Fighting Alliance' )", "description": "Inserts a new organization into the organizations table with the name LFA and description Legacy Fighting Alliance.", "concepts": ["INSERT INTO", "VALUES", "organizations", "name", "description"], "instruction": "Write a SQL query to insert a new organization into the organizations table with the name LFA and description Legacy Fighting Alliance.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have a name and description.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name, description)\nVALUES ('LFA', 'Legacy Fighting Alliance');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with the given values.\n\n-- Tests:\n-- 1. Verify new organization appears in table\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization into the organizations table with the name WFCA and description World Fighting Championship Akhmat. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'WFCA', 'World Fighting Championship Akhmat' )", "description": "Inserts a new organization into the organizations table with the name WFCA and description World Fighting Championship Akhmat.", "concepts": ["INSERT INTO", "VALUES", "null", "WFCA", "description", "World Fighting Championship Akhmat"], "instruction": "Write a SQL query to insert a new organization into the organizations table with the name WFCA and description World Fighting Championship Akhmat.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have a name and description.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name, description)\nVALUES ('WFCA', 'World Fighting Championship Akhmat');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with the given values.\n\n-- Tests:\n-- 1. Verify new organization appears in table\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new organization with id null, name KSW, and description Konfrontacja Sztuk Walki into the organizations table. */\nINSERT INTO organizations(id, name, description) VALUES ( null, 'KSW', 'Konfrontacja Sztuk Walki' )", "description": "Inserts a new organization with id null, name KSW, and description Konfrontacja Sztuk Walki into the organizations table.", "concepts": ["INSERT INTO", "VALUES", "null", "KSW", "Konfrontacja Sztuk Walki"], "instruction": "Write a SQL query to insert a new organization with id null, name KSW, and description Konfrontacja Sztuk Walki into the organizations table.", "response": "-- Reasoning:\nWe need to insert a new organization into the organizations table. It should have a null id, a name of KSW, and a description of Konfrontacja Sztuk Walki.\n\n-- Solution:\n```sql\nINSERT INTO organizations (name, description)\nVALUES (\n  'KSW',\n  'Konfrontacja Sztuk Walki'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the organizations table with the given values.\n\n-- Tests:\n-- 1. Verify new organization appears in table\nSELECT * FROM organizations;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Submission', and the additional_info column is set to null. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Submission', null )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Submission', and the additional_info column is set to null.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Submission", "NULL"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Submission', and the additional_info column is set to null.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. The id column should be null, the description column should be 'Submission', and the additional_info column should be null.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, 'Submission', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with null values for id, description, and additional_info. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'KO', null )", "description": "Inserts a new row into the result_types table with null values for id, description, and additional_info.", "concepts": ["INSERT INTO", "VALUES", "null"], "instruction": "Write a SQL query to insert a new row into the result_types table with null values for id, description, and additional_info.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. It should have null values for id, description, and additional_info.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, NULL, NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with null values for id, description, and additional_info.\n\n-- Tests:\n-- 1. Verify new row appears with null values\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns set to null. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'TKO', null )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns set to null.", "concepts": ["INSERT INTO", "VALUES", "null"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns set to null.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. It should have null values for all columns.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\n  VALUES (NULL, NULL, NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with null values for all columns.\n\n-- Tests:\n-- 1. Verify new row appears with null values\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Decision', 'Unanimous' )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns.", "concepts": ["INSERT INTO", "VALUES", "result_types", "id", "description", "additional_info"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. It should have an id, description, and additional_info column.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (1, 'Success', 'The operation was successful.');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with the following values:\n  \u2022 id: 1\n  \u2022 description: Success\n  \u2022 additional_info: The operation was successful.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Decision', and the additional_info column is set to 'Split'. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Decision', 'Split' )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Decision', and the additional_info column is set to 'Split'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Decision", "Split"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Unanimous'. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Draw', 'Unanimous' )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Unanimous'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Draw", "Unanimous"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Unanimous'.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. The id column should be null, the description column should be 'Draw', and the additional_info column should be 'Unanimous'.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, 'Draw', 'Unanimous');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Majority'. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Draw', 'Majority' )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Majority'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Draw", "Majority"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Majority'.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. The id column should be null, the description column should be 'Draw', and the additional_info column should be 'Majority'.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, 'Draw', 'Majority');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Split'. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Draw', 'Split' )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Split'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Draw", "Split"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Draw', and the additional_info column is set to 'Split'.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. The id column should be null, the description column should be 'Draw', and the additional_info column should be 'Split'.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, 'Draw', 'Split');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Disqualification', and the additional_info column is set to null. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Disqualification', null )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Disqualification', and the additional_info column is set to null.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Disqualification", "NULL"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Disqualification', and the additional_info column is set to null.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. It should have a null id, a description of 'Disqualification', and an additional_info of null.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, 'Disqualification', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with:\n  \u2022 id: null\n  \u2022 description: 'Disqualification'\n  \u2022 additional_info: null\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Forfeit', and the additional_info column is set to null. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'Forfeit', null )", "description": "Inserts a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Forfeit', and the additional_info column is set to null.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Forfeit", "NULL"], "instruction": "Write a SQL query to insert a new row into the result_types table with the id, description, and additional_info columns. The id column is set to null, the description column is set to 'Forfeit', and the additional_info column is set to null.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. The id column should be null, the description column should be 'Forfeit', and the additional_info column should be null.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, 'Forfeit', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the result_types table with id set to null, description set to 'No contest', and additional_info set to null. */\nINSERT INTO result_types(id, description, additional_info) VALUES ( null, 'No contest', null )", "description": "Inserts a new row into the result_types table with id set to null, description set to 'No contest', and additional_info set to null.", "concepts": ["INSERT INTO", "VALUES", "NULL"], "instruction": "Write a SQL query to insert a new row into the result_types table with id set to null, description set to 'No contest', and additional_info set to null.", "response": "-- Reasoning:\nWe need to insert a new row into the result_types table. It should have an id of NULL, a description of 'No contest', and an additional_info of NULL.\n\n-- Solution:\n```sql\nINSERT INTO result_types (id, description, additional_info)\nVALUES (NULL, 'No contest', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the result_types table with:\n  \u2022 id: NULL\n  \u2022 description: 'No contest'\n  \u2022 additional_info: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM result_types;"}
{"seed": "/* Inserts a new row into the weightclasses table with null values for the lower_limit and upper_limit columns and the Strawweight value for the name column. */\nINSERT INTO weightclasses(id, lower_limit, upper_limit, name, organization_id) VALUES ( null, null, '52.2 ', 'Strawweight', null )", "description": "Inserts a new row into the weightclasses table with null values for the lower_limit and upper_limit columns and the Strawweight value for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Strawweight"], "instruction": "Write a SQL query to insert a new row into the weightclasses table with null values for the lower_limit and upper_limit columns and the Strawweight value for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the weightclasses table. It should have null values for the lower_limit and upper_limit columns and the Strawweight value for the name column.\n\n-- Solution:\n```sql\nINSERT INTO weightclasses (name) VALUES ('Strawweight');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the weightclasses table with:\n  \u2022 name: Strawweight\n  \u2022 lower_limit: NULL\n  \u2022 upper_limit: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM weightclasses;"}
{"seed": "/* Inserts a new row into the weightclasses table with the given values. */\nINSERT INTO weightclasses(id, lower_limit, upper_limit, name, organization_id) VALUES ( null, '52.2 ', '56.7', 'Flyweight', null )", "description": "Inserts a new row into the weightclasses table with the given values.", "concepts": ["INSERT INTO", "VALUES", "weightclasses", "organization_id"], "instruction": "Write a SQL query to insert a new row into the weightclasses table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the weightclasses table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO weightclasses (name, min_weight, max_weight)\nVALUES ('Light', 10, 100);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the weightclasses table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM weightclasses;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Afghanistan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Afghanistan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Afghanistan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Afghanistan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Afghanistan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Afghanistan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Afghanistan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Afghanistan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Albania' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Albania' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Albania' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Albania"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Albania' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Albania' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Albania');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Albania'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Algeria. */\nINSERT INTO countries(id, name) VALUES ( null, 'Algeria' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Algeria.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Algeria"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Andorra. */\nINSERT INTO countries(id, name) VALUES ( null, 'Andorra' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Andorra.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name", "countries"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Andorra.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Andorra.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Andorra');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Andorra.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Angola. */\nINSERT INTO countries(id, name) VALUES ( null, 'Angola' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Angola.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Angola"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Angola.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Angola.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Angola');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Angola.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Argentina. */\nINSERT INTO countries(id, name) VALUES ( null, 'Argentina' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Argentina.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Argentina"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Armenia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Armenia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Armenia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Armenia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Armenia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Armenia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Armenia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Armenia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Australia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Australia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Australia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Australia"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Austria' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Austria' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Austria' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Austria"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Austria' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Austria' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Austria');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Austria'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Azerbaijan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Azerbaijan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Azerbaijan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Azerbaijan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Azerbaijan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Azerbaijan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Azerbaijan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Azerbaijan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Bahamas'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Bahamas' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Bahamas'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Bahamas"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Bahamas'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Bahamas'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Bahamas');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Bahamas'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Bahrain'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Bahrain' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Bahrain'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Bahrain"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Bahrain'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Bahrain'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Bahrain');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Bahrain'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Bangladesh' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Bangladesh' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Bangladesh' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Bangladesh"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Bangladesh' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Bangladesh' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Bangladesh');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Bangladesh'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Barbados. */\nINSERT INTO countries(id, name) VALUES ( null, 'Barbados' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Barbados.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Barbados"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value Belarus for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Belarus' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value Belarus for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Belarus"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value Belarus for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value Belarus for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Belarus');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Belarus.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Belgium' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Belgium' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Belgium' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Belgium"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Belgium' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Belgium' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Belgium');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Belgium'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Belize' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Belize' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Belize' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Belize"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Benin. */\nINSERT INTO countries(id, name) VALUES ( null, 'Benin' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Benin.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Benin"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Bhutan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Bhutan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Bhutan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Bhutan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Bhutan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Bhutan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Bhutan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Bhutan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Bolivia'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Bolivia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Bolivia'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Bolivia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Bolivia'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Bolivia'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Bolivia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Bolivia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Bosnia Herzegovina'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Bosnia Herzegovina' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Bosnia Herzegovina'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Bosnia Herzegovina"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Bosnia Herzegovina'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Bosnia Herzegovina'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Bosnia Herzegovina');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Bosnia Herzegovina'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Botswana. */\nINSERT INTO countries(id, name) VALUES ( null, 'Botswana' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Botswana.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Botswana"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new country with id null and name Brazil into the countries table. */\nINSERT INTO countries(id, name) VALUES ( null, 'Brazil' )", "description": "Inserts a new country with id null and name Brazil into the countries table.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Brazil"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Brunei'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Brunei' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Brunei'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Brunei"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Brunei'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Brunei'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Brunei');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Brunei'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Bulgaria. */\nINSERT INTO countries(id, name) VALUES ( null, 'Bulgaria' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Bulgaria.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Bulgaria"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Burkina. */\nINSERT INTO countries(id, name) VALUES ( null, 'Burkina' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Burkina.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Burkina"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Burkina.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Burkina.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Burkina');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Burkina.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Burundi. */\nINSERT INTO countries(id, name) VALUES ( null, 'Burundi' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Burundi.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Burundi"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Cambodia. */\nINSERT INTO countries(id, name) VALUES ( null, 'Cambodia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Cambodia.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Cambodia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Cambodia.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Cambodia.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Cambodia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Cambodia.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Cameroon. */\nINSERT INTO countries(id, name) VALUES ( null, 'Cameroon' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Cameroon.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Cameroon"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Canada' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Canada' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Canada' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Canada"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Cape Verde'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Cape Verde' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Cape Verde'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Cape Verde"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Cape Verde'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Cape Verde'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Cape Verde');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Cape Verde'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Central African Rep. */\nINSERT INTO countries(id, name) VALUES ( null, 'Central African Rep' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Central African Rep.", "concepts": ["INSERT INTO", "VALUES", "null", "Central African Rep"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Central African Rep.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Central African Rep.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Central African Rep.');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Central African Rep.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Chad. */\nINSERT INTO countries(id, name) VALUES ( null, 'Chad' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Chad.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Chad"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Chad.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Chad.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Chad');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Chad.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Chile. */\nINSERT INTO countries(id, name) VALUES ( null, 'Chile' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Chile.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Chile"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'China' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'China' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'China' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "China"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Colombia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Colombia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Colombia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Colombia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Colombia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Colombia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Colombia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Colombia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Comoros'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Comoros' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Comoros'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Comoros"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Congo'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Congo' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Congo'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Congo"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with the id column set to null and the name column set to 'Congo {Democratic Rep}'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Congo {Democratic Rep}' )", "description": "Inserts a new row into the countries table with the id column set to null and the name column set to 'Congo {Democratic Rep}'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "{", "}"], "instruction": "Write a SQL query to insert a new row into the countries table with the id column set to null and the name column set to 'Congo {Democratic Rep}'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. The id column should be set to NULL, and the name column should be set to 'Congo {Democratic Rep}'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Congo {Democratic Rep}');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name column set to 'Congo {Democratic Rep}'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Costa Rica' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Costa Rica' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Costa Rica' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Costa Rica"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Costa Rica' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Costa Rica' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Costa Rica');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Costa Rica'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Croatia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Croatia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Croatia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Croatia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Croatia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Croatia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Croatia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Croatia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Cuba. */\nINSERT INTO countries(id, name) VALUES ( null, 'Cuba' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Cuba.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Cuba"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Cuba.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Cuba.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Cuba');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Cuba.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Cyprus. */\nINSERT INTO countries(id, name) VALUES ( null, 'Cyprus' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Cyprus.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Cyprus"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Cyprus.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Cyprus.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Cyprus');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Cyprus.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Czech Republic. */\nINSERT INTO countries(id, name) VALUES ( null, 'Czech Republic' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Czech Republic.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Czech Republic"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Denmark' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Denmark' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Denmark' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Denmark"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Djibouti. */\nINSERT INTO countries(id, name) VALUES ( null, 'Djibouti' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Djibouti.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Djibouti"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Djibouti.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. The id column should be null, and the name should be Djibouti.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Djibouti');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Djibouti. The id column is set to null because it is a primary key and cannot be null.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Dominica. */\nINSERT INTO countries(id, name) VALUES ( null, 'Dominica' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Dominica.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Dominica"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Dominica.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Dominica.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Dominica');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Dominica.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Dominican Republic. */\nINSERT INTO countries(id, name) VALUES ( null, 'Dominican Republic' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Dominican Republic.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Dominican Republic"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Dominican Republic.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Dominican Republic.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Dominican Republic');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Dominican Republic.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'East Timor'. */\nINSERT INTO countries(id, name) VALUES ( null, 'East Timor' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'East Timor'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name", "countries"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'East Timor'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'East Timor'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('East Timor');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'East Timor'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Ecuador' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Ecuador' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Ecuador' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Ecuador"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Ecuador' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Ecuador' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Ecuador');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Ecuador'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Egypt. */\nINSERT INTO countries(id, name) VALUES ( null, 'Egypt' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Egypt.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Egypt"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Egypt.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Egypt.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Egypt');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Egypt.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name El Salvador. */\nINSERT INTO countries(id, name) VALUES ( null, 'El Salvador' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name El Salvador.", "concepts": ["INSERT INTO", "VALUES", "NULL", "El Salvador"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name El Salvador.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name El Salvador.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('El Salvador');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name El Salvador.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Equatorial Guinea. */\nINSERT INTO countries(id, name) VALUES ( null, 'Equatorial Guinea' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Equatorial Guinea.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Equatorial Guinea"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Equatorial Guinea.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Equatorial Guinea.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Equatorial Guinea');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Equatorial Guinea.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Eritrea. */\nINSERT INTO countries(id, name) VALUES ( null, 'Eritrea' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Eritrea.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Eritrea"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Estonia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Estonia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Estonia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Estonia"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Ethiopia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Ethiopia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Ethiopia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Ethiopia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Ethiopia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Ethiopia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Ethiopia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Ethiopia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Fiji. */\nINSERT INTO countries(id, name) VALUES ( null, 'Fiji' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Fiji.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Fiji"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Fiji.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Fiji.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Fiji');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Fiji.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Finland' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Finland' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Finland' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Finland"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'France' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'France' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'France' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "France"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Gabon. */\nINSERT INTO countries(id, name) VALUES ( null, 'Gabon' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Gabon.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Gabon"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Gambia'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Gambia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Gambia'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Gambia"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Georgia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Georgia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Georgia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Georgia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Georgia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Georgia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Georgia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with:\n  \u2022 name: 'Georgia'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Germany' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Germany' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Germany' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Germany"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Ghana' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Ghana' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Ghana' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Ghana"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Greece' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Greece' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Greece' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Greece"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Greece' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Greece' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Greece');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Greece'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Grenada'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Grenada' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Grenada'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Grenada"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Guatemala. */\nINSERT INTO countries(id, name) VALUES ( null, 'Guatemala' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Guatemala.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Guatemala"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Guatemala.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Guatemala.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Guatemala');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Guatemala.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Guinea'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Guinea' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Guinea'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Guinea'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Guinea'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Guinea');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Guinea'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Guinea-Bissau'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Guinea-Bissau' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Guinea-Bissau'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name", "Guinea-Bissau"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Guinea-Bissau'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Guinea-Bissau'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Guinea-Bissau');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Guinea-Bissau'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Guyana. */\nINSERT INTO countries(id, name) VALUES ( null, 'Guyana' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Guyana.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Guyana"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Guyana.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Guyana.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Guyana');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Guyana.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Haiti. */\nINSERT INTO countries(id, name) VALUES ( null, 'Haiti' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Haiti.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Haiti"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Haiti.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Haiti.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Haiti');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Haiti.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Honduras. */\nINSERT INTO countries(id, name) VALUES ( null, 'Honduras' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Honduras.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Honduras"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Hungary. */\nINSERT INTO countries(id, name) VALUES ( null, 'Hungary' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Hungary.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Hungary"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Hungary.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Hungary.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Hungary');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Hungary.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Iceland' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Iceland' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Iceland' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Iceland"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Iceland' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Iceland' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Iceland');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Iceland'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name India. */\nINSERT INTO countries(id, name) VALUES ( null, 'India' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name India.", "concepts": ["INSERT INTO", "VALUES", "NULL", "India"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name India.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name India.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('India');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name India.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Indonesia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Indonesia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Indonesia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Indonesia"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Iran. */\nINSERT INTO countries(id, name) VALUES ( null, 'Iran' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Iran.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Iran"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Iran.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Iran.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Iran');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Iran.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Iraq. */\nINSERT INTO countries(id, name) VALUES ( null, 'Iraq' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Iraq.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Iraq"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Iraq.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Iraq.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Iraq');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Iraq.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Ireland' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Ireland' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Ireland' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Ireland"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Ireland' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Ireland' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Ireland');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Ireland'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Israel' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Israel' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Israel' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Israel"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Israel' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Israel' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Israel');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Israel'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Italy' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Italy' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Italy' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Italy"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Ivory Coast. */\nINSERT INTO countries(id, name) VALUES ( null, 'Ivory Coast' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Ivory Coast.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Ivory Coast"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Ivory Coast.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. The id column should be null, and the name should be Ivory Coast.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Ivory Coast');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Ivory Coast. The id column is set to null because it is a primary key and cannot be null.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Jamaica. */\nINSERT INTO countries(id, name) VALUES ( null, 'Jamaica' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Jamaica.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Jamaica"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Jamaica.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Jamaica.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Jamaica');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Jamaica.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Japan' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Japan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Japan' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Japan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Japan' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Japan' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Japan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with:\n  \u2022 name: 'Japan'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Jordan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Jordan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Jordan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Jordan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Jordan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Jordan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Jordan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Jordan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Kazakhstan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Kazakhstan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Kazakhstan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Kazakhstan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Kazakhstan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Kazakhstan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Kazakhstan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Kazakhstan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Kenya' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Kenya' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Kenya' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "KENYA"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Kenya' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Kenya' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Kenya');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with:\n  \u2022 name: 'Kenya'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Kiribati. */\nINSERT INTO countries(id, name) VALUES ( null, 'Kiribati' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Kiribati.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Kiribati"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Kiribati.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Kiribati.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Kiribati');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Kiribati.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Korea North' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Korea North' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Korea North' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Korea North"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Korea North' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Korea North' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Korea North');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Korea North'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Korea South. */\nINSERT INTO countries(id, name) VALUES ( null, 'Korea South' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Korea South.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Korea South"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Korea South.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Korea South.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Korea South');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Korea South.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Kosovo. */\nINSERT INTO countries(id, name) VALUES ( null, 'Kosovo' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Kosovo.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Kosovo"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Kosovo.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Kosovo.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Kosovo');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Kosovo.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Kuwait. */\nINSERT INTO countries(id, name) VALUES ( null, 'Kuwait' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Kuwait.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Kuwait"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Kuwait.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Kuwait.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Kuwait');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Kuwait.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Kyrgyzstan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Kyrgyzstan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Kyrgyzstan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Kyrgyzstan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Kyrgyzstan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Kyrgyzstan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Kyrgyzstan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Kyrgyzstan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Laos. */\nINSERT INTO countries(id, name) VALUES ( null, 'Laos' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Laos.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Laos"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Laos.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Laos.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Laos');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Laos.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Latvia. */\nINSERT INTO countries(id, name) VALUES ( null, 'Latvia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Latvia.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Latvia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Latvia.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Latvia.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Latvia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Latvia.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Lebanon. */\nINSERT INTO countries(id, name) VALUES ( null, 'Lebanon' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Lebanon.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Lebanon"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Lebanon.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Lebanon.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Lebanon');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Lebanon.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Lesotho'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Lesotho' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Lesotho'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name", "countries"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Lesotho'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Lesotho'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Lesotho');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Lesotho'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Liberia. */\nINSERT INTO countries(id, name) VALUES ( null, 'Liberia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Liberia.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Liberia"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Libya. */\nINSERT INTO countries(id, name) VALUES ( null, 'Libya' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Libya.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Libya"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Libya.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Libya.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Libya');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Libya.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Liechtenstein' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Liechtenstein' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Liechtenstein' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Liechtenstein"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Liechtenstein' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Liechtenstein' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Liechtenstein');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Lithuania' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Lithuania' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Lithuania' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Lithuania"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Lithuania' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Lithuania' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Lithuania');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Lithuania'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Luxembourg. */\nINSERT INTO countries(id, name) VALUES ( null, 'Luxembourg' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Luxembourg.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Luxembourg"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Luxembourg.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Luxembourg.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Luxembourg');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Luxembourg.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Macedonia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Macedonia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Macedonia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Macedonia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Macedonia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Macedonia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Macedonia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Macedonia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Madagascar. */\nINSERT INTO countries(id, name) VALUES ( null, 'Madagascar' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Madagascar.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Madagascar"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Madagascar.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Madagascar.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Madagascar');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Madagascar.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Malawi'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Malawi' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Malawi'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Malawi'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Malawi'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Malawi');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Malawi'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Malaysia'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Malaysia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Malaysia'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Malaysia'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Malaysia'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Malaysia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Malaysia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Maldives'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Maldives' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Maldives'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Maldives'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Maldives'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Maldives');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Maldives'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Mali'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Mali' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Mali'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Mali"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Malta. */\nINSERT INTO countries(id, name) VALUES ( null, 'Malta' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Malta.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name", "countries"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Malta.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Malta.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Malta');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Malta.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Marshall Islands'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Marshall Islands' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Marshall Islands'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Marshall Islands"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Mauritania'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Mauritania' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Mauritania'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Mauritania"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Mauritania'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Mauritania'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Mauritania');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Mauritania'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Mauritius'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Mauritius' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Mauritius'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Mauritius"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Mauritius'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Mauritius'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Mauritius');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Mauritius'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Mexico' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Mexico' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Mexico' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Mexico"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Mexico' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Mexico' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Mexico');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with:\n  \u2022 name: 'Mexico'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Micronesia'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Micronesia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Micronesia'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Micronesia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Micronesia'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Micronesia'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Micronesia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Micronesia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Moldova. */\nINSERT INTO countries(id, name) VALUES ( null, 'Moldova' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Moldova.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Moldova"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Monaco. */\nINSERT INTO countries(id, name) VALUES ( null, 'Monaco' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Monaco.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Monaco"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Monaco.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Monaco.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Monaco');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Monaco.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Mongolia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Mongolia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Mongolia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Mongolia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Mongolia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Mongolia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Mongolia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Mongolia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Montenegro' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Montenegro' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Montenegro' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Montenegro"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Montenegro' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Montenegro' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Montenegro');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Montenegro'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and Morocco for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Morocco' )", "description": "Inserts a new row into the countries table with a null value for the id column and Morocco for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Morocco"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new country with id null and name Mozambique into the countries table. */\nINSERT INTO countries(id, name) VALUES ( null, 'Mozambique' )", "description": "Inserts a new country with id null and name Mozambique into the countries table.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Mozambique"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Myanmar' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Myanmar' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Myanmar' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Myanmar"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Myanmar' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Myanmar' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Myanmar');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with:\n  \u2022 name: 'Myanmar'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Namibia. */\nINSERT INTO countries(id, name) VALUES ( null, 'Namibia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Namibia.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Namibia"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Nauru'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Nauru' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Nauru'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Nauru"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Nauru'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Nauru'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Nauru');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Nauru'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Nepal' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Nepal' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Nepal' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Nepal"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Nepal' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Nepal' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Nepal');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Nepal'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Netherlands' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Netherlands' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Netherlands' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Netherlands"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'New Zealand' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'New Zealand' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'New Zealand' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "New Zealand"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'New Zealand' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'New Zealand' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('New Zealand');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with:\n  \u2022 name: 'New Zealand'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Nicaragua. */\nINSERT INTO countries(id, name) VALUES ( null, 'Nicaragua' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Nicaragua.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Nicaragua"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Nicaragua.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Nicaragua.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Nicaragua');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Nicaragua.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Niger' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Niger' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Niger' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Niger"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Niger' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Niger' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Niger');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Niger'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Nigeria' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Nigeria' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Nigeria' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Nigeria"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Nigeria' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Nigeria' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Nigeria');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Nigeria'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Norway' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Norway' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Norway' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Norway"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Oman' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Oman' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Oman' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Oman"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Pakistan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Pakistan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Pakistan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Pakistan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Pakistan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Pakistan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Pakistan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Pakistan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Palau. */\nINSERT INTO countries(id, name) VALUES ( null, 'Palau' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Palau.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Palau"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Palau.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Palau.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Palau');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Palau.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Panama. */\nINSERT INTO countries(id, name) VALUES ( null, 'Panama' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Panama.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Panama"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Panama.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Panama.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Panama');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Panama.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Papua New Guinea'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Papua New Guinea' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Papua New Guinea'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Papua New Guinea"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Papua New Guinea'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Papua New Guinea'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Papua New Guinea');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Papua New Guinea'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Paraguay. */\nINSERT INTO countries(id, name) VALUES ( null, 'Paraguay' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Paraguay.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Paraguay"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Paraguay.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Paraguay.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Paraguay');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Paraguay.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Peru. */\nINSERT INTO countries(id, name) VALUES ( null, 'Peru' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Peru.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Peru"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Peru.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Peru.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Peru');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Peru.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Philippines'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Philippines' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Philippines'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Philippines"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Philippines'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Philippines'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Philippines');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Philippines'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Poland'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Poland' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Poland'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Poland"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Portugal. */\nINSERT INTO countries(id, name) VALUES ( null, 'Portugal' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Portugal.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Portugal"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Qatar'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Qatar' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Qatar'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Qatar"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Romania' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Romania' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Romania' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Romania"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Russia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Russia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Russia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Russia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Russia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Russia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Russia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Russia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Rwanda. */\nINSERT INTO countries(id, name) VALUES ( null, 'Rwanda' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Rwanda.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Rwanda"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Rwanda.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Rwanda.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Rwanda');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Rwanda.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'St Lucia'. */\nINSERT INTO countries(id, name) VALUES ( null, 'St Lucia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'St Lucia'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "St Lucia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'St Lucia'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'St Lucia'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('St Lucia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'St Lucia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Samoa'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Samoa' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Samoa'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Samoa"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name San Marino. */\nINSERT INTO countries(id, name) VALUES ( null, 'San Marino' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name San Marino.", "concepts": ["INSERT INTO", "VALUES", "NULL", "San Marino"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name San Marino.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name San Marino.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('San Marino');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name San Marino.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Saudi Arabia'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Saudi Arabia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Saudi Arabia'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Saudi Arabia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Saudi Arabia'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Saudi Arabia'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Saudi Arabia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Saudi Arabia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Senegal'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Senegal' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Senegal'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "SENEGA"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Serbia'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Serbia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Serbia'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Serbia"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Seychelles'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Seychelles' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Seychelles'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "id", "name", "countries"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Seychelles'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Seychelles'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Seychelles');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Seychelles'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Sierra Leone'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Sierra Leone' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Sierra Leone'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Sierra Leone"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Sierra Leone'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Sierra Leone'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Sierra Leone');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Sierra Leone'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Singapore. */\nINSERT INTO countries(id, name) VALUES ( null, 'Singapore' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Singapore.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Singapore"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Singapore.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Singapore.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Singapore');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Singapore.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Slovakia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Slovakia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Slovakia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Slovakia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Slovakia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Slovakia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Slovakia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Slovakia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Slovenia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Slovenia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Slovenia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Slovenia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Slovenia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Slovenia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Slovenia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Slovenia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Solomon Islands'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Solomon Islands' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Solomon Islands'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Solomon Islands"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Somalia' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Somalia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Somalia' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Somalia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Somalia' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Somalia' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Somalia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Somalia'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'South Africa' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'South Africa' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'South Africa' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "South Africa"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'South Africa' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'South Africa' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('South Africa');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'South Africa'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name South Sudan. */\nINSERT INTO countries(id, name) VALUES ( null, 'South Sudan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name South Sudan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "South Sudan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name South Sudan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name South Sudan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('South Sudan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name South Sudan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Spain' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Spain' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Spain' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Spain"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Sri Lanka. */\nINSERT INTO countries(id, name) VALUES ( null, 'Sri Lanka' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Sri Lanka.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Sri Lanka"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Sri Lanka.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Sri Lanka.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Sri Lanka');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Sri Lanka.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Sudan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Sudan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Sudan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Sudan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Sudan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Sudan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Sudan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Sudan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Suriname'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Suriname' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Suriname'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Suriname"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Suriname'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Suriname'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Suriname');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Suriname'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Swaziland. */\nINSERT INTO countries(id, name) VALUES ( null, 'Swaziland' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Swaziland.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Swaziland"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Swaziland.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Swaziland.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Swaziland');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Swaziland.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Sweden' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Sweden' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Sweden' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Sweden"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Switzerland' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Switzerland' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Switzerland' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Switzerland"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Switzerland' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Switzerland' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Switzerland');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Switzerland'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Syria. */\nINSERT INTO countries(id, name) VALUES ( null, 'Syria' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Syria.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Syria"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Syria.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Syria.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Syria');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Syria.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Taiwan' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Taiwan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Taiwan' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Taiwan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Taiwan' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Taiwan' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Taiwan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Taiwan'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Tajikistan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Tajikistan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Tajikistan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Tajikistan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Tajikistan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Tajikistan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Tajikistan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Tajikistan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Tanzania. */\nINSERT INTO countries(id, name) VALUES ( null, 'Tanzania' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Tanzania.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Tanzania"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Tanzania.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Tanzania.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Tanzania');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Tanzania.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Thailand' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Thailand' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Thailand' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Thailand"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Thailand' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Thailand' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Thailand');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Thailand'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Togo' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Togo' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Togo' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "ToGo"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Tonga. */\nINSERT INTO countries(id, name) VALUES ( null, 'Tonga' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Tonga.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Tonga"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Tonga.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Tonga.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Tonga');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Tonga.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Tunisia. */\nINSERT INTO countries(id, name) VALUES ( null, 'Tunisia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Tunisia.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Tunisia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Tunisia.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Tunisia.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Tunisia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Tunisia.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Turkey'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Turkey' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Turkey'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Turkey"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Turkmenistan'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Turkmenistan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Turkmenistan'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Turkmenistan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Turkmenistan'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Turkmenistan'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Turkmenistan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Turkmenistan'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Tuvalu. */\nINSERT INTO countries(id, name) VALUES ( null, 'Tuvalu' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Tuvalu.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Tuvalu"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Tuvalu.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Tuvalu.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Tuvalu');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Tuvalu.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Uganda'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Uganda' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Uganda'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Uganda"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Uganda'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Uganda'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Uganda');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Uganda'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Ukraine' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Ukraine' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Ukraine' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Ukraine"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Ukraine' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Ukraine' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Ukraine');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Ukraine'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name United Arab Emirates. */\nINSERT INTO countries(id, name) VALUES ( null, 'United Arab Emirates' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name United Arab Emirates.", "concepts": ["INSERT INTO", "VALUES", "NULL", "United Arab Emirates"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name United Arab Emirates.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name United Arab Emirates.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('United Arab Emirates');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name United Arab Emirates.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'United Kingdom' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'United Kingdom' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'United Kingdom' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "United Kingdom"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'United Kingdom' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'United Kingdom' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('United Kingdom');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'United States' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'United States' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'United States' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "United States"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'United States' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'United States' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('United States');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Uruguay. */\nINSERT INTO countries(id, name) VALUES ( null, 'Uruguay' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Uruguay.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Uruguay"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Uruguay.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Uruguay.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Uruguay');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Uruguay.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Uzbekistan. */\nINSERT INTO countries(id, name) VALUES ( null, 'Uzbekistan' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Uzbekistan.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Uzbekistan"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Uzbekistan.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Uzbekistan.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Uzbekistan');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Uzbekistan.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Vanuatu'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Vanuatu' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Vanuatu'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Vanuatu"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Vanuatu'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Vanuatu'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Vanuatu');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Vanuatu'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Vatican City'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Vatican City' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Vatican City'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Vatican City"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Vatican City'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Vatican City'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Vatican City');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Vatican City'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name 'Venezuela'. */\nINSERT INTO countries(id, name) VALUES ( null, 'Venezuela' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name 'Venezuela'.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Venezuela"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name 'Venezuela'.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name 'Venezuela'.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Venezuela');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name 'Venezuela'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new country with id null and name Viet Nam into the countries table. */\nINSERT INTO countries(id, name) VALUES ( null, 'Viet Nam' )", "description": "Inserts a new country with id null and name Viet Nam into the countries table.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Viet Nam"], "instruction": "Write a SQL query to insert a new country with id null and name Viet Nam into the countries table.", "response": "-- Reasoning:\nWe need to insert a new country into the countries table. It should have a null id and the name Viet Nam.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Viet Nam');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Viet Nam.\n\n-- Tests:\n-- 1. Verify new country appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Yemen. */\nINSERT INTO countries(id, name) VALUES ( null, 'Yemen' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Yemen.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Yemen"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Yemen.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Yemen.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\n  VALUES ('Yemen');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Yemen.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the name Zambia. */\nINSERT INTO countries(id, name) VALUES ( null, 'Zambia' )", "description": "Inserts a new row into the countries table with a null value for the id column and the name Zambia.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Zambia"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the name Zambia.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the name Zambia.\n\n-- Solution:\n```sql\nINSERT INTO countries (name)\nVALUES ('Zambia');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with the name Zambia.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Inserts a new row into the countries table with a null value for the id column and the value 'Zimbabwe' for the name column. */\nINSERT INTO countries(id, name) VALUES ( null, 'Zimbabwe' )", "description": "Inserts a new row into the countries table with a null value for the id column and the value 'Zimbabwe' for the name column.", "concepts": ["INSERT INTO", "VALUES", "NULL", "Zimbabwe"], "instruction": "Write a SQL query to insert a new row into the countries table with a null value for the id column and the value 'Zimbabwe' for the name column.", "response": "-- Reasoning:\nWe need to insert a new row into the countries table. It should have a null value for the id column and the value 'Zimbabwe' for the name column.\n\n-- Solution:\n```sql\nINSERT INTO countries (name) VALUES ('Zimbabwe');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the countries table with:\n  \u2022 name: 'Zimbabwe'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM countries;"}
{"seed": "/* Updates the sal column of the emp table to 3200 for the employee named \"SCOTT\". */\nUPDATE emp\n\tSET sal = 3200\n    WHERE ename = \"SCOTT\"", "description": "Updates the sal column of the emp table to 3200 for the employee named \"SCOTT\".", "concepts": ["UPDATE", "SET", "WHERE"], "instruction": "Write a SQL query to update the sal column of the emp table to 3200 for the employee named \"SCOTT\".", "response": "-- Reasoning:\nWe need to update the sal column of the emp table to 3200 for the employee named \"SCOTT\".\n\n-- Solution:\n```sql\nUPDATE emp\n  SET sal = 3200\n  WHERE ename = 'SCOTT';\n```\n\n-- Explanation:\nThis UPDATE statement updates the sal column of the emp table to 3200 for the employee named \"SCOTT\".\n\n-- Tests:\n-- 1. Verify sal is updated\nSELECT * FROM emp WHERE ename = 'SCOTT';"}
{"seed": "/* Updates the sal and comm of the employee named SCOTT to 3300 and 200 respectively. */\nUPDATE emp\n\tSET sal = 3300, comm = 200\n    WHERE ename = \"SCOTT\"", "description": "Updates the sal and comm of the employee named SCOTT to 3300 and 200 respectively.", "concepts": ["UPDATE", "SET", "WHERE"], "instruction": "Write a SQL query to update the sal and comm of the employee named SCOTT to 3300 and 200 respectively.", "response": "-- Reasoning:\nWe need to update the sal and comm of the employee named SCOTT to 3300 and 200 respectively.\n\n-- Solution:\n```sql\nUPDATE employees\n  SET sal = 3300, comm = 200\n  WHERE ename = 'SCOTT';\n```\n\n-- Explanation:\nThis UPDATE statement updates the sal and comm of the employee named SCOTT to 3300 and 200 respectively.\n\n-- Tests:\n-- 1. Verify sal and comm are updated\nSELECT * FROM employees WHERE ename = 'SCOTT';"}
{"seed": "/* Updates the sal column of the emp table to the salary of the employee named KING. */\nUPDATE emp\n\tSET sal = (SELECT s.sal FROM (SELECT sal FROM emp WHERE ename='KING') s)\n    WHERE ename=\"SCOTT\"", "description": "Updates the sal column of the emp table to the salary of the employee named KING.", "concepts": ["UPDATE", "SET", "SELECT", "FROM", "WHERE", "sal", "ename", "SCOTT", "KING"], "instruction": "Write a SQL query to update the sal column of the emp table to the salary of the employee named KING.", "response": "-- Reasoning:\nWe need to update the sal column of the emp table to the salary of the employee named KING.\n\n-- Solution:\n```sql\nUPDATE emp\n  SET sal = (SELECT sal FROM emp WHERE ename = 'KING');\n```\n\n-- Explanation:\nThis UPDATE statement updates the sal column of the emp table to the salary of the employee named KING.\n\n-- Tests:\n-- 1. Verify sal is updated to 5000\nSELECT sal FROM emp WHERE ename = 'KING';"}
{"seed": "/* Selects all columns from the emp table. */\nSELECT * FROM emp", "description": "Selects all columns from the emp table.", "concepts": ["SELECT", "FROM", "emp"], "instruction": "Write a SQL query to select all columns from the emp table.", "response": "-- Reasoning:\nWe need to select all columns from the emp table.\n\n-- Solution:\n```sql\nSELECT * FROM emp;\n```\n\n-- Explanation:\nThis query selects all columns from the emp table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM emp;"}
{"seed": "/* Creates a table named roles with three columns: id (integer primary key), name (varchar), and a unique key named RL_name. */\nCREATE TABLE roles (\n    id INT NOT NULL AUTO_INCREMENT,\n    name varchar(50) NOT NULL,\n    PRIMARY KEY (id),\n    UNIQUE KEY RL_name (name)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named roles with three columns: id (integer primary key), name (varchar), and a unique key named RL_name.", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "NOT NULL", "VARCHAR", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named roles with three columns: id (integer primary key), name (varchar), and a unique key named RL_name.", "response": "-- Reasoning:\nWe need a new table named roles. It should have an integer primary key so that each role has a unique identifier, and a name column to store the role\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE roles (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  UNIQUE(name)\n);\n```\n\n-- Explanation:\nThis statement defines the roles table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 RL_name: unique key on name\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('roles');"}
{"seed": "/* Inserts two rows into the roles table with the name User and Admin. */\nINSERT INTO roles (name) VALUES('User'), ('Admin')", "description": "Inserts two rows into the roles table with the name User and Admin.", "concepts": ["INSERT INTO", "VALUES", "roles", "name"], "instruction": "Write a SQL query to insert two rows into the roles table with the name User and Admin.", "response": "-- Reasoning:\nWe need to insert two rows into the roles table. The first row should have the name User, and the second row should have the name Admin.\n\n-- Solution:\n```sql\nINSERT INTO roles (name) VALUES ('User');\nINSERT INTO roles (name) VALUES ('Admin');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the roles table:\n  \u2022 User: with the name User\n  \u2022 Admin: with the name Admin\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM roles;"}
{"seed": "/* Creates a table named users with five columns: id (integer primary key), username (varchar), active (tinyint), password (varchar), and a unique key on the username column. */\nCREATE TABLE users (\n    id INT NOT NULL AUTO_INCREMENT,\n    username varchar(50) NOT NULL,\n    active tinyint(1) NOT NULL DEFAULT true,\n    password varchar(255) NOT NULL,\n    PRIMARY KEY (id),\n    UNIQUE KEY U_nick (username)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named users with five columns: id (integer primary key), username (varchar), active (tinyint), password (varchar), and a unique key on the username column.", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "NOT NULL", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named users with five columns: id (integer primary key), username (varchar), active (tinyint), password (varchar), and a unique key on the username column.", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a username column to store the user\u2019s name as text. It should also have an active column to indicate whether the user is active or not.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  username VARCHAR(255),\n  active TINYINT,\n  password VARCHAR(255),\n  UNIQUE(username)\n);\n```\n\n-- Explanation:\nThis statement defines the users table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 active: boolean\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 UNIQUE(username): a unique key on the username column\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Inserts two users into the users table. The first user has username spring-admin and password . The second user has username spring-user and password . */\nINSERT INTO users (username, password)\n    VALUES\n        /* password is CghsyuFlvsy */\n        ('spring-admin', '$2a$11$osLO4.WKa2oj1gYLRW4qcO5L6NRIc1lci/oUyMvo/sXKbWKnjm79y'),\n        /* password is Cghsyu>pth */\n        ('spring-user', '$2a$11$zxiTilIBmPSQdxUpICktrutvsp1bYw.qfPtiWfhOQllramDYmJMie')", "description": "Inserts two users into the users table. The first user has username spring-admin and password . The second user has username spring-user and password .", "concepts": ["INSERT INTO", "VALUES", "PASSWORD", "$2a$11$osLO4.WKa2oj1gYLRW4qcO5"], "instruction": "Write a SQL query to insert two users into the users table. The first user has username spring-admin and password . The second user has username spring-user and password .", "response": "-- Reasoning:\nWe need to insert two users into the users table. The first user has username spring-admin and password . The second user has username spring-user and password .\n\n-- Solution:\n```sql\nINSERT INTO users (username, password)\nVALUES ('spring-admin', ''),\n       ('spring-user', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the users table:\n  \u2022 spring-admin with password \n  \u2022 spring-user with password \n\n-- Tests:\n-- 1. Verify users are inserted\nSELECT * FROM users;"}
{"seed": "/* Creates a table named users_to_roles with two columns: role_id (integer) and user_id (integer). The table has a primary key (role_id, user_id) and a unique index (role_id, user_id). The table has two foreign keys: role_id references roles (id) and user_id references users (id). */\nCREATE TABLE users_to_roles (\n    role_id INT NOT NULL,\n    user_id INT NOT NULL,\n    PRIMARY KEY (role_id, user_id),\n    UNIQUE INDEX role_user_ids (role_id, user_id),\n    INDEX fk_users_idx (user_id),\n    CONSTRAINT fk_users\n    FOREIGN KEY (user_id)\n        REFERENCES users (id)\n        ON DELETE CASCADE\n        ON UPDATE CASCADE,\n    CONSTRAINT fk_roles\n        FOREIGN KEY (role_id)\n        REFERENCES roles (id)\n        ON DELETE CASCADE\n        ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named users_to_roles with two columns: role_id (integer) and user_id (integer). The table has a primary key (role_id, user_id) and a unique index (role_id, user_id). The table has two foreign keys: role_id references roles (id) and user_id references users (id).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "UNIQUE INDEX", "INDEX", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE", "CONSTRAINT", "ENGINE", "DEFAULT CHARSET"], "instruction": "Write a SQL query to create a table named users_to_roles with two columns: role_id (integer) and user_id (integer). The table has a primary key (role_id, user_id) and a unique index (role_id, user_id). The table has two foreign keys: role_id references roles (id) and user_id references users (id).", "response": "-- Reasoning:\nWe need a new table named users_to_roles. It should have two foreign keys: role_id references roles (id) and user_id references users (id).\n\n-- Solution:\n```sql\nCREATE TABLE users_to_roles (\n  role_id INT,\n  user_id INT,\n  PRIMARY KEY (role_id, user_id),\n  UNIQUE (role_id, user_id),\n  FOREIGN KEY (role_id) REFERENCES roles (id),\n  FOREIGN KEY (user_id) REFERENCES users (id)\n);\n```\n\n-- Explanation:\nThis statement defines the users_to_roles table with two columns:\n  \u2022 role_id: integer, references the id column in the roles table\n  \u2022 user_id: integer, references the id column in the users table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users_to_roles');"}
{"seed": "/* Inserts three rows into the users_to_roles table: (1, 1), (1, 2), and (2, 1). */\nINSERT INTO users_to_roles (user_id, role_id)\n    VALUES (1, 1), (1, 2), (2, 1)", "description": "Inserts three rows into the users_to_roles table: (1, 1), (1, 2), and (2, 1).", "concepts": ["INSERT INTO", "VALUES", "user_id", "role_id"], "instruction": "Write a SQL query to insert three rows into the users_to_roles table: (1, 1), (1, 2), and (2, 1).", "response": "-- Reasoning:\nWe need to insert three rows into the users_to_roles table. Each row should have a user_id and a role_id.\n\n-- Solution:\n```sql\nINSERT INTO users_to_roles (user_id, role_id)\nVALUES (1, 1), (1, 2), (2, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the users_to_roles table:\n  \u2022 (1, 1): user_id 1 has role_id 1\n  \u2022 (1, 2): user_id 1 has role_id 2\n  \u2022 (2, 1): user_id 2 has role_id 1\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM users_to_roles;"}
{"seed": "/* Creates a table named books with four columns: id (integer primary key), name (varchar), author (varchar), and a unique key named BK_book. */\nCREATE TABLE books (\n    id INT NOT NULL AUTO_INCREMENT,\n    name varchar(255) NOT NULL,\n    author varchar(255) NOT NULL,\n    PRIMARY KEY (id),\n    UNIQUE KEY BK_book (name, author)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named books with four columns: id (integer primary key), name (varchar), author (varchar), and a unique key named BK_book.", "concepts": ["CREATE TABLE", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named books with four columns: id (integer primary key), name (varchar), author (varchar), and a unique key named BK_book.", "response": "-- Reasoning:\nWe need a new table named books. It should have an integer primary key so that each book has a unique identifier, and a name and author column to store the book\u2019s name and author as text.\n\n-- Solution:\n```sql\nCREATE TABLE books (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  author VARCHAR(255),\n  UNIQUE(name, author)\n);\n```\n\n-- Explanation:\nThis statement defines the books table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 author: variable\u2010length string up to 255 characters\n  \u2022 BK_book: a unique key on the name and author columns\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('books');"}
{"seed": "/* Inserts two rows into the books table. The first row has the author John Smith and the name Thinking in Java, and the second row has the author  and the name Thinking in Java 5th edition. */\nINSERT INTO books (author, name)\n    VALUES\n        ('John Smith', 'Thinking in Java'),\n        ('John Mc Smith', 'Thinking in Java 5th edition')", "description": "Inserts two rows into the books table. The first row has the author John Smith and the name Thinking in Java, and the second row has the author  and the name Thinking in Java 5th edition.", "concepts": ["INSERT INTO", "VALUES", "author", "name", "John", "Smith", "Mc", "Thinking", "Java", "5th", "edition"], "instruction": "Write a SQL query to insert two rows into the books table. The first row has the author John Smith and the name Thinking in Java, and the second row has the author  and the name Thinking in Java 5th edition.", "response": "-- Reasoning:\nWe need to insert two rows into the books table. The first row should have the author  and the name Thinking in Java, and the second row should have the author  and the name Thinking in Java 5th edition.\n\n-- Solution:\n```sql\nINSERT INTO books (author, name)\nVALUES ('', 'Thinking in Java'),\n       ('', 'Thinking in Java 5th edition');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the books table:\n  \u2022 author: \n  \u2022 name: Thinking in Java\n  \u2022 author:\n  \u2022 name: Thinking in Java 5th edition\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM books;"}
{"seed": "/* Selects the genre name and the number of tracks in each genre from the track table. */\nselect genre.name, count(track_id) from track\ninner join genre on genre.genre_id = track.genre_id\ngroup by genre.genre_id", "description": "Selects the genre name and the number of tracks in each genre from the track table.", "concepts": ["SELECT", "FROM", "INNER JOIN", "ON", "GROUP BY", "COUNT", "INT", "VARCHAR", "genre", "track", "track_id", "genre_id"], "instruction": "Write a SQL query to list the genre name and the number of tracks in each genre from the track table.", "response": "-- Reasoning:\nWe need to list the genre name and the number of tracks in each genre.\n\n-- Solution:\n```sql\nSELECT\n  g.name AS genre,\n  COUNT(t.track_id) AS tracks\nFROM genre g\nLEFT JOIN track t ON t.genre_id = g.genre_id\nGROUP BY g.name;\n```\n\n-- Explanation:\nThis query uses a LEFT JOIN to list the genre name and the number of tracks in each genre.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT\n  g.name AS genre,\n  COUNT(t.track_id) AS tracks\nFROM genre g\nLEFT JOIN track t ON t.genre_id = g.genre_id\nGROUP BY g.name;"}
{"seed": "/* Selects the genre name and the number of tracks in each genre from the track table. The genre name is selected from the genre table. The genre name is filtered to only include the genres 'Pop' and 'Rock'. The number of tracks in each genre is counted. */\nselect genre.name, count(track_id) from track\ninner join genre on genre.genre_id = track.genre_id\nwhere genre.name in ('Pop', 'Rock')\ngroup by genre.genre_id", "description": "Selects the genre name and the number of tracks in each genre from the track table. The genre name is selected from the genre table. The genre name is filtered to only include the genres 'Pop' and 'Rock'. The number of tracks in each genre is counted.", "concepts": ["genre.name", "count(track_id)", "genre.genre_id", "genre.name", "genre.genre_id", "genre.name"], "instruction": "Write a SQL query to list the genre name and the number of tracks in each genre from the track table. The genre name is selected from the genre table. The genre name is filtered to only include the genres 'Pop' and 'Rock'. The number of tracks in each genre is counted.", "response": "-- Reasoning:\nWe need to list the genre name and the number of tracks in each genre. The genre name is selected from the genre table. The genre name is filtered to only include the genres 'Pop' and 'Rock'. The number of tracks in each genre is counted.\n\n-- Solution:\n```sql\nSELECT g.name AS genre, COUNT(t.track_id) AS tracks\nFROM genre g\nJOIN track t ON g.genre_id = t.genre_id\nWHERE g.name IN ('Pop', 'Rock')\nGROUP BY g.name;\n```\n\n-- Explanation:\nThis query joins the genre and track tables on the genre_id column. It then filters the genre name to only include 'Pop' and 'Rock'. Finally, it counts the number of tracks in each genre.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT * FROM (\n  SELECT g.name AS genre, COUNT(t.track_id) AS tracks\n  FROM genre g\n  JOIN track t ON g.genre_id = t.genre_id\n  WHERE g.name IN ('Pop', 'Rock')\n  GROUP BY g.name\n)\nWHERE tracks > 10;"}
{"seed": "/* Selects the number of albums for each artist from the artist and album tables. */\nselect sum(album.album_id) \"Num Albums\" from artist\ninner join album on\nartist.artist_id = album.album_id\ngroup by artist.artist_id", "description": "Selects the number of albums for each artist from the artist and album tables.", "concepts": ["SELECT", "SUM", "FROM", "INNER JOIN", "ON", "GROUP BY"], "instruction": "Write a SQL query to list the number of albums for each artist from the artist and album tables.", "response": "-- Reasoning:\nWe need to count the number of albums for each artist.\n\n-- Solution:\n```sql\nSELECT artist.name, COUNT(album.album_id) AS album_count\n  FROM artist\n  LEFT JOIN album ON artist.artist_id = album.artist_id\n  GROUP BY artist.name;\n```\n\n-- Explanation:\nThis query uses a LEFT JOIN to join the artist and album tables. It then groups the results by artist name and counts the number of albums for each artist.\n\n-- Tests:\n-- 1. Verify correct number of albums for each artist\nSELECT artist.name, COUNT(album.album_id) AS album_count\n  FROM artist\n  LEFT JOIN album ON artist.artist_id = album.artist_id\n  GROUP BY artist.name;"}
{"seed": "/* Drops the database named jhoa if it exists. */\nDROP DATABASE IF EXISTS `jhoa`", "description": "Drops the database named jhoa if it exists.", "concepts": ["DROP DATABASE"], "instruction": "Write a SQL query to drop the database named jhoa if it exists.", "response": "-- Reasoning:\nWe need to drop the database named jhoa if it exists.\n\n-- Solution:\n```sql\nDROP DATABASE IF EXISTS jhoa;\n```\n\n-- Explanation:\nThis statement drops the database named jhoa if it exists.\n\n-- Tests:\n-- 1. Verify database is dropped\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named jhoa. */\nCREATE DATABASE `jhoa`", "description": "Creates a database named jhoa.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named jhoa.", "response": "-- Reasoning:\nWe need to create a new database named jhoa.\n\n-- Solution:\n```sql\nCREATE DATABASE jhoa;\n```\n\n-- Explanation:\nThis statement creates a new database named jhoa.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named qt_academy with three columns: id (integer primary key), academyname (varchar) and active (boolean). */\nCREATE TABLE `qt_academy` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `academyname` varchar(255) DEFAULT NULL COMMENT '\u5b66\u9662\u540d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8 COMMENT='\u5b66\u9662\u8868'", "description": "Creates a table named qt_academy with three columns: id (integer primary key), academyname (varchar) and active (boolean).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "ENGINE", "DEFAULT", "COMMENT", "VARCHAR", "INT", "NOT NULL", "AUTO_INCREMENT", "ENGINE"], "instruction": "Write a SQL query to create a table named qt_academy with three columns: id (integer primary key), academyname (varchar) and active (boolean).", "response": "-- Reasoning:\nWe need a new table named qt_academy. It should have an integer primary key so that each academy has a unique identifier, a name column to store the academy\u2019s name as text, and an active column to indicate whether the academy is active or not.\n\n-- Solution:\n```sql\nCREATE TABLE qt_academy (\n  id INTEGER PRIMARY KEY,\n  academyname VARCHAR(255),\n  active BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the qt_academy table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 academyname: variable\u2010length string up to 255 characters\n  \u2022 active: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_academy');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 1 and name \u5316\u6750\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (1,'\u5316\u6750\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 1 and name \u5316\u6750\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 2 and name \u673a\u68b0\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (2,'\u673a\u68b0\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 2 and name \u673a\u68b0\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 3 and name \u4fe1\u606f\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (3,'\u4fe1\u606f\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 3 and name \u4fe1\u606f\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 4 and name \u8ba1\u7b97\u673a\u3001\u8f6f\u4ef6\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (4,'\u8ba1\u7b97\u673a\u3001\u8f6f\u4ef6\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 4 and name \u8ba1\u7b97\u673a\u3001\u8f6f\u4ef6\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 5 and name \u7ecf\u8d38\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (5,'\u7ecf\u8d38\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 5 and name \u7ecf\u8d38\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with id 6 and name \u5efa\u5de5\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (6,'\u5efa\u5de5\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with id 6 and name \u5efa\u5de5\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 7 and name \u751f\u73af\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (7,'\u751f\u73af\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 7 and name \u751f\u73af\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 8 and name \u6559\u79d1\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (8,'\u6559\u79d1\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 8 and name \u6559\u79d1\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 9 and name \u4eba\u6587\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (9,'\u4eba\u6587\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 9 and name \u4eba\u6587\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with id 10 and name \u5065\u884c\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (10,'\u5065\u884c\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with id 10 and name \u5065\u884c\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with id 10 and name \u5065\u884c\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with id 10 and name \u5065\u884c\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name) VALUES (10, '\u5065\u884c\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with id 10 and name \u5065\u884c\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 11 and name \u5916\u8bed\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (11,'\u5916\u8bed\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 11 and name \u5916\u8bed\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with the id 11 and name \u5916\u8bed\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with the id 11 and name \u5916\u8bed\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name) VALUES (11, '\u5916\u8bed\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with the id 11 and name \u5916\u8bed\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 12 and name \u6cd5\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (12,'\u6cd5\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 12 and name \u6cd5\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with the id 12 and name \u6cd5\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with the id 12 and name \u6cd5\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name) VALUES (12, '\u6cd5\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with the id 12 and name \u6cd5\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with id 13 and name \u7406\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (13,'\u7406\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with id 13 and name \u7406\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with id 13 and name \u7406\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with id 13 and name \u7406\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name)\nVALUES (13, '\u7406\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with id 13 and name \u7406\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 14 and name \u6210\u6559\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (14,'\u6210\u6559\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 14 and name \u6210\u6559\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with the id 14 and name \u6210\u6559\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with the id 14 and name \u6210\u6559\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name) VALUES (14, '\u6210\u6559\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with the id 14 and name \u6210\u6559\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with id 15 and name \u4e4b\u6c5f\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (15,'\u4e4b\u6c5f\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with id 15 and name \u4e4b\u6c5f\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 16 and name \u827a\u672f\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (16,'\u827a\u672f\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 16 and name \u827a\u672f\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with the id 16 and name \u827a\u672f\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with the id 16 and name \u827a\u672f\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name)\nVALUES (16, '\u827a\u672f\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with the id 16 and name \u827a\u672f\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with the id 17 and name \u836f\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (17,'\u836f\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with the id 17 and name \u836f\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with the id 17 and name \u836f\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with the id 17 and name \u836f\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name)\nVALUES (17, '\u836f\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with the id 17 and name \u836f\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with id 18 and name \u56fd\u9645\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (18,'\u56fd\u9645\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with id 18 and name \u56fd\u9645\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with id 18 and name \u56fd\u9645\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with id 18 and name \u56fd\u9645\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name)\nVALUES (18, '\u56fd\u9645\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with id 18 and name \u56fd\u9645\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Inserts a new row into the qt_academy table with id 19 and name \u653f\u7ba1\u5b66\u9662. */\nINSERT INTO `qt_academy` VALUES (19,'\u653f\u7ba1\u5b66\u9662')", "description": "Inserts a new row into the qt_academy table with id 19 and name \u653f\u7ba1\u5b66\u9662.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_academy table with id 19 and name \u653f\u7ba1\u5b66\u9662.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_academy table with id 19 and name \u653f\u7ba1\u5b66\u9662.\n\n-- Solution:\n```sql\nINSERT INTO qt_academy (id, name)\nVALUES (19, '\u653f\u7ba1\u5b66\u9662');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_academy table with id 19 and name \u653f\u7ba1\u5b66\u9662.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_academy;"}
{"seed": "/* Creates a table named qt_comment with five columns: id (integer primary key), content (text), userID (integer), addtime (timestamp), and fileID (integer). */\nCREATE TABLE `qt_comment` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `content` text COMMENT '\u5185\u5bb9',\n  `userID` int(11) DEFAULT NULL COMMENT '\u8bc4\u8bbaID',\n  `addtime` timestamp NULL DEFAULT NULL COMMENT '\u8bc4\u8bba\u65f6\u95f4',\n  `fileID` int(11) DEFAULT NULL COMMENT '\u5173\u8054\u6587\u4ef6ID',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8 COMMENT='\u6587\u4ef6\u8bc4\u8bba\u8868'", "description": "Creates a table named qt_comment with five columns: id (integer primary key), content (text), userID (integer), addtime (timestamp), and fileID (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "TIMESTAMP", "TEXT", "INT", "VARCHAR", "INT", "TEXT", "INT", "INT"], "instruction": "Write a SQL query to create a table named qt_comment with five columns: id (integer primary key), content (text), userID (integer), addtime (timestamp), and fileID (integer).", "response": "-- Reasoning:\nWe need a new table named qt_comment. It should have an integer primary key so that each comment has a unique identifier, and a text column to store the comment\u2019s content. It should also have an integer userID column to store the user who made the comment, a timestamp addtime column to store the time the comment was added, and an integer fileID column to store the file the comment was made on.\n\n-- Solution:\n```sql\nCREATE TABLE qt_comment (\n  id INTEGER PRIMARY KEY,\n  content TEXT,\n  userID INTEGER,\n  addtime TIMESTAMP,\n  fileID INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the qt_comment table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 content: text\n  \u2022 userID: integer\n  \u2022 addtime: timestamp\n  \u2022 fileID: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_comment');"}
{"seed": "/* Inserts a new comment into the qt_comment table with the given values. */\nINSERT INTO `qt_comment` VALUES (20,'\u6d4b\u8bd5\u674e\u5c0f\u658c\u7684\u8bc4\u8bba',2,'2011-10-26 21:06:49',4)", "description": "Inserts a new comment into the qt_comment table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new comment into the qt_comment table with the given values.", "response": "-- Reasoning:\nWe need to insert a new comment into the qt_comment table. It should have the following values:\n  \u2022 comment_id: 1\n  \u2022 comment_text: \u201cThis is a comment\u201d\n  \u2022 comment_date: \u201c2020\u201001\u201001\u201d\n\n-- Solution:\n```sql\nINSERT INTO qt_comment (comment_id, comment_text, comment_date)\nVALUES (1, 'This is a comment', '2020\u201001\u201001');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_comment table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_comment;"}
{"seed": "/* Inserts a new row into the qt_comment table with the given values. */\nINSERT INTO `qt_comment` VALUES (21,'2',2,'2011-10-26 21:10:01',4)", "description": "Inserts a new row into the qt_comment table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_comment table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_comment table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_comment (comment_id, comment_text)\nVALUES (1, 'This is a comment');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_comment table with the given values:\n  \u2022 comment_id: 1\n  \u2022 comment_text: 'This is a comment'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_comment;"}
{"seed": "/* Inserts a new comment with id 22, content '\u4ec0\u4e48', user_id 2 and post_id 4 into the qt_comment table. */\nINSERT INTO `qt_comment` VALUES (22,'\u4ec0\u4e48',2,'2011-10-26 21:11:36',4)", "description": "Inserts a new comment with id 22, content '\u4ec0\u4e48', user_id 2 and post_id 4 into the qt_comment table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new comment with id 22, content '\u4ec0\u4e48', user_id 2 and post_id 4 into the qt_comment table.", "response": "-- Reasoning:\nWe need to insert a new comment into the qt_comment table. It should have an id of 22, content of '\u4ec0\u4e48', user_id of 2, and post_id of 4.\n\n-- Solution:\n```sql\nINSERT INTO qt_comment (id, content, user_id, post_id)\nVALUES (22, '\u4ec0\u4e48', 2, 4);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_comment table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_comment;"}
{"seed": "/* Creates a table named qt_department with three columns: id (integer primary key), departmentname (varchar) and active (boolean). */\nCREATE TABLE `qt_department` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `departmentname` varchar(255) DEFAULT NULL COMMENT '\u90e8\u95e8\u540d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8 COMMENT='\u90e8\u95e8\u8868'", "description": "Creates a table named qt_department with three columns: id (integer primary key), departmentname (varchar) and active (boolean).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "ENGINE", "DEFAULT", "COMMENT", "VARCHAR", "INT", "BOOLEAN"], "instruction": "Write a SQL query to create a table named qt_department with three columns: id (integer primary key), departmentname (varchar) and active (boolean).", "response": "-- Reasoning:\nWe need a new table named qt_department. It should have an integer primary key so that each department has a unique identifier, a name column to store the department\u2019s name as text, and an active column to indicate whether the department is active or not.\n\n-- Solution:\n```sql\nCREATE TABLE qt_department (\n  id INTEGER PRIMARY KEY,\n  departmentname VARCHAR(255),\n  active BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the qt_department table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 departmentname: variable\u2010length string up to 255 characters\n  \u2022 active: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_department');"}
{"seed": "/* Inserts a new row into the qt_department table with the id 1 and name '\u4e3b\u5e2d\u56e2'. */\nINSERT INTO `qt_department` VALUES (1,'\u4e3b\u5e2d\u56e2')", "description": "Inserts a new row into the qt_department table with the id 1 and name '\u4e3b\u5e2d\u56e2'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 1 and name '\u4e3b\u5e2d\u56e2'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 1 and name '\u4e3b\u5e2d\u56e2'.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (1, '\u4e3b\u5e2d\u56e2');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 1 and name '\u4e3b\u5e2d\u56e2'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 2 and name \u2019\u6280\u672f\u524d\u7aef\u8bbe\u8ba1\u2019. */\nINSERT INTO `qt_department` VALUES (2,'\u6280\u672f\u524d\u7aef\u8bbe\u8ba1')", "description": "Inserts a new row into the qt_department table with the id 2 and name \u2019\u6280\u672f\u524d\u7aef\u8bbe\u8ba1\u2019.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_department table with the id 3 and name '\u6280\u672f\u89c6\u89c9\u4f20\u8fbe'. */\nINSERT INTO `qt_department` VALUES (3,'\u6280\u672f\u89c6\u89c9\u4f20\u8fbe')", "description": "Inserts a new row into the qt_department table with the id 3 and name '\u6280\u672f\u89c6\u89c9\u4f20\u8fbe'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 3 and name '\u6280\u672f\u89c6\u89c9\u4f20\u8fbe'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 3 and name '\u6280\u672f\u89c6\u89c9\u4f20\u8fbe'.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (3, '\u6280\u672f\u89c6\u89c9\u4f20\u8fbe');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 3 and name '\u6280\u672f\u89c6\u89c9\u4f20\u8fbe'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 4 and the name \u540e\u53f0\u7a0b\u5e8f. */\nINSERT INTO `qt_department` VALUES (4,'\u6280\u672f\u540e\u53f0\u7a0b\u5e8f')", "description": "Inserts a new row into the qt_department table with the id 4 and the name \u540e\u53f0\u7a0b\u5e8f.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 4 and the name \u540e\u53f0\u7a0b\u5e8f.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table. It should have an id of 4 and a name of \u540e\u53f0\u7a0b\u5e8f.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (4, '\u540e\u53f0\u7a0b\u5e8f');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with:\n  \u2022 id: 4\n  \u2022 name: \u540e\u53f0\u7a0b\u5e8f\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 5 and name \u2019\u6280\u672f\u670d\u52a1\u5668\u90e8\u2019. */\nINSERT INTO `qt_department` VALUES (5,'\u6280\u672f\u670d\u52a1\u5668\u90e8')", "description": "Inserts a new row into the qt_department table with the id 5 and name \u2019\u6280\u672f\u670d\u52a1\u5668\u90e8\u2019.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u2019\u6280\u672f\u670d\u52a1\u5668\u90e8\u2019"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new department with id 6 and name '\u7cbe\u5f18feel\u7535\u53f0' into the qt_department table. */\nINSERT INTO `qt_department` VALUES (6,'\u7cbe\u5f18feel\u7535\u53f0')", "description": "Inserts a new department with id 6 and name '\u7cbe\u5f18feel\u7535\u53f0' into the qt_department table.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u7cbe\u5f18feel\u7535\u53f0"], "instruction": "Write a SQL query to insert a new department with id 6 and name '\u7cbe\u5f18feel\u7535\u53f0' into the qt_department table.", "response": "-- Reasoning:\nWe need to insert a new department into the qt_department table. It should have an id of 6 and a name of '\u7cbe\u5f18feel\u7535\u53f0'.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (6, '\u7cbe\u5f18feel\u7535\u53f0');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with:\n  \u2022 id: 6\n  \u2022 name: '\u7cbe\u5f18feel\u7535\u53f0'\n\n-- Tests:\n-- 1. Verify new department appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 7 and the name \u7cbe\u5f18\u5f00\u6e90. */\nINSERT INTO `qt_department` VALUES (7,'\u7cbe\u5f18\u5f00\u6e90')", "description": "Inserts a new row into the qt_department table with the id 7 and the name \u7cbe\u5f18\u5f00\u6e90.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u7cbe\u5f18\u5f00\u6e90"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_department table with the id 8 and name \u7cbe\u5f18\u4e0b\u8f7d. */\nINSERT INTO `qt_department` VALUES (8,'\u7cbe\u5f18\u4e0b\u8f7d')", "description": "Inserts a new row into the qt_department table with the id 8 and name \u7cbe\u5f18\u4e0b\u8f7d.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u7cbe\u5f18\u4e0b\u8f7d"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 8 and name \u7cbe\u5f18\u4e0b\u8f7d.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 8 and name \u7cbe\u5f18\u4e0b\u8f7d.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (8, '\u7cbe\u5f18\u4e0b\u8f7d');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 8 and name \u7cbe\u5f18\u4e0b\u8f7d.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 9 and name \u7cbe\u5f18\u5bb6\u56ed. */\nINSERT INTO `qt_department` VALUES (9,'\u7cbe\u5f18\u5bb6\u56ed')", "description": "Inserts a new row into the qt_department table with the id 9 and name \u7cbe\u5f18\u5bb6\u56ed.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u7cbe\u5f18\u5bb6\u56ed"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 9 and name \u7cbe\u5f18\u5bb6\u56ed.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 9 and name \u7cbe\u5f18\u5bb6\u56ed.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (9, '\u7cbe\u5f18\u5bb6\u56ed');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 9 and name \u7cbe\u5f18\u5bb6\u56ed.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 10 and name \u7cbe\u5f18\u5546\u94fa. */\nINSERT INTO `qt_department` VALUES (10,'\u7cbe\u5f18\u5546\u94fa')", "description": "Inserts a new row into the qt_department table with the id 10 and name \u7cbe\u5f18\u5546\u94fa.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u7cbe\u5f18\u5546\u94fa"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 10 and name \u7cbe\u5f18\u5546\u94fa.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 10 and name \u7cbe\u5f18\u5546\u94fa.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (10, '\u7cbe\u5f18\u5546\u94fa');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 10 and name \u7cbe\u5f18\u5546\u94fa.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 11 and the name \u7cbe\u5f18\u8d44\u8baf. */\nINSERT INTO `qt_department` VALUES (11,'\u7cbe\u5f18\u8d44\u8baf')", "description": "Inserts a new row into the qt_department table with the id 11 and the name \u7cbe\u5f18\u8d44\u8baf.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u7cbe\u5f18\u8d44\u8baf"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 11 and the name \u7cbe\u5f18\u8d44\u8baf.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 11 and the name \u7cbe\u5f18\u8d44\u8baf.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (11, '\u7cbe\u5f18\u8d44\u8baf');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 11 and the name \u7cbe\u5f18\u8d44\u8baf.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 12 and the name \u7cbe\u5f18\u8bba\u575b. */\nINSERT INTO `qt_department` VALUES (12,'\u7cbe\u5f18\u8bba\u575b')", "description": "Inserts a new row into the qt_department table with the id 12 and the name \u7cbe\u5f18\u8bba\u575b.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u7cbe\u5f18\u8bba\u575b"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 12 and the name \u7cbe\u5f18\u8bba\u575b.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 12 and the name \u7cbe\u5f18\u8bba\u575b.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (12, '\u7cbe\u5f18\u8bba\u575b');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 12 and the name \u7cbe\u5f18\u8bba\u575b.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 13 and the name \u5e38\u52a1\u671d\u6656\u90e8. */\nINSERT INTO `qt_department` VALUES (13,'\u5e38\u52a1\u671d\u6656\u90e8')", "description": "Inserts a new row into the qt_department table with the id 13 and the name \u5e38\u52a1\u671d\u6656\u90e8.", "concepts": ["INSERT INTO", "VALUES", "qt_department", "\u5e38\u52a1\u671d\u6656\u90e8"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 13 and the name \u5e38\u52a1\u671d\u6656\u90e8.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 13 and the name \u5e38\u52a1\u671d\u6656\u90e8.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (13, '\u5e38\u52a1\u671d\u6656\u90e8');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 13 and the name \u5e38\u52a1\u671d\u6656\u90e8.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 14 and the name \u5e38\u52a1\u7ec4\u7ec7\u90e8. */\nINSERT INTO `qt_department` VALUES (14,'\u5e38\u52a1\u7ec4\u7ec7\u90e8')", "description": "Inserts a new row into the qt_department table with the id 14 and the name \u5e38\u52a1\u7ec4\u7ec7\u90e8.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 14 and the name \u5e38\u52a1\u7ec4\u7ec7\u90e8.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 14 and the name \u5e38\u52a1\u7ec4\u7ec7\u90e8.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (14, '\u5e38\u52a1\u7ec4\u7ec7\u90e8');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 14 and the name \u5e38\u52a1\u7ec4\u7ec7\u90e8.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 15 and the name \u5e38\u52a1\u6d3b\u52a8\u90e8. */\nINSERT INTO `qt_department` VALUES (15,'\u5e38\u52a1\u6d3b\u52a8\u90e8')", "description": "Inserts a new row into the qt_department table with the id 15 and the name \u5e38\u52a1\u6d3b\u52a8\u90e8.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 15 and the name \u5e38\u52a1\u6d3b\u52a8\u90e8.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 15 and the name \u5e38\u52a1\u6d3b\u52a8\u90e8.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (15, '\u5e38\u52a1\u6d3b\u52a8\u90e8');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 15 and the name \u5e38\u52a1\u6d3b\u52a8\u90e8.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Inserts a new row into the qt_department table with the id 16 and the name \u5e38\u52a1\u529e\u516c\u5ba4. */\nINSERT INTO `qt_department` VALUES (16,'\u5e38\u52a1\u529e\u516c\u5ba4')", "description": "Inserts a new row into the qt_department table with the id 16 and the name \u5e38\u52a1\u529e\u516c\u5ba4.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_department table with the id 16 and the name \u5e38\u52a1\u529e\u516c\u5ba4.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_department table with the id 16 and the name \u5e38\u52a1\u529e\u516c\u5ba4.\n\n-- Solution:\n```sql\nINSERT INTO qt_department (id, name)\nVALUES (16, '\u5e38\u52a1\u529e\u516c\u5ba4');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_department table with the id 16 and the name \u5e38\u52a1\u529e\u516c\u5ba4.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_department;"}
{"seed": "/* Creates a table named qt_event with five columns: id (integer primary key), title (varchar), content (text), modifytime (timestamp) and active (tinyint). */\nCREATE TABLE `qt_event` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) DEFAULT NULL COMMENT '\u4e8b\u4ef6\u6807\u9898',\n  `content` text COMMENT '\u4e8b\u4ef6\u5185\u5bb9',\n  `modifytime` timestamp NULL DEFAULT NULL COMMENT '\u6700\u540e\u7f16\u8f91\u65f6\u95f4',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8 COMMENT='\u5927\u4e8b\u4ef6\u8868'", "description": "Creates a table named qt_event with five columns: id (integer primary key), title (varchar), content (text), modifytime (timestamp) and active (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "TIMESTAMP", "TEXT", "VARCHAR", "INT", "TINYINT"], "instruction": "Write a SQL query to create a table named qt_event with five columns: id (integer primary key), title (varchar), content (text), modifytime (timestamp) and active (tinyint).", "response": "-- Reasoning:\nWe need a new table named qt_event. It should have an integer primary key so that each event has a unique identifier, a title column to store the event\u2019s title as text, a content column to store the event\u2019s content as text, a modifytime column to store the event\u2019s last modification time as timestamp, and an active column to store the event\u2019s status as a boolean.\n\n-- Solution:\n```sql\nCREATE TABLE qt_event (\n  id INTEGER PRIMARY KEY,\n  title VARCHAR(255),\n  content TEXT,\n  modifytime TIMESTAMP,\n  active TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the qt_event table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 title: variable\u2010length string up to 255 characters\n  \u2022 content: variable\u2010length text\n  \u2022 modifytime: timestamp\n  \u2022 active: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_event');"}
{"seed": "/* Inserts a new row into the qt_event table with the given values. */\nINSERT INTO `qt_event` VALUES (9,'\u7cbe\u5f18\u7684\u5386\u53f22002-2005','<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2002\u5e745\u6708\uff1a\u201c\u7cbe\u5f18\u82d1\u201d\u7f51\u7ad9\u8bde\u751f-www.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2002\u5e7410\u6708:iduck\u63a5\u624b\u7cbe\u5f18,\u7b2c\u4e8c\u7248\u7cbe\u5f18\u82d1</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2002\u5e7412\u6708:\u7b2c\u4e00\u7248\u62db\u751f\u7f51-zs.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e742\u6708:\u7b2c\u4e00\u7248\u5c31\u4e1a\u7f51-job.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e743\u6708:\u89c6\u542c\u5f00\u59cb</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e744\u6708:brad\u52a0\u5165</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e745\u6708:\u7cbe\u5f18\u8bba\u575b\u5f00\u59cbbbs.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e748\u6708:\u5783\u573e\u52a0\u5165</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e749\u6708\uff1a\u201c\u5fc3\u7075\u6709\u7ea6\u201d\u7f51\u7ad9\u5f00\u59cb\u8fd0\u884c-heart.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e7410\u6708:\u7535\u89c6\u53f0\u5408\u4f5c\u300a2046\u300b</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2003\u5e7412\u6708:\u65b0\u95fb\u7f51\u5f00\u59cb-news.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e741\u6708:\u7b2c\u4e00\u6b21\u7248\u805aFB</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e741\u6708:FICQ\u5f00\u59cb-ficq.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e743\u6708:**\u8bba\u575b\u558a\u505c</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e744\u6708:\u7b2c\u4e8c\u7248\u8bba\u575b</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e745\u6708\uff1a\u201c\u7cbe\u5f18\u535a\u5ba2\u201d\u5f00\u59cb\u8fd0\u884c-blog.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e745\u6708:\u8bba\u575b\u4e00\u5468\u5e74\u6587\u96c6\u300a\u8bb0\u5f55\u6211\u4eec\u7684\u65f6\u4ee3\u300b</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e745\u6708:\u7b2c\u4e8c\u6b21\u7248\u805aFB</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e746\u6708 \u7b2c\u4e00\u6b21\u8df3\u86a4\u5e02\u573a</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e746\u6708:\u7b2c\u4e8c\u7248\u62db\u751f\u7f51</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e749\u6708:\u7b2c\u4e09\u7248\u8bba\u575b(\u52a8\u7f51Dvbbs)</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e749\u6708:\u7b2c\u4e8c\u7248\u5c31\u4e1a\u7f51<br />\\r\\n\uff08\u5f00\u53d1jhurricane \u6df1\u7ea2\u7684\u82dc\u84ff\u5373linchunfei zzn\uff09</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2004\u5e7410\u670826\u65e5:Feel\u7535\u53f0\u521b\u7acb\uff08\u59cb\u7956\u4e3a\\\"\u809a\u5b50\\\"\u3001\\\"IWS\\\"\uff09-radio.zjut.com\uff0c\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u558a\u505c\uff0c\u5728iduck\u7684\u534f\u8c03\u4e0b\uff0c\u6536\u4e8e\u7cbe\u5f18\u670d\u52a1\u5668\u300212\u6708\u91cd\u65b0\u8fd0\u884c</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2005\u5e741\u6708:\u7b2c\u56db\u7248\u7cbe\u5f18\u7f51\u7edc \uff08\u5f00\u53d1elong\u5373Zhu kaiyu&nbsp; \u6df1\u7ea2\u7684\u82dc\u84ff)</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2005\u5e742\u6708:\u516c\u5171FTP\u5f00\u59cb-ftp.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2005\u5e744\u6708:\u76f4\u64ad\u5f00\u59cb</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2005\u5e745\u6708:\u4e24\u5468\u5e74MV,\u7248\u805aFB</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2005\u5e746\u6708\uff1a\u7cbe\u5f182\u5468\u5e74\u7eaa\u5ff5\u6587\u5316\u886b<br />\\r\\n9\u6708\u597d\u50cf\u5f00\u59cb\u63a8\u5e7f\u6587\u5316\u886b\uff0c\u6587\u5316\u886b\u8bbe\u8ba1\u6bd4\u8d5b\uff0c\u722a\u722a\u4e5f\u53c2\u52a0\u4e86\u3002\u4e0d\u8fc7\u5927\u5bb6\u8bf4\u592a\u5e7c\u7a1a\u4e86\uff0c\u56e7</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\"><a href=\\\"http://blog.myzjut.org/sites/default/files/08122100201d68fdacb784915f.jpg\\\" target=\\\"_blank\\\" style=\\\"color:#ab0900;\\\"><img height=\\\"371\\\" width=\\\"400\\\" align=\\\"middle\\\" rel=\\\"lightbox\\\" src=\\\"http://blog.myzjut.org/sites/default/files/08122100201d68fdacb784915f.jpg\\\" alt=\\\"\\\" style=\\\"border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;margin-top:5px;margin-right:5px;margin-bottom:5px;margin-left:5px;\\\" /></a></p>','2011-11-01 21:40:21')", "description": "Inserts a new row into the qt_event table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the users table with the id 10 and name ''. */\nINSERT INTO `qt_event` VALUES (10,'\u7cbe\u5f18\u7684\u5386\u53f22006-2007','<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e743\u6708 \u4e0d\u77e5\u9053\u662f\u7b2c\u51e0\u6b21\u62db\u65b0\u7684\u975e\u5e38\u62c9\u98ce\u7684banner<br />\\r\\n<a href=\\\"http://blog.myzjut.org/node/sites/default/files/banner.rar\\\" style=\\\"text-decoration:none;color:#ab0900;\\\">\u901a\u7f09\u4ee4.rar BY\u722a\u722a</a></p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e744\u6708\uff1a\u6bd5\u4e1a\u751f\u7559\u8a00\u677f</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\"><a target=\\\"_blank\\\" href=\\\"http://blog.myzjut.org/sites/default/files/byslyb.jpg\\\" style=\\\"text-decoration:none;color:#ab0900;\\\"><img height=\\\"250\\\" width=\\\"200\\\" rel=\\\"lightbox\\\" src=\\\"http://blog.myzjut.org/sites/default/files/byslyb.jpg\\\" alt=\\\"\\\" style=\\\"border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;margin-top:5px;margin-right:5px;margin-bottom:5px;margin-left:5px;\\\" /></a></p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e745\u6708\uff1ablog\u6bd4\u8d5b</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\"><a target=\\\"_blank\\\" href=\\\"http://blog.myzjut.org/sites/default/files/bkbs.jpg\\\" style=\\\"text-decoration:none;color:#ab0900;\\\"><img height=\\\"280\\\" width=\\\"200\\\" rel=\\\"lightbox\\\" src=\\\"http://blog.myzjut.org/sites/default/files/bkbs.jpg\\\" alt=\\\"\\\" style=\\\"border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;margin-top:5px;margin-right:5px;margin-bottom:5px;margin-left:5px;\\\" /></a></p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e745\u6708\uff1aFICQ\u7ecf\u5e38\u51fa\u73b0\u95ee\u9898\uff0c\u7136\u540e\u88ab\u5173\u95ed</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e745\u6708\uff1a\u7b2c1\u7248\u5b66\u751f\u90ae\u4ef6\u5f00\u59cb\u8fd0\u884c-mail.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e747\u6708\uff1a\u7b2c2\u7248\u535a\u5ba2-http://blog.zjut.com/index.html</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u4e0b\u534a\u5e74 \uff1a\u7ad9\u957f\u5927\u571f\u571f\u6bd5\u4e1a\u79bb\u5f00\uff0c\u6280\u672f\u603b\u76d1\u5c0f\u5f71\u3001\u843d\u65e5\u7684\u5348\u540e\u79bb\u5f00</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u4e0b\u534a\u5e74\uff1a \u96e8\u9633\u7ee7\u4efb\u7ad9\u957f\u3001dweng\u52a0\u5165</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e749\u6708\uff1a\u543c\u543c(OHSC)\u3001\u54a9\u54a9\u52a0\u5165</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e7411\u6708\uff1a\u4ee3\u66ff\u201cFicq\u201d\u7684\u201cJicq\u201d\u5f00\u59cb\u8fd0\u884c-jicq.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2006\u5e7412\u6708\uff1aFEEL\u7535\u53f0\u771f\u60c5\u795d\u798f\u6d3b\u52a8</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e744\u6708\uff1a\u7b2c\u56db\u7248\u8bba\u575b(php discuz6.0)\u5f00\u59cb\u8fd0\u884c-bbs.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\"><a target=\\\"_blank\\\" href=\\\"http://blog.myzjut.org/sites/default/files/oldbbs.png\\\" style=\\\"text-decoration:none;color:#ab0900;\\\"><img height=\\\"395\\\" width=\\\"200\\\" rel=\\\"lightbox\\\" src=\\\"http://blog.myzjut.org/sites/default/files/oldbbs.png\\\" alt=\\\"\\\" style=\\\"border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;margin-top:5px;margin-right:5px;margin-bottom:5px;margin-left:5px;\\\" /></a></p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e746\u6708\uff1a\u201c\u65b0\u751f\u8bba\u575b\u201d\u5347\u7ea7</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e749\u6708\uff1a\u6751\u957f\u5f00\u53d1\u65b0\u7248\u201c\u6bd5\u4e1a\u751f\u7559\u8a00\u201d</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e749\u6708\uff1a\u8bba\u575b\u5347\u7ea7\u5230Discuz6.1</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7410\u6708\uff1a\u7535\u53f0\u670d\u52a1\u5668\u7cfb\u7edf\u5347\u7ea7</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7410\u6708\uff1a\u7cbe\u5f18\u8d44\u8baf\u7ad9\u5185\u6d4b\uff0c\u5e76\u4e0e\u4eba\u6587\u65e5\u65b0\u793e\u5408\u4f5c\u3002\u540c\u65f6\u8be5\u7cfb\u7edf\u81ea\u5e26\u7684X-Space\u6210\u4e3a\u65b0\u535a\u5ba2\u7cfb\u7edf\u3002</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7411\u6708\uff1a\u7b2c\u4e00\u7248\u7cbe\u5f18\u4e0b\u8f7d\u7ad9\u5f00\u59cb\u8fd0\u884c-down.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7411\u6708\uff1a\u201c\u677e\u9e64\u658b\u201d\u5e76\u5165\uff0c\u6539\u540d\u201c\u7cbe\u5f18\u4e0b\u8f7d\u7ad9\u201d</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\"><a target=\\\"_blank\\\" href=\\\"http://blog.myzjut.org/sites/default/files/downsite.png\\\" style=\\\"text-decoration:none;color:#ab0900;\\\"><img height=\\\"172\\\" width=\\\"200\\\" alt=\\\"\\\" rel=\\\"lightbox\\\" src=\\\"http://blog.myzjut.org/sites/default/files/downsite.png\\\" style=\\\"border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;margin-top:5px;margin-right:5px;margin-bottom:5px;margin-left:5px;\\\" /></a></p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7411\u6708\uff1a\u201c\u7cbe\u5f18\u90ae\u4ef6\u201d\u5f00\u59cb\u5185\u6d4b\u8fd0\u884c</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7411\u6708\uff1a\u7b2c2\u7248\u5b66\u751f\u90ae\u4ef6\u5f00\u59cb\u8fd0\u884c-mail.zjut.com</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7411\u6708\uff1a\u56e2\u961f\u535a\u5ba2-team.zjut.com\u5f00\u901a</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\"><a href=\\\"http://blog.myzjut.org/sites/default/files/teamblog.png\\\" style=\\\"text-decoration:none;color:#ab0900;\\\"><img height=\\\"174\\\" width=\\\"200\\\" rel=\\\"lightbox\\\" src=\\\"http://blog.myzjut.org/sites/default/files/teamblog.png\\\" alt=\\\"\\\" style=\\\"border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;margin-top:5px;margin-right:5px;margin-bottom:5px;margin-left:5px;\\\" /></a></p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7412\u6708\uff1a\u4e0e\u6821\u4f1a\u5408\u4f5c\u76f4\u64adTOP10</p>\\r\\n<p style=\\\"margin-top:10px;margin-bottom:15px;color:#333333;font-family:Arial;font-size:13px;line-height:normal;\\\">2007\u5e7412\u6708\uff1aFEEL\u7535\u53f0\u771f\u60c5\u795d\u798f\u6d3b\u52a8</p>','2011-11-01 21:42:03')", "description": "Inserts a new row into the users table with the id 10 and name ''.", "concepts": ["INSERT INTO", "VALUES", "CREATE TABLE", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named qt_ffile with seven columns: id (integer primary key), filename (varchar), showname (varchar), addtime (timestamp), userID (integer), size (integer), and suffix (varchar). */\nCREATE TABLE `qt_ffile` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `filename` varchar(255) DEFAULT NULL COMMENT '\u6587\u4ef6\u540d',\n  `showname` varchar(255) DEFAULT NULL COMMENT '\u663e\u793a\u540d',\n  `addtime` timestamp NULL DEFAULT NULL COMMENT '\u4e0a\u4f20\u65f6\u95f4',\n  `userID` int(11) DEFAULT NULL COMMENT '\u7528\u6237ID',\n  `size` int(11) DEFAULT NULL COMMENT '\u5927\u5c0f',\n  `suffix` varchar(255) DEFAULT NULL COMMENT '\u540e\u7f00',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='\u6587\u4ef6\u8868'", "description": "Creates a table named qt_ffile with seven columns: id (integer primary key), filename (varchar), showname (varchar), addtime (timestamp), userID (integer), size (integer), and suffix (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "CHARSET", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named qt_ffile with seven columns: id (integer primary key), filename (varchar), showname (varchar), addtime (timestamp), userID (integer), size (integer), and suffix (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_ffile. It should have an integer primary key so that each file has a unique identifier, and a name column to store the file\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE qt_ffile (\n  id INTEGER PRIMARY KEY,\n  filename VARCHAR(255),\n  showname VARCHAR(255),\n  addtime TIMESTAMP,\n  userID INTEGER,\n  size INTEGER,\n  suffix VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_ffile table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 filename: variable\u2010length string up to 255 characters\n  \u2022 showname: variable\u2010length string up to 255 characters\n  \u2022 addtime: timestamp\n  \u2022 userID: integer\n  \u2022 size: integer\n  \u2022 suffix: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_ffile');"}
{"seed": "/* Creates a table named qt_job with two columns: id (integer primary key) and name (varchar). */\nCREATE TABLE `qt_job` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `jobname` varchar(255) DEFAULT NULL COMMENT '\u804c\u52a1\u540d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='\u804c\u52a1\u8868'", "description": "Creates a table named qt_job with two columns: id (integer primary key) and name (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named qt_job with two columns: id (integer primary key) and name (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_job. It should have an integer primary key so that each job has a unique identifier, and a name column to store the job\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE qt_job (\n  id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_job table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_job');"}
{"seed": "/* Inserts a new row into the qt_job table with the id 1 and name \u4e3b\u5e2d. */\nINSERT INTO `qt_job` VALUES (1,'\u4e3b\u5e2d')", "description": "Inserts a new row into the qt_job table with the id 1 and name \u4e3b\u5e2d.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_job table with the id 2 and name \u526f\u4e3b\u5e2d. */\nINSERT INTO `qt_job` VALUES (2,'\u526f\u4e3b\u5e2d')", "description": "Inserts a new row into the qt_job table with the id 2 and name \u526f\u4e3b\u5e2d.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_job table with the id 3 and name \u90e8\u957f. */\nINSERT INTO `qt_job` VALUES (3,'\u90e8\u957f')", "description": "Inserts a new row into the qt_job table with the id 3 and name \u90e8\u957f.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_job table with the id 4 and the name \u526f\u90e8. */\nINSERT INTO `qt_job` VALUES (4,'\u526f\u90e8')", "description": "Inserts a new row into the qt_job table with the id 4 and the name \u526f\u90e8.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_job table with the id 5 and name \u90e8\u5458. */\nINSERT INTO `qt_job` VALUES (5,'\u90e8\u5458')", "description": "Inserts a new row into the qt_job table with the id 5 and name \u90e8\u5458.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_job table with the id 6 and the name \u5b9e\u4e60\u7528\u6237. */\nINSERT INTO `qt_job` VALUES (6,'\u5b9e\u4e60\u7528\u6237')", "description": "Inserts a new row into the qt_job table with the id 6 and the name \u5b9e\u4e60\u7528\u6237.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named qt_ke with three columns: id (integer primary key), userID (integer), and kevalue (varchar). */\nCREATE TABLE `qt_ke` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `userID` int(11) DEFAULT NULL COMMENT '\u7528\u6237ID',\n  `kevalue` varchar(255) DEFAULT NULL COMMENT '\u8bfe\u7a0b\u8868\u503c[\u4ee50\u4ee3\u8868\u6ca1\u8bfe\uff0c1\u4ee3\u8868\u6709\u8bfe]',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=179 DEFAULT CHARSET=utf8 COMMENT='\u8bfe\u8868'", "description": "Creates a table named qt_ke with three columns: id (integer primary key), userID (integer), and kevalue (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "CHARSET", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named qt_ke with three columns: id (integer primary key), userID (integer), and kevalue (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_ke. It should have an integer primary key so that each ke has a unique identifier, and a userID column to store the user\u2019s ID as integer.\n\n-- Solution:\n```sql\nCREATE TABLE qt_ke (\n  id INT PRIMARY KEY,\n  userID INT,\n  kevalue VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_ke table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 userID: integer\n  \u2022 kevalue: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_ke');"}
{"seed": "/* Inserts a row into the qt_ke table with the given values. */\nINSERT INTO `qt_ke` VALUES (9,2,'00000000100000010000000000001000000100000010000001000000000001110000110000000')", "description": "Inserts a row into the qt_ke table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\nVALUES (1, '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values:\n  \u2022 id: 1\n  \u2022 name: \n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a new row into the qt_ke table with the id 10, name '10000001000000000000000000000000000000000000000000000000000000000000000000000' */\nINSERT INTO `qt_ke` VALUES (10,3,'10000001000000000000000000000000000000000000000000000000000000000000000000000')", "description": "Inserts a new row into the qt_ke table with the id 10, name '10000001000000000000000000000000000000000000000000000000000000000000000000000'", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 12, 5, and '00000000000000010100001010000100000010000000100000010000000000000000000000000'. */\nINSERT INTO `qt_ke` VALUES (12,5,'00000000000000010100001010000100000010000000100000010000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the values 12, 5, and '00000000000000010100001010000100000010000000100000010000000000000000000000000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 12, 5, and '00000000000000010100001010000100000010000000100000010000000000000000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 12, 5, and '00000000000000010100001010000100000010000000100000010000000000000000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, qt, ke)\n  VALUES (12, 5, '00000000000000010100001010000100000010000000100000010000000000000000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 12, 5, and '0000000000000001010000101000010000001000000010000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 14, 208, and '1101100110110010110001011000011100001110001001000101100001111000111100001100 */\nINSERT INTO `qt_ke` VALUES (14,208,'11011001101100101100010110000111000011100010010001011000011110001111000011000')", "description": "Inserts a row into the qt_ke table with the values 14, 208, and '1101100110110010110001011000011100001110001001000101100001111000111100001100", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "14", "208", "11011001101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 14, 208, and '1101100110110010110001011000011100001110001001000101100001111000111100001100'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 14, 208, and '1101100110110010110001011000011100001110001001000101100001111000111100001100'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (14, 208, '1101100110110010110001011000011100001110001001000101100001111000111100001100');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 14\n  \u2022 num: 208\n  \u2022 bin: '11011001101100101100010110000111000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 15, 240, and '1101111110111110100101010010011011001101101111010100101001011100101110010011 */\nINSERT INTO `qt_ke` VALUES (15,240,'11011111101111101001010100100110110011011011110101001010010111001011100100110')", "description": "Inserts a row into the qt_ke table with the values 15, 240, and '1101111110111110100101010010011011001101101111010100101001011100101110010011", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "15", "240", "11011111101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 15, 240, and '11011111101111101001010100100110110011011011110101001010010111001011100100110'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 15, 240, and '11011111101111101001010100100110110011011011110101001010010111001011100100110'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (15, 240, '11011111101111101001010100100110110011011011110101001010010111001011100100110');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 15\n  \u2022 num: 240\n  \u2022 bin: '110111111011111010010101001001101"}
{"seed": "/* Inserts a row into the qt_ke table with the id 16, name '10000001001000111110011111001111110111111011111101110110111110011111000000000'. */\nINSERT INTO `qt_ke` VALUES (16,368,'10000001001000111110011111001111110111111011111101110110111110011111000000000')", "description": "Inserts a row into the qt_ke table with the id 16, name '10000001001000111110011111001111110111111011111101110110111110011111000000000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 16, name '10000001001000111110011111001111110111111011111101110110111110011111000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 16 and a name of '10000001001000111110011111001111110111111011111101110110111110011111000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (16, '10000001001000111110011111001111110111111011111101110110111110011111000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with:\n  \u2022 id: 16\n  \u2022 name: '1000000100100011111001111100111111011111101111110"}
{"seed": "/* Inserts a row into the qt_ke table with the values 17, 391, and 0000000000000001001000100100100110010011000000000000000011011001101100000000 */\nINSERT INTO `qt_ke` VALUES (17,391,'00000000000000010010001001001001100100110000000000000000110110011011000000000')", "description": "Inserts a row into the qt_ke table with the values 17, 391, and 0000000000000001001000100100100110010011000000000000000011011001101100000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 18, the name 235, and the value 100110110011010010000001000011111001111100111000010000001101000110100001 */\nINSERT INTO `qt_ke` VALUES (18,235,'10011011001101001000000100001111100111110011100001000000110100011010000100000')", "description": "Inserts a row into the qt_ke table with the id 18, the name 235, and the value 100110110011010010000001000011111001111100111000010000001101000110100001", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 18, the name 235, and the value 10011011001101001000000100001111100111110011100001000000110100011010000100000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 18, a name of 235, and a value of 10011011001101001000000100001111100111110011100001000000110100011010000100000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, value)\n  VALUES (18, 235, 10011011001101001000000100001111100111110011100001000000110100011010000100000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 19, the name 251, and the value 100110010011000010010001001011110101111010111101000010100011010001001000 */\nINSERT INTO `qt_ke` VALUES (19,251,'10011001001100001001000100101111010111101011110100001010001101000100100010000')", "description": "Inserts a row into the qt_ke table with the id 19, the name 251, and the value 100110010011000010010001001011110101111010111101000010100011010001001000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "19", "251", "10011001001"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 19, the name 251, and the value 10011001001100001001000100101111010111101011110100001010001101000100100010000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 19, a name of 251, and a value of 10011001001100001001000100101111010111101011110100001010001101000100100010000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, value)\n  VALUES (19, 251, 10011001001100001001000100101111010111101011110100001010001101000100100010000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 20, 71, '11111001111100010110001011001110010101001010010101001000000100000010000000000'. */\nINSERT INTO `qt_ke` VALUES (20,71,'11111001111100010110001011001110010101001010010101001000000100000010000000000')", "description": "Inserts a row into the qt_ke table with the values 20, 71, '11111001111100010110001011001110010101001010010101001000000100000010000000000'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "20", "71", "111110011111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 20, 71, '11111001111100010110001011001110010101001010010101001000000100000010000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 20, 71, '11111001111100010110001011001110010101001010010101001000000100000010000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (20, 71, '11111001111100010110001011001110010101001010010101001000000100000010000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 20\n  \u2022 num: 71\n  \u2022 bin: '1111100111110001011000101100111001010"}
{"seed": "/* Inserts a row into the qt_ke table with the values 22, 286, and '1111111111111110000111000011110001111000111000011100001100000110000011'. */\nINSERT INTO `qt_ke` VALUES (22,286,'11111111111111100001110000111100011110001110000111000011000001100000110000011')", "description": "Inserts a row into the qt_ke table with the values 22, 286, and '1111111111111110000111000011110001111000111000011100001100000110000011'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "22", "286", "11111111111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 22, 286, and '1111111111111110000111000011110001111000111000011100001100000110000011'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 22, 286, and '1111111111111110000111000011110001111000111000011100001100000110000011'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, value, binary)\n  VALUES (22, 286, '1111111111111110000111000011110001111000111000011100001100000110000011');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 22, 286, and '111111111111111000011100001111000111100011100001110000110"}
{"seed": "/* Inserts a row into the qt_ke table with the values 23, 72, '01001000100100110010010001000101100010110000000000000000110000011000000000000'. */\nINSERT INTO `qt_ke` VALUES (23,72,'01001000100100110010010001000101100010110000000000000000110000011000000000000')", "description": "Inserts a row into the qt_ke table with the values 23, 72, '01001000100100110010010001000101100010110000000000000000110000011000000000000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 23, 72, '01001000100100110010010001000101100010110000000000000000110000011000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 23, 72, '01001000100100110010010001000101100010110000000000000000110000011000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, value, binary)\n  VALUES (23, 72, '01001000100100110010010001000101100010110000000000000000110000011000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 23\n  \u2022 value: 72\n  \u2022 binary: '0100100010010011001001000100010110001"}
{"seed": "/* Inserts a row into the qt_ke table with the id 26, name 399, and value 10101001010100111010011101001110100111010011000001100000110010011001000100 */\nINSERT INTO `qt_ke` VALUES (26,399,'10101001010100111010011101001110100111010011000001100000110010011001000100000')", "description": "Inserts a row into the qt_ke table with the id 26, name 399, and value 10101001010100111010011101001110100111010011000001100000110010011001000100", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "26", "399", "10101001010"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 26, name 399, and value 10101001010100111010011101001110100111010011000001100000110010011001000100000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 26, a name of 399, and a value of 10101001010100111010011101001110100111010011000001100000110010011001000100000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, value)\n  VALUES (26, 399, 10101001010100111010011101001110100111010011000001100000110010011001000100000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 30, name '11111001111100100110010011001010100101010010110001011000001100000110000010000'. */\nINSERT INTO `qt_ke` VALUES (30,393,'11111001111100100110010011001010100101010010110001011000001100000110000010000')", "description": "Inserts a row into the qt_ke table with the id 30, name '11111001111100100110010011001010100101010010110001011000001100000110000010000'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "30", "393", "11111001111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 30, name '11111001111100100110010011001010100101010010110001011000001100000110000010000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the id 30 and the name '11111001111100100110010011001010100101010010110001011000001100000110000010000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (30, '11111001111100100110010011001010100101010010110001011000001100000110000010000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the id 30 and the name '1111100111110010011001001100101010010101001011000101100000"}
{"seed": "/* Inserts a row into the qt_ke table with the id 32, name 318, and active 1. */\nINSERT INTO `qt_ke` VALUES (32,318,'10101001010100101010010101000101000010100001010000101000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 32, name 318, and active 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 32, name 318, and active 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 32, a name of 318, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (32, 318, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 33, name '10111001011100111010011101001101110110111010000000000000100000010000000000000'. */\nINSERT INTO `qt_ke` VALUES (33,407,'10111001011100111010011101001101110110111010000000000000100000010000000000000')", "description": "Inserts a row into the qt_ke table with the id 33, name '10111001011100111010011101001101110110111010000000000000100000010000000000000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 33, name '10111001011100111010011101001101110110111010000000000000100000010000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 33, and a name of '10111001011100111010011101001101110110111010000000000000100000010000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (33, '10111001011100111010011101001101110110111010000000000000100000010000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with:\n  \u2022 id: 33\n  \u2022 name: '101110010111001110100111010011011101101110100000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 34, 337, and '0000100000010001111000111100100010010001000001100000110001010000101000000100 */\nINSERT INTO `qt_ke` VALUES (34,337,'00001000000100011110001111001000100100010000011000001100010100001010000001000')", "description": "Inserts a row into the qt_ke table with the values 34, 337, and '0000100000010001111000111100100010010001000001100000110001010000101000000100", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "34", "337", "00001000000"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 34, 337, and '0000100000010001111000111100100010010001000001100000110001010000101000000100'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 34, 337, and '0000100000010001111000111100100010010001000001100000110001010000101000000100'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, value, binary)\n  VALUES (34, 337, '0000100000010001111000111100100010010001000001100000110001010000101000000100');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 34\n  \u2022 value: 337\n  \u2022 binary: '00001000000100011110001111001000100"}
{"seed": "/* Inserts a row into the qt_ke table with the id 36, name 38, and active 1. */\nINSERT INTO `qt_ke` VALUES (36,38,'11111001111100111110011111001001000100100010010001001000000100000010000001000')", "description": "Inserts a row into the qt_ke table with the id 36, name 38, and active 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 36, name 38, and active 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 36, a name of 38, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (36, 38, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 39, the name '11101001110100111110011111000100100010010011000001100000111100011110000100000'. */\nINSERT INTO `qt_ke` VALUES (39,459,'11101001110100111110011111000100100010010011000001100000111100011110000100000')", "description": "Inserts a row into the qt_ke table with the id 39, the name '11101001110100111110011111000100100010010011000001100000111100011110000100000'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "39", "459", "11101001110"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 39, the name '11101001110100111110011111000100100010010011000001100000111100011110000100000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the id 39 and the name '11101001110100111110011111000100100010010011000001100000111100011110000100000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (39, '11101001110100111110011111000100100010010011000001100000111100011110000100000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the id 39 and the name '1110100111010011111001111100010010001001001100000110000011"}
{"seed": "/* Inserts a row into the qt_ke table with the values 42, 457, and '1111100111110011111001111100010110101011011011101101010000110000011000000000 */\nINSERT INTO `qt_ke` VALUES (42,457,'11111001111100111110011111000101101010110110111011010100001100000110000000000')", "description": "Inserts a row into the qt_ke table with the values 42, 457, and '1111100111110011111001111100010110101011011011101101010000110000011000000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "42", "457", "11111001111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 42, 457, and '1111100111110011111001111100010110101011011011101101010000110000011000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 42, 457, and '1111100111110011111001111100010110101011011011101101010000110000011000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (42, 457, '1111100111110011111001111100010110101011011011101101010000110000011000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 42\n  \u2022 num: 457\n  \u2022 bin: '11111001111100111110011111000101101"}
{"seed": "/* Inserts a row into the qt_ke table with the values 43, 436, and '1111100111110010101001010100111110011011000100100000010000000000000000000000 */\nINSERT INTO `qt_ke` VALUES (43,436,'11111001111100101010010101001111100110110001001000000100000000000000000000000')", "description": "Inserts a row into the qt_ke table with the values 43, 436, and '1111100111110010101001010100111110011011000100100000010000000000000000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_ke table with the given values. */\nINSERT INTO `qt_ke` VALUES (44,481,'11010001111000111110011111001010100101010001011000101100111000000000000000000')", "description": "Inserts a new row into the qt_ke table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_ke table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\nVALUES (1, '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values:\n  \u2022 id: 1\n  \u2022 name: \n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 45, 464, and '1101100110110010110001011000110110011011000000000000000000100000010000000000 */\nINSERT INTO `qt_ke` VALUES (45,464,'11011001101100101100010110001101100110110000000000000000001000000100000000000')", "description": "Inserts a row into the qt_ke table with the values 45, 464, and '1101100110110010110001011000110110011011000000000000000000100000010000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_ke table with the id 46, name 21, and active 1. */\nINSERT INTO `qt_ke` VALUES (46,21,'11111111111111111111111111111111111111111111111110000000111111111111111111111')", "description": "Inserts a new row into the qt_ke table with the id 46, name 21, and active 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_ke table with the id 46, name 21, and active 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 46, a name of 21, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (46, 21, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 47, 394, and '1011100101110011011001101100101110010111001110100110010000110000011000001000 */\nINSERT INTO `qt_ke` VALUES (47,394,'10111001011100110110011011001011100101110011101001100100001100000110000010000')", "description": "Inserts a row into the qt_ke table with the values 47, 394, and '1011100101110011011001101100101110010111001110100110010000110000011000001000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "47", "394", "10111001011"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 47, 394, and '10111001011100110110011011001011100101110011101001100100001100000110000010000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 47, 394, and '10111001011100110110011011001011100101110011101001100100001100000110000010000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (47, 394, '10111001011100110110011011001011100101110011101001100100001100000110000010000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 47\n  \u2022 num: 394\n  \u2022 bin: '101110010111001101100110110010111"}
{"seed": "/* Inserts a row into the qt_ke table with the id 48, name 475, and the binary string 111010011101001011100101110011111001111100110100011000000111000011100000 */\nINSERT INTO `qt_ke` VALUES (48,475,'11101001110100101110010111001111100111110011010001100000011100001110000011000')", "description": "Inserts a row into the qt_ke table with the id 48, name 475, and the binary string 111010011101001011100101110011111001111100110100011000000111000011100000", "concepts": ["INSERT INTO", "VALUES", "BINARY", "1110100111010010111001"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 48, name 475, and the binary string 111010011101001011100101110011111001111100110100011000000111000011100000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 48, a name of 475, and a binary string of 111010011101001011100101110011111001111100110100011000000111000011100000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_string)\nVALUES (48, 475, '111010011101001011100101110011111001111100110100011000000111000011100000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 49, name 463, and active 1. */\nINSERT INTO `qt_ke` VALUES (49,463,'11111001111100111110011111001101000110100011011001001100100110110011010001001')", "description": "Inserts a row into the qt_ke table with the id 49, name 463, and active 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 49, name 463, and active 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 49, a name of 463, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (49, 463, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 50, 442, and '1000100100010001111000111100111110011111000010000001000001100000110000011000 */\nINSERT INTO `qt_ke` VALUES (50,442,'10001001000100011110001111001111100111110000100000010000011000001100000110000')", "description": "Inserts a row into the qt_ke table with the values 50, 442, and '1000100100010001111000111100111110011111000010000001000001100000110000011000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "50", "442", "10001001000"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 50, 442, and '1000100100010001111000111100111110011111000010000001000001100000110000011000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 50, 442, and '1000100100010001111000111100111110011111000010000001000001100000110000011000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (50, 442, '1000100100010001111000111100111110011111000010000001000001100000110000011000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 50, 442, and '100010010001000111100011110011111001111100001"}
{"seed": "/* Inserts a row into the qt_ke table with the values 51, 471, '10011001001100011110001111001101100110110000000000000000001000000100000000000 */\nINSERT INTO `qt_ke` VALUES (51,471,'10011001001100011110001111001101100110110000000000000000001000000100000000000')", "description": "Inserts a row into the qt_ke table with the values 51, 471, '10011001001100011110001111001101100110110000000000000000001000000100000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 52, 341, and '0011101001110111101011110101111000111100010010001001000100000010000001000000 */\nINSERT INTO `qt_ke` VALUES (52,341,'00111010011101111010111101011110001111000100100010010001000000100000010000000')", "description": "Inserts a row into the qt_ke table with the values 52, 341, and '0011101001110111101011110101111000111100010010001001000100000010000001000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "00111010011101111010"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 52, 341, and '0011101001110111101011110101111000111100010010001001000100000010000001000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 52, 341, and '0011101001110111101011110101111000111100010010001001000100000010000001000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_data)\n  VALUES (52, 341, '0011101001110111101011110101111000111100010010001001000100000010000001000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 52\n  \u2022 name: 341\n  \u2022 binary_data: '0011101001110111101011110101111"}
{"seed": "/* Inserts a row into the qt_ke table with the values 54, 468, '11111001111100111000011100001111100111110010000001000000110100011010000000000 */\nINSERT INTO `qt_ke` VALUES (54,468,'11111001111100111000011100001111100111110010000001000000110100011010000000000')", "description": "Inserts a row into the qt_ke table with the values 54, 468, '11111001111100111000011100001111100111110010000001000000110100011010000000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "54", "468", "11111001111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 54, 468, '11111001111100111000011100001111100111110010000001000000110100011010000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 54, 468, '11111001111100111000011100001111100111110010000001000000110100011010000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (54, 468, '11111001111100111000011100001111100111110010000001000000110100011010000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 54\n  \u2022 num: 468\n  \u2022 bin: '1111100111110011100001110000111110"}
{"seed": "/* Inserts a row into the qt_ke table with the values 55, 452, and '1001000100100011111001111100111110011111000010000001000010100001010000100000 */\nINSERT INTO `qt_ke` VALUES (55,452,'10010001001000111110011111001111100111110000100000010000101000010100001000000')", "description": "Inserts a row into the qt_ke table with the values 55, 452, and '1001000100100011111001111100111110011111000010000001000010100001010000100000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "55", "452", "10010001001"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 55, 452, and '1001000100100011111001111100111110011111000010000001000010100001010000100000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 55, 452, and '1001000100100011111001111100111110011111000010000001000010100001010000100000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (55, 452, '1001000100100011111001111100111110011111000010000001000010100001010000100000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 55\n  \u2022 num: 452\n  \u2022 bin: '10010001001000111110011111001111100"}
{"seed": "/* Inserts a row into the qt_ke table with the values 56, 479, and '1000100100010011101001110100101110010111000111000010000011000001100000010000 */\nINSERT INTO `qt_ke` VALUES (56,479,'10001001000100111010011101001011100101110001110000100000110000011000000100000')", "description": "Inserts a row into the qt_ke table with the values 56, 479, and '1000100100010011101001110100101110010111000111000010000011000001100000010000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "56", "479", "10001001000"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 56, 479, and '1000100100010011101001110100101110010111000111000010000011000001100000010000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 56, 479, and '1000100100010011101001110100101110010111000111000010000011000001100000010000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, value, binary)\n  VALUES (56, 479, '1000100100010011101001110100101110010111000111000010000011000001100000010000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 56\n  \u2022 value: 479\n  \u2022 binary: '10001001000100111010011101001011100"}
{"seed": "/* Inserts a row into the qt_ke table with the id 61, the name 432, and the value 101010010101001011000101100011111001111100100100010000000010000001000000 */\nINSERT INTO `qt_ke` VALUES (61,432,'10101001010100101100010110001111100111110010010001000000001000000100000000000')", "description": "Inserts a row into the qt_ke table with the id 61, the name 432, and the value 101010010101001011000101100011111001111100100100010000000010000001000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "61", "432", "10101001010"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 61, the name 432, and the value 10101001010100101100010110001111100111110010010001000000001000000100000000000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 61, a name of 432, and a value of 10101001010100101100010110001111100111110010010001000000001000000100000000000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, value)\nVALUES (61, 432, 10101001010100101100010110001111100111110010010001000000001000000100000000000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Check new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 62, the name '11100001110000011100101110011111100111110001010000001000000000000000000000000'. */\nINSERT INTO `qt_ke` VALUES (62,433,'11100001110000011100101110011111100111110001010000001000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 62, the name '11100001110000011100101110011111100111110001010000001000000000000000000000000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 62, the name '11100001110000011100101110011111100111110001010000001000000000000000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. The row should have an id of 62 and a name of '11100001110000011100101110011111100111110001010000001000000000000000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (62, '11100001110000011100101110011111100111110001010000001000000000000000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 64, name '11101001110100101100010110000111000111100011110000111000010100001010000000000'. */\nINSERT INTO `qt_ke` VALUES (64,454,'11101001110100101100010110000111000111100011110000111000010100001010000000000')", "description": "Inserts a row into the qt_ke table with the id 64, name '11101001110100101100010110000111000111100011110000111000010100001010000000000'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "64", "454", "11101001110"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 64, name '11101001110100101100010110000111000111100011110000111000010100001010000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. The row should have an id of 64 and a name of '11101001110100101100010110000111000111100011110000111000010100001010000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (64, '11101001110100101100010110000111000111100011110000111000010100001010000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 65, 445, and '1111100111110000111000011100111110011111001110000111000001111000111100000000 */\nINSERT INTO `qt_ke` VALUES (65,445,'11111001111100001110000111001111100111110011100001110000011110001111000000000')", "description": "Inserts a row into the qt_ke table with the values 65, 445, and '1111100111110000111000011100111110011111001110000111000001111000111100000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "65", "445", "11111001111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 65, 445, and '1111100111110000111000011100111110011111001110000111000001111000111100000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 65, 445, and '1111100111110000111000011100111110011111001110000111000001111000111100000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_data)\n  VALUES (65, 445, '1111100111110000111000011100111110011111001110000111000001111000111100000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 65\n  \u2022 name: 445\n  \u2022 binary_data: '1111100111110000111000011100111"}
{"seed": "/* Inserts a row into the qt_ke table with the values 67, 467, and '1011100101110010011001001100111110011111001111000110100010011001001100000000 */\nINSERT INTO `qt_ke` VALUES (67,467,'10111001011100100110010011001111100111110011110001101000100110010011000000000')", "description": "Inserts a row into the qt_ke table with the values 67, 467, and '1011100101110010011001001100111110011111001111000110100010011001001100000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "67", "467", "10111001011"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 67, 467, and '1011100101110010011001001100111110011111001111000110100010011001001100000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 67, 467, and '1011100101110010011001001100111110011111001111000110100010011001001100000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (67, 467, '1011100101110010011001001100111110011111001111000110100010011001001100000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 67\n  \u2022 num: 467\n  \u2022 bin: '10111001011100100110010011001111100"}
{"seed": "/* Inserts a row into the qt_ke table with the id 69, name '11110001111000001010000101001110000111000000100000010000000100000010000000000'. */\nINSERT INTO `qt_ke` VALUES (69,338,'11110001111000001010000101001110000111000000100000010000000100000010000000000')", "description": "Inserts a row into the qt_ke table with the id 69, name '11110001111000001010000101001110000111000000100000010000000100000010000000000'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "69", "338", "11110001111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 69, name '11110001111000001010000101001110000111000000100000010000000100000010000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. The row should have an id of 69 and a name of '11110001111000001010000101001110000111000000100000010000000100000010000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (69, '11110001111000001010000101001110000111000000100000010000000100000010000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 75, name '11110001111000101110010111001001000100100011010001101000110000011000000100000'. */\nINSERT INTO `qt_ke` VALUES (75,361,'11110001111000101110010111001001000100100011010001101000110000011000000100000')", "description": "Inserts a row into the qt_ke table with the id 75, name '11110001111000101110010111001001000100100011010001101000110000011000000100000'.", "concepts": ["INSERT INTO", "VALUES", "75", "361", "111100011110001"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 75, name '11110001111000101110010111001001000100100011010001101000110000011000000100000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 75 and a name of '11110001111000101110010111001001000100100011010001101000110000011000000100000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\nVALUES (75, '11110001111000101110010111001001000100100011010001101000110000011000000100000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with:\n  \u2022 id: 75\n  \u2022 name: '1111000111100010111001011100100100010010001101000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 76, 342, and '1110100111010010110001011000111010011101001100100110010000100000010000000000 */\nINSERT INTO `qt_ke` VALUES (76,342,'11101001110100101100010110001110100111010011001001100100001000000100000000000')", "description": "Inserts a row into the qt_ke table with the values 76, 342, and '1110100111010010110001011000111010011101001100100110010000100000010000000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "76", "342", "11101001110"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 77, 458, and '1001101100110110011011001101111000011100000110100011010001111000111100000000 */\nINSERT INTO `qt_ke` VALUES (77,458,'10011011001101100110110011011110000111000001101000110100011110001111000000000')", "description": "Inserts a row into the qt_ke table with the values 77, 458, and '1001101100110110011011001101111000011100000110100011010001111000111100000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 78, 413, and '1111100111110011101001110100111110011111001000100100000000000000000000000000 */\nINSERT INTO `qt_ke` VALUES (78,413,'11111001111100111010011101001111100111110010001001000000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the values 78, 413, and '1111100111110011101001110100111110011111001000100100000000000000000000000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "78", "413", "11111001111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 78, 413, and '11111001111100111010011101001111100111110010001001000000000000000000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 78, 413, and '11111001111100111010011101001111100111110010001001000000000000000000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_data)\n  VALUES (78, 413, '11111001111100111010011101001111100111110010001001000000000000000000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 78\n  \u2022 name: 413\n  \u2022 binary_data: '11111001111100111010011101001"}
{"seed": "/* Inserts a row into the qt_ke table with the values 87, 351, and '1011111101111110111111011111011011001101101110000110000011111111011111000001 */\nINSERT INTO `qt_ke` VALUES (87,351,'10111111011111101111110111110110110011011011100001100000111111110111110000011')", "description": "Inserts a row into the qt_ke table with the values 87, 351, and '1011111101111110111111011111011011001101101110000110000011111111011111000001", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "87", "351", "10111111011"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 87, 351, and '1011111101111110111111011111011011001101101110000110000011111111011111000001'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 87, 351, and '1011111101111110111111011111011011001101101110000110000011111111011111000001'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_data)\n  VALUES (87, 351, '1011111101111110111111011111011011001101101110000110000011111111011111000001');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 87\n  \u2022 name: 351\n  \u2022 binary_data: '1011111101111110111111011111011"}
{"seed": "/* Inserts a row into the qt_ke table with the values 88, 469, and '1011100101110010111001011100011010001101001110000110000010111001011100000000 */\nINSERT INTO `qt_ke` VALUES (88,469,'10111001011100101110010111000110100011010011100001100000101110010111000000000')", "description": "Inserts a row into the qt_ke table with the values 88, 469, and '1011100101110010111001011100011010001101001110000110000010111001011100000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "88", "469", "10111001011"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 94 and the name '00000000000000000000000000000000000000000000000000000000000000000000000000000'. */\nINSERT INTO `qt_ke` VALUES (94,372,'00000000000000000000000000000000000000000000000000000000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 94 and the name '00000000000000000000000000000000000000000000000000000000000000000000000000000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 94 and the name '00000000000000000000000000000000000000000000000000000000000000000000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 94 and a name of '00000000000000000000000000000000000000000000000000000000000000000000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (94, '00000000000000000000000000000000000000000000000000000000000000000000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with:\n  \u2022 id: 94\n  \u2022 name: '0000000000000000000000000000000000000000000000000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 98, 501, and '0000000000000011101001110100111010011101001011100100100011110001111000111100 */\nINSERT INTO `qt_ke` VALUES (98,501,'00000000000000111010011101001110100111010010111001001000111100011110001111000')", "description": "Inserts a row into the qt_ke table with the values 98, 501, and '0000000000000011101001110100111010011101001011100100100011110001111000111100", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 98, 501, and '00000000000000111010011101001110100111010010111001001000111100011110001111000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 98, 501, and '00000000000000111010011101001110100111010010111001001000111100011110001111000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, value, data)\n  VALUES (98, 501, '00000000000000111010011101001110100111010010111001001000111100011110001111000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 98, 501, and '0000000000000011101001110100111010011101001"}
{"seed": "/* Inserts a row into the qt_ke table with the values 99, 410, and '1101110110111011101101110110111101011110101111010111101010000001000000100000 */\nINSERT INTO `qt_ke` VALUES (99,410,'11011101101110111011011101101111010111101011110101111010100000010000001000000')", "description": "Inserts a row into the qt_ke table with the values 99, 410, and '1101110110111011101101110110111101011110101111010111101010000001000000100000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "99", "410", "11011101101"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 100, 441, and '011110001111001111100111100001111000111100000000000000001110100111010000000 */\nINSERT INTO `qt_ke` VALUES (100,441,'01111000111100111110011110000111100011110000000000000000111010011101000000000')", "description": "Inserts a row into the qt_ke table with the values 100, 441, and '011110001111001111100111100001111000111100000000000000001110100111010000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "100", "441", "0111100011"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 100, 441, and '01111000111100111110011110000111100011110000000000000000111010011101000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 100, 441, and '01111000111100111110011110000111100011110000000000000000111010011101000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (100, 441, '01111000111100111110011110000111100011110000000000000000111010011101000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 100, 441, and '0111100011110011111001111000011110001111"}
{"seed": "/* Inserts a row into the qt_ke table with the values 101, 233, and '111110011111001111100111110011110001111000101000010000001110100111010000000 */\nINSERT INTO `qt_ke` VALUES (101,233,'11111001111100111110011111001111000111100010100001000000111010011101000000000')", "description": "Inserts a row into the qt_ke table with the values 101, 233, and '111110011111001111100111110011110001111000101000010000001110100111010000000", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 101, 233, and '111110011111001111100111110011110001111000101000010000001110100111010000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 101, 233, and '111110011111001111100111110011110001111000101000010000001110100111010000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (101, 233, '111110011111001111100111110011110001111000101000010000001110100111010000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 101\n  \u2022 num: 233\n  \u2022 bin: '1111100111110011111001111100111100"}
{"seed": "/* Inserts a row into the qt_ke table with the values 102, 424, '1010100101010010001001000100010110001011001100000110000001110000111000000100 */\nINSERT INTO `qt_ke` VALUES (102,424,'10101001010100100010010001000101100010110011000001100000011100001110000001000')", "description": "Inserts a row into the qt_ke table with the values 102, 424, '1010100101010010001001000100010110001011001100000110000001110000111000000100", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 103, 422, and '110100011010001011100101110011111001111100010100001010001111111111111111111 */\nINSERT INTO `qt_ke` VALUES (103,422,'11010001101000101110010111001111100111110001010000101000111111111111111111111')", "description": "Inserts a row into the qt_ke table with the values 103, 422, and '110100011010001011100101110011111001111100010100001010001111111111111111111", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_ke table with the id 104 and the name '00000000000000000000000000000000000000000000000000000000000000000000000000000'. */\nINSERT INTO `qt_ke` VALUES (104,502,'00000000000000000000000000000000000000000000000000000000000000000000000000000')", "description": "Inserts a new row into the qt_ke table with the id 104 and the name '00000000000000000000000000000000000000000000000000000000000000000000000000000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 105, 423, '0110100011010011111001111100010110001011001001000100100011011001101100000010 */\nINSERT INTO `qt_ke` VALUES (105,423,'01101000110100111110011111000101100010110010010001001000110110011011000000100')", "description": "Inserts a row into the qt_ke table with the values 105, 423, '0110100011010011111001111100010110001011001001000100100011011001101100000010", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "01101000110100111110"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 105, 423, '01101000110100111110011111000101100010110010010001001000110110011011000000100'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 105, 423, '01101000110100111110011111000101100010110010010001001000110110011011000000100'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (105, 423, '01101000110100111110011111000101100010110010010001001000110110011011000000100');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 105\n  \u2022 num: 423\n  \u2022 bin: '0110100011010011111001111100010"}
{"seed": "/* Inserts a row into the qt_ke table with the values 106, 444, and '101110010111001111100111110011111001111100111100011000001111100111110011111 */\nINSERT INTO `qt_ke` VALUES (106,444,'10111001011100111110011111001111100111110011110001100000111110011111001111100')", "description": "Inserts a row into the qt_ke table with the values 106, 444, and '101110010111001111100111110011111001111100111100011000001111100111110011111", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "106", "444", "1011100101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 106, 444, and '101110010111001111100111110011111001111100111100011000001111100111110011111'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 106, 444, and '101110010111001111100111110011111001111100111100011000001111100111110011111'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (106, 444, '101110010111001111100111110011111001111100111100011000001111100111110011111');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 106, 444, and '10111001011100111110011111001111100111110011"}
{"seed": "/* Inserts a row into the qt_ke table with the values 108, 439, and '111010011101001111100111110001111000111100001100000000000011100001110000111 */\nINSERT INTO `qt_ke` VALUES (108,439,'11101001110100111110011111000111100011110000110000000000001110000111000011100')", "description": "Inserts a row into the qt_ke table with the values 108, 439, and '111010011101001111100111110001111000111100001100000000000011100001110000111", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "108", "439", "1110100111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 108, 439, and '111010011101001111100111110001111000111100001100000000000011100001110000111'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 108, 439, and '111010011101001111100111110001111000111100001100000000000011100001110000111'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (108, 439, '111010011101001111100111110001111000111100001100000000000011100001110000111');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 108, 439, and '11101001110100111110011111000111100011110000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 111, 456, and 101110010111001111100111110001111000111100010100000010001110001111000100000 */\nINSERT INTO `qt_ke` VALUES (111,456,'10111001011100111110011111000111100011110001010000001000111000111100010000000')", "description": "Inserts a row into the qt_ke table with the values 111, 456, and 101110010111001111100111110001111000111100010100000010001110001111000100000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_ke table with the id 112, name '11111111111111111111111111111111111111111111111111111111111111111111111111111' and */\nINSERT INTO `qt_ke` VALUES (112,3,'11111111111111111111111111111111111111111111111111111111111111111111111111111')", "description": "Inserts a new row into the qt_ke table with the id 112, name '11111111111111111111111111111111111111111111111111111111111111111111111111111' and", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_ke table with the id 112, name '11111111111111111111111111111111111111111111111111111111111111111111111111111' and", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the id 112, name '11111111111111111111111111111111111111111111111111111111111111111111111111111' and\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\nVALUES (112, '11111111111111111111111111111111111111111111111111111111111111111111111111111');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the id 112 and name '11111111111111111111111111111111111111111111111111111111"}
{"seed": "/* Inserts a row into the qt_ke table with the id 115, the ke_id 466, and the ke_value 1000100100010011111001111100111010011101000110000001000000010000001 */\nINSERT INTO `qt_ke` VALUES (115,466,'10001001000100111110011111001110100111010001100000010000000100000010000000000')", "description": "Inserts a row into the qt_ke table with the id 115, the ke_id 466, and the ke_value 1000100100010011111001111100111010011101000110000001000000010000001", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "115", "466", "1000100100"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 115, the ke_id 466, and the ke_value 10001001000100111110011111001110100111010001100000010000000100000010000000000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have the id 115, the ke_id 466, and the ke_value 10001001000100111110011111001110100111010001100000010000000100000010000000000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke_id, ke_value)\n  VALUES (115, 466, 10001001000100111110011111001110100111010001100000010000000100000010000000000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 117, the ke 54, and the value 111010011101001001100100110011100001110000110000000000001010100101010000 */\nINSERT INTO `qt_ke` VALUES (117,54,'11101001110100100110010011001110000111000011000000000000101010010101000010100')", "description": "Inserts a row into the qt_ke table with the id 117, the ke 54, and the value 111010011101001001100100110011100001110000110000000000001010100101010000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "117", "54", "11101001110"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 118, 431, and '101010010101001010100101010001001000100100100000010000000110100011010001000 */\nINSERT INTO `qt_ke` VALUES (118,431,'10101001010100101010010101000100100010010010000001000000011010001101000100000')", "description": "Inserts a row into the qt_ke table with the values 118, 431, and '101010010101001010100101010001001000100100100000010000000110100011010001000", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "AUTO_INCREMENT", "VARCHAR", "INT"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 118, 431, and '101010010101001010100101010001001000100100100000010000000110100011010001000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 118, 431, and '101010010101001010100101010001001000100100100000010000000110100011010001000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_data)\n  VALUES (118, 431, '101010010101001010100101010001001000100100100000010000000110100011010001000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 118, 431, and '101010010101001010100101010001001000100100"}
{"seed": "/* Inserts a row into the qt_ke table with the values 119, 343, and 100100110010011010101101010110101101010110000001000000101110111111011100000 */\nINSERT INTO `qt_ke` VALUES (119,343,'10010011001001101010110101011010110101011000000100000010111011111101110000011')", "description": "Inserts a row into the qt_ke table with the values 119, 343, and 100100110010011010101101010110101101010110000001000000101110111111011100000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "119", "343", "1001001100"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 119, 343, and 100100110010011010101101010110101101010110000001000000101110111111011100000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 119, 343, and 100100110010011010101101010110101101010110000001000000101110111111011100000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, a, b)\n  VALUES (119, 343, 100100110010011010101101010110101101010110000001000000101110111111011100000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 119, 343, and 10010011001001101010110101011010110101011000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 120, 387, and '011100001110000111000011100000101000010100001010000101001000100100010000000 */\nINSERT INTO `qt_ke` VALUES (120,387,'01110000111000011100001110000010100001010000101000010100100010010001000000000')", "description": "Inserts a row into the qt_ke table with the values 120, 387, and '011100001110000111000011100000101000010100001010000101001000100100010000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 121, 293, '1111100111110010110001001000101100010110000000000000000001000000100000000000 */\nINSERT INTO `qt_ke` VALUES (121,293,'11111001111100101100010010001011000101100000000000000000010000001000000000000')", "description": "Inserts a row into the qt_ke table with the values 121, 293, '1111100111110010110001001000101100010110000000000000000001000000100000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 122, 386, and 110110011011001111100111110011111001111100111100011100000000000000000000000 */\nINSERT INTO `qt_ke` VALUES (122,386,'11011001101100111110011111001111100111110011110001110000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the values 122, 386, and 110110011011001111100111110011111001111100111100011100000000000000000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 123, 470, and 100100010010001111100111110011111001111100001100000000000010100001010000101 */\nINSERT INTO `qt_ke` VALUES (123,470,'10010001001000111110011111001111100111110000110000000000001010000101000010100')", "description": "Inserts a row into the qt_ke table with the values 123, 470, and 100100010010001111100111110011111001111100001100000000000010100001010000101", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "123", "470", "1001000100"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 123, 470, and 10010001001000111110011111001111100111110000110000000000001010000101000010100.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 123, 470, and 10010001001000111110011111001111100111110000110000000000001010000101000010100.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, a, b)\n  VALUES (123, 470, 10010001001000111110011111001111100111110000110000000000001010000101000010100);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 123, 470, and 1001000100100011111001111100111110011111"}
{"seed": "/* Inserts a row into the qt_ke table with the values 124, 147, '1111100111110000101000010100111100011110000010000001000010110001011000001000 */\nINSERT INTO `qt_ke` VALUES (124,147,'11111001111100001010000101001111000111100000100000010000101100010110000010000')", "description": "Inserts a row into the qt_ke table with the values 124, 147, '1111100111110000101000010100111100011110000010000001000010110001011000001000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "124", "147", "1111100111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 124, 147, '1111100111110000101000010100111100011110000010000001000010110001011000001000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 124, 147, '1111100111110000101000010100111100011110000010000001000010110001011000001000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_data)\n  VALUES (124, 147, '1111100111110000101000010100111100011110000010000001000010110001011000001000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 124\n  \u2022 name: 147\n  \u2022 binary_data: '11111001111100001010000101001"}
{"seed": "/* Inserts a row into the qt_ke table with the values 125, 258, and 111010011101001111100111110011111001111100010010001001001011000101100000100 */\nINSERT INTO `qt_ke` VALUES (125,258,'11101001110100111110011111001111100111110001001000100100101100010110000010000')", "description": "Inserts a row into the qt_ke table with the values 125, 258, and 111010011101001111100111110011111001111100010010001001001011000101100000100", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "125", "258", "1110100111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 125, 258, and 11101001110100111110011111001111100111110001001000100100101100010110000010000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke VALUES (125, 258, 11101001110100111110011111001111100111110001001000100100101100010110000010000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 126, 254, and '111110011111001111100111110011110001111000101010010101000000000111010011101 */\nINSERT INTO `qt_ke` VALUES (126,254,'11111001111100111110011111001111000111100010101001010100000000011101001110100')", "description": "Inserts a row into the qt_ke table with the values 126, 254, and '111110011111001111100111110011110001111000101010010101000000000111010011101", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "126", "254", "1111100111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 126, 254, and '11111001111100111110011111001111000111100010101001010100000000011101001110100'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 126, 254, and '11111001111100111110011111001111000111100010101001010100000000011101001110100'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (126, 254, '11111001111100111110011111001111000111100010101001010100000000011101001110100');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 126, 254, and '1111100111110011111001111100111100011110"}
{"seed": "/* Inserts a row into the qt_ke table with the values 127, 59, '11001001100100111010011101001101000110100011100001110000000000000000000000000 */\nINSERT INTO `qt_ke` VALUES (127,59,'11001001100100111010011101001101000110100011100001110000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the values 127, 59, '11001001100100111010011101001101000110100011100001110000000000000000000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 128, 79, '01110000111000111110011111001101100110110000111000011100000000000000000000000 */\nINSERT INTO `qt_ke` VALUES (128,79,'01110000111000111110011111001101100110110000111000011100000000000000000000000')", "description": "Inserts a row into the qt_ke table with the values 128, 79, '01110000111000111110011111001101100110110000111000011100000000000000000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 129, the ke_id 428, and the ke_value 0000000000000000000000000000000000000000000000000000000000000000000 */\nINSERT INTO `qt_ke` VALUES (129,428,'00000000000000000000000000000000000000000000000000000000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 129, the ke_id 428, and the ke_value 0000000000000000000000000000000000000000000000000000000000000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 130, 448, and '101000010100000100100010010011111001111100110110010000001000000100000000000 */\nINSERT INTO `qt_ke` VALUES (130,448,'10100001010000010010001001001111100111110011011001000000100000010000000000000')", "description": "Inserts a row into the qt_ke table with the values 130, 448, and '101000010100000100100010010011111001111100110110010000001000000100000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 131, 307, '1111100111110001110000111000111010011101000101000010100011110001111000001000 */\nINSERT INTO `qt_ke` VALUES (131,307,'11111001111100011100001110001110100111010001010000101000111100011110000010000')", "description": "Inserts a row into the qt_ke table with the values 131, 307, '1111100111110001110000111000111010011101000101000010100011110001111000001000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "131", "307", "1111100111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 131, 307, '1111100111110001110000111000111010011101000101000010100011110001111000001000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 131, 307, '1111100111110001110000111000111010011101000101000010100011110001111000001000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (131, 307, '1111100111110001110000111000111010011101000101000010100011110001111000001000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 131\n  \u2022 num: 307\n  \u2022 bin: '111110011111000111000011100011101"}
{"seed": "/* Inserts a row into the qt_ke table with the values 132, 510, and '000100000010001011000101100001010000101000111100010110001011000101100010110 */\nINSERT INTO `qt_ke` VALUES (132,510,'00010000001000101100010110000101000010100011110001011000101100010110001011000')", "description": "Inserts a row into the qt_ke table with the values 132, 510, and '000100000010001011000101100001010000101000111100010110001011000101100010110", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "00010000001000101100"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 132, 510, and '00010000001000101100010110000101000010100011110001011000101100010110001011000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 132, 510, and '00010000001000101100010110000101000010100011110001011000101100010110001011000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, value, binary)\n  VALUES (132, 510, '00010000001000101100010110000101000010100011110001011000101100010110001011000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 132\n  \u2022 value: 510\n  \u2022 binary: '000100000010001011000101100001"}
{"seed": "/* Inserts a row into the qt_ke table with the id 133, the ke 509, and the key 10010001001000101110010111000111000011100011010001001000001100000110000 */\nINSERT INTO `qt_ke` VALUES (133,509,'10010001001000101110010111000111000011100011010001001000001100000110000010000')", "description": "Inserts a row into the qt_ke table with the id 133, the ke 509, and the key 10010001001000101110010111000111000011100011010001001000001100000110000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "133", "509", "1001000100"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 133, the ke 509, and the key 10010001001000101110010111000111000011100011010001001000001100000110000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 133, a ke of 509, and a key of 10010001001000101110010111000111000011100011010001001000001100000110000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke, key)\nVALUES (133, 509, 10010001001000101110010111000111000011100011010001001000001100000110000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 134, the name 511, and the active status 1. */\nINSERT INTO `qt_ke` VALUES (134,511,'10010001001000101100010110000111000011100011010001001000101100010110001010000')", "description": "Inserts a row into the qt_ke table with the id 134, the name 511, and the active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 134, the name 511, and the active status 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 134, a name of 511, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (134, 511, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 135, 259, and '111110011111001000100100000011111001111100101110010111001110100111010000000 */\nINSERT INTO `qt_ke` VALUES (135,259,'11111001111100100010010000001111100111110010111001011100111010011101000000000')", "description": "Inserts a row into the qt_ke table with the values 135, 259, and '111110011111001000100100000011111001111100101110010111001110100111010000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 139, the ke 505, and the key 10101001010100011010001101001110110111011001000000000000101010010101000 */\nINSERT INTO `qt_ke` VALUES (139,505,'10101001010100011010001101001110110111011001000000000000101010010101000000000')", "description": "Inserts a row into the qt_ke table with the id 139, the ke 505, and the key 10101001010100011010001101001110110111011001000000000000101010010101000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "139", "505", "1010100101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 139, the ke 505, and the key 10101001010100011010001101001110110111011001000000000000101010010101000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 139, a ke of 505, and a key of 10101001010100011010001101001110110111011001000000000000101010010101000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke, key)\nVALUES (139, 505, 10101001010100011010001101001110110111011001000000000000101010010101000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 140, 489, and '101110010111001100000110000011011101101110100100000010001000000100000000000 */\nINSERT INTO `qt_ke` VALUES (140,489,'10111001011100110000011000001101110110111010010000001000100000010000000000000')", "description": "Inserts a row into the qt_ke table with the values 140, 489, and '101110010111001100000110000011011101101110100100000010001000000100000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 142, the name '11111001111100111110011111001010100101010010001001000100001100100110010001001'. */\nINSERT INTO `qt_ke` VALUES (142,512,'11111001111100111110011111001010100101010010001001000100001100100110010001001')", "description": "Inserts a row into the qt_ke table with the id 142, the name '11111001111100111110011111001010100101010010001001000100001100100110010001001'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "142", "512", "1111100111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 142, the name '11111001111100111110011111001010100101010010001001000100001100100110010001001'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 142 and a name of '11111001111100111110011111001010100101010010001001000100001100100110010001001'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (142, '11111001111100111110011111001010100101010010001001000100001100100110010001001');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with:\n  \u2022 id: 142\n  \u2022 name: '1111100111110011111001111100101010010101001000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 145, 493, and '101010010101001111000111100011101001110100001000000100001100000110000001000 */\nINSERT INTO `qt_ke` VALUES (145,493,'10101001010100111100011110001110100111010000100000010000110000011000000100000')", "description": "Inserts a row into the qt_ke table with the values 145, 493, and '101010010101001111000111100011101001110100001000000100001100000110000001000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "145", "493", "1010100101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 145, 493, and '101010010101001111000111100011101001110100001000000100001100000110000001000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 145, 493, and '101010010101001111000111100011101001110100001000000100001100000110000001000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, num, bin)\n  VALUES (145, 493, '101010010101001111000111100011101001110100001000000100001100000110000001000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 145, 493, and '10101001010100111100011110001110100111010000"}
{"seed": "/* Inserts a row into the qt_ke table with the values 148, 450, and '111110011111001110100111010011111011111101111110010111001010000101000010100 */\nINSERT INTO `qt_ke` VALUES (148,450,'11111001111100111010011101001111101111110111111001011100101000010100001010000')", "description": "Inserts a row into the qt_ke table with the values 148, 450, and '111110011111001110100111010011111011111101111110010111001010000101000010100", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "148", "450", "1111100111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 148, 450, and '111110011111001110100111010011111011111101111110010111001010000101000010100'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 148, 450, and '111110011111001110100111010011111011111101111110010111001010000101000010100'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, value, binary)\n  VALUES (148, 450, '111110011111001110100111010011111011111101111110010111001010000101000010100');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values 148, 450, and '11111001111100111010011101001111101111110111"}
{"seed": "/* Inserts a row into the qt_ke table with the id 149, the ke 495, and the key 00101000010100011010001101001111100111110011100001110000111000011100000 */\nINSERT INTO `qt_ke` VALUES (149,495,'00101000010100011010001101001111100111110011100001110000111000011100000000000')", "description": "Inserts a row into the qt_ke table with the id 149, the ke 495, and the key 00101000010100011010001101001111100111110011100001110000111000011100000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "149", "495", "0010100001"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 149, the ke 495, and the key 00101000010100011010001101001111100111110011100001110000111000011100000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 149, a ke of 495, and a key of 00101000010100011010001101001111100111110011100001110000111000011100000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke, key)\nVALUES (149, 495, '00101000010100011010001101001111100111110011100001110000111000011100000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 150, the name '10100101010010101001010100100111010011101001110100111010000000000000000000000'. */\nINSERT INTO `qt_ke` VALUES (150,37,'10100101010010101001010100100111010011101001110100111010000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 150, the name '10100101010010101001010100100111010011101001110100111010000000000000000000000'.", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "AUTO_INCREMENT", "INT", "VARCHAR"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 150, the name '10100101010010101001010100100111010011101001110100111010000000000000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 150 and a name of '10100101010010101001010100100111010011101001110100111010000000000000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (150, '10100101010010101001010100100111010011101001110100111010000000000000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with:\n  \u2022 id: 150\n  \u2022 name: '1010010101001010100101010010011101001110100111"}
{"seed": "/* Inserts a row into the qt_ke table with the values 151, 473, and '101110010111001001100100110001111000111100111000011000001001100100110000000 */\nINSERT INTO `qt_ke` VALUES (151,473,'10111001011100100110010011000111100011110011100001100000100110010011000000000')", "description": "Inserts a row into the qt_ke table with the values 151, 473, and '101110010111001001100100110001111000111100111000011000001001100100110000000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "151", "473", "1011100101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 151, 473, and '10111001011100100110010011000111100011110011100001100000100110010011000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the values 151, 473, and '10111001011100100110010011000111100011110011100001100000100110010011000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, binary_data)\n  VALUES (151, 473, '10111001011100100110010011000111100011110011100001100000100110010011000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the values:\n  \u2022 id: 151\n  \u2022 name: 473\n  \u2022 binary_data: '10111001011100100110010011"}
{"seed": "/* Inserts a row into the qt_ke table with the id 155, name 348, and active 1. */\nINSERT INTO `qt_ke` VALUES (155,348,'10101001010100101010010101000101000010100011010001101000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 155, name 348, and active 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 155, name 348, and active 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 155, a name of 348, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (155, 348, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the values 156, 355, and 111010011101000001100000110011111001111100000000000000000011100001110000000 */\nINSERT INTO `qt_ke` VALUES (156,355,'11101001110100000110000011001111100111110000000000000000001110000111000000000')", "description": "Inserts a row into the qt_ke table with the values 156, 355, and 111010011101000001100000110011111001111100000000000000000011100001110000000", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the values 156, 355, and 11101001110100000110000011001111100111110000000000000000001110000111000000000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke VALUES (156, 355, 11101001110100000110000011001111100111110000000000000000001110000111000000000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 157, the name '11011001101100110110011011001001000100100010010001001000000000000000000000000'. */\nINSERT INTO `qt_ke` VALUES (157,339,'11011001101100110110011011001001000100100010010001001000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 157, the name '11011001101100110110011011001001000100100010010001001000000000000000000000000'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "157", "339", "1101100110"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 157, the name '11011001101100110110011011001001000100100010010001001000000000000000000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the id 157 and the name '11011001101100110110011011001001000100100010010001001000000000000000000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (157, '11011001101100110110011011001001000100100010010001001000000000000000000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the id 157 and the name '1101100110110011011001101100100100010010001001000100100"}
{"seed": "/* Inserts a row into the qt_ke table with the id 158, name '10101001010100101010010101000111100011110001111000111100010000001000000100000'. */\nINSERT INTO `qt_ke` VALUES (158,349,'10101001010100101010010101000111100011110001111000111100010000001000000100000')", "description": "Inserts a row into the qt_ke table with the id 158, name '10101001010100101010010101000111100011110001111000111100010000001000000100000'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 158, name '10101001010100101010010101000111100011110001111000111100010000001000000100000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 158 and a name of '10101001010100101010010101000111100011110001111000111100010000001000000100000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (158, '10101001010100101010010101000111100011110001111000111100010000001000000100000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with:\n  \u2022 id: 158\n  \u2022 name: '1010100101010010101001010100011110001111000111"}
{"seed": "/* Inserts a row into the qt_ke table with the id 160, the name 223, and the active column set to 1. */\nINSERT INTO `qt_ke` VALUES (160,223,'10000001000000100000010000000111100011110001111000111100000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 160, the name 223, and the active column set to 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 160, the name 223, and the active column set to 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 160, a name of 223, and an active column of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (160, 223, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 161, the name '11011001101100101110010111001111000111100010110001011000011110001111000000000'. */\nINSERT INTO `qt_ke` VALUES (161,374,'11011001101100101110010111001111000111100010110001011000011110001111000000000')", "description": "Inserts a row into the qt_ke table with the id 161, the name '11011001101100101110010111001111000111100010110001011000011110001111000000000'.", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "AUTO_INCREMENT", "INT", "VARCHAR"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 161, the name '11011001101100101110010111001111000111100010110001011000011110001111000000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table with the id 161 and the name '11011001101100101110010111001111000111100010110001011000011110001111000000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (161, '11011001101100101110010111001111000111100010110001011000011110001111000000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the id 161 and the name '1101100110110010111001011100111100011110001011000101100"}
{"seed": "/* Inserts a row into the qt_ke table with the id 162 and the name 383. */\nINSERT INTO `qt_ke` VALUES (162,383,'00000000000000000000000000000000000000000000000000000000000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 162 and the name 383.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 162 and the name 383.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 162 and a name of 383.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\nVALUES (162, 383);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 163, the ke_id 28, and the ke_value '11101011110101000010100001011001010100101000000100000010101101110110 */\nINSERT INTO `qt_ke` VALUES (163,28,'11101011110101000010100001011001010100101000000100000010101101110110110001011')", "description": "Inserts a row into the qt_ke table with the id 163, the ke_id 28, and the ke_value '11101011110101000010100001011001010100101000000100000010101101110110", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "163", "28", "11101011110"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 166, name '11011001101100111110011111001111100111110000000000000000101110110111010000101'. */\nINSERT INTO `qt_ke` VALUES (166,390,'11011001101100111110011111001111100111110000000000000000101110110111010000101')", "description": "Inserts a row into the qt_ke table with the id 166, name '11011001101100111110011111001111100111110000000000000000101110110111010000101'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 167, the name '11111111111111000010000001000110011011001110010001001000110111111011110000000'. */\nINSERT INTO `qt_ke` VALUES (167,515,'11111111111111000010000001000110011011001110010001001000110111111011110000000')", "description": "Inserts a row into the qt_ke table with the id 167, the name '11111111111111000010000001000110011011001110010001001000110111111011110000000'.", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "167", "515", "1111111111"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 167, the name '11111111111111000010000001000110011011001110010001001000110111111011110000000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. The row should have an id of 167 and a name of '11111111111111000010000001000110011011001110010001001000110111111011110000000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name)\n  VALUES (167, '11111111111111000010000001000110011011001110010001001000110111111011110000000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 169, the ke_id 260, and the ke_value '1011100101110001110000111000110010011001001111000111100011110001111 */\nINSERT INTO `qt_ke` VALUES (169,260,'10111001011100011100001110001100100110010011110001111000111100011110000000000')", "description": "Inserts a row into the qt_ke table with the id 169, the ke_id 260, and the ke_value '1011100101110001110000111000110010011001001111000111100011110001111", "concepts": ["INSERT INTO", "VALUES", "169", "260", "10111001011100"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 169, the ke_id 260, and the ke_value '1011100101110001110000111000110010011001001111000111100011110001111'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 169, a ke_id of 260, and a ke_value of '1011100101110001110000111000110010011001001111000111100011110001111'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke_id, ke_value)\nVALUES (169, 260, '1011100101110001110000111000110010011001001111000111100011110001111');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke WHERE id = 169;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 170, the name 222, and the active column set to 1. */\nINSERT INTO `qt_ke` VALUES (170,222,'10101001010100101010010101000111100011110001111000111100000000000000000000000')", "description": "Inserts a row into the qt_ke table with the id 170, the name 222, and the active column set to 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 170, the name 222, and the active column set to 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 170, a name of 222, and an active column of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (170, '222', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 172, name 376, and active 1. */\nINSERT INTO `qt_ke` VALUES (172,376,'11101011110101001010100101010111101011110111110011110001111100011110000010000')", "description": "Inserts a row into the qt_ke table with the id 172, name 376, and active 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 172, name 376, and active 1.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 172, a name of 376, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, name, active)\nVALUES (172, 376, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 174, the ke 503, and the value 11011001101100111110011111001111110111111010010101001000001100100110010 */\nINSERT INTO `qt_ke` VALUES (174,503,'11011001101100111110011111001111110111111010010101001000001100100110010000001')", "description": "Inserts a row into the qt_ke table with the id 174, the ke 503, and the value 11011001101100111110011111001111110111111010010101001000001100100110010", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "174", "503", "1101100110"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 174, the ke 503, and the value 11011001101100111110011111001111110111111010010101001000001100100110010.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 174, a ke of 503, and a value of 11011001101100111110011111001111110111111010010101001000001100100110010.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke, value)\nVALUES (174, 503, 11011001101100111110011111001111110111111010010101001000001100100110010);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 175, the ke 518, and the key 10101001010100111100011110001101100110110010010001000000001000000100000 */\nINSERT INTO `qt_ke` VALUES (175,518,'10101001010100111100011110001101100110110010010001000000001000000100000000000')", "description": "Inserts a row into the qt_ke table with the id 175, the ke 518, and the key 10101001010100111100011110001101100110110010010001000000001000000100000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "175", "518", "1010100101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 175, the ke 518, and the key 10101001010100111100011110001101100110110010010001000000001000000100000.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 175, a ke of 518, and a key of 10101001010100111100011110001101100110110010010001000000001000000100000.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke, key)\nVALUES (175, 518, 10101001010100111100011110001101100110110010010001000000001000000100000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Inserts a row into the qt_ke table with the id 176, the ke 519, and the value 11101001110100101100010110001101100110110010010001000000001000000100000 */\nINSERT INTO `qt_ke` VALUES (176,519,'11101001110100101100010110001101100110110010010001000000001000000100000000000')", "description": "Inserts a row into the qt_ke table with the id 176, the ke 519, and the value 11101001110100101100010110001101100110110010010001000000001000000100000", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "176", "519", "1110100111"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the values 177, 520, '1011100101110011100001110000101110010111001001000100000000100000010000000000 */\nINSERT INTO `qt_ke` VALUES (177,520,'10111001011100111000011100001011100101110010010001000000001000000100000000000')", "description": "Inserts a row into the qt_ke table with the values 177, 520, '1011100101110011100001110000101110010111001001000100000000100000010000000000", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a row into the qt_ke table with the id 178, the ke_id 409, and the ke_value '1011100101110010111001011100000010001001000100100010010001010000101 */\nINSERT INTO `qt_ke` VALUES (178,409,'10111001011100101110010111000000100010010001001000100100010100001010000101000')", "description": "Inserts a row into the qt_ke table with the id 178, the ke_id 409, and the ke_value '1011100101110010111001011100000010001001000100100010010001010000101", "concepts": ["INSERT INTO", "VALUES", "qt_ke", "178", "409", "1011100101"], "instruction": "Write a SQL query to insert a row into the qt_ke table with the id 178, the ke_id 409, and the ke_value '10111001011100101110010111000000100010010001001000100100010100001010000101000'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_ke table. It should have an id of 178, a ke_id of 409, and a ke_value of '10111001011100101110010111000000100010010001001000100100010100001010000101000'.\n\n-- Solution:\n```sql\nINSERT INTO qt_ke (id, ke_id, ke_value)\n  VALUES (178, 409, '10111001011100101110010111000000100010010001001000100100010100001010000101000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_ke table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_ke;"}
{"seed": "/* Creates a table named qt_menu with two columns: id (integer primary key) and name (varchar). */\nCREATE TABLE `qt_menu` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `menuname` varchar(255) DEFAULT NULL COMMENT '\u83dc\u5355\u540d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COMMENT='\u83dc\u5355\u8868'", "description": "Creates a table named qt_menu with two columns: id (integer primary key) and name (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named qt_menu with two columns: id (integer primary key) and name (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_menu. It should have an integer primary key so that each menu item has a unique identifier, and a name column to store the menu item\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE qt_menu (\n  id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_menu table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_menu');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 7 and the name \u4e2a\u4eba\u4e2d\u5fc3. */\nINSERT INTO `qt_menu` VALUES (7,'\u4e2a\u4eba\u4e2d\u5fc3')", "description": "Inserts a new row into the qt_menu table with the id 7 and the name \u4e2a\u4eba\u4e2d\u5fc3.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 7 and the name \u4e2a\u4eba\u4e2d\u5fc3.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 7 and the name \u4e2a\u4eba\u4e2d\u5fc3.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (7, '\u4e2a\u4eba\u4e2d\u5fc3');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 7 and the name \u4e2a\u4eba\u4e2d\u5fc3.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 9 and the name \u7528\u6237\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (9,'\u7528\u6237\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 9 and the name \u7528\u6237\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 10 and the name \u83dc\u5355\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (10,'\u83dc\u5355\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 10 and the name \u83dc\u5355\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 11 and the name \u8d44\u6e90\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (11,'\u8d44\u6e90\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 11 and the name \u8d44\u6e90\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 12 and the name \u64cd\u4f5c\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (12,'\u64cd\u4f5c\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 12 and the name \u64cd\u4f5c\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES", "qt_menu", "\u64cd\u4f5c\u7ba1\u7406"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 13 and the name \u89d2\u8272\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (13,'\u89d2\u8272\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 13 and the name \u89d2\u8272\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 13 and the name \u89d2\u8272\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 13 and the name \u89d2\u8272\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (13, '\u89d2\u8272\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 13 and the name \u89d2\u8272\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu WHERE id = 13;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 14 and the name \u7528\u6237\u89d2\u8272\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (14,'\u7528\u6237\u89d2\u8272\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 14 and the name \u7528\u6237\u89d2\u8272\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 15 and the name \u6743\u9650\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (15,'\u6743\u9650\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 15 and the name \u6743\u9650\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 15 and the name \u6743\u9650\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 15 and the name \u6743\u9650\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (15, '\u6743\u9650\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 15 and the name \u6743\u9650\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 16 and the name \u52a8\u6001\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (16,'\u52a8\u6001\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 16 and the name \u52a8\u6001\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 16 and the name \u52a8\u6001\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 16 and the name \u52a8\u6001\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (16, '\u52a8\u6001\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 16 and the name \u52a8\u6001\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 17 and the name \u89d2\u8272\u6743\u9650\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (17,'\u89d2\u8272\u6743\u9650\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 17 and the name \u89d2\u8272\u6743\u9650\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 17 and the name \u89d2\u8272\u6743\u9650\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 17 and the name \u89d2\u8272\u6743\u9650\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (17, '\u89d2\u8272\u6743\u9650\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 17 and the name \u89d2\u8272\u6743\u9650\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu WHERE id = 17;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 18 and the name '\u5168\u5c40\u83dc\u5355'. */\nINSERT INTO `qt_menu` VALUES (18,'\u5168\u5c40\u83dc\u5355')", "description": "Inserts a new row into the qt_menu table with the id 18 and the name '\u5168\u5c40\u83dc\u5355'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 18 and the name '\u5168\u5c40\u83dc\u5355'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 18 and the name '\u5168\u5c40\u83dc\u5355'.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (18, '\u5168\u5c40\u83dc\u5355');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 18 and the name '\u5168\u5c40\u83dc\u5355'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 19 and the name \u5b66\u9662\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (19,'\u5b66\u9662\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 19 and the name \u5b66\u9662\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 19 and the name \u5b66\u9662\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 19 and the name \u5b66\u9662\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (19, '\u5b66\u9662\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 19 and the name \u5b66\u9662\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 20 and the name \u90e8\u95e8\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (20,'\u90e8\u95e8\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 20 and the name \u90e8\u95e8\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 21 and the name \u8bfe\u8868\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (21,'\u8bfe\u8868\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 21 and the name \u8bfe\u8868\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 22 and the name \u5386\u53f2\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (22,'\u5386\u53f2\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 22 and the name \u5386\u53f2\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 22 and the name \u5386\u53f2\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 22 and the name \u5386\u53f2\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (22, '\u5386\u53f2\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 22 and the name \u5386\u53f2\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 23 and the name \u6587\u4ef6\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (23,'\u6587\u4ef6\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 23 and the name \u6587\u4ef6\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 23 and the name \u6587\u4ef6\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 23 and the name \u6587\u4ef6\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name)\nVALUES (23, '\u6587\u4ef6\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 23 and the name \u6587\u4ef6\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 24 and the name \u8bc4\u8bba\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (24,'\u8bc4\u8bba\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 24 and the name \u8bc4\u8bba\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 25 and the name \u53cd\u9988\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (25,'\u53cd\u9988\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 25 and the name \u53cd\u9988\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_menu table with the id 25 and the name \u53cd\u9988\u7ba1\u7406.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_menu table with the id 25 and the name \u53cd\u9988\u7ba1\u7406.\n\n-- Solution:\n```sql\nINSERT INTO qt_menu (id, name) VALUES (25, '\u53cd\u9988\u7ba1\u7406');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_menu table with the id 25 and the name \u53cd\u9988\u7ba1\u7406.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_menu;"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 26 and the name \u4ea7\u54c1\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (26,'\u4ea7\u54c1\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 26 and the name \u4ea7\u54c1\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 27 and the name \u7ba1\u7406\u56e2\u961f\u6210\u5458\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (27,'\u7ba1\u7406\u56e2\u961f\u6210\u5458\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 27 and the name \u7ba1\u7406\u56e2\u961f\u6210\u5458\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 28 and the name \u804c\u52a1\u83dc\u5355. */\nINSERT INTO `qt_menu` VALUES (28,'\u804c\u52a1\u83dc\u5355')", "description": "Inserts a new row into the qt_menu table with the id 28 and the name \u804c\u52a1\u83dc\u5355.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_menu table with the id 29 and the name \u5236\u5ea6\u7ba1\u7406. */\nINSERT INTO `qt_menu` VALUES (29,'\u5236\u5ea6\u7ba1\u7406')", "description": "Inserts a new row into the qt_menu table with the id 29 and the name \u5236\u5ea6\u7ba1\u7406.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named qt_news with the following columns: id (integer primary key), title (varchar), content (text), stext (varchar), userID (integer), addtime (timestamp), and modifytime (timestamp). */\nCREATE TABLE `qt_news` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) DEFAULT NULL COMMENT '\u6807\u9898',\n  `content` text CHARACTER SET utf8 COLLATE utf8_hungarian_ci COMMENT '\u5bcc\u6587\u672c\u5185\u5bb9',\n  `stext` varchar(255) DEFAULT NULL COMMENT '\u7eaf\u6587\u672c\u5185\u5bb9',\n  `userID` int(11) DEFAULT NULL COMMENT '\u53d1\u5e03\u8005ID',\n  `addtime` timestamp NULL DEFAULT NULL COMMENT '\u6dfb\u52a0\u65f6\u95f4',\n  `modifytime` timestamp NULL DEFAULT NULL COMMENT '\u6700\u540e\u4fee\u6539\u65f6\u95f4',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8 COMMENT='\u65b0\u95fb\u52a8\u6001\u8868'", "description": "Creates a table named qt_news with the following columns: id (integer primary key), title (varchar), content (text), stext (varchar), userID (integer), addtime (timestamp), and modifytime (timestamp).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "CHARACTER SET", "COLLATE", "utf8_hungarian_ci", "text"], "instruction": "Write a SQL query to create a table named qt_news with the following columns: id (integer primary key), title (varchar), content (text), stext (varchar), userID (integer), addtime (timestamp), and modifytime (timestamp).", "response": "-- Reasoning:\nWe need a new table named qt_news. It should have an integer primary key so that each news has a unique identifier, a title column to store the news\u2019s title as text, a content column to store the news\u2019s content as text, a stext column to store the news\u2019s short content as text, a userID column to store the user\u2019s ID as integer, an addtime column to store the news\u2019s creation time as timestamp, and a modifytime column to store the news\u2019s modification time as timestamp.\n\n-- Solution:\n```sql\nCREATE TABLE qt_news (\n  id INTEGER PRIMARY KEY,\n  title VARCHAR(255),\n  content TEXT,\n  stext VARCHAR(255),\n  userID INTEGER,\n  addtime TIMESTAMP,\n  modifytime TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the qt_news table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 title: variable\u2010length string up to 255 characters\n  \u2022 content: text\n  \u2022 stext: variable\u2010length string up to 255 characters\n  \u2022 userID: integer\n  \u2022 addtime: timestamp\n  \u2022 modifytime: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_news');"}
{"seed": "/* Inserts a new row into the qt_news table with the given values. */\nINSERT INTO `qt_news` VALUES (8,'\u7cbe\u5f18\u7efc\u5408\u7ba1\u7406\u7cfb\u7edfV2.0\u7248\u4e0a\u7ebf\u62c9!\u6b22\u8fce\u7cbe\u5f18\u5168\u4f53\u6210\u5458\u4f7f\u7528','\u5386\u65f6\u4e00\u4e2a\u6691\u5047,\u7cbe\u5f18\u7efc\u5408\u7ba1\u7406\u7cfb\u7edfV2.0\u7248\u7ec8\u4e8e\u548c\u5927\u5bb6\u89c1\u9762\u62c9!\u6b22\u8fce\u7cbe\u5f18\u5168\u4f53\u6210\u5458\u4f7f\u7528...\u6700\u65b0\u6dfb\u52a0\u6d88\u606f\u6a21\u5757!\u6709\u4efb\u4f55\u610f\u89c1\u90fd\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001\u7ed9\u7cbe\u5f18\u7ba1\u7406\u5c42!\u672a\u6765\u5c06\u6dfb\u52a0\u77ed\u4fe1\u529f\u80fd~~~~','\u5386\u65f6\u4e00\u4e2a\u6691\u5047,\u7cbe\u5f18\u7efc\u5408\u7ba1\u7406\u7cfb\u7edfV2.0\u7248\u7ec8\u4e8e\u548c\u5927\u5bb6\u89c1\u9762\u62c9!\u6b22\u8fce\u7cbe\u5f18\u5168\u4f53\u6210\u5458\u4f7f\u7528...\u6700\u65b0\u6dfb\u52a0\u6d88\u606f\u6a21\u5757!\u6709\u4efb\u4f55\u610f\u89c1\u90fd\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001\u7ed9\u7cbe\u5f18\u7ba1\u7406\u5c42!\u672a\u6765\u5c06\u6dfb\u52a0\u77ed\u4fe1\u529f\u80fd~~~~',2,'2010-09-07 22:22:14','2011-11-29 17:13:41')", "description": "Inserts a new row into the qt_news table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_news table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_news table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_news (title, content, author, created_at)\nVALUES ('New Title', 'New Content', 'New Author', '2020-01-01');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_news table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_news;"}
{"seed": "/* Creates a table named qt_officerule with five columns: id (integer primary key), title (varchar), content (varchar), addtime (timestamp), and modifytime (timestamp). */\nCREATE TABLE `qt_officerule` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) DEFAULT NULL COMMENT '\u5236\u5ea6\u540d',\n  `content` varchar(255) DEFAULT NULL COMMENT '\u5236\u5ea6\u5185\u5bb9',\n  `addtime` timestamp NULL DEFAULT NULL COMMENT '\u5236\u5ea6\u53d1\u5e03\u65f6\u95f4',\n  `modifytime` timestamp NULL DEFAULT NULL COMMENT '\u5236\u5ea6\u4fee\u6539\u65f6\u95f4',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='\u529e\u516c\u5ba4\u5236\u5ea6\u8868'", "description": "Creates a table named qt_officerule with five columns: id (integer primary key), title (varchar), content (varchar), addtime (timestamp), and modifytime (timestamp).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "TIMESTAMP", "VARCHAR", "INT", "ENGINE", "CHARSET", "COMMENT"], "instruction": "Write a SQL query to create a table named qt_officerule with five columns: id (integer primary key), title (varchar), content (varchar), addtime (timestamp), and modifytime (timestamp).", "response": "-- Reasoning:\nWe need a new table named qt_officerule. It should have an integer primary key so that each rule has a unique identifier, and a title and content column to store the rule\u2019s title and content as text.\n\n-- Solution:\n```sql\nCREATE TABLE qt_officerule (\n  id INTEGER PRIMARY KEY,\n  title VARCHAR(255),\n  content VARCHAR(255),\n  addtime TIMESTAMP,\n  modifytime TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the qt_officerule table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 title: variable\u2010length string up to 255 characters\n  \u2022 content: variable\u2010length string up to 255 characters\n  \u2022 addtime: timestamp\n  \u2022 modifytime: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_officerule');"}
{"seed": "/* Inserts a new row into the qt_officerule table with the specified values. */\nINSERT INTO `qt_officerule` VALUES (3,'\u8d85\u957f\u6807\u9898\u6d4b\u8bd5\u8d85\u957f\u6807\u9898\u6d4b\u8bd5\u8d85\u957f\u6807\u9898\u6d4b\u8bd5\u8d85\u957f\u6807\u9898\u6d4b\u8bd5\u8d85\u957f\u6807\u9898\u6d4b\u8bd5\u8d85\u957f\u6807\u9898\u6d4b\u8bd5\u8d85\u957f\u6807\u9898\u6d4b\u8bd5','3','2011-12-06 16:07:01','2011-12-06 16:24:47')", "description": "Inserts a new row into the qt_officerule table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_officerule table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_officerule table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO qt_officerule (rule_id, rule_name, rule_desc, rule_type, rule_value, rule_status, rule_create_time, rule_update_time)\nVALUES (1, 'rule_name', 'rule_desc', 'rule_type', 'rule_value', 'rule_status', 'rule_create_time', 'rule_update_time');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_officerule table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_officerule;"}
{"seed": "/* Creates a table named qt_operator with three columns: id (integer primary key), optname (varchar) and optvalue (varchar). */\nCREATE TABLE `qt_operator` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `optname` varchar(255) DEFAULT NULL COMMENT '\u64cd\u4f5c\u63cf\u8ff0',\n  `optvalue` varchar(255) DEFAULT NULL COMMENT '\u64cd\u4f5c\u503c',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8 COMMENT='\u64cd\u4f5c\u8868'", "description": "Creates a table named qt_operator with three columns: id (integer primary key), optname (varchar) and optvalue (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named qt_operator with three columns: id (integer primary key), optname (varchar) and optvalue (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_operator. It should have an integer primary key so that each operator has a unique identifier, and two varchar columns to store the operator\u2019s name and value.\n\n-- Solution:\n```sql\nCREATE TABLE qt_operator (\n  id INTEGER PRIMARY KEY,\n  optname VARCHAR(255),\n  optvalue VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_operator table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 optname: variable\u2010length string up to 255 characters\n  \u2022 optvalue: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_operator');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 2, name '\u5355\u6761\u6570\u636e\u67e5\u770b', and action 'show'. */\nINSERT INTO `qt_operator` VALUES (2,'\u5355\u6761\u6570\u636e\u67e5\u770b','show')", "description": "Inserts a new row into the qt_operator table with the id 2, name '\u5355\u6761\u6570\u636e\u67e5\u770b', and action 'show'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 4, name '\u6dfb\u52a0\u89c6\u56fe', and action 'viewAdd'. */\nINSERT INTO `qt_operator` VALUES (4,'\u6dfb\u52a0\u89c6\u56fe','viewAdd')", "description": "Inserts a new row into the qt_operator table with the id 4, name '\u6dfb\u52a0\u89c6\u56fe', and action 'viewAdd'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 5, name '\u6dfb\u52a0', and action 'add'. */\nINSERT INTO `qt_operator` VALUES (5,'\u6dfb\u52a0','add')", "description": "Inserts a new row into the qt_operator table with the id 5, name '\u6dfb\u52a0', and action 'add'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 6, name \u5220\u9664, and action delete. */\nINSERT INTO `qt_operator` VALUES (6,'\u5220\u9664','delete')", "description": "Inserts a new row into the qt_operator table with the id 6, name \u5220\u9664, and action delete.", "concepts": ["INSERT INTO", "VALUES", "delete"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 7, name '\u7f16\u8f91\u89c6\u56fe', and action 'viewModify'. */\nINSERT INTO `qt_operator` VALUES (7,'\u7f16\u8f91\u89c6\u56fe','viewModify')", "description": "Inserts a new row into the qt_operator table with the id 7, name '\u7f16\u8f91\u89c6\u56fe', and action 'viewModify'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 8, name '\u7f16\u8f91', and action 'modify'. */\nINSERT INTO `qt_operator` VALUES (8,'\u7f16\u8f91','modify')", "description": "Inserts a new row into the qt_operator table with the id 8, name '\u7f16\u8f91', and action 'modify'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 9, name '\u7b5b\u9009\u89c6\u56fe', and action 'viewFilter'. */\nINSERT INTO `qt_operator` VALUES (9,'\u7b5b\u9009\u89c6\u56fe','viewFilter')", "description": "Inserts a new row into the qt_operator table with the id 9, name '\u7b5b\u9009\u89c6\u56fe', and action 'viewFilter'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with id 10, name '\u7b5b\u9009', and action 'filter'. */\nINSERT INTO `qt_operator` VALUES (10,'\u7b5b\u9009','filter')", "description": "Inserts a new row into the qt_operator table with id 10, name '\u7b5b\u9009', and action 'filter'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 11, name '\u5217\u8868', and action 'list'. */\nINSERT INTO `qt_operator` VALUES (11,'\u5217\u8868','list')", "description": "Inserts a new row into the qt_operator table with the id 11, name '\u5217\u8868', and action 'list'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the values 12, '\u5206\u9875\u5217\u8868', 'listByPage'. */\nINSERT INTO `qt_operator` VALUES (12,'\u5206\u9875\u5217\u8868','listByPage')", "description": "Inserts a new row into the qt_operator table with the values 12, '\u5206\u9875\u5217\u8868', 'listByPage'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 13, name '\u6279\u91cf\u5220\u9664', and action 'batchDelete'. */\nINSERT INTO `qt_operator` VALUES (13,'\u6279\u91cf\u5220\u9664','batchDelete')", "description": "Inserts a new row into the qt_operator table with the id 13, name '\u6279\u91cf\u5220\u9664', and action 'batchDelete'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 14, name Private data view, and action showMyself. */\nINSERT INTO `qt_operator` VALUES (14,'\u79c1\u6709\u6570\u636e\u67e5\u770b','showMyself')", "description": "Inserts a new row into the qt_operator table with the id 14, name Private data view, and action showMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 15, name Private data editing view, and action viewModifyMyself. */\nINSERT INTO `qt_operator` VALUES (15,'\u79c1\u6709\u6570\u636e\u7f16\u8f91\u89c6\u56fe','viewModifyMyself')", "description": "Inserts a new row into the qt_operator table with the id 15, name Private data editing view, and action viewModifyMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 16, name Private data editing, and action modifyMyself. */\nINSERT INTO `qt_operator` VALUES (16,'\u79c1\u6709\u6570\u636e\u7f16\u8f91','modifyMyself')", "description": "Inserts a new row into the qt_operator table with the id 16, name Private data editing, and action modifyMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 17, name Private data screening view, and method viewFilterMyself. */\nINSERT INTO `qt_operator` VALUES (17,'\u79c1\u6709\u6570\u636e\u7b5b\u9009\u89c6\u56fe','viewFilterMyself')", "description": "Inserts a new row into the qt_operator table with the id 17, name Private data screening view, and method viewFilterMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_operator table with the id 17, name Private data screening view, and method viewFilterMyself.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_operator table. It should have an id of 17, a name of Private data screening view, and a method of viewFilterMyself.\n\n-- Solution:\n```sql\nINSERT INTO qt_operator (id, name, method)\nVALUES (17, 'Private data screening view', 'viewFilterMyself');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_operator table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_operator;"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 18, name Private data screening, and method filterMyself. */\nINSERT INTO `qt_operator` VALUES (18,'\u79c1\u6709\u6570\u636e\u7b5b\u9009','filterMyself')", "description": "Inserts a new row into the qt_operator table with the id 18, name Private data screening, and method filterMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 19, name Private data list, and method listMyself. */\nINSERT INTO `qt_operator` VALUES (19,'\u79c1\u6709\u6570\u636e\u5217\u8868','listMyself')", "description": "Inserts a new row into the qt_operator table with the id 19, name Private data list, and method listMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 20, name Private data page list, and method listByPageMyself. */\nINSERT INTO `qt_operator` VALUES (20,'\u79c1\u6709\u6570\u636e\u5206\u9875\u5217\u8868','listByPageMyself')", "description": "Inserts a new row into the qt_operator table with the id 20, name Private data page list, and method listByPageMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_operator table with the id 20, name Private data page list, and method listByPageMyself.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_operator table. It should have an id of 20, a name of Private data page list, and a method of listByPageMyself.\n\n-- Solution:\n```sql\nINSERT INTO qt_operator (id, name, method)\nVALUES (20, 'Private data page list', 'listByPageMyself');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_operator table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_operator;"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 21, name '\u79c1\u6709\u6570\u636e\u6279\u91cf\u5220\u9664', and action 'batchDeleteMyself'. */\nINSERT INTO `qt_operator` VALUES (21,'\u79c1\u6709\u6570\u636e\u6279\u91cf\u5220\u9664','batchDeleteMyself')", "description": "Inserts a new row into the qt_operator table with the id 21, name '\u79c1\u6709\u6570\u636e\u6279\u91cf\u5220\u9664', and action 'batchDeleteMyself'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 22, name '\u540e\u53f0\u7ba1\u7406\u4e3b\u9875', and type 'manager'. */\nINSERT INTO `qt_operator` VALUES (22,'\u540e\u53f0\u7ba1\u7406\u4e3b\u9875','manager')", "description": "Inserts a new row into the qt_operator table with the id 22, name '\u540e\u53f0\u7ba1\u7406\u4e3b\u9875', and type 'manager'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 23, name '\u4e0a\u4f20\u56fe\u7247', and action 'uploadImg'. */\nINSERT INTO `qt_operator` VALUES (23,'\u4e0a\u4f20\u56fe\u7247','uploadImg')", "description": "Inserts a new row into the qt_operator table with the id 23, name '\u4e0a\u4f20\u56fe\u7247', and action 'uploadImg'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 24, name '\u9000\u51fa\u7cfb\u7edf' and action 'anonymous_logout'. */\nINSERT INTO `qt_operator` VALUES (24,'\u9000\u51fa\u7cfb\u7edf','anonymous_logout')", "description": "Inserts a new row into the qt_operator table with the id 24, name '\u9000\u51fa\u7cfb\u7edf' and action 'anonymous_logout'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 25, name Private data add view, and action viewAddMyself. */\nINSERT INTO `qt_operator` VALUES (25,'\u79c1\u6709\u6570\u636e\u6dfb\u52a0\u89c6\u56fe','viewAddMyself')", "description": "Inserts a new row into the qt_operator table with the id 25, name Private data add view, and action viewAddMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 26, name Private data addition, and action addMyself. */\nINSERT INTO `qt_operator` VALUES (26,'\u79c1\u6709\u6570\u636e\u6dfb\u52a0','addMyself')", "description": "Inserts a new row into the qt_operator table with the id 26, name Private data addition, and action addMyself.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 27, name '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f\u89c6\u56fe', and action 'viewExportUser'. */\nINSERT INTO `qt_operator` VALUES (27,'\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f\u89c6\u56fe','viewExportUser')", "description": "Inserts a new row into the qt_operator table with the id 27, name '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f\u89c6\u56fe', and action 'viewExportUser'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 28, name '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f', and action 'exportUser'. */\nINSERT INTO `qt_operator` VALUES (28,'\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f','exportUser')", "description": "Inserts a new row into the qt_operator table with the id 28, name '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f', and action 'exportUser'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 29, name '\u4e0a\u4f20\u6587\u4ef6' and action 'uploadFile'. */\nINSERT INTO `qt_operator` VALUES (29,'\u4e0a\u4f20\u6587\u4ef6','uploadFile')", "description": "Inserts a new row into the qt_operator table with the id 29, name '\u4e0a\u4f20\u6587\u4ef6' and action 'uploadFile'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 30, name Private data deletion, and action deleteMyself. */\nINSERT INTO `qt_operator` VALUES (30,'\u79c1\u6709\u6570\u636e\u5220\u9664','deleteMyself')", "description": "Inserts a new row into the qt_operator table with the id 30, name Private data deletion, and action deleteMyself.", "concepts": ["INSERT INTO", "VALUES", "`qt_operator`", "VALUES", "`qt_operator`", "VALUES", "`qt_operator`", "VALUES", "`qt_operator"], "instruction": "Write a SQL query to insert a new row into the qt_operator table with the id 30, name Private data deletion, and action deleteMyself.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_operator table. It should have an id of 30, a name of Private data deletion, and an action of deleteMyself.\n\n-- Solution:\n```sql\nINSERT INTO qt_operator (id, name, action)\nVALUES (30, 'Private data deletion', 'deleteMyself');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_operator table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_operator;"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 31, name \u8bc4\u8bba\u5217\u8868\uff08\u6587\u4ef6\u4e2d\u4f7f\u7528\uff09, and method ajaxCommentFilter. */\nINSERT INTO `qt_operator` VALUES (31,'\u8bc4\u8bba\u5217\u8868\uff08\u6587\u4ef6\u4e2d\u4f7f\u7528\uff09','ajaxCommentFilter')", "description": "Inserts a new row into the qt_operator table with the id 31, name \u8bc4\u8bba\u5217\u8868\uff08\u6587\u4ef6\u4e2d\u4f7f\u7528\uff09, and method ajaxCommentFilter.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 32, name '\u53d1\u8868\u8bc4\u8bba\uff08\u6587\u4ef6\u8be6\u7ec6\u4e2d\u4f7f\u7528\uff09' and action 'ajaxCommentAdd'. */\nINSERT INTO `qt_operator` VALUES (32,'\u53d1\u8868\u8bc4\u8bba\uff08\u6587\u4ef6\u8be6\u7ec6\u4e2d\u4f7f\u7528\uff09','ajaxCommentAdd')", "description": "Inserts a new row into the qt_operator table with the id 32, name '\u53d1\u8868\u8bc4\u8bba\uff08\u6587\u4ef6\u8be6\u7ec6\u4e2d\u4f7f\u7528\uff09' and action 'ajaxCommentAdd'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 33, name \u5220\u9664\u8bc4\u8bba\uff08\u6587\u4ef6\u8be6\u7ec6\u4e2d\u4f7f\u7528\uff09, and action ajaxCommentDelete. */\nINSERT INTO `qt_operator` VALUES (33,'\u5220\u9664\u8bc4\u8bba\uff08\u6587\u4ef6\u8be6\u7ec6\u4e2d\u4f7f\u7528\uff09','ajaxCommentDelete')", "description": "Inserts a new row into the qt_operator table with the id 33, name \u5220\u9664\u8bc4\u8bba\uff08\u6587\u4ef6\u8be6\u7ec6\u4e2d\u4f7f\u7528\uff09, and action ajaxCommentDelete.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 34, name '\u5171\u4eab\u6587\u4ef6', and action 'shareFile'. */\nINSERT INTO `qt_operator` VALUES (34,'\u5171\u4eab\u6587\u4ef6','shareFile')", "description": "Inserts a new row into the qt_operator table with the id 34, name '\u5171\u4eab\u6587\u4ef6', and action 'shareFile'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 35, name '\u516c\u5171\u6587\u4ef6\u67e5\u770b' and action shareFileShow. */\nINSERT INTO `qt_operator` VALUES (35,'\u516c\u5171\u6587\u4ef6\u67e5\u770b','shareFileShow')", "description": "Inserts a new row into the qt_operator table with the id 35, name '\u516c\u5171\u6587\u4ef6\u67e5\u770b' and action shareFileShow.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a view named viewFindFreeTime that selects the id, name, and active columns from the users table. */\nINSERT INTO `qt_operator` VALUES (36,'\u7a7a\u8bfe\u67e5\u8be2\u89c6\u56fe','viewFindFreeTime')", "description": "Creates a view named viewFindFreeTime that selects the id, name, and active columns from the users table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to create a view named viewFindFreeTime that selects the id, name, and active columns from the users table.", "response": "-- Reasoning:\nWe need to create a view named viewFindFreeTime that selects the id, name, and active columns from the users table.\n\n-- Solution:\n```sql\nCREATE VIEW viewFindFreeTime AS\n  SELECT id, name, active\n  FROM users;\n```\n\n-- Explanation:\nThis statement creates a view named viewFindFreeTime that selects the id, name, and active columns from the users table.\n\n-- Tests:\n-- 1. Verify view exists and schema is correct\nPRAGMA table_info('viewFindFreeTime');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 37, name '\u7a7a\u8bfe\u67e5\u8be2', and method 'findFreeTime'. */\nINSERT INTO `qt_operator` VALUES (37,'\u7a7a\u8bfe\u67e5\u8be2','findFreeTime')", "description": "Inserts a new row into the qt_operator table with the id 37, name '\u7a7a\u8bfe\u67e5\u8be2', and method 'findFreeTime'.", "concepts": ["INSERT INTO", "VALUES", "qt_operator", "findFreeTime"], "instruction": "Write a SQL query to insert a new row into the qt_operator table with the id 37, name '\u7a7a\u8bfe\u67e5\u8be2', and method 'findFreeTime'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_operator table. It should have an id of 37, a name of '\u7a7a\u8bfe\u67e5\u8be2', and a method of 'findFreeTime'.\n\n-- Solution:\n```sql\nINSERT INTO qt_operator (id, name, method)\nVALUES (37, '\u7a7a\u8bfe\u67e5\u8be2', 'findFreeTime');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_operator table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_operator;"}
{"seed": "/* Inserts a new row into the qt_operator table with the given values. */\nINSERT INTO `qt_operator` VALUES (38,'\u6309\u90e8\u95e8\u67e5\u770b\u5168\u4f53\u4eba\u5458\u7a7a\u95f2\u65f6\u95f4\u60c5\u51b5','listAllKeByDepartmentId')", "description": "Inserts a new row into the qt_operator table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 39, name '\u5bfc\u51fa\u5f53\u524d\u6761\u4ef6\u7528\u6237\u6570\u636e', and action 'exportUserOfCurrentCondition'. */\nINSERT INTO `qt_operator` VALUES (39,'\u5bfc\u51fa\u5f53\u524d\u6761\u4ef6\u7528\u6237\u6570\u636e','exportUserOfCurrentCondition')", "description": "Inserts a new row into the qt_operator table with the id 39, name '\u5bfc\u51fa\u5f53\u524d\u6761\u4ef6\u7528\u6237\u6570\u636e', and action 'exportUserOfCurrentCondition'.", "concepts": ["INSERT INTO", "VALUES", "qt_operator", "exportUserOfCurrentCondition"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 40, name '\u7ed9\u7528\u6237\u8d4b\u4e88\u89d2\u8272\u7b5b\u9009\u7528\u6237\u7528\uff08ajaxForUserList\uff09', and action 'ajaxForUserList'. */\nINSERT INTO `qt_operator` VALUES (40,'\u7ed9\u7528\u6237\u8d4b\u4e88\u89d2\u8272\u7b5b\u9009\u7528\u6237\u7528\uff08ajaxForUserList\uff09','ajaxForUserList')", "description": "Inserts a new row into the qt_operator table with the id 40, name '\u7ed9\u7528\u6237\u8d4b\u4e88\u89d2\u8272\u7b5b\u9009\u7528\u6237\u7528\uff08ajaxForUserList\uff09', and action 'ajaxForUserList'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 41, name '\u5bfc\u51fa\u57fa\u672c\u4fe1\u606f\u586b\u5199\u4e0d\u5b8c\u6574\u7528\u6237', and action 'exportUserOfIncompleteInfo'. */\nINSERT INTO `qt_operator` VALUES (41,'\u5bfc\u51fa\u57fa\u672c\u4fe1\u606f\u586b\u5199\u4e0d\u5b8c\u6574\u7528\u6237','exportUserOfIncompleteInfo')", "description": "Inserts a new row into the qt_operator table with the id 41, name '\u5bfc\u51fa\u57fa\u672c\u4fe1\u606f\u586b\u5199\u4e0d\u5b8c\u6574\u7528\u6237', and action 'exportUserOfIncompleteInfo'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 43, name \u67e5\u770b\u7528\u6237\u8be6\u7ec6\uff08detail\uff09, and action detail. */\nINSERT INTO `qt_operator` VALUES (43,'\u67e5\u770b\u7528\u6237\u8be6\u7ec6\uff08detail\uff09','detail')", "description": "Inserts a new row into the qt_operator table with the id 43, name \u67e5\u770b\u7528\u6237\u8be6\u7ec6\uff08detail\uff09, and action detail.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 44, name '\u6279\u91cfEXCEL\u5bfc\u5165\u7528\u6237', and viewImportUser as the view. */\nINSERT INTO `qt_operator` VALUES (44,'\u6279\u91cfEXCEL\u5bfc\u5165\u7528\u6237','viewImportUser')", "description": "Inserts a new row into the qt_operator table with the id 44, name '\u6279\u91cfEXCEL\u5bfc\u5165\u7528\u6237', and viewImportUser as the view.", "concepts": ["INSERT INTO", "VALUES", "qt_operator", "viewImportUser"], "instruction": "Write a SQL query to insert a new row into the qt_operator table with the id 44, name '\u6279\u91cfEXCEL\u5bfc\u5165\u7528\u6237', and viewImportUser as the view.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_operator table. It should have an id of 44, a name of '\u6279\u91cfEXCEL\u5bfc\u5165\u7528\u6237', and a view of viewImportUser.\n\n-- Solution:\n```sql\nINSERT INTO qt_operator (id, name, view)\nVALUES (44, '\u6279\u91cfEXCEL\u5bfc\u5165\u7528\u6237', 'viewImportUser');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_operator table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_operator;"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 45, name '\u6279\u91cf\u5bfc\u5165', and action 'importUser'. */\nINSERT INTO `qt_operator` VALUES (45,'\u6279\u91cf\u5bfc\u5165','importUser')", "description": "Inserts a new row into the qt_operator table with the id 45, name '\u6279\u91cf\u5bfc\u5165', and action 'importUser'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_operator table with the id 46, name '\u6279\u91cf\u5bfc\u5165\u7528\u6237\u5217\u8868\uff08\u786e\u8ba4\u7ed3\u679c\uff09', and action 'importUserList'. */\nINSERT INTO `qt_operator` VALUES (46,'\u6279\u91cf\u5bfc\u5165\u7528\u6237\u5217\u8868\uff08\u786e\u8ba4\u7ed3\u679c\uff09','importUserList')", "description": "Inserts a new row into the qt_operator table with the id 46, name '\u6279\u91cf\u5bfc\u5165\u7528\u6237\u5217\u8868\uff08\u786e\u8ba4\u7ed3\u679c\uff09', and action 'importUserList'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named qt_permission with five columns: id (integer primary key), menuID (integer), resourceID (integer), optID (integer), and description (varchar). */\nCREATE TABLE `qt_permission` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `menuID` int(11) DEFAULT NULL COMMENT '\u83dc\u5355ID',\n  `resourceID` int(11) DEFAULT NULL COMMENT '\u8d44\u6e90ID',\n  `optID` int(11) DEFAULT NULL COMMENT '\u64cd\u4f5cID',\n  `description` varchar(255) DEFAULT NULL COMMENT '\u6743\u9650\u63cf\u8ff0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=174 DEFAULT CHARSET=utf8 COMMENT='\u6743\u9650\u8868'", "description": "Creates a table named qt_permission with five columns: id (integer primary key), menuID (integer), resourceID (integer), optID (integer), and description (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "KEY", "TABLE", "COMMENT", "DEFAULT", "VARCHAR", "INT", "PRIMARY"], "instruction": "Write a SQL query to create a table named qt_permission with five columns: id (integer primary key), menuID (integer), resourceID (integer), optID (integer), and description (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_permission. It should have an integer primary key so that each permission has a unique identifier, and four other columns to store the menuID, resourceID, optID, and description.\n\n-- Solution:\n```sql\nCREATE TABLE qt_permission (\n  id INT PRIMARY KEY,\n  menuID INT,\n  resourceID INT,\n  optID INT,\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_permission table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 menuID: integer\n  \u2022 resourceID: integer\n  \u2022 optID: integer\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_permission');"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 7, 10, 3, 4, and '\u6dfb\u52a0\u83dc\u5355\u89c6\u56fe'. */\nINSERT INTO `qt_permission` VALUES (7,10,3,4,'\u6dfb\u52a0\u83dc\u5355\u89c6\u56fe')", "description": "Inserts a new row into the qt_permission table with the values 7, 10, 3, 4, and '\u6dfb\u52a0\u83dc\u5355\u89c6\u56fe'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 7, 10, 3, 4, and '\u6dfb\u52a0\u83dc\u5355\u89c6\u56fe'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 7, 10, 3, 4, and '\u6dfb\u52a0\u83dc\u5355\u89c6\u56fe'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, sort)\nVALUES (7, 10, '\u6dfb\u52a0\u83dc\u5355\u89c6\u56fe', '/menu/add', 3);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the given values. */\nINSERT INTO `qt_permission` VALUES (8,10,3,5,'\u6dfb\u52a0\u83dc\u5355')", "description": "Inserts a new row into the qt_permission table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (\n  user_id,\n  permission_id\n) VALUES (\n  1,\n  1\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values:\n  \u2022 user_id: 1\n  \u2022 permission_id: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 10, 10, 3, 7, and '\u7f16\u8f91\u83dc\u5355\u89c6\u56fe'. */\nINSERT INTO `qt_permission` VALUES (10,10,3,7,'\u7f16\u8f91\u83dc\u5355\u89c6\u56fe')", "description": "Inserts a new row into the qt_permission table with the values 10, 10, 3, 7, and '\u7f16\u8f91\u83dc\u5355\u89c6\u56fe'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 10, 10, 3, 7, and '\u7f16\u8f91\u83dc\u5355\u89c6\u56fe'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 10, 10, 3, 7, and '\u7f16\u8f91\u83dc\u5355\u89c6\u56fe'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, type, value, name)\nVALUES (10, 10, 3, 7, '\u7f16\u8f91\u83dc\u5355\u89c6\u56fe');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 11, 10, 3, 8, and '\u7f16\u8f91\u83dc\u5355'. */\nINSERT INTO `qt_permission` VALUES (11,10,3,8,'\u7f16\u8f91\u83dc\u5355')", "description": "Inserts a new row into the qt_permission table with the values 11, 10, 3, 8, and '\u7f16\u8f91\u83dc\u5355'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 11, 10, 3, 8, and '\u7f16\u8f91\u83dc\u5355'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 11, 10, 3, 8, and '\u7f16\u8f91\u83dc\u5355'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, type, value)\nVALUES (11, 10, '\u7f16\u8f91\u83dc\u5355', 3, 8);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 12, 10, 3, 11, and '\u5217\u8868\u83dc\u5355'. */\nINSERT INTO `qt_permission` VALUES (12,10,3,11,'\u5217\u8868\u83dc\u5355')", "description": "Inserts a new row into the qt_permission table with the values 12, 10, 3, 11, and '\u5217\u8868\u83dc\u5355'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 12, 10, 3, 11, and '\u5217\u8868\u83dc\u5355'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 12, 10, 3, 11, and '\u5217\u8868\u83dc\u5355'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, type, sort)\nVALUES (12, 10, '\u5217\u8868\u83dc\u5355', 3, 11);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 13, 11, 6, 4, and '\u6dfb\u52a0\u8d44\u6e90\u89c6\u56fe'. */\nINSERT INTO `qt_permission` VALUES (13,11,6,4,'\u6dfb\u52a0\u8d44\u6e90\u89c6\u56fe')", "description": "Inserts a new row into the qt_permission table with the values 13, 11, 6, 4, and '\u6dfb\u52a0\u8d44\u6e90\u89c6\u56fe'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 13, 11, 6, 4, and '\u6dfb\u52a0\u8d44\u6e90\u89c6\u56fe'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 13, 11, 6, 4, and '\u6dfb\u52a0\u8d44\u6e90\u89c6\u56fe'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, sort)\nVALUES (13, 11, '\u6dfb\u52a0\u8d44\u6e90\u89c6\u56fe', '/resource/view/add', 6);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 14, 11, 6, 5, and '\u6dfb\u52a0\u8d44\u6e90'. */\nINSERT INTO `qt_permission` VALUES (14,11,6,5,'\u6dfb\u52a0\u8d44\u6e90')", "description": "Inserts a new row into the qt_permission table with the values 14, 11, 6, 5, and '\u6dfb\u52a0\u8d44\u6e90'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 14, 11, 6, 5, and '\u6dfb\u52a0\u8d44\u6e90'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 14, 11, 6, 5, and '\u6dfb\u52a0\u8d44\u6e90'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, sort, icon, type, status)\nVALUES (14, 11, '\u6dfb\u52a0\u8d44\u6e90', '/resource/add', 6, 'fa-plus', 2, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the following values:\n  \u2022 id: 14\n  \u2022 pid: 11\n  \u2022 name: '\u6dfb\u52a0\u8d44\u6e90'\n  \u2022 url: '/resource/add'\n  \u2022 sort: 6\n  \u2022 icon: 'fa-plus'\n  \u2022 type: 2\n  \u2022 status: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, level, name and description values. */\nINSERT INTO `qt_permission` VALUES (15,11,6,6,'\u5220\u9664\u8d44\u6e90')", "description": "Inserts a new row into the qt_permission table with the id, pid, level, name and description values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, pid, level, name and description values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, pid, level, name and description values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, level, name, description)\nVALUES (1, 0, 1, 'Admin', 'Admin');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, level, and name values. */\nINSERT INTO `qt_permission` VALUES (17,11,6,8,'\u7f16\u8f91\u8d44\u6e90')", "description": "Inserts a new row into the qt_permission table with the id, pid, level, and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, pid, level, and name values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have an id, pid, level, and name.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, level, name)\nVALUES (1, 1, 1, 'Admin');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 19, 12, 7, 4, and '\u6dfb\u52a0\u64cd\u4f5c\u89c6\u56fe'. */\nINSERT INTO `qt_permission` VALUES (19,12,7,4,'\u6dfb\u52a0\u64cd\u4f5c\u89c6\u56fe')", "description": "Inserts a new row into the qt_permission table with the values 19, 12, 7, 4, and '\u6dfb\u52a0\u64cd\u4f5c\u89c6\u56fe'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 19, 12, 7, 4, and '\u6dfb\u52a0\u64cd\u4f5c\u89c6\u56fe'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 19, 12, 7, 4, and '\u6dfb\u52a0\u64cd\u4f5c\u89c6\u56fe'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, sort)\nVALUES (19, 12, '\u6dfb\u52a0\u64cd\u4f5c\u89c6\u56fe', '/qt/operation/view', 7);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 20, 12, 7, 5, and '\u6dfb\u52a0\u64cd\u4f5c'. */\nINSERT INTO `qt_permission` VALUES (20,12,7,5,'\u6dfb\u52a0\u64cd\u4f5c')", "description": "Inserts a new row into the qt_permission table with the values 20, 12, 7, 5, and '\u6dfb\u52a0\u64cd\u4f5c'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 20, 12, 7, 5, and '\u6dfb\u52a0\u64cd\u4f5c'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 20, 12, 7, 5, and '\u6dfb\u52a0\u64cd\u4f5c'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, sort, icon, type, status)\nVALUES (20, 12, '\u6dfb\u52a0\u64cd\u4f5c', '/admin/operation/add', 7, 'fa-plus', 2, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 21, 12, 7, 6, and '\u5220\u9664\u64cd\u4f5c'. */\nINSERT INTO `qt_permission` VALUES (21,12,7,6,'\u5220\u9664\u64cd\u4f5c')", "description": "Inserts a new row into the qt_permission table with the values 21, 12, 7, 6, and '\u5220\u9664\u64cd\u4f5c'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 21, 12, 7, 6, and '\u5220\u9664\u64cd\u4f5c'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 21, 12, 7, 6, and '\u5220\u9664\u64cd\u4f5c'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, type, sort)\nVALUES (21, 12, '\u5220\u9664\u64cd\u4f5c', '/admin/delete', 2, 7);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 22, 12, 7, 7, and '\u7f16\u8f91\u64cd\u4f5c\u89c6\u56fe'. */\nINSERT INTO `qt_permission` VALUES (22,12,7,7,'\u7f16\u8f91\u64cd\u4f5c\u89c6\u56fe')", "description": "Inserts a new row into the qt_permission table with the values 22, 12, 7, 7, and '\u7f16\u8f91\u64cd\u4f5c\u89c6\u56fe'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 22, 12, 7, 7, and '\u7f16\u8f91\u64cd\u4f5c\u89c6\u56fe'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 22, 12, 7, 7, and '\u7f16\u8f91\u64cd\u4f5c\u89c6\u56fe'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, type, title)\nVALUES (22, 12, 7, 7, '\u7f16\u8f91\u64cd\u4f5c\u89c6\u56fe');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 23, 12, 7, 8, and '\u7f16\u8f91\u64cd\u4f5c'. */\nINSERT INTO `qt_permission` VALUES (23,12,7,8,'\u7f16\u8f91\u64cd\u4f5c')", "description": "Inserts a new row into the qt_permission table with the values 23, 12, 7, 8, and '\u7f16\u8f91\u64cd\u4f5c'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 23, 12, 7, 8, and '\u7f16\u8f91\u64cd\u4f5c'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 23, 12, 7, 8, and '\u7f16\u8f91\u64cd\u4f5c'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, sort, icon, type, status)\nVALUES (23, 12, '\u7f16\u8f91\u64cd\u4f5c', 'admin/operation/edit', 7, 'fa-edit', 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 25, 9, 8, 2, and '\u67e5\u770b\u7528\u6237'. */\nINSERT INTO `qt_permission` VALUES (25,9,8,2,'\u67e5\u770b\u7528\u6237')", "description": "Inserts a new row into the qt_permission table with the values 25, 9, 8, 2, and '\u67e5\u770b\u7528\u6237'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 26, 9, 8, 4, and '\u6dfb\u52a0\u7528\u6237\u89c6\u56fe'. */\nINSERT INTO `qt_permission` VALUES (26,9,8,4,'\u6dfb\u52a0\u7528\u6237\u89c6\u56fe')", "description": "Inserts a new row into the qt_permission table with the values 26, 9, 8, 4, and '\u6dfb\u52a0\u7528\u6237\u89c6\u56fe'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 26, 9, 8, 4, and '\u6dfb\u52a0\u7528\u6237\u89c6\u56fe'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 26, 9, 8, 4, and '\u6dfb\u52a0\u7528\u6237\u89c6\u56fe'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, url, sort)\nVALUES (26, 9, '\u6dfb\u52a0\u7528\u6237\u89c6\u56fe', '/user/add', 8);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, level, sort, and name values. */\nINSERT INTO `qt_permission` VALUES (30,9,8,10,'\u7b5b\u9009\u7528\u6237')", "description": "Inserts a new row into the qt_permission table with the id, pid, level, sort, and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, role_id, menu_id, and name values. */\nINSERT INTO `qt_permission` VALUES (31,16,9,2,'\u67e5\u770b\u52a8\u6001')", "description": "Inserts a new row into the qt_permission table with the id, pid, role_id, menu_id, and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, pid, role_id, menu_id, and name values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, pid, role_id, menu_id, and name values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, role_id, menu_id, name)\nVALUES (1, 0, 1, 1, 'Admin');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, level, name, and data values. */\nINSERT INTO `qt_permission` VALUES (37,16,9,13,'\u6279\u91cf\u5220\u9664\u52a8\u6001')", "description": "Inserts a new row into the qt_permission table with the id, pid, level, name, and data values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, pid, level, name, and data values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, pid, level, name, and data values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, level, name, data)\nVALUES (1, 1, 1, 'admin', 'admin');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, permission_id, and name values. */\nINSERT INTO `qt_permission` VALUES (60,17,13,8,'\u7f16\u8f91\u89d2\u8272\u6743\u9650')", "description": "Inserts a new row into the qt_permission table with the id, role_id, permission_id, and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, permission_id, and level values. */\nINSERT INTO `qt_permission` VALUES (61,17,13,10,'\u7b5b\u9009\u89d2\u8272\u6743\u9650')", "description": "Inserts a new row into the qt_permission table with the id, role_id, permission_id, and level values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, role_id, permission_id, and level values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, role_id, permission_id, and level values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, permission_id, level)\nVALUES (1, 1, 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, level, role_id and name values. */\nINSERT INTO `qt_permission` VALUES (67,19,15,6,'\u5220\u9664\u5b66\u9662')", "description": "Inserts a new row into the qt_permission table with the id, pid, level, role_id and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, permission_id, menu_id, and name values. */\nINSERT INTO `qt_permission` VALUES (75,20,16,7,'\u7f16\u8f91\u90e8\u95e8\u89c6\u56fe')", "description": "Inserts a new row into the qt_permission table with the id, role_id, permission_id, menu_id, and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, role_id, permission_id, menu_id, and name values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, role_id, permission_id, menu_id, and name values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, permission_id, menu_id, name)\nVALUES (1, 1, 1, 1, 'test');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, menu_id, permission_id and name values. */\nINSERT INTO `qt_permission` VALUES (89,21,17,8,'\u7f16\u8f91\u8bfe\u8868')", "description": "Inserts a new row into the qt_permission table with the id, role_id, menu_id, permission_id and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, role_id, menu_id, permission_id and name values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, role_id, menu_id, permission_id and name values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, menu_id, permission_id, name)\nVALUES (1, 1, 1, 1, 'test');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, permission_id, and action values. */\nINSERT INTO `qt_permission` VALUES (96,22,18,8,'\u7f16\u8f91\u5927\u4e8b\u4ef6')", "description": "Inserts a new row into the qt_permission table with the id, role_id, permission_id, and action values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, role_id, permission_id, and action values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, role_id, permission_id, and action values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, permission_id, action)\nVALUES (1, 1, 1, 'read');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, permission_id, permission_type, and permission_name values. */\nINSERT INTO `qt_permission` VALUES (97,22,18,10,'\u7b5b\u9009\u5927\u4e8b\u4ef6')", "description": "Inserts a new row into the qt_permission table with the id, role_id, permission_id, permission_type, and permission_name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, role_id, permission_id, permission_type, and permission_name values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, role_id, permission_id, permission_type, and permission_name values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, permission_id, permission_type, permission_name)\nVALUES (1, 1, 1, 'view', 'View');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the following values:\n  \u2022 id: 1\n  \u2022 role_id: 1\n  \u2022 permission_id: 1\n  \u2022 permission_type: view\n  \u2022 permission_name: View\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 101, 9, 8, 28, and '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f'. */\nINSERT INTO `qt_permission` VALUES (101,9,8,28,'\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f')", "description": "Inserts a new row into the qt_permission table with the values 101, 9, 8, 28, and '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 101, 9, 8, 28, and '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 101, 9, 8, 28, and '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f'.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, level, type, name)\nVALUES (101, 9, 8, 28, '\u5bfc\u51fa\u7528\u6237\u57fa\u672c\u4fe1\u606f');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the values 102, 23, 19, 2, and \u6587\u4ef6\u67e5\u770b. */\nINSERT INTO `qt_permission` VALUES (102,23,19,2,'\u6587\u4ef6\u67e5\u770b')", "description": "Inserts a new row into the qt_permission table with the values 102, 23, 19, 2, and \u6587\u4ef6\u67e5\u770b.", "concepts": ["INSERT INTO", "VALUES", "qt_permission", "102", "23", "19", "2", "\u6587\u4ef6\u67e5\u770b"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the values 102, 23, 19, 2, and \u6587\u4ef6\u67e5\u770b.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table with the values 102, 23, 19, 2, and \u6587\u4ef6\u67e5\u770b.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, permission_id, permission_name)\nVALUES (102, 23, 19, '\u6587\u4ef6\u67e5\u770b');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, permission_id, and permission_type columns. */\nINSERT INTO `qt_permission` VALUES (105,23,19,18,'\u79c1\u6709\u6587\u4ef6\u7b5b\u9009')", "description": "Inserts a new row into the qt_permission table with the id, role_id, permission_id, and permission_type columns.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, role_id, permission_id, and permission_type columns.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, role_id, permission_id, and permission_type columns.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, permission_id, permission_type)\nVALUES (1, 1, 1, 'read');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the following values:\n  \u2022 id: 1\n  \u2022 role_id: 1\n  \u2022 permission_id: 1\n  \u2022 permission_type: read\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 114, role_id 23, resource_id 19, permission_id 29, and name '\u4e0a\u4f20\u6587\u4ef6'. */\nINSERT INTO `qt_permission` VALUES (114,23,19,29,'\u4e0a\u4f20\u6587\u4ef6')", "description": "Inserts a new row into the qt_permission table with the id 114, role_id 23, resource_id 19, permission_id 29, and name '\u4e0a\u4f20\u6587\u4ef6'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 114, role_id 23, resource_id 19, permission_id 29, and name '\u4e0a\u4f20\u6587\u4ef6'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 114\n  \u2022 role_id: 23\n  \u2022 resource_id: 19\n  \u2022 permission_id: 29\n  \u2022 name: '\u4e0a\u4f20\u6587\u4ef6'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, resource_id, permission_id, name)\nVALUES (114, 23, 19, 29, '\u4e0a\u4f20\u6587\u4ef6');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, role_id, menu_id, permission_id, and name values. */\nINSERT INTO `qt_permission` VALUES (118,23,19,21,'\u79c1\u6709\u6570\u636e\u6279\u91cf\u5220\u9664')", "description": "Inserts a new row into the qt_permission table with the id, role_id, menu_id, permission_id, and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, role_id, menu_id, permission_id, and name values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id, role_id, menu_id, permission_id, and name values.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, menu_id, permission_id, name)\nVALUES (1, 1, 1, 1, 'test');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 128, role_id 25, resource_id 21, permission_id 8, and name '\u53cd\u9988\u56de\u590d'. */\nINSERT INTO `qt_permission` VALUES (128,25,21,8,'\u53cd\u9988\u56de\u590d')", "description": "Inserts a new row into the qt_permission table with the id 128, role_id 25, resource_id 21, permission_id 8, and name '\u53cd\u9988\u56de\u590d'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 128, role_id 25, resource_id 21, permission_id 8, and name '\u53cd\u9988\u56de\u590d'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 128\n  \u2022 role_id: 25\n  \u2022 resource_id: 21\n  \u2022 permission_id: 8\n  \u2022 name: '\u53cd\u9988\u56de\u590d'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, resource_id, permission_id, name)\nVALUES (128, 25, 21, 8, '\u53cd\u9988\u56de\u590d');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission WHERE id = 128;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 129, role_id 25, resource_id 21, permission_id 10, and name '\u53cd\u9988\u7b5b\u9009'. */\nINSERT INTO `qt_permission` VALUES (129,25,21,10,'\u53cd\u9988\u7b5b\u9009')", "description": "Inserts a new row into the qt_permission table with the id 129, role_id 25, resource_id 21, permission_id 10, and name '\u53cd\u9988\u7b5b\u9009'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 129, role_id 25, resource_id 21, permission_id 10, and name '\u53cd\u9988\u7b5b\u9009'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 129\n  \u2022 role_id: 25\n  \u2022 resource_id: 21\n  \u2022 permission_id: 10\n  \u2022 name: '\u53cd\u9988\u7b5b\u9009'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, resource_id, permission_id, name)\nVALUES (129, 25, 21, 10, '\u53cd\u9988\u7b5b\u9009');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 130, role_id 25, menu_id 21, and permission_id 18. */\nINSERT INTO `qt_permission` VALUES (130,25,21,18,'\u79c1\u6709\u53cd\u9988\u7b5b\u9009')", "description": "Inserts a new row into the qt_permission table with the id 130, role_id 25, menu_id 21, and permission_id 18.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 130, role_id 25, menu_id 21, and permission_id 18.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id 130, role_id 25, menu_id 21, and permission_id 18.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, menu_id, permission_id)\nVALUES (130, 25, 21, 18);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 135, role_id 26, menu_id 22, permission_id 5, and name '\u6dfb\u52a0\u4ea7\u54c1'. */\nINSERT INTO `qt_permission` VALUES (135,26,22,5,'\u6dfb\u52a0\u4ea7\u54c1')", "description": "Inserts a new row into the qt_permission table with the id 135, role_id 26, menu_id 22, permission_id 5, and name '\u6dfb\u52a0\u4ea7\u54c1'.", "concepts": ["INSERT INTO", "VALUES", "qt_permission", "135", "26", "22", "5", "\u6dfb\u52a0\u4ea7\u54c1"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 135, role_id 26, menu_id 22, permission_id 5, and name '\u6dfb\u52a0\u4ea7\u54c1'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 135\n  \u2022 role_id: 26\n  \u2022 menu_id: 22\n  \u2022 permission_id: 5\n  \u2022 name: '\u6dfb\u52a0\u4ea7\u54c1'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, menu_id, permission_id, name)\nVALUES (135, 26, 22, 5, '\u6dfb\u52a0\u4ea7\u54c1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission WHERE id = 135;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 136, role_id 26, resource_id 22, privilege_id 6, and privilege_name '\u5220\u9664\u4ea7\u54c1'. */\nINSERT INTO `qt_permission` VALUES (136,26,22,6,'\u5220\u9664\u4ea7\u54c1')", "description": "Inserts a new row into the qt_permission table with the id 136, role_id 26, resource_id 22, privilege_id 6, and privilege_name '\u5220\u9664\u4ea7\u54c1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 138, role_id 26, resource_id 22, privilege_id 8, and privilege_name '\u7f16\u8f91\u4ea7\u54c1'. */\nINSERT INTO `qt_permission` VALUES (138,26,22,8,'\u7f16\u8f91\u4ea7\u54c1')", "description": "Inserts a new row into the qt_permission table with the id 138, role_id 26, resource_id 22, privilege_id 8, and privilege_name '\u7f16\u8f91\u4ea7\u54c1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 139, role_id 26, resource_id 22, permission_id 11, and name '\u5217\u8868\u4ea7\u54c1'. */\nINSERT INTO `qt_permission` VALUES (139,26,22,11,'\u5217\u8868\u4ea7\u54c1')", "description": "Inserts a new row into the qt_permission table with the id 139, role_id 26, resource_id 22, permission_id 11, and name '\u5217\u8868\u4ea7\u54c1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 140, role_id 26, resource_id 22, privilege_id 29, and name '\u4e0a\u4f20\u4ea7\u54c1LOGO'. */\nINSERT INTO `qt_permission` VALUES (140,26,22,29,'\u4e0a\u4f20\u4ea7\u54c1LOGO')", "description": "Inserts a new row into the qt_permission table with the id 140, role_id 26, resource_id 22, privilege_id 29, and name '\u4e0a\u4f20\u4ea7\u54c1LOGO'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 140, role_id 26, resource_id 22, privilege_id 29, and name '\u4e0a\u4f20\u4ea7\u54c1LOGO'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 140\n  \u2022 role_id: 26\n  \u2022 resource_id: 22\n  \u2022 privilege_id: 29\n  \u2022 name: '\u4e0a\u4f20\u4ea7\u54c1LOGO'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, resource_id, privilege_id, name)\nVALUES (140, 26, 22, 29, '\u4e0a\u4f20\u4ea7\u54c1LOGO');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 146, role_id 27, permission_id 23, and level 10. */\nINSERT INTO `qt_permission` VALUES (146,27,23,10,'\u7ba1\u7406\u56e2\u961f\u6210\u5458\u7b5b\u9009')", "description": "Inserts a new row into the qt_permission table with the id 146, role_id 27, permission_id 23, and level 10.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 146, role_id 27, permission_id 23, and level 10.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the id 146, role_id 27, permission_id 23, and level 10.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, permission_id, level)\nVALUES (146, 27, 23, 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 147, role_id 27, resource_id 23, permission_id 29, and name '\u7ba1\u7406\u56e2\u961f\u6210\u5458\u5934\u50cf\u4e0a\u4f20'. */\nINSERT INTO `qt_permission` VALUES (147,27,23,29,'\u7ba1\u7406\u56e2\u961f\u6210\u5458\u5934\u50cf\u4e0a\u4f20')", "description": "Inserts a new row into the qt_permission table with the id 147, role_id 27, resource_id 23, permission_id 29, and name '\u7ba1\u7406\u56e2\u961f\u6210\u5458\u5934\u50cf\u4e0a\u4f20'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 147, role_id 27, resource_id 23, permission_id 29, and name '\u7ba1\u7406\u56e2\u961f\u6210\u5458\u5934\u50cf\u4e0a\u4f20'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 147\n  \u2022 role_id: 27\n  \u2022 resource_id: 23\n  \u2022 permission_id: 29\n  \u2022 name: '\u7ba1\u7406\u56e2\u961f\u6210\u5458\u5934\u50cf\u4e0a\u4f20'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, resource_id, permission_id, name)\nVALUES (147, 27, 23, 29, '\u7ba1\u7406\u56e2\u961f\u6210\u5458\u5934\u50cf\u4e0a\u4f20');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 152, role_id 28, menu_id 24, permission_id 6, and name '\u5220\u9664\u804c\u52a1'. */\nINSERT INTO `qt_permission` VALUES (152,28,24,6,'\u5220\u9664\u804c\u52a1')", "description": "Inserts a new row into the qt_permission table with the id 152, role_id 28, menu_id 24, permission_id 6, and name '\u5220\u9664\u804c\u52a1'.", "concepts": ["INSERT INTO", "VALUES", "qt_permission", "152", "28", "24", "6", "\u5220\u9664\u804c\u52a1"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 152, role_id 28, menu_id 24, permission_id 6, and name '\u5220\u9664\u804c\u52a1'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 152\n  \u2022 role_id: 28\n  \u2022 menu_id: 24\n  \u2022 permission_id: 6\n  \u2022 name: '\u5220\u9664\u804c\u52a1'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, menu_id, permission_id, name)\nVALUES (152, 28, 24, 6, '\u5220\u9664\u804c\u52a1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission WHERE id = 152;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, level, type, and name values. */\nINSERT INTO `qt_permission` VALUES (160,29,25,2,'\u5236\u5ea6\u67e5\u770b')", "description": "Inserts a new row into the qt_permission table with the id, pid, level, type, and name values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_permission table with the id, pid, name, and level values. */\nINSERT INTO `qt_permission` VALUES (162,29,25,5,'\u6dfb\u52a0\u5236\u5ea6')", "description": "Inserts a new row into the qt_permission table with the id, pid, name, and level values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id, pid, name, and level values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have an id, pid, name, and level.\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, pid, name, level)\nVALUES (1, 1, 'admin', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 165, role_id 29, menu_id 25, permission_id 8, and name '\u7f16\u8f91\u5236\u5ea6'. */\nINSERT INTO `qt_permission` VALUES (165,29,25,8,'\u7f16\u8f91\u5236\u5ea6')", "description": "Inserts a new row into the qt_permission table with the id 165, role_id 29, menu_id 25, permission_id 8, and name '\u7f16\u8f91\u5236\u5ea6'.", "concepts": ["INSERT INTO", "VALUES", "qt_permission", "165", "29", "25", "8", "\u7f16\u8f91\u5236\u5ea6"], "instruction": "Write a SQL query to insert a new row into the qt_permission table with the id 165, role_id 29, menu_id 25, permission_id 8, and name '\u7f16\u8f91\u5236\u5ea6'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_permission table. It should have the following values:\n  \u2022 id: 165\n  \u2022 role_id: 29\n  \u2022 menu_id: 25\n  \u2022 permission_id: 8\n  \u2022 name: '\u7f16\u8f91\u5236\u5ea6'\n\n-- Solution:\n```sql\nINSERT INTO qt_permission (id, role_id, menu_id, permission_id, name)\nVALUES (165, 29, 25, 8, '\u7f16\u8f91\u5236\u5ea6');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_permission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_permission WHERE id = 165;"}
{"seed": "/* Inserts a new row into the qt_permission table with the id 170, role_id 9, resource_id 8, permission_id 43, and name '\u67e5\u770b\u7528\u6237\u8be6\u7ec6'. */\nINSERT INTO `qt_permission` VALUES (170,9,8,43,'\u67e5\u770b\u7528\u6237\u8be6\u7ec6')", "description": "Inserts a new row into the qt_permission table with the id 170, role_id 9, resource_id 8, permission_id 43, and name '\u67e5\u770b\u7528\u6237\u8be6\u7ec6'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named qt_product with five columns: id (integer primary key), logo (varchar), name (varchar), introduce (text), link (varchar), and addtime (timestamp). */\nCREATE TABLE `qt_product` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `logo` varchar(255) DEFAULT NULL COMMENT 'logo\u56fe\u7247\u5730\u5740',\n  `name` varchar(255) DEFAULT NULL COMMENT '\u4ea7\u54c1\u540d\u79f0',\n  `introduce` text COMMENT '\u4ea7\u54c1\u4ecb\u7ecd',\n  `link` varchar(255) DEFAULT NULL COMMENT '\u4ea7\u54c1\u5730\u5740',\n  `addtime` timestamp NULL DEFAULT NULL COMMENT '\u4e0a\u7ebf\u65f6\u95f4',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='\u4ea7\u54c1\u8868'", "description": "Creates a table named qt_product with five columns: id (integer primary key), logo (varchar), name (varchar), introduce (text), link (varchar), and addtime (timestamp).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "TEXT", "TIMESTAMP"], "instruction": "Write a SQL query to create a table named qt_product with five columns: id (integer primary key), logo (varchar), name (varchar), introduce (text), link (varchar), and addtime (timestamp).", "response": "-- Reasoning:\nWe need a new table named qt_product. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE qt_product (\n  id INTEGER PRIMARY KEY,\n  logo VARCHAR(255),\n  name VARCHAR(255),\n  introduce TEXT,\n  link VARCHAR(255),\n  addtime TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the qt_product table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 logo: variable\u2010length string up to 255 characters\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 introduce: text\n  \u2022 link: variable\u2010length string up to 255 characters\n  \u2022 addtime: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_product');"}
{"seed": "/* Inserts a new product into the qt_product table with the given values. */\nINSERT INTO `qt_product` VALUES (2,'/Jh-oa/product/20111110221912_68.png','\u8bba\u575b','\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5<b>\u7528\u4f8b</b>','http://bbs.zjut.com','2011-11-10 22:19:13')", "description": "Inserts a new product into the qt_product table with the given values.", "concepts": ["INSERT INTO", "VALUES", "qt_product", "2011-11-10 22:19:13"], "instruction": "Write a SQL query to insert a new product into the qt_product table with the given values.", "response": "-- Reasoning:\nWe need to insert a new product into the qt_product table. It should have the following values:\n  \u2022 product_id: 100\n  \u2022 name: \"\"\n  \u2022 price: 1000000\n\n-- Solution:\n```sql\nINSERT INTO qt_product (product_id, name, price)\nVALUES (100, \"\", 1000000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_product table with the given values:\n  \u2022 product_id: 100\n  \u2022 name: \"\"\n  \u2022 price: 1000000\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_product;"}
{"seed": "/* Inserts a new row into the qt_product table with the given values. */\nINSERT INTO `qt_product` VALUES (3,'/Jh-oa/product/20111106220042_473.jpg','\u5546\u94fa','\u9001\u5f80\u8fce\u6765','http://shop.zjut.com','2011-11-06 22:00:54')", "description": "Inserts a new row into the qt_product table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_product table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_product table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_product (product_id, name, price)\nVALUES (1, 'iPhone', 649.00);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_product table with the given values:\n  \u2022 product_id: 1\n  \u2022 name: 'iPhone'\n  \u2022 price: 649.00\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_product;"}
{"seed": "/* Inserts a new row into the qt_product table with the specified values. */\nINSERT INTO `qt_product` VALUES (4,'/Jh-oa/product/20111106220113_808.jpg','\u7535\u53f0','\u7535\u53f0&nbsp;&nbsp;&nbsp;&nbsp;','http://feel.zjut.com','2011-11-06 22:01:25')", "description": "Inserts a new row into the qt_product table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_product table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_product table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO qt_product (product_id, name, price)\nVALUES (1, 'iPhone', 1000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_product table with the specified values:\n  \u2022 product_id: 1\n  \u2022 name: 'iPhone'\n  \u2022 price: 1000\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_product;"}
{"seed": "/* Creates a table named qt_resource with four columns: id (integer primary key), resourcename (varchar), resourcevalue (varchar), and active (integer). */\nCREATE TABLE `qt_resource` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `resourcename` varchar(255) DEFAULT NULL COMMENT '\u8d44\u6e90\u63cf\u8ff0',\n  `resourcevalue` varchar(255) DEFAULT NULL COMMENT '\u8d44\u6e90\u503c',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8 COMMENT='\u8d44\u6e90\u8868'", "description": "Creates a table named qt_resource with four columns: id (integer primary key), resourcename (varchar), resourcevalue (varchar), and active (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named qt_resource with four columns: id (integer primary key), resourcename (varchar), resourcevalue (varchar), and active (integer).", "response": "-- Reasoning:\nWe need a new table named qt_resource. It should have an integer primary key so that each resource has a unique identifier, and a name column to store the resource\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE qt_resource (\n  id INTEGER PRIMARY KEY,\n  resourcename VARCHAR(255),\n  resourcevalue VARCHAR(255),\n  active INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the qt_resource table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 resourcename: variable\u2010length string up to 255 characters\n  \u2022 resourcevalue: variable\u2010length string up to 255 characters\n  \u2022 active: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_resource');"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 3, name '\u83dc\u5355\u8d44\u6e90', and type 'menu'. */\nINSERT INTO `qt_resource` VALUES (3,'\u83dc\u5355\u8d44\u6e90','menu')", "description": "Inserts a new row into the qt_resource table with the id 3, name '\u83dc\u5355\u8d44\u6e90', and type 'menu'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with the id 3, name '\u83dc\u5355\u8d44\u6e90', and type 'menu'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 3, a name of '\u83dc\u5355\u8d44\u6e90', and a type of 'menu'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\n  VALUES (3, '\u83dc\u5355\u8d44\u6e90', 'menu');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 6, name '\u8d44\u6e90', and type 'resource'. */\nINSERT INTO `qt_resource` VALUES (6,'\u8d44\u6e90','resource')", "description": "Inserts a new row into the qt_resource table with the id 6, name '\u8d44\u6e90', and type 'resource'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with the id 6, name '\u8d44\u6e90', and type 'resource'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 6, a name of '\u8d44\u6e90', and a type of 'resource'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\nVALUES (6, '\u8d44\u6e90', 'resource');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 7, name '\u64cd\u4f5c\u8d44\u6e90', and type 'operator'. */\nINSERT INTO `qt_resource` VALUES (7,'\u64cd\u4f5c\u8d44\u6e90','operator')", "description": "Inserts a new row into the qt_resource table with the id 7, name '\u64cd\u4f5c\u8d44\u6e90', and type 'operator'.", "concepts": ["INSERT INTO", "VALUES", "qt_resource", "operator"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 8, name '\u7528\u6237\u8d44\u6e90', and type 'user'. */\nINSERT INTO `qt_resource` VALUES (8,'\u7528\u6237\u8d44\u6e90','user')", "description": "Inserts a new row into the qt_resource table with the id 8, name '\u7528\u6237\u8d44\u6e90', and type 'user'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_resource table with id 9, name '\u52a8\u6001\u8d44\u6e90', and type 'news'. */\nINSERT INTO `qt_resource` VALUES (9,'\u52a8\u6001\u8d44\u6e90','news')", "description": "Inserts a new row into the qt_resource table with id 9, name '\u52a8\u6001\u8d44\u6e90', and type 'news'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with id 9, name '\u52a8\u6001\u8d44\u6e90', and type 'news'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 9, a name of '\u52a8\u6001\u8d44\u6e90', and a type of 'news'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\n  VALUES (9, '\u52a8\u6001\u8d44\u6e90', 'news');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 10, name \u89d2\u8272\u8d44\u6e90, and type role. */\nINSERT INTO `qt_resource` VALUES (10,'\u89d2\u8272\u8d44\u6e90','role')", "description": "Inserts a new row into the qt_resource table with the id 10, name \u89d2\u8272\u8d44\u6e90, and type role.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with the id 10, name \u89d2\u8272\u8d44\u6e90, and type role.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 10, a name of \u89d2\u8272\u8d44\u6e90, and a type of role.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\nVALUES (10, '\u89d2\u8272\u8d44\u6e90', 'role');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 11, name '\u7528\u6237\u89d2\u8272\u8d44\u6e90', and code 'userrole'. */\nINSERT INTO `qt_resource` VALUES (11,'\u7528\u6237\u89d2\u8272\u8d44\u6e90','userrole')", "description": "Inserts a new row into the qt_resource table with the id 11, name '\u7528\u6237\u89d2\u8272\u8d44\u6e90', and code 'userrole'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 12, name '\u6743\u9650\u8d44\u6e90', and type 'permission'. */\nINSERT INTO `qt_resource` VALUES (12,'\u6743\u9650\u8d44\u6e90','permission')", "description": "Inserts a new row into the qt_resource table with the id 12, name '\u6743\u9650\u8d44\u6e90', and type 'permission'.", "concepts": ["INSERT INTO", "VALUES", "qt_resource", "permission"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with the id 12, name '\u6743\u9650\u8d44\u6e90', and type 'permission'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 12, a name of '\u6743\u9650\u8d44\u6e90', and a type of 'permission'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\nVALUES (12, '\u6743\u9650\u8d44\u6e90', 'permission');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 13, name \u89d2\u8272\u6743\u9650\u8d44\u6e90, and type rolepermission. */\nINSERT INTO `qt_resource` VALUES (13,'\u89d2\u8272\u6743\u9650\u8d44\u6e90','rolepermission')", "description": "Inserts a new row into the qt_resource table with the id 13, name \u89d2\u8272\u6743\u9650\u8d44\u6e90, and type rolepermission.", "concepts": ["INSERT INTO", "VALUES", "rolepermission"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with the id 13, name \u89d2\u8272\u6743\u9650\u8d44\u6e90, and type rolepermission.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 13, a name of \u89d2\u8272\u6743\u9650\u8d44\u6e90, and a type of rolepermission.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\nVALUES (13, '\u89d2\u8272\u6743\u9650\u8d44\u6e90', 'rolepermission');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with id 14, name '\u5168\u5c40\u8d44\u6e90', and type 'global'. */\nINSERT INTO `qt_resource` VALUES (14,'\u5168\u5c40\u8d44\u6e90','global')", "description": "Inserts a new row into the qt_resource table with id 14, name '\u5168\u5c40\u8d44\u6e90', and type 'global'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with id 14, name '\u5168\u5c40\u8d44\u6e90', and type 'global'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 14, a name of '\u5168\u5c40\u8d44\u6e90', and a type of 'global'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\n  VALUES (14, '\u5168\u5c40\u8d44\u6e90', 'global');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with id 15, name '\u5b66\u9662\u8d44\u6e90', and type 'academy'. */\nINSERT INTO `qt_resource` VALUES (15,'\u5b66\u9662\u8d44\u6e90','academy')", "description": "Inserts a new row into the qt_resource table with id 15, name '\u5b66\u9662\u8d44\u6e90', and type 'academy'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with id 15, name '\u5b66\u9662\u8d44\u6e90', and type 'academy'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 15, a name of '\u5b66\u9662\u8d44\u6e90', and a type of 'academy'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\n  VALUES (15, '\u5b66\u9662\u8d44\u6e90', 'academy');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 16, name \u90e8\u95e8\u8d44\u6e90, and type department. */\nINSERT INTO `qt_resource` VALUES (16,'\u90e8\u95e8\u8d44\u6e90','department')", "description": "Inserts a new row into the qt_resource table with the id 16, name \u90e8\u95e8\u8d44\u6e90, and type department.", "concepts": ["INSERT INTO", "VALUES", "department"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with the id 16, name \u90e8\u95e8\u8d44\u6e90, and type department.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 16, a name of \u90e8\u95e8\u8d44\u6e90, and a type of department.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\nVALUES (16, '\u90e8\u95e8\u8d44\u6e90', 'department');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with id 17, name '\u8bfe\u8868\u8d44\u6e90', and type 'ke'. */\nINSERT INTO `qt_resource` VALUES (17,'\u8bfe\u8868\u8d44\u6e90','ke')", "description": "Inserts a new row into the qt_resource table with id 17, name '\u8bfe\u8868\u8d44\u6e90', and type 'ke'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with id 17, name '\u8bfe\u8868\u8d44\u6e90', and type 'ke'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 17, a name of '\u8bfe\u8868\u8d44\u6e90', and a type of 'ke'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\n  VALUES (17, '\u8bfe\u8868\u8d44\u6e90', 'ke');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with id 18, name '\u5927\u4e8b\u4ef6\u8d44\u6e90', and type 'event'. */\nINSERT INTO `qt_resource` VALUES (18,'\u5927\u4e8b\u4ef6\u8d44\u6e90','event')", "description": "Inserts a new row into the qt_resource table with id 18, name '\u5927\u4e8b\u4ef6\u8d44\u6e90', and type 'event'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with id 18, name '\u5927\u4e8b\u4ef6\u8d44\u6e90', and type 'event'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 18, a name of '\u5927\u4e8b\u4ef6\u8d44\u6e90', and a type of 'event'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\n  VALUES (18, '\u5927\u4e8b\u4ef6\u8d44\u6e90', 'event');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with id 19, name '\u6587\u4ef6\u8d44\u6e90', and type 'ffile'. */\nINSERT INTO `qt_resource` VALUES (19,'\u6587\u4ef6\u8d44\u6e90','ffile')", "description": "Inserts a new row into the qt_resource table with id 19, name '\u6587\u4ef6\u8d44\u6e90', and type 'ffile'.", "concepts": ["INSERT INTO", "VALUES", "qt_resource", "ffile"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with id 19, name '\u6587\u4ef6\u8d44\u6e90', and type 'ffile'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 19, a name of '\u6587\u4ef6\u8d44\u6e90', and a type of 'ffile'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\n  VALUES (19, '\u6587\u4ef6\u8d44\u6e90', 'ffile');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 20, name '\u8bc4\u8bba\u8d44\u6e90', and type 'comment'. */\nINSERT INTO `qt_resource` VALUES (20,'\u8bc4\u8bba\u8d44\u6e90','comment')", "description": "Inserts a new row into the qt_resource table with the id 20, name '\u8bc4\u8bba\u8d44\u6e90', and type 'comment'.", "concepts": ["INSERT INTO", "VALUES", "`qt_resource`", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 21, name '\u53cd\u9988\u8d44\u6e90', and type 'suggest'. */\nINSERT INTO `qt_resource` VALUES (21,'\u53cd\u9988\u8d44\u6e90','suggest')", "description": "Inserts a new row into the qt_resource table with the id 21, name '\u53cd\u9988\u8d44\u6e90', and type 'suggest'.", "concepts": ["INSERT INTO", "VALUES", "qt_resource", "suggest"], "instruction": "Write a SQL query to insert a new row into the qt_resource table with the id 21, name '\u53cd\u9988\u8d44\u6e90', and type 'suggest'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_resource table. It should have an id of 21, a name of '\u53cd\u9988\u8d44\u6e90', and a type of 'suggest'.\n\n-- Solution:\n```sql\nINSERT INTO qt_resource (id, name, type)\nVALUES (21, '\u53cd\u9988\u8d44\u6e90', 'suggest');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_resource table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_resource;"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 22, name '\u4ea7\u54c1\u8d44\u6e90', and type 'product'. */\nINSERT INTO `qt_resource` VALUES (22,'\u4ea7\u54c1\u8d44\u6e90','product')", "description": "Inserts a new row into the qt_resource table with the id 22, name '\u4ea7\u54c1\u8d44\u6e90', and type 'product'.", "concepts": ["INSERT INTO", "VALUES", "product"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 23, name '\u7ba1\u7406\u56e2\u961f\u6210\u5458\u8d44\u6e90', and type 'team'. */\nINSERT INTO `qt_resource` VALUES (23,'\u7ba1\u7406\u56e2\u961f\u6210\u5458\u8d44\u6e90','team')", "description": "Inserts a new row into the qt_resource table with the id 23, name '\u7ba1\u7406\u56e2\u961f\u6210\u5458\u8d44\u6e90', and type 'team'.", "concepts": ["INSERT INTO", "VALUES", "team"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 24, name '\u804c\u52a1\u8d44\u6e90', and type 'job'. */\nINSERT INTO `qt_resource` VALUES (24,'\u804c\u52a1\u8d44\u6e90','job')", "description": "Inserts a new row into the qt_resource table with the id 24, name '\u804c\u52a1\u8d44\u6e90', and type 'job'.", "concepts": ["INSERT INTO", "VALUES", "job"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_resource table with the id 25, name '\u5236\u5ea6\u8d44\u6e90', and type 'officerule'. */\nINSERT INTO `qt_resource` VALUES (25,'\u5236\u5ea6\u8d44\u6e90','officerule')", "description": "Inserts a new row into the qt_resource table with the id 25, name '\u5236\u5ea6\u8d44\u6e90', and type 'officerule'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named qt_role with three columns: id (integer primary key), rolename (varchar) and active (boolean). */\nCREATE TABLE `qt_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `rolename` varchar(255) DEFAULT NULL COMMENT '\u89d2\u8272\u540d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='\u89d2\u8272\u8868'", "description": "Creates a table named qt_role with three columns: id (integer primary key), rolename (varchar) and active (boolean).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "ENGINE", "DEFAULT", "COMMENT", "VARCHAR", "INT", "NOT NULL", "DEFAULT", "CHARSET", "TABLE"], "instruction": "Write a SQL query to create a table named qt_role with three columns: id (integer primary key), rolename (varchar) and active (boolean).", "response": "-- Reasoning:\nWe need a new table named qt_role. It should have an integer primary key so that each role has a unique identifier, a rolename column to store the role\u2019s name as text, and an active column to indicate whether the role is active or not.\n\n-- Solution:\n```sql\nCREATE TABLE qt_role (\n  id INTEGER PRIMARY KEY,\n  rolename VARCHAR(255),\n  active BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the qt_role table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 rolename: variable\u2010length string up to 255 characters\n  \u2022 active: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_role');"}
{"seed": "/* Inserts a new row into the qt_role table with the id 1 and name '\u8d85\u7ea7\u7ba1\u7406\u5458'. */\nINSERT INTO `qt_role` VALUES (1,'\u8d85\u7ea7\u7ba1\u7406\u5458')", "description": "Inserts a new row into the qt_role table with the id 1 and name '\u8d85\u7ea7\u7ba1\u7406\u5458'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_role table with the id 1 and name '\u8d85\u7ea7\u7ba1\u7406\u5458'.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_role table with the id 1 and name '\u8d85\u7ea7\u7ba1\u7406\u5458'.\n\n-- Solution:\n```sql\nINSERT INTO qt_role (id, name) VALUES (1, '\u8d85\u7ea7\u7ba1\u7406\u5458');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_role table with the id 1 and name '\u8d85\u7ea7\u7ba1\u7406\u5458'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_role;"}
{"seed": "/* Inserts a new row into the qt_role table with the id 6 and the name \u90e8\u5458. */\nINSERT INTO `qt_role` VALUES (6,'\u90e8\u5458')", "description": "Inserts a new row into the qt_role table with the id 6 and the name \u90e8\u5458.", "concepts": ["INSERT INTO", "VALUES", "qt_role", "\u90e8\u5458"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_role table with the id 7 and the name \u90e8\u957f. */\nINSERT INTO `qt_role` VALUES (7,'\u90e8\u957f')", "description": "Inserts a new row into the qt_role table with the id 7 and the name \u90e8\u957f.", "concepts": ["INSERT INTO", "VALUES", "qt_role", "\u90e8\u957f"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_role table with the id 8 and the name \u4e3b\u5e2d\u56e2. */\nINSERT INTO `qt_role` VALUES (8,'\u4e3b\u5e2d\u56e2')", "description": "Inserts a new row into the qt_role table with the id 8 and the name \u4e3b\u5e2d\u56e2.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_role table with the id 8 and the name \u4e3b\u5e2d\u56e2.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_role table with the id 8 and the name \u4e3b\u5e2d\u56e2.\n\n-- Solution:\n```sql\nINSERT INTO qt_role (id, name) VALUES (8, '\u4e3b\u5e2d\u56e2');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_role table with the id 8 and the name \u4e3b\u5e2d\u56e2.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_role;"}
{"seed": "/* Creates a table named qt_rolepermission with three columns: id (integer primary key), roleID (integer), and permissionID (integer). */\nCREATE TABLE `qt_rolepermission` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `roleID` int(11) DEFAULT NULL COMMENT '\u89d2\u8272ID',\n  `permissionID` int(11) DEFAULT NULL COMMENT '\u6743\u9650ID',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5590 DEFAULT CHARSET=utf8 COMMENT='\u89d2\u8272\u6743\u9650\u5bf9\u5e94\u8868'", "description": "Creates a table named qt_rolepermission with three columns: id (integer primary key), roleID (integer), and permissionID (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "KEY", "TABLE", "WITH"], "instruction": "Write a SQL query to create a table named qt_rolepermission with three columns: id (integer primary key), roleID (integer), and permissionID (integer).", "response": "-- Reasoning:\nWe need a new table named qt_rolepermission. It should have an integer primary key so that each row has a unique identifier, and two foreign keys to reference the role and permission tables.\n\n-- Solution:\n```sql\nCREATE TABLE qt_rolepermission (\n  id INTEGER PRIMARY KEY,\n  roleID INTEGER,\n  permissionID INTEGER,\n  FOREIGN KEY (roleID) REFERENCES qt_role(id),\n  FOREIGN KEY (permissionID) REFERENCES qt_permission(id)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_rolepermission table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 roleID: integer, foreign key to qt_role(id)\n  \u2022 permissionID: integer, foreign key to qt_permission(id)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_rolepermission');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4461, 6, and 102. */\nINSERT INTO `qt_rolepermission` VALUES (4461,6,102)", "description": "Inserts a new row into the qt_rolepermission table with the values 4461, 6, and 102.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4461, 6, and 102.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4461, 6, and 102.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4461, 6, 102);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4461, 6, and 102.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4462, 6, and 105. */\nINSERT INTO `qt_rolepermission` VALUES (4462,6,105)", "description": "Inserts a new row into the qt_rolepermission table with the values 4462, 6, and 105.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4462, 6, and 105.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4462, 6, and 105.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4462, 6, 105);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4462, 6, and 105.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4463, 6, and 111. */\nINSERT INTO `qt_rolepermission` VALUES (4463,6,111)", "description": "Inserts a new row into the qt_rolepermission table with the values 4463, 6, and 111.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4463, 6, and 111.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4463, 6, and 111.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4463, 6, 111);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4463, 6, and 111.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4464, 6, and 112. */\nINSERT INTO `qt_rolepermission` VALUES (4464,6,112)", "description": "Inserts a new row into the qt_rolepermission table with the values 4464, 6, and 112.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4464, 6, and 112.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4464, 6, and 112.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4464, 6, 112);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4464, 6, and 112.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4465, 6, and 113. */\nINSERT INTO `qt_rolepermission` VALUES (4465,6,113)", "description": "Inserts a new row into the qt_rolepermission table with the values 4465, 6, and 113.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4465, 6, and 113.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4465, 6, and 113.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4465, 6, 113);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4465, 6, and 113.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4466, 6, and 114. */\nINSERT INTO `qt_rolepermission` VALUES (4466,6,114)", "description": "Inserts a new row into the qt_rolepermission table with the values 4466, 6, and 114.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4466, 6, and 114.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4466, 6, and 114.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4466, 6, 114);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4466, 6, and 114.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4467, 6, and 117. */\nINSERT INTO `qt_rolepermission` VALUES (4467,6,117)", "description": "Inserts a new row into the qt_rolepermission table with the values 4467, 6, and 117.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4467, 6, and 117.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4467, 6, and 117.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4467, 6, 117);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4467, 6, and 117.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4468, 6, and 118. */\nINSERT INTO `qt_rolepermission` VALUES (4468,6,118)", "description": "Inserts a new row into the qt_rolepermission table with the values 4468, 6, and 118.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4468, 6, and 118.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4468, 6, and 118.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4468, 6, 118);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4468, 6, and 118.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4469, 6, and 122. */\nINSERT INTO `qt_rolepermission` VALUES (4469,6,122)", "description": "Inserts a new row into the qt_rolepermission table with the values 4469, 6, and 122.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4469, 6, and 122.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4469, 6, and 122.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4469, 6, 122);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4469, 6, and 122.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the id 4470, role_id 6, and permission_id 123. */\nINSERT INTO `qt_rolepermission` VALUES (4470,6,123)", "description": "Inserts a new row into the qt_rolepermission table with the id 4470, role_id 6, and permission_id 123.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the id 4470, role_id 6, and permission_id 123.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have an id of 4470, a role_id of 6, and a permission_id of 123.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (id, role_id, permission_id)\nVALUES (4470, 6, 123);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4471, 6, and 125. */\nINSERT INTO `qt_rolepermission` VALUES (4471,6,125)", "description": "Inserts a new row into the qt_rolepermission table with the values 4471, 6, and 125.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4471, 6, and 125.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4471, 6, and 125.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4471, 6, 125);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4471, 6, and 125.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4472, 6, and 126. */\nINSERT INTO `qt_rolepermission` VALUES (4472,6,126)", "description": "Inserts a new row into the qt_rolepermission table with the values 4472, 6, and 126.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4472, 6, and 126.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4472, 6, and 126.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4472, 6, 126);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4472, 6, and 126.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4473, 6, and 130. */\nINSERT INTO `qt_rolepermission` VALUES (4473,6,130)", "description": "Inserts a new row into the qt_rolepermission table with the values 4473, 6, and 130.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4473, 6, and 130.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4473, 6, and 130.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4473, 6, 130);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4473, 6, and 130.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4474, 6, and 131. */\nINSERT INTO `qt_rolepermission` VALUES (4474,6,131)", "description": "Inserts a new row into the qt_rolepermission table with the values 4474, 6, and 131.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4474, 6, and 131.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4474, 6, and 131.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4474, 6, 131);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4474, 6, and 131.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4475, 6, and 132. */\nINSERT INTO `qt_rolepermission` VALUES (4475,6,132)", "description": "Inserts a new row into the qt_rolepermission table with the values 4475, 6, and 132.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4475, 6, and 132.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 4475, 6, and 132.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4475, 6, 132);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4475, 6, and 132.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4476, 6, and 148. */\nINSERT INTO `qt_rolepermission` VALUES (4476,6,148)", "description": "Inserts a new row into the qt_rolepermission table with the values 4476, 6, and 148.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4476, 6, and 148.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4476, 6, and 148.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4476, 6, 148);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4476, 6, and 148.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4477, 6, and 149. */\nINSERT INTO `qt_rolepermission` VALUES (4477,6,149)", "description": "Inserts a new row into the qt_rolepermission table with the values 4477, 6, and 149.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4477, 6, and 149.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4477, 6, and 149.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4477, 6, 149);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4477, 6, and 149.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4478, 6, and 160. */\nINSERT INTO `qt_rolepermission` VALUES (4478,6,160)", "description": "Inserts a new row into the qt_rolepermission table with the values 4478, 6, and 160.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4478, 6, and 160.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 4478, 6, and 160.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4478, 6, 160);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4478, 6, and 160.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4479, 6, and 62. */\nINSERT INTO `qt_rolepermission` VALUES (4479,6,62)", "description": "Inserts a new row into the qt_rolepermission table with the values 4479, 6, and 62.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4479, 6, and 62.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4479, 6, and 62.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4479, 6, 62);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4479, 6, and 62.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4480, 6, and 63. */\nINSERT INTO `qt_rolepermission` VALUES (4480,6,63)", "description": "Inserts a new row into the qt_rolepermission table with the values 4480, 6, and 63.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4480, 6, and 63.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4480, 6, and 63.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4480, 6, 63);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4480, 6, and 63.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4481, 6, and 64. */\nINSERT INTO `qt_rolepermission` VALUES (4481,6,64)", "description": "Inserts a new row into the qt_rolepermission table with the values 4481, 6, and 64.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4481, 6, and 64.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4481, 6, and 64.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4481, 6, 64);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4481, 6, and 64.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4482, 6, and 78. */\nINSERT INTO `qt_rolepermission` VALUES (4482,6,78)", "description": "Inserts a new row into the qt_rolepermission table with the values 4482, 6, and 78.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4482, 6, and 78.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4482, 6, and 78.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4482, 6, 78);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4482, 6, and 78.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4483, 6, and 79. */\nINSERT INTO `qt_rolepermission` VALUES (4483,6,79)", "description": "Inserts a new row into the qt_rolepermission table with the values 4483, 6, and 79.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4483, 6, and 79.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4483, 6, and 79.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4483, 6, 79);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4483, 6, and 79.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4484, 6, and 80. */\nINSERT INTO `qt_rolepermission` VALUES (4484,6,80)", "description": "Inserts a new row into the qt_rolepermission table with the values 4484, 6, and 80.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4484, 6, and 80.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4484, 6, and 80.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4484, 6, 80);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4484, 6, and 80.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4485, 6, and 82. */\nINSERT INTO `qt_rolepermission` VALUES (4485,6,82)", "description": "Inserts a new row into the qt_rolepermission table with the values 4485, 6, and 82.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4485, 6, and 82.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4485, 6, and 82.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4485, 6, 82);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4485, 6, and 82.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4486, 6, and 83. */\nINSERT INTO `qt_rolepermission` VALUES (4486,6,83)", "description": "Inserts a new row into the qt_rolepermission table with the values 4486, 6, and 83.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4486, 6, and 83.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4486, 6, and 83.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4486, 6, 83);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4486, 6, and 83.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4487, 6, and 84. */\nINSERT INTO `qt_rolepermission` VALUES (4487,6,84)", "description": "Inserts a new row into the qt_rolepermission table with the values 4487, 6, and 84.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4487, 6, and 84.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4487, 6, and 84.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4487, 6, 84);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4487, 6, and 84.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4488, 6, and 85. */\nINSERT INTO `qt_rolepermission` VALUES (4488,6,85)", "description": "Inserts a new row into the qt_rolepermission table with the values 4488, 6, and 85.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4488, 6, and 85.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 4488, 6, and 85.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4488, 6, 85);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4488, 6, and 85.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 4489, 6, and 86. */\nINSERT INTO `qt_rolepermission` VALUES (4489,6,86)", "description": "Inserts a new row into the qt_rolepermission table with the values 4489, 6, and 86.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 4489, 6, and 86.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 4489, 6, and 86.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (4489, 6, 86);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 4489, 6, and 86.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5431, 1, and 10. */\nINSERT INTO `qt_rolepermission` VALUES (5431,1,10)", "description": "Inserts a new row into the qt_rolepermission table with the values 5431, 1, and 10.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5431, 1, and 10.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5431, 1, and 10.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5431, 1, 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5431, 1, and 10.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5432, 1, and 100. */\nINSERT INTO `qt_rolepermission` VALUES (5432,1,100)", "description": "Inserts a new row into the qt_rolepermission table with the values 5432, 1, and 100.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5433, 1, and 101. */\nINSERT INTO `qt_rolepermission` VALUES (5433,1,101)", "description": "Inserts a new row into the qt_rolepermission table with the values 5433, 1, and 101.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5433, 1, and 101.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5433, 1, and 101.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5433, 1, 101);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5433, 1, and 101.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5434, 1, and 102. */\nINSERT INTO `qt_rolepermission` VALUES (5434,1,102)", "description": "Inserts a new row into the qt_rolepermission table with the values 5434, 1, and 102.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5434, 1, and 102.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5434, 1, and 102.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5434, 1, 102);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5434, 1, and 102.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5435, 1, and 103. */\nINSERT INTO `qt_rolepermission` VALUES (5435,1,103)", "description": "Inserts a new row into the qt_rolepermission table with the values 5435, 1, and 103.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5435, 1, and 103.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5435, 1, and 103.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5435, 1, 103);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5435, 1, and 103.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5436, 1, and 104. */\nINSERT INTO `qt_rolepermission` VALUES (5436,1,104)", "description": "Inserts a new row into the qt_rolepermission table with the values 5436, 1, and 104.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5436, 1, and 104.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5436, 1, and 104.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5436, 1, 104);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5436, 1, and 104.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5437, 1, and 105. */\nINSERT INTO `qt_rolepermission` VALUES (5437,1,105)", "description": "Inserts a new row into the qt_rolepermission table with the values 5437, 1, and 105.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5437, 1, and 105.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5437, 1, and 105.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5437, 1, 105);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5437, 1, and 105.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5438, 1, and 11. */\nINSERT INTO `qt_rolepermission` VALUES (5438,1,11)", "description": "Inserts a new row into the qt_rolepermission table with the values 5438, 1, and 11.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5438, 1, and 11.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5438, 1, and 11.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5438, 1, 11);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5438, 1, and 11.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5439, 1, and 110. */\nINSERT INTO `qt_rolepermission` VALUES (5439,1,110)", "description": "Inserts a new row into the qt_rolepermission table with the values 5439, 1, and 110.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5439, 1, and 110.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5439, 1, and 110.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5439, 1, 110);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5439, 1, and 110.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5440, 1, and 111. */\nINSERT INTO `qt_rolepermission` VALUES (5440,1,111)", "description": "Inserts a new row into the qt_rolepermission table with the values 5440, 1, and 111.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5440, 1, and 111.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5440, 1, and 111.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5440, 1, 111);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5440, 1, and 111.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5441, 1, and 112. */\nINSERT INTO `qt_rolepermission` VALUES (5441,1,112)", "description": "Inserts a new row into the qt_rolepermission table with the values 5441, 1, and 112.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5441, 1, and 112.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5441, 1, and 112.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5441, 1, 112);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5441, 1, and 112.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5442, 1, and 113. */\nINSERT INTO `qt_rolepermission` VALUES (5442,1,113)", "description": "Inserts a new row into the qt_rolepermission table with the values 5442, 1, and 113.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5442, 1, and 113.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5442, 1, and 113.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5442, 1, 113);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5442, 1, and 113.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5443, 1, and 114. */\nINSERT INTO `qt_rolepermission` VALUES (5443,1,114)", "description": "Inserts a new row into the qt_rolepermission table with the values 5443, 1, and 114.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5443, 1, and 114.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5443, 1, and 114.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5443, 1, 114);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5443, 1, and 114.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5444, 1, and 115. */\nINSERT INTO `qt_rolepermission` VALUES (5444,1,115)", "description": "Inserts a new row into the qt_rolepermission table with the values 5444, 1, and 115.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5444, 1, and 115.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5444, 1, and 115.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5444, 1, 115);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5444, 1, and 115.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5445, 1, and 116. */\nINSERT INTO `qt_rolepermission` VALUES (5445,1,116)", "description": "Inserts a new row into the qt_rolepermission table with the values 5445, 1, and 116.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5445, 1, and 116.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5445, 1, and 116.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5445, 1, 116);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5445, 1, and 116.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5446, 1, and 117. */\nINSERT INTO `qt_rolepermission` VALUES (5446,1,117)", "description": "Inserts a new row into the qt_rolepermission table with the values 5446, 1, and 117.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5446, 1, and 117.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5446, 1, and 117.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5446, 1, 117);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5446, 1, and 117.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5447, 1, and 118. */\nINSERT INTO `qt_rolepermission` VALUES (5447,1,118)", "description": "Inserts a new row into the qt_rolepermission table with the values 5447, 1, and 118.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5447, 1, and 118.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5447, 1, and 118.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5447, 1, 118);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5447, 1, and 118.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5448, 1, and 12. */\nINSERT INTO `qt_rolepermission` VALUES (5448,1,12)", "description": "Inserts a new row into the qt_rolepermission table with the values 5448, 1, and 12.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5448, 1, and 12.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5448, 1, and 12.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5448, 1, 12);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5448, 1, and 12.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5449, 1, and 122. */\nINSERT INTO `qt_rolepermission` VALUES (5449,1,122)", "description": "Inserts a new row into the qt_rolepermission table with the values 5449, 1, and 122.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5449, 1, and 122.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5449, 1, and 122.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5449, 1, 122);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5449, 1, and 122.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5450, 1, and 123. */\nINSERT INTO `qt_rolepermission` VALUES (5450,1,123)", "description": "Inserts a new row into the qt_rolepermission table with the values 5450, 1, and 123.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5450, 1, and 123.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5450, 1, and 123.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5450, 1, 123);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5450, 1, and 123.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5451, 1, and 124. */\nINSERT INTO `qt_rolepermission` VALUES (5451,1,124)", "description": "Inserts a new row into the qt_rolepermission table with the values 5451, 1, and 124.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5451, 1, and 124.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5451, 1, and 124.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5451, 1, 124);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5451, 1, and 124.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5452, 1, and 125. */\nINSERT INTO `qt_rolepermission` VALUES (5452,1,125)", "description": "Inserts a new row into the qt_rolepermission table with the values 5452, 1, and 125.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5452, 1, and 125.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5452, 1, and 125.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5452, 1, 125);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5452, 1, and 125.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5453, 1, and 126. */\nINSERT INTO `qt_rolepermission` VALUES (5453,1,126)", "description": "Inserts a new row into the qt_rolepermission table with the values 5453, 1, and 126.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5453, 1, and 126.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5453, 1, and 126.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5453, 1, 126);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5453, 1, and 126.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5454, 1, and 127. */\nINSERT INTO `qt_rolepermission` VALUES (5454,1,127)", "description": "Inserts a new row into the qt_rolepermission table with the values 5454, 1, and 127.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5454, 1, and 127.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5454, 1, and 127.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5454, 1, 127);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5454, 1, and 127.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5455, 1, and 128. */\nINSERT INTO `qt_rolepermission` VALUES (5455,1,128)", "description": "Inserts a new row into the qt_rolepermission table with the values 5455, 1, and 128.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5455, 1, and 128.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5455, 1, and 128.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5455, 1, 128);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5455, 1, and 128.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5456, 1, and 129. */\nINSERT INTO `qt_rolepermission` VALUES (5456,1,129)", "description": "Inserts a new row into the qt_rolepermission table with the values 5456, 1, and 129.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5456, 1, and 129.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5456, 1, and 129.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, qt_rolepermission_id)\nVALUES (5456, 1, 129);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5456, 1, and 129.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5457, 1, and 13. */\nINSERT INTO `qt_rolepermission` VALUES (5457,1,13)", "description": "Inserts a new row into the qt_rolepermission table with the values 5457, 1, and 13.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5457, 1, and 13.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5457, 1, and 13.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5457, 1, 13);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5457, 1, and 13.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5458, 1, and 130. */\nINSERT INTO `qt_rolepermission` VALUES (5458,1,130)", "description": "Inserts a new row into the qt_rolepermission table with the values 5458, 1, and 130.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5458, 1, and 130.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5458, 1, and 130.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5458, 1, 130);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5458, 1, and 130.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5459, 1, and 131. */\nINSERT INTO `qt_rolepermission` VALUES (5459,1,131)", "description": "Inserts a new row into the qt_rolepermission table with the values 5459, 1, and 131.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5459, 1, and 131.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5459, 1, and 131.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5459, 1, 131);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5459, 1, and 131.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5460, 1, and 132. */\nINSERT INTO `qt_rolepermission` VALUES (5460,1,132)", "description": "Inserts a new row into the qt_rolepermission table with the values 5460, 1, and 132.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5460, 1, and 132.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5460, 1, and 132.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5460, 1, 132);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5460, 1, and 132.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5461, 1, and 133. */\nINSERT INTO `qt_rolepermission` VALUES (5461,1,133)", "description": "Inserts a new row into the qt_rolepermission table with the values 5461, 1, and 133.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5461, 1, and 133.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5461, 1, and 133.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5461, 1, 133);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5461, 1, and 133.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5462, 1, and 134. */\nINSERT INTO `qt_rolepermission` VALUES (5462,1,134)", "description": "Inserts a new row into the qt_rolepermission table with the values 5462, 1, and 134.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5462, 1, and 134.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5462, 1, and 134.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5462, 1, 134);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5462, 1, and 134.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5463, 1, and 135. */\nINSERT INTO `qt_rolepermission` VALUES (5463,1,135)", "description": "Inserts a new row into the qt_rolepermission table with the values 5463, 1, and 135.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5463, 1, and 135.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5463, 1, and 135.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5463, 1, 135);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5463, 1, and 135.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5464, 1, and 136. */\nINSERT INTO `qt_rolepermission` VALUES (5464,1,136)", "description": "Inserts a new row into the qt_rolepermission table with the values 5464, 1, and 136.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5464, 1, and 136.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5464, 1, and 136.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5464, 1, 136);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5464, 1, and 136.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5465, 1, and 137. */\nINSERT INTO `qt_rolepermission` VALUES (5465,1,137)", "description": "Inserts a new row into the qt_rolepermission table with the values 5465, 1, and 137.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5465, 1, and 137.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5465, 1, and 137.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5465, 1, 137);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5465, 1, and 137.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5466, 1, and 138. */\nINSERT INTO `qt_rolepermission` VALUES (5466,1,138)", "description": "Inserts a new row into the qt_rolepermission table with the values 5466, 1, and 138.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5466, 1, and 138.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5466, 1, and 138.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5466, 1, 138);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5466, 1, and 138.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5467, 1, and 139. */\nINSERT INTO `qt_rolepermission` VALUES (5467,1,139)", "description": "Inserts a new row into the qt_rolepermission table with the values 5467, 1, and 139.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5467, 1, and 139.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5467, 1, and 139.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5467, 1, 139);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5467, 1, and 139.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5468, 1, and 14. */\nINSERT INTO `qt_rolepermission` VALUES (5468,1,14)", "description": "Inserts a new row into the qt_rolepermission table with the values 5468, 1, and 14.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5468, 1, and 14.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5468, 1, and 14.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_by)\nVALUES (5468, 1, 14);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5468, 1, and 14.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5469, 1, and 140. */\nINSERT INTO `qt_rolepermission` VALUES (5469,1,140)", "description": "Inserts a new row into the qt_rolepermission table with the values 5469, 1, and 140.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5469, 1, and 140.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5469, 1, and 140.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5469, 1, 140);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5469, 1, and 140.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5470, 1, and 141. */\nINSERT INTO `qt_rolepermission` VALUES (5470,1,141)", "description": "Inserts a new row into the qt_rolepermission table with the values 5470, 1, and 141.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5470, 1, and 141.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5470, 1, and 141.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5470, 1, 141);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5470, 1, and 141.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5471, 1, and 142. */\nINSERT INTO `qt_rolepermission` VALUES (5471,1,142)", "description": "Inserts a new row into the qt_rolepermission table with the values 5471, 1, and 142.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5471, 1, and 142.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5471, 1, and 142.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5471, 1, 142);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5471, 1, and 142.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5472, 1, and 143. */\nINSERT INTO `qt_rolepermission` VALUES (5472,1,143)", "description": "Inserts a new row into the qt_rolepermission table with the values 5472, 1, and 143.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5472, 1, and 143.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5472, 1, and 143.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5472, 1, 143);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5472, 1, and 143.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5473, 1, and 144. */\nINSERT INTO `qt_rolepermission` VALUES (5473,1,144)", "description": "Inserts a new row into the qt_rolepermission table with the values 5473, 1, and 144.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5473, 1, and 144.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5473, 1, and 144.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5473, 1, 144);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5473, 1, and 144.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5474, 1, and 145. */\nINSERT INTO `qt_rolepermission` VALUES (5474,1,145)", "description": "Inserts a new row into the qt_rolepermission table with the values 5474, 1, and 145.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5474, 1, and 145.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5474, 1, and 145.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5474, 1, 145);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5474, 1, and 145.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5475, 1, and 146. */\nINSERT INTO `qt_rolepermission` VALUES (5475,1,146)", "description": "Inserts a new row into the qt_rolepermission table with the values 5475, 1, and 146.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5475, 1, and 146.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5475, 1, and 146.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5475, 1, 146);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5475, 1, and 146.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5476, 1, and 147. */\nINSERT INTO `qt_rolepermission` VALUES (5476,1,147)", "description": "Inserts a new row into the qt_rolepermission table with the values 5476, 1, and 147.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5476, 1, and 147.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5476, 1, and 147.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5476, 1, 147);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5476, 1, and 147.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5477, 1, and 148. */\nINSERT INTO `qt_rolepermission` VALUES (5477,1,148)", "description": "Inserts a new row into the qt_rolepermission table with the values 5477, 1, and 148.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5477, 1, and 148.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5477, 1, and 148.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5477, 1, 148);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5477, 1, and 148.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5478, 1, and 149. */\nINSERT INTO `qt_rolepermission` VALUES (5478,1,149)", "description": "Inserts a new row into the qt_rolepermission table with the values 5478, 1, and 149.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5478, 1, and 149.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5478, 1, and 149.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5478, 1, 149);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5478, 1, and 149.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5479, 1, and 15. */\nINSERT INTO `qt_rolepermission` VALUES (5479,1,15)", "description": "Inserts a new row into the qt_rolepermission table with the values 5479, 1, and 15.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5479, 1, and 15.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5479, 1, and 15.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5479, 1, 15);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5479, 1, and 15.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5480, 1, and 150. */\nINSERT INTO `qt_rolepermission` VALUES (5480,1,150)", "description": "Inserts a new row into the qt_rolepermission table with the values 5480, 1, and 150.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5480, 1, and 150.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5480, 1, and 150.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5480, 1, 150);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5480, 1, and 150.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5481, 1, and 151. */\nINSERT INTO `qt_rolepermission` VALUES (5481,1,151)", "description": "Inserts a new row into the qt_rolepermission table with the values 5481, 1, and 151.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5482, 1, and 152. */\nINSERT INTO `qt_rolepermission` VALUES (5482,1,152)", "description": "Inserts a new row into the qt_rolepermission table with the values 5482, 1, and 152.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5482, 1, and 152.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5482, 1, and 152.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5482, 1, 152);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5482, 1, and 152.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5483, 1, and 153. */\nINSERT INTO `qt_rolepermission` VALUES (5483,1,153)", "description": "Inserts a new row into the qt_rolepermission table with the values 5483, 1, and 153.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5483, 1, and 153.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5483, 1, and 153.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5483, 1, 153);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5483, 1, and 153.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5484, 1, and 154. */\nINSERT INTO `qt_rolepermission` VALUES (5484,1,154)", "description": "Inserts a new row into the qt_rolepermission table with the values 5484, 1, and 154.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5485, 1, and 155. */\nINSERT INTO `qt_rolepermission` VALUES (5485,1,155)", "description": "Inserts a new row into the qt_rolepermission table with the values 5485, 1, and 155.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5485, 1, and 155.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5485, 1, and 155.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5485, 1, 155);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5485, 1, and 155.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5486, 1, and 156. */\nINSERT INTO `qt_rolepermission` VALUES (5486,1,156)", "description": "Inserts a new row into the qt_rolepermission table with the values 5486, 1, and 156.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5486, 1, and 156.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5486, 1, and 156.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5486, 1, 156);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5486, 1, and 156.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5487, 1, and 157. */\nINSERT INTO `qt_rolepermission` VALUES (5487,1,157)", "description": "Inserts a new row into the qt_rolepermission table with the values 5487, 1, and 157.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5488, 1, and 158. */\nINSERT INTO `qt_rolepermission` VALUES (5488,1,158)", "description": "Inserts a new row into the qt_rolepermission table with the values 5488, 1, and 158.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5488, 1, and 158.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5488, 1, and 158.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5488, 1, 158);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5488, 1, and 158.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5489, 1, and 159. */\nINSERT INTO `qt_rolepermission` VALUES (5489,1,159)", "description": "Inserts a new row into the qt_rolepermission table with the values 5489, 1, and 159.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5489, 1, and 159.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5489, 1, and 159.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5489, 1, 159);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5489, 1, and 159.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5490, 1, and 16. */\nINSERT INTO `qt_rolepermission` VALUES (5490,1,16)", "description": "Inserts a new row into the qt_rolepermission table with the values 5490, 1, and 16.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5490, 1, and 16.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5490, 1, and 16.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5490, 1, 16);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5490, 1, and 16.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5491, 1, and 160. */\nINSERT INTO `qt_rolepermission` VALUES (5491,1,160)", "description": "Inserts a new row into the qt_rolepermission table with the values 5491, 1, and 160.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5491, 1, and 160.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5491, 1, and 160.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5491, 1, 160);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5491, 1, and 160.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5492, 1, and 161. */\nINSERT INTO `qt_rolepermission` VALUES (5492,1,161)", "description": "Inserts a new row into the qt_rolepermission table with the values 5492, 1, and 161.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5492, 1, and 161.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5492, 1, and 161.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5492, 1, 161);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5492, 1, and 161.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5493, 1, and 162. */\nINSERT INTO `qt_rolepermission` VALUES (5493,1,162)", "description": "Inserts a new row into the qt_rolepermission table with the values 5493, 1, and 162.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5493, 1, and 162.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5493, 1, and 162.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5493, 1, 162);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5493, 1, and 162.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5494, 1, and 163. */\nINSERT INTO `qt_rolepermission` VALUES (5494,1,163)", "description": "Inserts a new row into the qt_rolepermission table with the values 5494, 1, and 163.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5494, 1, and 163.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5494, 1, and 163.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5494, 1, 163);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5494, 1, and 163.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5495, 1, and 164. */\nINSERT INTO `qt_rolepermission` VALUES (5495,1,164)", "description": "Inserts a new row into the qt_rolepermission table with the values 5495, 1, and 164.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5496, 1, and 165. */\nINSERT INTO `qt_rolepermission` VALUES (5496,1,165)", "description": "Inserts a new row into the qt_rolepermission table with the values 5496, 1, and 165.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5496, 1, and 165.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5496, 1, and 165.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5496, 1, 165);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5496, 1, and 165.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5497, 1, and 166. */\nINSERT INTO `qt_rolepermission` VALUES (5497,1,166)", "description": "Inserts a new row into the qt_rolepermission table with the values 5497, 1, and 166.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5497, 1, and 166.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5497, 1, and 166.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5497, 1, 166);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5497, 1, and 166.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5498, 1, and 167. */\nINSERT INTO `qt_rolepermission` VALUES (5498,1,167)", "description": "Inserts a new row into the qt_rolepermission table with the values 5498, 1, and 167.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5498, 1, and 167.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5498, 1, and 167.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5498, 1, 167);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5498, 1, and 167.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5499, 1, and 168. */\nINSERT INTO `qt_rolepermission` VALUES (5499,1,168)", "description": "Inserts a new row into the qt_rolepermission table with the values 5499, 1, and 168.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5499, 1, and 168.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5499, 1, and 168.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5499, 1, 168);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5499, 1, and 168.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5500, 1, and 169. */\nINSERT INTO `qt_rolepermission` VALUES (5500,1,169)", "description": "Inserts a new row into the qt_rolepermission table with the values 5500, 1, and 169.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5500, 1, and 169.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5500, 1, and 169.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5500, 1, 169);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5500, 1, and 169.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5501, 1, and 17. */\nINSERT INTO `qt_rolepermission` VALUES (5501,1,17)", "description": "Inserts a new row into the qt_rolepermission table with the values 5501, 1, and 17.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5501, 1, and 17.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5501, 1, and 17.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5501, 1, 17);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5501, 1, and 17.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5502, 1, and 170. */\nINSERT INTO `qt_rolepermission` VALUES (5502,1,170)", "description": "Inserts a new row into the qt_rolepermission table with the values 5502, 1, and 170.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5502, 1, and 170.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5502, 1, and 170.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5502, 1, 170);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5502, 1, and 170.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5503, 1, and 171. */\nINSERT INTO `qt_rolepermission` VALUES (5503,1,171)", "description": "Inserts a new row into the qt_rolepermission table with the values 5503, 1, and 171.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5504, 1, and 173. */\nINSERT INTO `qt_rolepermission` VALUES (5504,1,173)", "description": "Inserts a new row into the qt_rolepermission table with the values 5504, 1, and 173.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5504, 1, and 173.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5504, 1, and 173.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5504, 1, 173);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5504, 1, and 173.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5505, 1, and 18. */\nINSERT INTO `qt_rolepermission` VALUES (5505,1,18)", "description": "Inserts a new row into the qt_rolepermission table with the values 5505, 1, and 18.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5505, 1, and 18.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5505, 1, and 18.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5505, 1, 18);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5505, 1, and 18.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5506, 1, and 19. */\nINSERT INTO `qt_rolepermission` VALUES (5506,1,19)", "description": "Inserts a new row into the qt_rolepermission table with the values 5506, 1, and 19.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5506, 1, and 19.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5506, 1, and 19.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5506, 1, 19);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5506, 1, and 19.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5507, 1, and 20. */\nINSERT INTO `qt_rolepermission` VALUES (5507,1,20)", "description": "Inserts a new row into the qt_rolepermission table with the values 5507, 1, and 20.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5507, 1, and 20.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5507, 1, and 20.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5507, 1, 20);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5507, 1, and 20.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5508, 1, and 21. */\nINSERT INTO `qt_rolepermission` VALUES (5508,1,21)", "description": "Inserts a new row into the qt_rolepermission table with the values 5508, 1, and 21.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5508, 1, and 21.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5508, 1, and 21.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5508, 1, 21);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5508, 1, and 21.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5509, 1, and 22. */\nINSERT INTO `qt_rolepermission` VALUES (5509,1,22)", "description": "Inserts a new row into the qt_rolepermission table with the values 5509, 1, and 22.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5509, 1, and 22.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5509, 1, and 22.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5509, 1, 22);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5509, 1, and 22.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5510, 1, and 23. */\nINSERT INTO `qt_rolepermission` VALUES (5510,1,23)", "description": "Inserts a new row into the qt_rolepermission table with the values 5510, 1, and 23.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5510, 1, and 23.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5510, 1, and 23.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5510, 1, 23);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5510, 1, and 23.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5511, 1, and 24. */\nINSERT INTO `qt_rolepermission` VALUES (5511,1,24)", "description": "Inserts a new row into the qt_rolepermission table with the values 5511, 1, and 24.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5511, 1, and 24.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5511, 1, and 24.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5511, 1, 24);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5511, 1, and 24.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5512, 1, and 25. */\nINSERT INTO `qt_rolepermission` VALUES (5512,1,25)", "description": "Inserts a new row into the qt_rolepermission table with the values 5512, 1, and 25.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5512, 1, and 25.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5512, 1, and 25.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5512, 1, 25);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5512, 1, and 25.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5513, 1, and 26. */\nINSERT INTO `qt_rolepermission` VALUES (5513,1,26)", "description": "Inserts a new row into the qt_rolepermission table with the values 5513, 1, and 26.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5513, 1, and 26.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5513, 1, and 26.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5513, 1, 26);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5513, 1, and 26.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5514, 1, and 27. */\nINSERT INTO `qt_rolepermission` VALUES (5514,1,27)", "description": "Inserts a new row into the qt_rolepermission table with the values 5514, 1, and 27.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5514, 1, and 27.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5514, 1, and 27.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5514, 1, 27);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5514, 1, and 27.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5515, 1, and 28. */\nINSERT INTO `qt_rolepermission` VALUES (5515,1,28)", "description": "Inserts a new row into the qt_rolepermission table with the values 5515, 1, and 28.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5515, 1, and 28.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5515, 1, and 28.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5515, 1, 28);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5515, 1, and 28.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5516, 1, and 29. */\nINSERT INTO `qt_rolepermission` VALUES (5516,1,29)", "description": "Inserts a new row into the qt_rolepermission table with the values 5516, 1, and 29.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5516, 1, and 29.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5516, 1, and 29.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5516, 1, 29);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5516, 1, and 29.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5517, 1, and 30. */\nINSERT INTO `qt_rolepermission` VALUES (5517,1,30)", "description": "Inserts a new row into the qt_rolepermission table with the values 5517, 1, and 30.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5517, 1, and 30.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5517, 1, and 30.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5517, 1, 30);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5517, 1, and 30.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5518, 1, and 31. */\nINSERT INTO `qt_rolepermission` VALUES (5518,1,31)", "description": "Inserts a new row into the qt_rolepermission table with the values 5518, 1, and 31.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5518, 1, and 31.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5518, 1, and 31.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5518, 1, 31);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5518, 1, and 31.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5519, 1, and 32. */\nINSERT INTO `qt_rolepermission` VALUES (5519,1,32)", "description": "Inserts a new row into the qt_rolepermission table with the values 5519, 1, and 32.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5519, 1, and 32.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5519, 1, and 32.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5519, 1, 32);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5519, 1, and 32.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5520, 1, and 33. */\nINSERT INTO `qt_rolepermission` VALUES (5520,1,33)", "description": "Inserts a new row into the qt_rolepermission table with the values 5520, 1, and 33.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5520, 1, and 33.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5520, 1, and 33.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5520, 1, 33);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5520, 1, and 33.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5521, 1, and 34. */\nINSERT INTO `qt_rolepermission` VALUES (5521,1,34)", "description": "Inserts a new row into the qt_rolepermission table with the values 5521, 1, and 34.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5521, 1, and 34.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5521, 1, and 34.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5521, 1, 34);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5521, 1, and 34.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5522, 1, and 35. */\nINSERT INTO `qt_rolepermission` VALUES (5522,1,35)", "description": "Inserts a new row into the qt_rolepermission table with the values 5522, 1, and 35.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5522, 1, and 35.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5522, 1, and 35.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5522, 1, 35);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5522, 1, and 35.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5523, 1, and 36. */\nINSERT INTO `qt_rolepermission` VALUES (5523,1,36)", "description": "Inserts a new row into the qt_rolepermission table with the values 5523, 1, and 36.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5523, 1, and 36.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5523, 1, and 36.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5523, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5523, 1, and 36.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5524, 1, and 37. */\nINSERT INTO `qt_rolepermission` VALUES (5524,1,37)", "description": "Inserts a new row into the qt_rolepermission table with the values 5524, 1, and 37.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5524, 1, and 37.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5524, 1, and 37.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5524, 1, 37);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5524, 1, and 37.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5525, 1, and 38. */\nINSERT INTO `qt_rolepermission` VALUES (5525,1,38)", "description": "Inserts a new row into the qt_rolepermission table with the values 5525, 1, and 38.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5525, 1, and 38.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5525, 1, and 38.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5525, 1, 38);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5525, 1, and 38.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5526, 1, and 39. */\nINSERT INTO `qt_rolepermission` VALUES (5526,1,39)", "description": "Inserts a new row into the qt_rolepermission table with the values 5526, 1, and 39.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5526, 1, and 39.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5526, 1, and 39.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5526, 1, 39);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5526, 1, and 39.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5527, 1, and 40. */\nINSERT INTO `qt_rolepermission` VALUES (5527,1,40)", "description": "Inserts a new row into the qt_rolepermission table with the values 5527, 1, and 40.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5527, 1, and 40.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5527, 1, and 40.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5527, 1, 40);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5527, 1, and 40.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5528, 1, and 41. */\nINSERT INTO `qt_rolepermission` VALUES (5528,1,41)", "description": "Inserts a new row into the qt_rolepermission table with the values 5528, 1, and 41.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5528, 1, and 41.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5528, 1, and 41.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5528, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5528, 1, and 41.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5529, 1, and 42. */\nINSERT INTO `qt_rolepermission` VALUES (5529,1,42)", "description": "Inserts a new row into the qt_rolepermission table with the values 5529, 1, and 42.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5529, 1, and 42.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5529, 1, and 42.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5529, 1, 42);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5529, 1, and 42.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5530, 1, and 43. */\nINSERT INTO `qt_rolepermission` VALUES (5530,1,43)", "description": "Inserts a new row into the qt_rolepermission table with the values 5530, 1, and 43.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5530, 1, and 43.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5530, 1, and 43.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5530, 1, 43);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5530, 1, and 43.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5531, 1, and 44. */\nINSERT INTO `qt_rolepermission` VALUES (5531,1,44)", "description": "Inserts a new row into the qt_rolepermission table with the values 5531, 1, and 44.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5531, 1, and 44.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5531, 1, and 44.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5531, 1, 44);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5531, 1, and 44.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5532, 1, and 45. */\nINSERT INTO `qt_rolepermission` VALUES (5532,1,45)", "description": "Inserts a new row into the qt_rolepermission table with the values 5532, 1, and 45.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5532, 1, and 45.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5532, 1, and 45.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5532, 1, 45);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5532, 1, and 45.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5533, 1, and 46. */\nINSERT INTO `qt_rolepermission` VALUES (5533,1,46)", "description": "Inserts a new row into the qt_rolepermission table with the values 5533, 1, and 46.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5533, 1, and 46.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5533, 1, and 46.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5533, 1, 46);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5533, 1, and 46.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5534, 1, and 47. */\nINSERT INTO `qt_rolepermission` VALUES (5534,1,47)", "description": "Inserts a new row into the qt_rolepermission table with the values 5534, 1, and 47.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5534, 1, and 47.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5534, 1, and 47.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5534, 1, 47);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5534, 1, and 47.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5535, 1, and 48. */\nINSERT INTO `qt_rolepermission` VALUES (5535,1,48)", "description": "Inserts a new row into the qt_rolepermission table with the values 5535, 1, and 48.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5535, 1, and 48.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5535, 1, and 48.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5535, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5535, 1, and 48.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5536, 1, and 49. */\nINSERT INTO `qt_rolepermission` VALUES (5536,1,49)", "description": "Inserts a new row into the qt_rolepermission table with the values 5536, 1, and 49.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5536, 1, and 49.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5536, 1, and 49.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5536, 1, 49);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5536, 1, and 49.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5537, 1, and 50. */\nINSERT INTO `qt_rolepermission` VALUES (5537,1,50)", "description": "Inserts a new row into the qt_rolepermission table with the values 5537, 1, and 50.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5537, 1, and 50.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5537, 1, and 50.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5537, 1, 50);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5537, 1, and 50.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5538, 1, and 51. */\nINSERT INTO `qt_rolepermission` VALUES (5538,1,51)", "description": "Inserts a new row into the qt_rolepermission table with the values 5538, 1, and 51.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5538, 1, and 51.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5538, 1, and 51.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5538, 1, 51);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5538, 1, and 51.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5539, 1, and 52. */\nINSERT INTO `qt_rolepermission` VALUES (5539,1,52)", "description": "Inserts a new row into the qt_rolepermission table with the values 5539, 1, and 52.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5539, 1, and 52.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5539, 1, and 52.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5539, 1, 52);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5539, 1, and 52.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5540, 1, and 53. */\nINSERT INTO `qt_rolepermission` VALUES (5540,1,53)", "description": "Inserts a new row into the qt_rolepermission table with the values 5540, 1, and 53.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5540, 1, and 53.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5540, 1, and 53.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5540, 1, 53);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5540, 1, and 53.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5541, 1, and 54. */\nINSERT INTO `qt_rolepermission` VALUES (5541,1,54)", "description": "Inserts a new row into the qt_rolepermission table with the values 5541, 1, and 54.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5541, 1, and 54.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5541, 1, and 54.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5541, 1, 54);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5541, 1, and 54.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5542, 1, and 55. */\nINSERT INTO `qt_rolepermission` VALUES (5542,1,55)", "description": "Inserts a new row into the qt_rolepermission table with the values 5542, 1, and 55.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5542, 1, and 55.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5542, 1, and 55.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5542, 1, 55);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5542, 1, and 55.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5543, 1, and 56. */\nINSERT INTO `qt_rolepermission` VALUES (5543,1,56)", "description": "Inserts a new row into the qt_rolepermission table with the values 5543, 1, and 56.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5543, 1, and 56.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5543, 1, and 56.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5543, 1, 56);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5543, 1, and 56.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5544, 1, and 57. */\nINSERT INTO `qt_rolepermission` VALUES (5544,1,57)", "description": "Inserts a new row into the qt_rolepermission table with the values 5544, 1, and 57.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5544, 1, and 57.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5544, 1, and 57.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5544, 1, 57);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5544, 1, and 57.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5545, 1, and 58. */\nINSERT INTO `qt_rolepermission` VALUES (5545,1,58)", "description": "Inserts a new row into the qt_rolepermission table with the values 5545, 1, and 58.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5545, 1, and 58.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5545, 1, and 58.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5545, 1, 58);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5545, 1, and 58.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5546, 1, and 59. */\nINSERT INTO `qt_rolepermission` VALUES (5546,1,59)", "description": "Inserts a new row into the qt_rolepermission table with the values 5546, 1, and 59.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5546, 1, and 59.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5546, 1, and 59.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5546, 1, 59);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5546, 1, and 59.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5547, 1, and 60. */\nINSERT INTO `qt_rolepermission` VALUES (5547,1,60)", "description": "Inserts a new row into the qt_rolepermission table with the values 5547, 1, and 60.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5547, 1, and 60.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5547, 1, and 60.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5547, 1, 60);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5547, 1, and 60.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5548, 1, and 61. */\nINSERT INTO `qt_rolepermission` VALUES (5548,1,61)", "description": "Inserts a new row into the qt_rolepermission table with the values 5548, 1, and 61.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5548, 1, and 61.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5548, 1, and 61.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5548, 1, 61);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5548, 1, and 61.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5549, 1, and 62. */\nINSERT INTO `qt_rolepermission` VALUES (5549,1,62)", "description": "Inserts a new row into the qt_rolepermission table with the values 5549, 1, and 62.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5549, 1, and 62.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5549, 1, and 62.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5549, 1, 62);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5549, 1, and 62.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5550, 1, and 63. */\nINSERT INTO `qt_rolepermission` VALUES (5550,1,63)", "description": "Inserts a new row into the qt_rolepermission table with the values 5550, 1, and 63.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5550, 1, and 63.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5550, 1, and 63.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5550, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5550, 1, and 63.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5551, 1, and 64. */\nINSERT INTO `qt_rolepermission` VALUES (5551,1,64)", "description": "Inserts a new row into the qt_rolepermission table with the values 5551, 1, and 64.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5551, 1, and 64.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5551, 1, and 64.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5551, 1, 64);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5551, 1, and 64.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5552, 1, and 65. */\nINSERT INTO `qt_rolepermission` VALUES (5552,1,65)", "description": "Inserts a new row into the qt_rolepermission table with the values 5552, 1, and 65.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5552, 1, and 65.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5552, 1, and 65.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5552, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5552, 1, and 65.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5553, 1, and 66. */\nINSERT INTO `qt_rolepermission` VALUES (5553,1,66)", "description": "Inserts a new row into the qt_rolepermission table with the values 5553, 1, and 66.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5553, 1, and 66.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5553, 1, and 66.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5553, 1, 66);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5553, 1, and 66.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5554, 1, and 67. */\nINSERT INTO `qt_rolepermission` VALUES (5554,1,67)", "description": "Inserts a new row into the qt_rolepermission table with the values 5554, 1, and 67.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5554, 1, and 67.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5554, 1, and 67.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5554, 1, 67);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5554, 1, and 67.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5555, 1, and 68. */\nINSERT INTO `qt_rolepermission` VALUES (5555,1,68)", "description": "Inserts a new row into the qt_rolepermission table with the values 5555, 1, and 68.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5555, 1, and 68.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5555, 1, and 68.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5555, 1, 68);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5555, 1, and 68.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5556, 1, and 69. */\nINSERT INTO `qt_rolepermission` VALUES (5556,1,69)", "description": "Inserts a new row into the qt_rolepermission table with the values 5556, 1, and 69.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5556, 1, and 69.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5556, 1, and 69.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5556, 1, 69);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5556, 1, and 69.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5557, 1, and 7. */\nINSERT INTO `qt_rolepermission` VALUES (5557,1,7)", "description": "Inserts a new row into the qt_rolepermission table with the values 5557, 1, and 7.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5557, 1, and 7.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5557, 1, and 7.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5557, 1, 7);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5557, 1, and 7.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5558, 1, and 70. */\nINSERT INTO `qt_rolepermission` VALUES (5558,1,70)", "description": "Inserts a new row into the qt_rolepermission table with the values 5558, 1, and 70.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5558, 1, and 70.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5558, 1, and 70.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5558, 1, 70);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5558, 1, and 70.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5559, 1, and 71. */\nINSERT INTO `qt_rolepermission` VALUES (5559,1,71)", "description": "Inserts a new row into the qt_rolepermission table with the values 5559, 1, and 71.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5559, 1, and 71.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5559, 1, and 71.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id)\n  VALUES (5559, 1, 71);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5559, 1, and 71.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5560, 1, and 72. */\nINSERT INTO `qt_rolepermission` VALUES (5560,1,72)", "description": "Inserts a new row into the qt_rolepermission table with the values 5560, 1, and 72.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5560, 1, and 72.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5560, 1, and 72.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5560, 1, 72);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5560, 1, and 72.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5561, 1, and 73. */\nINSERT INTO `qt_rolepermission` VALUES (5561,1,73)", "description": "Inserts a new row into the qt_rolepermission table with the values 5561, 1, and 73.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5561, 1, and 73.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5561, 1, and 73.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5561, 1, 73);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5561, 1, and 73.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5562, 1, and 74. */\nINSERT INTO `qt_rolepermission` VALUES (5562,1,74)", "description": "Inserts a new row into the qt_rolepermission table with the values 5562, 1, and 74.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5562, 1, and 74.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5562, 1, and 74.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, created_at)\nVALUES (5562, 1, 74);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5562, 1, and 74.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5563, 1, and 75. */\nINSERT INTO `qt_rolepermission` VALUES (5563,1,75)", "description": "Inserts a new row into the qt_rolepermission table with the values 5563, 1, and 75.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5563, 1, and 75.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5563, 1, and 75.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5563, 1, 75);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5563, 1, and 75.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5564, 1, and 76. */\nINSERT INTO `qt_rolepermission` VALUES (5564,1,76)", "description": "Inserts a new row into the qt_rolepermission table with the values 5564, 1, and 76.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5564, 1, and 76.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5564, 1, and 76.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5564, 1, 76);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5564, 1, and 76.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5565, 1, and 77. */\nINSERT INTO `qt_rolepermission` VALUES (5565,1,77)", "description": "Inserts a new row into the qt_rolepermission table with the values 5565, 1, and 77.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5566, 1, and 78. */\nINSERT INTO `qt_rolepermission` VALUES (5566,1,78)", "description": "Inserts a new row into the qt_rolepermission table with the values 5566, 1, and 78.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5566, 1, and 78.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5566, 1, and 78.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5566, 1, 78);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5566, 1, and 78.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5567, 1, and 79. */\nINSERT INTO `qt_rolepermission` VALUES (5567,1,79)", "description": "Inserts a new row into the qt_rolepermission table with the values 5567, 1, and 79.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5567, 1, and 79.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5567, 1, and 79.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5567, 1, 79);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5567, 1, and 79.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5568, 1, and 8. */\nINSERT INTO `qt_rolepermission` VALUES (5568,1,8)", "description": "Inserts a new row into the qt_rolepermission table with the values 5568, 1, and 8.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5568, 1, and 8.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5568, 1, and 8.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5568, 1, 8);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5568, 1, and 8.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5569, 1, and 80. */\nINSERT INTO `qt_rolepermission` VALUES (5569,1,80)", "description": "Inserts a new row into the qt_rolepermission table with the values 5569, 1, and 80.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5569, 1, and 80.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5569, 1, and 80.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5569, 1, 80);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5569, 1, and 80.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5570, 1, and 81. */\nINSERT INTO `qt_rolepermission` VALUES (5570,1,81)", "description": "Inserts a new row into the qt_rolepermission table with the values 5570, 1, and 81.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5570, 1, and 81.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5570, 1, and 81.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5570, 1, 81);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5570, 1, and 81.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5571, 1, and 82. */\nINSERT INTO `qt_rolepermission` VALUES (5571,1,82)", "description": "Inserts a new row into the qt_rolepermission table with the values 5571, 1, and 82.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5571, 1, and 82.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5571, 1, and 82.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5571, 1, 82);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5571, 1, and 82.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5572, 1, and 83. */\nINSERT INTO `qt_rolepermission` VALUES (5572,1,83)", "description": "Inserts a new row into the qt_rolepermission table with the values 5572, 1, and 83.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5572, 1, and 83.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5572, 1, and 83.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5572, 1, 83);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5572, 1, and 83.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5573, 1, and 84. */\nINSERT INTO `qt_rolepermission` VALUES (5573,1,84)", "description": "Inserts a new row into the qt_rolepermission table with the values 5573, 1, and 84.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5573, 1, and 84.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5573, 1, and 84.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5573, 1, 84);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5573, 1, and 84.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5574, 1, and 85. */\nINSERT INTO `qt_rolepermission` VALUES (5574,1,85)", "description": "Inserts a new row into the qt_rolepermission table with the values 5574, 1, and 85.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5575, 1, and 86. */\nINSERT INTO `qt_rolepermission` VALUES (5575,1,86)", "description": "Inserts a new row into the qt_rolepermission table with the values 5575, 1, and 86.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5575, 1, and 86.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5575, 1, and 86.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5575, 1, 86);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5575, 1, and 86.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5576, 1, and 87. */\nINSERT INTO `qt_rolepermission` VALUES (5576,1,87)", "description": "Inserts a new row into the qt_rolepermission table with the values 5576, 1, and 87.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5576, 1, and 87.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5576, 1, and 87.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5576, 1, 87);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5576, 1, and 87.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5577, 1, and 88. */\nINSERT INTO `qt_rolepermission` VALUES (5577,1,88)", "description": "Inserts a new row into the qt_rolepermission table with the values 5577, 1, and 88.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5578, 1, and 89. */\nINSERT INTO `qt_rolepermission` VALUES (5578,1,89)", "description": "Inserts a new row into the qt_rolepermission table with the values 5578, 1, and 89.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5578, 1, and 89.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5578, 1, and 89.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5578, 1, 89);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5578, 1, and 89.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5579, 1, and 9. */\nINSERT INTO `qt_rolepermission` VALUES (5579,1,9)", "description": "Inserts a new row into the qt_rolepermission table with the values 5579, 1, and 9.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5579, 1, and 9.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5579, 1, and 9.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5579, 1, 9);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5579, 1, and 9.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5580, 1, and 90. */\nINSERT INTO `qt_rolepermission` VALUES (5580,1,90)", "description": "Inserts a new row into the qt_rolepermission table with the values 5580, 1, and 90.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5580, 1, and 90.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5580, 1, and 90.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5580, 1, 90);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5580, 1, and 90.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5581, 1, and 91. */\nINSERT INTO `qt_rolepermission` VALUES (5581,1,91)", "description": "Inserts a new row into the qt_rolepermission table with the values 5581, 1, and 91.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5581, 1, and 91.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5581, 1, and 91.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5581, 1, 91);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5581, 1, and 91.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5582, 1, and 92. */\nINSERT INTO `qt_rolepermission` VALUES (5582,1,92)", "description": "Inserts a new row into the qt_rolepermission table with the values 5582, 1, and 92.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5582, 1, and 92.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5582, 1, and 92.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5582, 1, 92);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5582, 1, and 92.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5583, 1, and 93. */\nINSERT INTO `qt_rolepermission` VALUES (5583,1,93)", "description": "Inserts a new row into the qt_rolepermission table with the values 5583, 1, and 93.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5583, 1, and 93.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5583, 1, and 93.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5583, 1, 93);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5583, 1, and 93.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5584, 1, and 94. */\nINSERT INTO `qt_rolepermission` VALUES (5584,1,94)", "description": "Inserts a new row into the qt_rolepermission table with the values 5584, 1, and 94.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5584, 1, and 94.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5584, 1, and 94.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5584, 1, 94);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5584, 1, and 94.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5585, 1, and 95. */\nINSERT INTO `qt_rolepermission` VALUES (5585,1,95)", "description": "Inserts a new row into the qt_rolepermission table with the values 5585, 1, and 95.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5585, 1, and 95.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5585, 1, and 95.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5585, 1, 95);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5585, 1, and 95.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5586, 1, and 96. */\nINSERT INTO `qt_rolepermission` VALUES (5586,1,96)", "description": "Inserts a new row into the qt_rolepermission table with the values 5586, 1, and 96.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5586, 1, and 96.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5586, 1, and 96.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5586, 1, 96);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5586, 1, and 96.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5587, 1, and 97. */\nINSERT INTO `qt_rolepermission` VALUES (5587,1,97)", "description": "Inserts a new row into the qt_rolepermission table with the values 5587, 1, and 97.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5587, 1, and 97.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5587, 1, and 97.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5587, 1, 97);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5587, 1, and 97.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5588, 1, and 98. */\nINSERT INTO `qt_rolepermission` VALUES (5588,1,98)", "description": "Inserts a new row into the qt_rolepermission table with the values 5588, 1, and 98.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5588, 1, and 98.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table with the values 5588, 1, and 98.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5588, 1, 98);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5588, 1, and 98.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Inserts a new row into the qt_rolepermission table with the values 5589, 1, and 99. */\nINSERT INTO `qt_rolepermission` VALUES (5589,1,99)", "description": "Inserts a new row into the qt_rolepermission table with the values 5589, 1, and 99.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_rolepermission table with the values 5589, 1, and 99.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_rolepermission table. It should have the values 5589, 1, and 99.\n\n-- Solution:\n```sql\nINSERT INTO qt_rolepermission (role_id, permission_id, permission_value)\nVALUES (5589, 1, 99);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_rolepermission table with the values 5589, 1, and 99.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_rolepermission;"}
{"seed": "/* Creates a table named qt_suggest with the following columns: id (integer primary key), content (text), addtime (timestamp), reply (text), replytime (timestamp), userID (integer), replyUserID (integer), stext (varchar). */\nCREATE TABLE `qt_suggest` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `content` text COMMENT '\u53cd\u9988\u5185\u5bb9',\n  `addtime` timestamp NULL DEFAULT NULL COMMENT '\u6dfb\u52a0\u65f6\u95f4',\n  `reply` text COMMENT '\u56de\u590d\u5185\u5bb9',\n  `replytime` timestamp NULL DEFAULT NULL COMMENT '\u56de\u590d\u65f6\u95f4',\n  `userID` int(11) DEFAULT NULL COMMENT '\u53cd\u9988\u8005',\n  `replyUserID` int(11) DEFAULT NULL COMMENT '\u56de\u590d\u8005',\n  `stext` varchar(255) DEFAULT NULL COMMENT '\u7eaf\u6587\u672c\u5185\u5bb9',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COMMENT='\u5efa\u8bae\u53cd\u9988\u8868'", "description": "Creates a table named qt_suggest with the following columns: id (integer primary key), content (text), addtime (timestamp), reply (text), replytime (timestamp), userID (integer), replyUserID (integer), stext (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named qt_suggest with the following columns: id (integer primary key), content (text), addtime (timestamp), reply (text), replytime (timestamp), userID (integer), replyUserID (integer), stext (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_suggest. It should have an integer primary key so that each suggestion has a unique identifier, and a text column to store the suggestion\u2019s content.\n\n-- Solution:\n```sql\nCREATE TABLE qt_suggest (\n  id INTEGER PRIMARY KEY,\n  content TEXT,\n  addtime TIMESTAMP,\n  reply TEXT,\n  replytime TIMESTAMP,\n  userID INTEGER,\n  replyUserID INTEGER,\n  stext VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_suggest table with eight columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 content: text, the suggestion\u2019s content\n  \u2022 addtime: timestamp, the time the suggestion was added\n  \u2022 reply: text, the reply to the suggestion\n  \u2022 replytime: timestamp, the time the reply was added\n  \u2022 userID: integer, the user who added the suggestion\n  \u2022 replyUserID: integer, the user who replied to the suggestion\n  \u2022 stext: varchar(255), the suggestion\u2019s text\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_suggest');"}
{"seed": "/* Inserts a new row into the qt_suggest table with the given values. */\nINSERT INTO `qt_suggest` VALUES (8,'\u6d4b\u8bd5\u53cd\u9988\u673a\u5236','2011-10-29 21:26:45','\u6b64\u95ee\u9898\u662f\u7cfb\u7edf\u4e34\u65f6\u7684\u95ee\u9898\uff0c\u5df2\u4fee\u590d\uff0c\u8c22\u8c22\u4f60\u63d0\u4ea4\u7684\u53cd\u9988\uff01','2011-10-29 21:30:15',3,2,'\u6d4b\u8bd5\u53cd\u9988\u673a\u5236')", "description": "Inserts a new row into the qt_suggest table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new record into the qt_suggest table with the given values. */\nINSERT INTO `qt_suggest` VALUES (10,'<a href=\\\"http://www.zjut.com\\\" target=\\\"_blank\\\">\u7cbe\u5f18</a>','2011-11-18 21:56:14','',NULL,2,0,'\u7cbe\u5f18')", "description": "Inserts a new record into the qt_suggest table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the qt_suggest table with the given values.", "response": "-- Reasoning:\nWe need to insert a new record into the qt_suggest table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_suggest (\n  user_id,\n  question_id,\n  suggestion\n) VALUES (\n  1,\n  1,\n  'This is a suggestion'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the qt_suggest table with the given values:\n  \u2022 user_id: 1\n  \u2022 question_id: 1\n  \u2022 suggestion: This is a suggestion\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM qt_suggest;"}
{"seed": "/* Creates a table named qt_team with five columns: id (integer primary key), userID (integer), headimage (varchar), start (integer), and end (integer). */\nCREATE TABLE `qt_team` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `userID` int(11) DEFAULT NULL COMMENT '\u7528\u6237ID',\n  `headimage` varchar(255) DEFAULT NULL COMMENT '\u5934\u50cf',\n  `start` int(11) DEFAULT NULL COMMENT '\u4efb\u671f\u5f00\u59cb\u65f6\u95f4',\n  `end` int(11) DEFAULT NULL COMMENT '\u4efb\u671f\u7ed3\u675f\u65f6\u95f4',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='\u7ba1\u7406\u56e2\u961f\u8868'", "description": "Creates a table named qt_team with five columns: id (integer primary key), userID (integer), headimage (varchar), start (integer), and end (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "CHARSET", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named qt_team with five columns: id (integer primary key), userID (integer), headimage (varchar), start (integer), and end (integer).", "response": "-- Reasoning:\nWe need a new table named qt_team. It should have an integer primary key so that each team has a unique identifier, and a userID column to store the user\u2019s ID.\n\n-- Solution:\n```sql\nCREATE TABLE qt_team (\n  id INT PRIMARY KEY,\n  userID INT,\n  headimage VARCHAR(255),\n  start INT,\n  end INT\n);\n```\n\n-- Explanation:\nThis statement defines the qt_team table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 userID: integer\n  \u2022 headimage: variable\u2010length string up to 255 characters\n  \u2022 start: integer\n  \u2022 end: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_team');"}
{"seed": "/* Inserts a new row into the qt_team table with the given values. */\nINSERT INTO `qt_team` VALUES (8,2,'/Jh-oa/team/20111210112727_674.jpg',2011,2012)", "description": "Inserts a new row into the qt_team table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_team table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_team table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO qt_team (team_id, name)\nVALUES (1, '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_team table with the given values:\n  \u2022 team_id: 1\n  \u2022 name: \n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_team;"}
{"seed": "/* Creates a table named qt_user with 23 columns: id (integer primary key), uid (varchar), username (varchar), password (varchar), addtime (timestamp), modifytime (timestamp), email (varchar), cornet (varchar), telephone (varchar), academyID (integer), departmentID (integer), jobID (integer), major (varchar), location (varchar), dormitory (varchar), islock (integer), bbs (varchar), introduce (text), */\nCREATE TABLE `qt_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `uid` varchar(255) NOT NULL DEFAULT '' COMMENT '\u5b66\u53f7',\n  `username` varchar(255) NOT NULL DEFAULT '' COMMENT '\u59d3\u540d',\n  `password` varchar(255) DEFAULT 'e10adc3949ba59abbe56e057f20f883e' COMMENT '\u5bc6\u7801',\n  `addtime` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u6dfb\u52a0\u65f6\u95f4',\n  `modifytime` timestamp NULL DEFAULT NULL COMMENT '\u6700\u540e\u4fee\u6539\u65f6\u95f4',\n  `email` varchar(255) DEFAULT NULL COMMENT '\u90ae\u7bb1\u5730\u5740',\n  `cornet` varchar(255) DEFAULT NULL COMMENT '\u77ed\u53f7',\n  `telephone` varchar(255) DEFAULT NULL COMMENT '\u7535\u8bdd\u53f7\u7801\u957f\u53f7',\n  `academyID` int(11) DEFAULT NULL COMMENT '\u5b66\u9662ID',\n  `departmentID` int(11) DEFAULT NULL COMMENT '\u90e8\u95e8ID',\n  `jobID` int(11) DEFAULT NULL COMMENT '\u804c\u52a1ID',\n  `major` varchar(255) DEFAULT NULL COMMENT '\u4e13\u4e1a',\n  `location` varchar(255) DEFAULT NULL COMMENT '\u6821\u533a',\n  `dormitory` varchar(255) DEFAULT NULL COMMENT '\u5bbf\u820d',\n  `islock` int(11) DEFAULT '0' COMMENT '\u662f\u5426\u9501\u5b9a',\n  `bbs` varchar(255) DEFAULT NULL COMMENT '\u8bba\u575bID',\n  `introduce` text COMMENT '\u7b80\u4ecb',\n  `simpleinfo` text COMMENT '\u7eaf\u6587\u672c',\n  `birthday` varchar(255) DEFAULT NULL COMMENT '\u751f\u65e5''',\n  `qq` varchar(255) DEFAULT NULL COMMENT 'QQ',\n  `sex` varchar(255) DEFAULT NULL COMMENT '\u6027\u522b',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `index_uid` (`uid`)\n) ENGINE=InnoDB AUTO_INCREMENT=531 DEFAULT CHARSET=utf8 COMMENT='\u7528\u6237\u8868'", "description": "Creates a table named qt_user with 23 columns: id (integer primary key), uid (varchar), username (varchar), password (varchar), addtime (timestamp), modifytime (timestamp), email (varchar), cornet (varchar), telephone (varchar), academyID (integer), departmentID (integer), jobID (integer), major (varchar), location (varchar), dormitory (varchar), islock (integer), bbs (varchar), introduce (text),", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "DEFAULT", "COMMENT", "ENGINE=InnoDB", "VARCHAR", "INT", "TEXT", "TIMESTAMP", "NULL"], "instruction": "Write a SQL query to create a table named qt_user with 23 columns: id (integer primary key), uid (varchar), username (varchar), password (varchar), addtime (timestamp), modifytime (timestamp), email (varchar), cornet (varchar), telephone (varchar), academyID (integer), departmentID (integer), jobID (integer), major (varchar), location (varchar), dormitory (varchar), islock (integer), bbs (varchar), introduce (text), simpleinfo (text), birthday (varchar), qq (varchar), sex (varchar).", "response": "-- Reasoning:\nWe need a new table named qt_user. It should have an integer primary key so that each user has a unique identifier, and a username column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE qt_user (\n  id INT PRIMARY KEY,\n  uid VARCHAR(255),\n  username VARCHAR(255),\n  password VARCHAR(255),\n  addtime TIMESTAMP,\n  modifytime TIMESTAMP,\n  email VARCHAR(255),\n  cornet VARCHAR(255),\n  telephone VARCHAR(255),\n  academyID INT,\n  departmentID INT,\n  jobID INT,\n  major VARCHAR(255),\n  location VARCHAR(255),\n  dormitory VARCHAR(255),\n  islock INT,\n  bbs VARCHAR(255),\n  introduce TEXT,\n  simpleinfo TEXT,\n  birthday VARCHAR(255),\n  qq VARCHAR(255),\n  sex VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_user table with 23 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 uid: variable\u2010length string up to 255 characters\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up"}
{"seed": "/* Inserts a new user with id 23, name '\u5468\u5bb6\u4fca', password '', and other fields set to default values. */\nINSERT INTO `qt_user` VALUES (23,'200709550229','\u5468\u5bb6\u4fca','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:17','2011-11-29 16:09:06',NULL,'-','-',11,12,6,'--','\u5c4f\u5cf0\u6821\u533a','-',1,'-',NULL,NULL,'-','-','\u7537')", "description": "Inserts a new user with id 23, name '\u5468\u5bb6\u4fca', password '', and other fields set to default values.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "23", "\u5468\u5bb6\u4fca", "e10adc3949ba"], "instruction": "Write a SQL query to insert a new user with id 23, name '\u5468\u5bb6\u4fca', password '', and other fields set to default values.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name) VALUES (23, '\u5468\u5bb6\u4fca');\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 23;"}
{"seed": "/* Inserts a new user with id 30, name \u5f20\u91cd\u6b63, and password . */\nINSERT INTO `qt_user` VALUES (30,'200802070127','\u5f20\u91cd\u6b63','ce3098a66b45d0454c324923fbe4ffc9','2010-09-11 21:30:17','2011-11-29 16:09:06',NULL,'538112','-',2,NULL,NULL,'--','\u671d\u6656\u6821\u533a','-',1,'ZCZ',NULL,NULL,'-','-','\u7537')", "description": "Inserts a new user with id 30, name \u5f20\u91cd\u6b63, and password .", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "\u5f20\u91cd\u6b63", "200802070127"], "instruction": "Write a SQL query to insert a new user with id 30, name \u5f20\u91cd\u6b63, and password .", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 30, a name of \u5f20\u91cd\u6b63, and a password of .\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\n  VALUES (30, '\u5f20\u91cd\u6b63', '.');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 32, name '\u738b\u946b\u9e4f', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (32,'200726630415','\u738b\u946b\u9e4f','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:17','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 32, name '\u738b\u946b\u9e4f', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "32", "200726630415", "\u738b"], "instruction": "Write a SQL query to insert a new user with id 32, name '\u738b\u946b\u9e4f', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (32, '\u738b\u946b\u9e4f', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 32\n  \u2022 name: \u738b\u946b\u9e4f\n  \u2022 password:\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 45, name '\u8d75\u535a\u806a', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (45,'200826630726','\u8d75\u535a\u806a','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 45, name '\u8d75\u535a\u806a', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "45", "200826630726", "\u8d75"], "instruction": "Write a SQL query to insert a new user with id 45, name '\u8d75\u535a\u806a', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (45, '\u8d75\u535a\u806a', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 45\n  \u2022 name: \u8d75\u535a\u806a\n  \u2022 password:\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 48, name \u9ad8\u4e3d, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (48,'200905911103','\u9ad8\u4e3d','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'524537','15068834405',5,10,5,'-','\u5c4f\u5cf0\u6821\u533a','\u4e1c\u4e94',1,'\u8ff7\u4e0a\u5e7b\u60f3',NULL,NULL,'-','','\u5973')", "description": "Inserts a new user with id 48, name \u9ad8\u4e3d, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "524537", "15068834405"], "instruction": "Write a SQL query to insert a new user with id 48, name \u9ad8\u4e3d, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (48, '\u9ad8\u4e3d', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the following values:\n  \u2022 id: 48\n  \u2022 name: \u9ad8\u4e3d\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 52, username '200901030322', password '', and name '\u53f6\u514b\u5bf9'. */\nINSERT INTO `qt_user` VALUES (52,'200901030322','\u53f6\u514b\u5bf9','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 52, username '200901030322', password '', and name '\u53f6\u514b\u5bf9'.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "52", "200901030322"], "instruction": "Write a SQL query to insert a new user with id 52, username '200901030322', password '', and name '\u53f6\u514b\u5bf9'.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a username column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, name)\nVALUES (52, '200901030322', '', '\u53f6\u514b\u5bf9');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 52\n  \u2022 username: '200901030322'\n  \u2022 password: ''\n  \u2022 name: '\u53f6\u514b\u5bf9'\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 52;"}
{"seed": "/* Inserts a new user with id 63, name '\u97e9\u6770', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (63,'200903110108','\u97e9\u6770','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 63, name '\u97e9\u6770', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL"], "instruction": "Write a SQL query to insert a new user with id 63, name '\u97e9\u6770', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (63, '\u97e9\u6770', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 63\n  \u2022 name: \u97e9\u6770\n  \u2022 password: empty string\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 63;"}
{"seed": "/* Inserts a new user with id 70, name Scott, and password . */\nINSERT INTO `qt_user` VALUES (70,'200604140216','\u6c88\u8d85','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 70, name Scott, and password .", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 70, name Scott, and password .", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 70, a name of Scott, and a password of .\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\n  VALUES (70, 'Scott', '.');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users WHERE id = 70;"}
{"seed": "/* Inserts a new user with id 76, name '\u738b\u957f\u4e50', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (76,'200626380119','\u738b\u957f\u4e50','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 76, name '\u738b\u957f\u4e50', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "76", "200626380119", "\u738b\u957f"], "instruction": "Write a SQL query to insert a new user with id 76, name '\u738b\u957f\u4e50', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (76, '\u738b\u957f\u4e50', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users WHERE id = 76;"}
{"seed": "/* Inserts a new user with id 78, name '\u5415\u826f', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (78,'200910620214','\u5415\u826f','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','\u7537')", "description": "Inserts a new user with id 78, name '\u5415\u826f', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "78", "200910620214"], "instruction": "Write a SQL query to insert a new user with id 78, name '\u5415\u826f', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (78, '\u5415\u826f', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new user into the users table with the following values:\n  \u2022 id: 78\n  \u2022 name: \u5415\u826f\n  \u2022 password: empty string\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users WHERE id = 78;"}
{"seed": "/* Inserts a new user with id 88, name \u91d1\u7696\u4e1c, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (88,'200802070410','\u91d1\u7696\u4e1c','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','\u671d\u6656\u6821\u533a','-',1,'-',NULL,NULL,'-','-','\u7537')", "description": "Inserts a new user with id 88, name \u91d1\u7696\u4e1c, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "\u91d1\u7696\u4e1c", "200802070410"], "instruction": "Write a SQL query to insert a new user with id 88, name \u91d1\u7696\u4e1c, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (88, '\u91d1\u7696\u4e1c', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 88;"}
{"seed": "/* Inserts a new user with id 102, name '\u8d3e\u76db', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (102,'200717330108','\u8d3e\u76db','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'-','-',NULL,12,5,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 102, name '\u8d3e\u76db', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "102", "200717330108"], "instruction": "Write a SQL query to insert a new user with id 102, name '\u8d3e\u76db', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (102, '\u8d3e\u76db', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 102\n  \u2022 name: \u8d3e\u76db\n  \u2022 password:\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 107, name \u91d1\u654f\u4f1f, and password . */\nINSERT INTO `qt_user` VALUES (107,'200702750113','\u91d1\u654f\u4f1f','0bae2e8377b90c3010cfc1930cab7335','2010-09-11 21:30:18','2011-11-29 16:09:06',NULL,'697722','-',2,12,3,'--','\u671d\u6656\u6821\u533a','-',1,'\u5361\u516e\u5361',NULL,NULL,'1989-09-16','419875481','\u7537')", "description": "Inserts a new user with id 107, name \u91d1\u654f\u4f1f, and password .", "concepts": ["INSERT INTO", "VALUES", "qt_user", "\u91d1\u654f\u4f1f", "0bae2e8377b90c3"], "instruction": "Write a SQL query to insert a new user with id 107, name \u91d1\u654f\u4f1f, and password .", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 107, a name of \u91d1\u654f\u4f1f, and a password of .\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\n  VALUES (107, '\u91d1\u654f\u4f1f', '123456');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users WHERE id = 107;"}
{"seed": "/* Inserts a new user with id 116, name '\u8463\u91cd', password '', and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (116,'2110805084','\u8463\u91cd','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',7,12,5,'--','\u671d\u6656\u6821\u533a','-',1,'sarsar',NULL,NULL,'-','-','\u7537')", "description": "Inserts a new user with id 116, name '\u8463\u91cd', password '', and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "\u8463\u91cd", "2110805084"], "instruction": "Write a SQL query to insert a new user with id 116, name '\u8463\u91cd', password '', and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\nVALUES (116, '\u8463\u91cd', '');\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 116;"}
{"seed": "/* Inserts a new user with id 119, name '\u738b\u6377\u654f', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (119,'200618360119','\u738b\u6377\u654f','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 119, name '\u738b\u6377\u654f', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL"], "instruction": "Write a SQL query to insert a new user with id 119, name '\u738b\u6377\u654f', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (119, '\u738b\u6377\u654f', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 119\n  \u2022 name: \u738b\u6377\u654f\n  \u2022 password: empty string\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 119;"}
{"seed": "/* Inserts a new user with id 123, username 200711050308, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (123,'200711050308','\u91d1\u73b2\u4f73','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 123, username 200711050308, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 123, username 200711050308, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a username column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, active)\nVALUES (123, '200711050308', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 123\n  \u2022 username: 200711050308\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 128, name \u90d1\u4e50\u884c, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (128,'200701620129','\u90d1\u4e50\u884c','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 128, name \u90d1\u4e50\u884c, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "128", "\u90d1\u4e50\u884c", "e10adc3949ba"], "instruction": "Write a SQL query to insert a new user with id 128, name \u90d1\u4e50\u884c, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (128, '\u90d1\u4e50\u884c', 'password', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 128;"}
{"seed": "/* Inserts a new user with id 132, name '\u91d1\u6ce2', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (132,'200603100209','\u91d1\u6ce2','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 132, name '\u91d1\u6ce2', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "132", "200603100209", "\u91d1"], "instruction": "Write a SQL query to insert a new user with id 132, name '\u91d1\u6ce2', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (132, '\u91d1\u6ce2', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users WHERE id = 132;"}
{"seed": "/* Inserts a new user with id 140, name Xu Nan, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (140,'200605190420','\u8bb8\u6960','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 140, name Xu Nan, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 140, name Xu Nan, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (140, '', 'password', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 140\n  \u2022 name: \n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 140;"}
{"seed": "/* Inserts a new user with id 152, username 200828800218, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (152,'200828800218','\u8212\u6653\u838e','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 152, username 200828800218, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 152, username 200828800218, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a username column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, active)\nVALUES (152, '200828800218', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 152\n  \u2022 username: 200828800218\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 152;"}
{"seed": "/* Inserts a new user with id 154, name \u9648\u7693, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (154,'200803100303','\u9648\u7693','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 154, name \u9648\u7693, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "154", "\u9648\u7693", "e10adc3949"], "instruction": "Write a SQL query to insert a new user with id 154, name \u9648\u7693, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (154, '\u9648\u7693', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 157, username 200610620203, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (157,'200610620203','\u9648\u54cd\u6587','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 157, username 200610620203, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 157, username 200610620203, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a username column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, active)\nVALUES (157, '200610620203', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 157\n  \u2022 username: 200610620203\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 165, name '\u90b9\u534e', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (165,'200808270229','\u90b9\u534e','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 165, name '\u90b9\u534e', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "165", "200808270229"], "instruction": "Write a SQL query to insert a new user with id 165, name '\u90b9\u534e', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (165, '\u90b9\u534e', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 165;"}
{"seed": "/* Inserts a new user with id 187, username 200926740325, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (187,'200926740325','\u53f6\u6c38\u5a1c','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 187, username 200926740325, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 187, username 200926740325, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a username column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, active)\nVALUES (187, '200926740325', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 187\n  \u2022 username: 200926740325\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 200, username 200926740216, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (200,'200926740216','\u4efb\u6210','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 200, username 200926740216, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 200, username 200926740216, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a username column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, active)\nVALUES (200, '200926740216', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 200\n  \u2022 username: 200926740216\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 202, username 200926740312, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (202,'200926740312','\u9646\u9732','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 202, username 200926740312, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 202, username 200926740312, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a username column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, active)\nVALUES (202, '200926740312', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 202\n  \u2022 username: 200926740312\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 204, name '\u8d75\u6d0b', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (204,'200903120128','\u8d75\u6d0b','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:19','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 204, name '\u8d75\u6d0b', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "204", "200903120128"], "instruction": "Write a SQL query to insert a new user with id 204, name '\u8d75\u6d0b', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (204, '\u8d75\u6d0b', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 204\n  \u2022 name: \u8d75\u6d0b\n  \u2022 password: empty string\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 216, name S, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (216,'200926740316','\u6c88\u73ca\u73ca','e10adc3949ba59abbe56e057f20f883e','2010-09-11 21:30:20','2011-11-29 16:09:06',NULL,'-','-',NULL,NULL,NULL,'--','-','-',1,'-',NULL,NULL,'-','-','-')", "description": "Inserts a new user with id 216, name S, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 216, name S, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (216, 'S', 'password', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the following values:\n  \u2022 id: 216\n  \u2022 name: S\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 243, name '\u5e94\u987a\u5e06', password '', and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (243,'200828800223','\u5e94\u987a\u5e06','e10adc3949ba59abbe56e057f20f883e','2010-09-19 07:35:32','2011-11-29 16:09:06',NULL,'','',4,12,5,'\u7f16\u7801\u4e0e\u6d4b\u8bd50802','\u5c4f\u5cf0\u6821\u533a','\u4e1c2 208',1,'stop_lian',NULL,NULL,'','1058926966','\u7537')", "description": "Inserts a new user with id 243, name '\u5e94\u987a\u5e06', password '', and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "243", "\u5e94\u987a\u5e06", "e10adc3949ba5"], "instruction": "Write a SQL query to insert a new user with id 243, name '\u5e94\u987a\u5e06', password '', and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name) VALUES (243, '\u5e94\u987a\u5e06');\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 243;"}
{"seed": "/* Inserts a new user with id 276, name \u5f90\u9e3f\u6770, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (276,'200819100329','\u5f90\u9e3f\u6770','e10adc3949ba59abbe56e057f20f883e','2010-09-26 21:57:03','2011-11-29 16:09:06',NULL,'590685','13666652011',4,7,5,'','\u5c4f\u5cf0\u6821\u533a','',1,'',NULL,NULL,'','','\u7537')", "description": "Inserts a new user with id 276, name \u5f90\u9e3f\u6770, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "276", "\u5f90\u9e3f\u6770", "e10adc3"], "instruction": "Write a SQL query to insert a new user with id 276, name \u5f90\u9e3f\u6770, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (276, '\u5f90\u9e3f\u6770', 'password', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 304, name '\u8d75\u594e', password '', and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (304,'200902540227','\u8d75\u594e','e10adc3949ba59abbe56e057f20f883e','2010-09-26 23:00:38','2011-11-29 16:09:06',NULL,'513770','13758264692',2,13,5,'\u6d4b\u63a70902\u73ed','\u671d\u6656\u6821\u533a','\u5c1a5\uff0c102',1,'',NULL,NULL,'1990-06-18','970057791','\u7537')", "description": "Inserts a new user with id 304, name '\u8d75\u594e', password '', and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "304", "200902540227"], "instruction": "Write a SQL query to insert a new user with id 304, name '\u8d75\u594e', password '', and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\nVALUES (304, '\u8d75\u594e', '');\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 304;"}
{"seed": "/* Inserts a new user with id 325, name \u77f3\u71d5\u8d85, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (325,'200817330315','\u77f3\u71d5\u8d85','e10adc3949ba59abbe56e057f20f883e','2010-12-04 22:34:29','2011-11-29 16:09:06',NULL,'536989','15158130790',2,12,5,'\u8f66\u8f86\u8f66\u8f860801','\u671d\u6656\u6821\u533a','\u7efc\u5408311',0,'\u5de5\u5927\u53e3\u6c34\u7ad9',NULL,NULL,'2010-10-21','461342237','\u7537')", "description": "Inserts a new user with id 325, name \u77f3\u71d5\u8d85, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "325", "200817330315"], "instruction": "Write a SQL query to insert a new user with id 325, name \u77f3\u71d5\u8d85, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (325, '\u77f3\u71d5\u8d85', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 325\n  \u2022 name: \u77f3\u71d5\u8d85\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 327, name \u5f90\u82ac, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (327,'200918590119','\u5f90\u82ac','e10adc3949ba59abbe56e057f20f883e','2010-12-05 19:18:08','2011-11-29 16:09:06',NULL,'','',17,12,5,'','\u671d\u6656\u6821\u533a','',1,'\u5f50\u5bf8\u6797\u5915',NULL,NULL,'','','\u5973')", "description": "Inserts a new user with id 327, name \u5f90\u82ac, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "\u5f90\u82ac", "\u671d\u6656\u6821\u533a", "\u5f50"], "instruction": "Write a SQL query to insert a new user with id 327, name \u5f90\u82ac, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (327, '\u5f90\u82ac', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new user into the users table with the following values:\n  \u2022 id: 327\n  \u2022 name: \u5f90\u82ac\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 327;"}
{"seed": "/* Inserts a new user with id 333, name '\u5434\u658c', password '', and active status 1. */\nINSERT INTO `qt_user` VALUES (333,'200926680218','\u5434\u658c','e10adc3949ba59abbe56e057f20f883e','2010-12-19 18:06:10','2011-11-29 16:09:06',NULL,'','',NULL,NULL,NULL,'','-','',1,'',NULL,NULL,'','','-')", "description": "Inserts a new user with id 333, name '\u5434\u658c', password '', and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "333", "200926680218"], "instruction": "Write a SQL query to insert a new user with id 333, name '\u5434\u658c', password '', and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, a name column to store the user\u2019s name as text, a password column to store the user\u2019s password as text, and an active column to store the user\u2019s active status as an integer.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (333, '\u5434\u658c', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 333\n  \u2022 name: \u5434\u658c\n  \u2022 password:\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 352, name \u534e\u54f2\u822a, password , and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (352,'201001391508','\u534e\u54f2\u822a','061cbc68121c2200abd94ab2eac13262','2011-03-14 21:50:00','2011-11-29 16:09:06',NULL,'514518','18767117884',1,11,5,'\u5316\u6750\u5927\u4e13\u4e1a15','\u5c4f\u5cf0\u6821\u533a','\u4e1c17#611',1,'\u601d\u884e',NULL,NULL,'1991-07-16','631160344','\u7537')", "description": "Inserts a new user with id 352, name \u534e\u54f2\u822a, password , and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "\u534e\u54f2\u822a", "18767117884"], "instruction": "Write a SQL query to insert a new user with id 352, name \u534e\u54f2\u822a, password , and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\nVALUES (352, '\u534e\u54f2\u822a', NULL);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 354, name \"\u5f90\u5b81\", password \"\", and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (354,'200926630324','\u5f90\u5b81','e10adc3949ba59abbe56e057f20f883e','2011-03-14 21:52:04','2011-11-29 16:09:06',NULL,'515950','15068821319',4,4,5,'\u8ba1\u7b97\u673a09','\u5c4f\u5cf0\u6821\u533a','',0,'',NULL,NULL,'','173358672','\u5973')", "description": "Inserts a new user with id 354, name \"\u5f90\u5b81\", password \"\", and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "\u5f90\u5b81", "15068821319"], "instruction": "Write a SQL query to insert a new user with id 354, name \"\u5f90\u5b81\", password \"\", and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\nVALUES (354, \"\u5f90\u5b81\", \"\");\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 358, name '\u6613\u8096\u5cf0', password '', and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (358,'200926470225','\u6613\u8096\u5cf0','e10adc3949ba59abbe56e057f20f883e','2011-03-14 21:55:08','2011-11-29 16:09:06',NULL,'','18989488078',4,4,5,'\u6570\u5a920902','\u5c4f\u5cf0\u6821\u533a','',0,'\u5de6\u6c27',NULL,NULL,'','490626983','\u7537')", "description": "Inserts a new user with id 358, name '\u6613\u8096\u5cf0', password '', and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "358", "'200926470225"], "instruction": "Write a SQL query to insert a new user with id 358, name '\u6613\u8096\u5cf0', password '', and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\nVALUES (358, '\u6613\u8096\u5cf0', '');\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 358;"}
{"seed": "/* Inserts a new user with id 361, name Lrb, and so on. */\nINSERT INTO `qt_user` VALUES (361,'201007760115','\u8d56\u8339\u5f6c','f31c629737ede7ce40263ce269ea10f8','2011-03-14 21:57:19','2011-11-29 16:09:06',NULL,'523261','18767119057',3,11,4,'\u81ea\u52a8\u53161001','\u5c4f\u5cf0\u6821\u533a','\u897f3-408',1,'Lrb',NULL,NULL,'1992-06-06','568129591','\u5973')", "description": "Inserts a new user with id 361, name Lrb, and so on.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "id", "name", "f31c629737ede7ce4026"], "instruction": "Write a SQL query to insert a new user with id 361, name Lrb, and so on.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name)\n  VALUES (361, 'Lrb');\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 376, name \u90d1\u654f\u654f, password , and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (376,'201008480125','\u90d1\u654f\u654f ','e10adc3949ba59abbe56e057f20f883e','2011-03-15 11:22:45','2011-11-29 16:09:06',NULL,'523546','18767119398',9,15,4,'\u5bf9\u5916\u6c49\u8bed\u5bf9\u5916\u6c49\u8bed1001','\u5c4f\u5cf0\u6821\u533a','\u897f15-505',0,'',NULL,NULL,'1991-11-08','425760599','\u5973')", "description": "Inserts a new user with id 376, name \u90d1\u654f\u654f, password , and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL"], "instruction": "Write a SQL query to insert a new user with id 376, name \u90d1\u654f\u654f, password , and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\nVALUES (376, '\u90d1\u654f\u654f', NULL);\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 376;"}
{"seed": "/* Inserts a new user with id 381, name yys, password , and active status 1. */\nINSERT INTO `qt_user` VALUES (381,'yys','\u6768\u5ef6\u5723','e10adc3949ba59abbe56e057f20f883e','2011-03-17 09:02:25','2011-11-29 16:09:06',NULL,'667020','13456797020',NULL,1,NULL,'','\u5c4f\u5cf0\u6821\u533a','',0,'',NULL,NULL,'','','\u7537')", "description": "Inserts a new user with id 381, name yys, password , and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "381", "yys", "e10adc3949ba59"], "instruction": "Write a SQL query to insert a new user with id 381, name yys, password , and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active)\nVALUES (381, 'yys', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new user into the users table with the following values:\n  \u2022 id: 381\n  \u2022 name: yys\n  \u2022 password:\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 392, name S, and active status 1. */\nINSERT INTO `qt_user` VALUES (392,'201105910915','\u6c88\u68a6\u8776','eba8dfdd8b9a44f0cda095b05a94874f','2011-09-22 22:53:48','2011-11-29 16:09:06',NULL,'531589','18868813330',5,14,5,'\u5de5\u5546\u7ba1\u74061109','-','',0,'',NULL,NULL,'1992-11-07','983698650','\u5973')", "description": "Inserts a new user with id 392, name S, and active status 1.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "18868813330", "98369"], "instruction": "Write a SQL query to insert a new user with id 392, name S, and active status 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 392, a name of S, and an active status of 1.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, active)\nVALUES (392, 'S', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 411, name \u738b\u4f73\u6167, and password . */\nINSERT INTO `qt_user` VALUES (411,'201011290713','\u738b\u4f73\u6167','ab3bf522ac40fc7e379cfd1daae918ea','2011-09-23 21:18:06','2011-11-29 16:09:06',NULL,'526576','',16,3,5,'\u89c6\u4f201007','\u5c4f\u5cf0\u6821\u533a','',0,'',NULL,NULL,'','273147395','\u5973')", "description": "Inserts a new user with id 411, name \u738b\u4f73\u6167, and password .", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "\u738b\u4f73\u6167", "\u738b\u4f73\u6167", "\u738b\u4f73"], "instruction": "Write a SQL query to insert a new user with id 411, name \u738b\u4f73\u6167, and password .", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 411, a name of \u738b\u4f73\u6167, and a password of .\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\n  VALUES (411, '\u738b\u4f73\u6167', '.');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 421, name \u5305\u9896\u6ce2, and password . */\nINSERT INTO `qt_user` VALUES (421,'201109300601','\u5305\u9896\u6ce2','c1ae6056d71b1fb6f58b06955fa46a28','2011-09-25 15:47:09','2011-11-29 16:09:06',NULL,'535487','18868815263',11,6,5,'\u82f1\u8bed1106','\u5c4f\u5cf0\u6821\u533a','\u897f15#516',0,'\u5c0f\u5305\u7eb8',NULL,NULL,'1992-11-06','719648073','\u5973')", "description": "Inserts a new user with id 421, name \u5305\u9896\u6ce2, and password .", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "18868815263", "\u82f1\u8bed110"], "instruction": "Write a SQL query to insert a new user with id 421, name \u5305\u9896\u6ce2, and password .", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 421, a name of \u5305\u9896\u6ce2, and a password of .\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\n  VALUES (421, '\u5305\u9896\u6ce2', ' ');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 422, name \u90d1\u5b87\u4fca, and password . */\nINSERT INTO `qt_user` VALUES (422,'201104160226','\u90d1\u5b87\u4fca','e29b064d7163806d6a53d381a5ce53c2','2011-09-25 15:47:46','2011-11-29 16:09:06',NULL,'530059','18868812653',6,9,5,'\u571f\u672802','\u5c4f\u5cf0\u6821\u533a','\u4e1c\u516d225',0,'',NULL,NULL,'8\u670818','124768134','-')", "description": "Inserts a new user with id 422, name \u90d1\u5b87\u4fca, and password .", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "\u90d1\u5b87\u4fca", "\u5c4f\u5cf0\u6821\u533a", "\u4e1c\u516d22"], "instruction": "Write a SQL query to insert a new user with id 422, name \u90d1\u5b87\u4fca, and password .", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 422, a name of \u90d1\u5b87\u4fca, and a password of .\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\n  VALUES (422, '\u90d1\u5b87\u4fca', '.');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 456, name '\u97e6\u6653\u6d01', and password ''. */\nINSERT INTO `qt_user` VALUES (456,'201101391018','\u97e6\u6653\u6d01','296eac8afba73c3a8489c8bd5f09c86b','2011-09-25 15:57:28','2011-11-29 16:09:06',NULL,'522967','18758221570',1,16,5,'\u5316\u5b66\u5de5\u7a0b\u4e0e\u6750\u6599\u7c7b10','\u5c4f\u5cf0\u6821\u533a','\u5bb6\u548c\u4e1c\u82d111\u53f7526',0,'\u7cd6\u846b\u82a6',NULL,NULL,'1992-03-05','1181060063','\u5973')", "description": "Inserts a new user with id 456, name '\u97e6\u6653\u6d01', and password ''.", "concepts": ["INSERT INTO", "VALUES", "qt_user", "VALUES", "18758221570", "\u7cd6\u846b"], "instruction": "Write a SQL query to insert a new user with id 456, name '\u97e6\u6653\u6d01', and password ''.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. The user should have an id of 456, a name of '\u97e6\u6653\u6d01', and an empty password.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\n  VALUES (456, '\u97e6\u6653\u6d01', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 507, name '\u4f59\u79cb\u5a77', password '', and other fields set to NULL. */\nINSERT INTO `qt_user` VALUES (507,'201026810727','\u4f59\u79cb\u5a77','e10adc3949ba59abbe56e057f20f883e','2011-10-06 23:48:55','2011-11-29 16:09:06',NULL,'527850','',4,4,6,'\u8ba1\u7b97\u673a\u5b9e\u9a8c\u73ed1001','\u5c4f\u5cf0\u6821\u533a','\u897f10#522',0,'\u963f\u79cb',NULL,NULL,'','1641263445','\u5973')", "description": "Inserts a new user with id 507, name '\u4f59\u79cb\u5a77', password '', and other fields set to NULL.", "concepts": ["INSERT INTO", "VALUES", "`qt_user`", "VALUES", "\u4f59\u79cb\u5a77", "\u5c4f\u5cf0\u6821\u533a", "\u897f10"], "instruction": "Write a SQL query to insert a new user with id 507, name '\u4f59\u79cb\u5a77', password '', and other fields set to NULL.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 507, a name of \u4f59\u79cb\u5a77, and other fields set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password)\nVALUES (507, '\u4f59\u79cb\u5a77', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 507\n  \u2022 name: \u4f59\u79cb\u5a77\n  \u2022 password: NULL\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users WHERE id = 507;"}
{"seed": "/* Creates a table named qt_userrole with three columns: id (integer primary key), roleID (integer), and userID (integer). */\nCREATE TABLE `qt_userrole` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `roleID` int(11) DEFAULT NULL COMMENT '\u89d2\u8272ID',\n  `userID` int(11) DEFAULT NULL COMMENT '\u7528\u6237ID',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 COMMENT='\u7528\u6237\u89d2\u8272\u5bf9\u5e94\u8868'", "description": "Creates a table named qt_userrole with three columns: id (integer primary key), roleID (integer), and userID (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "KEY", "TABLE", "COMMENT", "DEFAULT", "CHARSET", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named qt_userrole with three columns: id (integer primary key), roleID (integer), and userID (integer).", "response": "-- Reasoning:\nWe need a new table named qt_userrole. It should have an integer primary key so that each row has a unique identifier, and two foreign keys to reference the user and role tables.\n\n-- Solution:\n```sql\nCREATE TABLE qt_userrole (\n  id INTEGER PRIMARY KEY,\n  roleID INTEGER,\n  userID INTEGER,\n  FOREIGN KEY (roleID) REFERENCES roles (id),\n  FOREIGN KEY (userID) REFERENCES users (id)\n);\n```\n\n-- Explanation:\nThis statement defines the qt_userrole table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 roleID: integer, foreign key to the roles table\n  \u2022 userID: integer, foreign key to the users table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('qt_userrole');"}
{"seed": "/* Inserts a new row into the qt_userrole table with the values 14, 1, and 2. */\nINSERT INTO `qt_userrole` VALUES (14,1,2)", "description": "Inserts a new row into the qt_userrole table with the values 14, 1, and 2.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_userrole table with the values 14, 1, and 2.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_userrole table with the values 14, 1, and 2.\n\n-- Solution:\n```sql\nINSERT INTO qt_userrole (user_id, role_id, created_at)\nVALUES (14, 1, 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_userrole table with the values 14, 1, and 2.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_userrole;"}
{"seed": "/* Inserts a new row into the qt_userrole table with the values 15, 6, and 3. */\nINSERT INTO `qt_userrole` VALUES (15,6,3)", "description": "Inserts a new row into the qt_userrole table with the values 15, 6, and 3.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the qt_userrole table with the values 15, 6, and 3.", "response": "-- Reasoning:\nWe need to insert a new row into the qt_userrole table with the values 15, 6, and 3.\n\n-- Solution:\n```sql\nINSERT INTO qt_userrole (user_id, role_id, company_id)\nVALUES (15, 6, 3);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the qt_userrole table with the values 15, 6, and 3.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM qt_userrole;"}
{"seed": "/* Inserts a new row into the utl_alert_type_role table with the alert_type_id, role_id, and utl_id values. */\nINSERT INTO utl_alert_type_role ( alert_type_id, role_id, utl_id )\nVALUES ( 2, 10014, 10 )", "description": "Inserts a new row into the utl_alert_type_role table with the alert_type_id, role_id, and utl_id values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the utl_alert_type_role table with the alert_type_id, role_id, and utl_id values.", "response": "-- Reasoning:\nWe need to insert a new row into the utl_alert_type_role table. It should have the alert_type_id, role_id, and utl_id values.\n\n-- Solution:\n```sql\nINSERT INTO utl_alert_type_role (alert_type_id, role_id, utl_id)\nVALUES (1, 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the utl_alert_type_role table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM utl_alert_type_role;"}
{"seed": "/* Inserts a new row into the utl_alert_type_role table with the given values. */\nINSERT INTO utl_alert_type_role ( alert_type_id, role_id, utl_id )\nVALUES ( 12, 10014, 10 )", "description": "Inserts a new row into the utl_alert_type_role table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the utl_alert_type_role table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the utl_alert_type_role table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO utl_alert_type_role (alert_type_id, role_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the utl_alert_type_role table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM utl_alert_type_role;"}
{"seed": "/* Drops the database named mmsdb if it exists. */\nDROP DATABASE IF EXISTS `mmsdb`", "description": "Drops the database named mmsdb if it exists.", "concepts": ["DROP DATABASE"], "instruction": "Write a SQL query to drop the database named mmsdb if it exists.", "response": "-- Reasoning:\nWe need to delete the database named mmsdb if it exists.\n\n-- Solution:\n```sql\nDROP DATABASE IF EXISTS mmsdb;\n```\n\n-- Explanation:\nThis statement deletes the database named mmsdb if it exists.\n\n-- Tests:\n-- 1. Verify database is gone\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named mmsdb with the default character set. */\nCREATE DATABASE `mmsdb`\n    CHARACTER SET", "description": "Creates a database named mmsdb with the default character set.", "concepts": ["CREATE DATABASE", "CHARACTER SET"], "instruction": "Write a SQL query to create a database named mmsdb with the default character set.", "response": "-- Reasoning:\nWe need to create a new database named mmsdb with the default character set.\n\n-- Solution:\n```sql\nCREATE DATABASE mmsdb;\n```\n\n-- Explanation:\nThis statement creates a new database named mmsdb.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Drops the table named useraccount if it exists. */\nDROP TABLE IF EXISTS `useraccount`", "description": "Drops the table named useraccount if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named useraccount if it exists.", "response": "-- Reasoning:\nWe need to delete the table named useraccount if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS useraccount;\n```\n\n-- Explanation:\nThis statement deletes the useraccount table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('useraccount');"}
{"seed": "/* Drops the table named t_user if it exists. */\nDROP TABLE IF EXISTS `t_user`", "description": "Drops the table named t_user if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_user if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_user if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_user;\n```\n\n-- Explanation:\nThis statement drops the table named t_user if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_user');"}
{"seed": "/* Drops the table named roleprivilege if it exists. */\nDROP TABLE IF EXISTS `roleprivilege`", "description": "Drops the table named roleprivilege if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named roleprivilege if it exists.", "response": "-- Reasoning:\nWe need to drop the table named roleprivilege if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS roleprivilege;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('roleprivilege');"}
{"seed": "/* Drops the table named rolelist if it exists. */\nDROP TABLE IF EXISTS `rolelist`", "description": "Drops the table named rolelist if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named rolelist if it exists.", "response": "-- Reasoning:\nWe need to delete the table named rolelist if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS rolelist;\n```\n\n-- Explanation:\nThis statement deletes the table named rolelist if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('rolelist');"}
{"seed": "/* Drops the table named product if it exists. */\nDROP TABLE IF EXISTS `product`", "description": "Drops the table named product if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "product"], "instruction": "Write a SQL query to drop the table named product if it exists.", "response": "-- Reasoning:\nWe need to drop the table named product if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS product;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('product');"}
{"seed": "/* Drops the table named privilegelist if it exists. */\nDROP TABLE IF EXISTS `privilegelist`", "description": "Drops the table named privilegelist if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named privilegelist if it exists.", "response": "-- Reasoning:\nWe need to delete the table named privilegelist if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS privilegelist;\n```\n\n-- Explanation:\nThis statement deletes the table named privilegelist if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('privilegelist');"}
{"seed": "/* Drops the table named demo if it exists. */\nDROP TABLE IF EXISTS `demo`", "description": "Drops the table named demo if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named demo if it exists.", "response": "-- Reasoning:\nWe need to drop the table named demo if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS demo;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('demo');"}
{"seed": "/* Drops the table checkbalance if it exists. */\nDROP TABLE IF EXISTS `checkbalance`", "description": "Drops the table checkbalance if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the checkbalance table if it exists.", "response": "-- Reasoning:\nWe need to drop the checkbalance table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS checkbalance;\n```\n\n-- Explanation:\nThis DROP statement removes the checkbalance table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('checkbalance');"}
{"seed": "/* Drops the table named translate if it exists. */\nDROP TABLE IF EXISTS `translate`", "description": "Drops the table named translate if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "translate"], "instruction": "Write a SQL query to drop the table named translate if it exists.", "response": "-- Reasoning:\nWe need to delete the table named translate if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS translate;\n```\n\n-- Explanation:\nThis statement deletes the table named translate if it exists.\n\n-- Tests:\n-- 1. Verify table is deleted\nPRAGMA table_info('translate');"}
{"seed": "/* Drops the table named scrap if it exists. */\nDROP TABLE IF EXISTS `scrap`", "description": "Drops the table named scrap if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named scrap if it exists.", "response": "-- Reasoning:\nWe need to drop the table named scrap if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS scrap;\n```\n\n-- Explanation:\nThis statement drops the table named scrap if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('scrap');"}
{"seed": "/* Drops the table named repair if it exists. */\nDROP TABLE IF EXISTS `repair`", "description": "Drops the table named repair if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named repair if it exists.", "response": "-- Reasoning:\nWe need to delete the table named repair if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS repair;\n```\n\n-- Explanation:\nThis statement deletes the table named repair if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('repair');"}
{"seed": "/* Drops the table named buy if it exists. */\nDROP TABLE IF EXISTS `buy`", "description": "Drops the table named buy if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named buy if it exists.", "response": "-- Reasoning:\nWe need to delete the table named buy if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS buy;\n```\n\n-- Explanation:\nThis statement deletes the table named buy if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('buy');"}
{"seed": "/* Drops the table named provider if it exists. */\nDROP TABLE IF EXISTS `provider`", "description": "Drops the table named provider if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named provider if it exists.", "response": "-- Reasoning:\nWe need to drop the provider table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS provider;\n```\n\n-- Explanation:\nThis statement drops the provider table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('provider');"}
{"seed": "/* Drops the table balance if it exists. */\nDROP TABLE IF EXISTS `balance`", "description": "Drops the table balance if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the balance table if it exists.", "response": "-- Reasoning:\nWe need to drop the balance table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS balance;\n```\n\n-- Explanation:\nThis DROP statement removes the balance table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('balance');"}
{"seed": "/* Drops the table named department if it exists. */\nDROP TABLE IF EXISTS `department`", "description": "Drops the table named department if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named department if it exists.", "response": "-- Reasoning:\nWe need to drop the table named department if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS department;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('department');"}
{"seed": "/* Drops the table named category if it exists. */\nDROP TABLE IF EXISTS `category`", "description": "Drops the table named category if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "category"], "instruction": "Write a SQL query to drop the table named category if it exists.", "response": "-- Reasoning:\nWe need to delete the category table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS category;\n```\n\n-- Explanation:\nThis statement deletes the category table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('category');"}
{"seed": "/* Drops the table named area if it exists. */\nDROP TABLE IF EXISTS `area`", "description": "Drops the table named area if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named area if it exists.", "response": "-- Reasoning:\nWe need to drop the table named area if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS area;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('area');"}
{"seed": "/* Creates a table named area with four columns: AREAID (integer), AREANAME (varchar), and RELATIVE (integer). AREAID is the primary key. */\nCREATE TABLE `area` (\n  `AREAID` INTEGER(11) NOT NULL,\n  `AREANAME` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  `RELATIVE` INTEGER(11) DEFAULT NULL,\n  PRIMARY KEY USING BTREE (`AREAID`) COMMENT ''\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=5461 CHARACTER SET 'utf8'", "description": "Creates a table named area with four columns: AREAID (integer), AREANAME (varchar), and RELATIVE (integer). AREAID is the primary key.", "concepts": ["CREATE TABLE", "INTEGER", "PRIMARY KEY", "VARCHAR", "AREAID", "AREANAME", "RELATIVE"], "instruction": "Write a SQL query to create a table named area with four columns: AREAID (integer), AREANAME (varchar), and RELATIVE (integer). AREAID is the primary key.", "response": "-- Reasoning:\nWe need a new table named area. It should have an integer primary key so that each area has a unique identifier, and a name column to store the area\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE area (\n  AREAID INT PRIMARY KEY,\n  AREANAME VARCHAR(255),\n  RELATIVE INT\n);\n```\n\n-- Explanation:\nThis statement defines the area table with three columns:\n  \u2022 AREAID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 AREANAME: variable\u2010length string up to 255 characters\n  \u2022 RELATIVE: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('area');"}
{"seed": "/* Creates a table named category with two columns: CID (integer) and CNAME (varchar). */\nCREATE TABLE `category` (\n  `CID` INTEGER(9) NOT NULL,\n  `CNAME` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  PRIMARY KEY USING BTREE (`CID`) COMMENT ''\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=5461 CHARACTER SET 'utf8'", "description": "Creates a table named category with two columns: CID (integer) and CNAME (varchar).", "concepts": ["CREATE TABLE", "INTEGER", "PRIMARY KEY", "VARCHAR", "COMMENT"], "instruction": "Write a SQL query to create a table named category with two columns: CID (integer) and CNAME (varchar).", "response": "-- Reasoning:\nWe need a new table named category. It should have an integer primary key so that each category has a unique identifier, and a name column to store the category\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE category (\n  CID INT PRIMARY KEY,\n  CNAME VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the category table with two columns:\n  \u2022 CID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 CNAME: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('category');"}
{"seed": "/* Creates a table named department with four columns: DEPARTID (integer), DEPARTNAME (varchar), AREAID (integer), and a primary key on the DEPARTID column. It also creates an index on the AREAID column and a foreign key constraint on the AREAID column that references the AREAID column in the area table. */\nCREATE TABLE `department` (\n  `DEPARTID` INTEGER(11) NOT NULL,\n  `DEPARTNAME` VARCHAR(20) COLLATE utf8_general_ci NOT NULL,\n  `AREAID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`DEPARTID`) COMMENT '',\n   INDEX `AREAID` USING BTREE (`AREAID`) COMMENT '',\n  CONSTRAINT `department_ibfk_1` FOREIGN KEY (`AREAID`) REFERENCES `area` (`AREAID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=5461 CHARACTER SET 'utf8'", "description": "Creates a table named department with four columns: DEPARTID (integer), DEPARTNAME (varchar), AREAID (integer), and a primary key on the DEPARTID column. It also creates an index on the AREAID column and a foreign key constraint on the AREAID column that references the AREAID column in the area table.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "INDEX", "FOREIGN KEY", "CONSTRAINT", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named department with four columns: DEPARTID (integer), DEPARTNAME (varchar), AREAID (integer), and a primary key on the DEPARTID column. It also creates an index on the AREAID column and a foreign key constraint on the AREAID column that references the AREAID column in the area table.", "response": "-- Reasoning:\nWe need a new table named department. It should have an integer primary key so that each department has a unique identifier, and a name column to store the department\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE department (\n  DEPARTID INT PRIMARY KEY,\n  DEPARTNAME VARCHAR(255),\n  AREAID INT,\n  FOREIGN KEY (AREAID) REFERENCES area(AREAID)\n);\n```\n\n-- Explanation:\nThis statement defines the department table with four columns:\n  \u2022 DEPARTID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 DEPARTNAME: variable\u2010length string up to 255 characters\n  \u2022 AREAID: integer, references the AREAID column in the area table\n  \u2022 FOREIGN KEY (AREAID) REFERENCES area(AREAID)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('department');"}
{"seed": "/* Creates a table named balance with seven columns: BID (integer primary key), BNAME (varchar), BCOUNT (double), PRICE (decimal), BDATE (datetime), CID (integer), and DEPARTID (integer). The table has a foreign key constraint on CID and DEPARTID referencing the CID and DEPARTID columns of the category and department tables, respectively. */\nCREATE TABLE `balance` (\n  `BID` INTEGER(11) NOT NULL,\n  `BNAME` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  `BCOUNT` DOUBLE NOT NULL,\n  `PRICE` DECIMAL(7,2) NOT NULL,\n  `BDATE` DATETIME NOT NULL,\n  `CID` INTEGER(11) NOT NULL,\n  `DEPARTID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`BID`) COMMENT '',\n   INDEX `CID` USING BTREE (`CID`) COMMENT '',\n   INDEX `DEPARTID` USING BTREE (`DEPARTID`) COMMENT '',\n  CONSTRAINT `balance_ibfk_1` FOREIGN KEY (`CID`) REFERENCES `category` (`CID`),\n  CONSTRAINT `balance_ibfk_2` FOREIGN KEY (`DEPARTID`) REFERENCES `department` (`DEPARTID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named balance with seven columns: BID (integer primary key), BNAME (varchar), BCOUNT (double), PRICE (decimal), BDATE (datetime), CID (integer), and DEPARTID (integer). The table has a foreign key constraint on CID and DEPARTID referencing the CID and DEPARTID columns of the category and department tables, respectively.", "concepts": ["CREATE TABLE", "BID", "BNAME", "BCOUNT", "PRICE", "BDATE", "CID", "DEPARTID", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named balance with seven columns: BID (integer primary key), BNAME (varchar), BCOUNT (double), PRICE (decimal), BDATE (datetime), CID (integer), and DEPARTID (integer). The table has a foreign key constraint on CID and DEPARTID referencing the CID and DEPARTID columns of the category and department tables, respectively.", "response": "-- Reasoning:\nWe need a new table named balance. It should have an integer primary key so that each balance has a unique identifier, and a name column to store the balance\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE balance (\n  BID INT PRIMARY KEY,\n  BNAME VARCHAR(255),\n  BCOUNT DOUBLE,\n  PRICE DECIMAL,\n  BDATE DATETIME,\n  CID INT,\n  DEPARTID INT,\n  FOREIGN KEY (CID) REFERENCES category(CID),\n  FOREIGN KEY (DEPARTID) REFERENCES department(DEPARTID)\n);\n```\n\n-- Explanation:\nThis statement defines the balance table with seven columns:\n  \u2022 BID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BNAME: variable\u2010length string up to 255 characters\n  \u2022 BCOUNT: double\n  \u2022 PRICE: decimal\n  \u2022 BDATE: datetime\n  \u2022 CID: integer\n  \u2022 DEPARTID: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('balance');"}
{"seed": "/* Creates a table named provider with four columns: PROVID (integer), PROVNAME (varchar), ADDRESS (varchar), and PHONE (varchar). */\nCREATE TABLE `provider` (\n  `PROVID` INTEGER(11) NOT NULL,\n  `PROVNAME` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  `ADDRESS` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  `PHONE` VARCHAR(20) COLLATE utf8_general_ci NOT NULL,\n  PRIMARY KEY USING BTREE (`PROVID`) COMMENT ''\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named provider with four columns: PROVID (integer), PROVNAME (varchar), ADDRESS (varchar), and PHONE (varchar).", "concepts": ["CREATE TABLE", "INTEGER", "PRIMARY KEY", "VARCHAR", "NOT", "PRIMARY KEY", "COMMENT", "ENGINE", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named provider with four columns: PROVID (integer), PROVNAME (varchar), ADDRESS (varchar), and PHONE (varchar).", "response": "-- Reasoning:\nWe need a new table named provider. It should have an integer primary key so that each provider has a unique identifier, and a name column to store the provider\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE provider (\n  PROVID INT PRIMARY KEY,\n  PROVNAME VARCHAR(255),\n  ADDRESS VARCHAR(255),\n  PHONE VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the provider table with four columns:\n  \u2022 PROVID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PROVNAME: variable\u2010length string up to 255 characters\n  \u2022 ADDRESS: variable\u2010length string up to 255 characters\n  \u2022 PHONE: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('provider');"}
{"seed": "/* Creates a table named buy with five columns: BUYID (integer primary key), BUYCOUNT (double), BUYTIME (datetime), PROVID (integer), and DEPARTID (integer). It also creates two indexes: DEPARTID and PROVID. It also creates two foreign key constraints: buy_ibfk_1 and buy_ibfk_2. */\nCREATE TABLE `buy` (\n  `BUYID` INTEGER(11) NOT NULL,\n  `BUYCOUNT` DOUBLE NOT NULL,\n  `BUYTIME` DATETIME NOT NULL,\n  `PROVID` INTEGER(11) NOT NULL,\n  `DEPARTID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`BUYID`) COMMENT '',\n   INDEX `DEPARTID` USING BTREE (`DEPARTID`) COMMENT '',\n   INDEX `PROVID` USING BTREE (`PROVID`) COMMENT '',\n  CONSTRAINT `buy_ibfk_1` FOREIGN KEY (`DEPARTID`) REFERENCES `department` (`DEPARTID`),\n  CONSTRAINT `buy_ibfk_2` FOREIGN KEY (`PROVID`) REFERENCES `provider` (`PROVID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named buy with five columns: BUYID (integer primary key), BUYCOUNT (double), BUYTIME (datetime), PROVID (integer), and DEPARTID (integer). It also creates two indexes: DEPARTID and PROVID. It also creates two foreign key constraints: buy_ibfk_1 and buy_ibfk_2.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "INDEX", "FOREIGN KEY", "CONSTRAINT", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named buy with five columns: BUYID (integer primary key), BUYCOUNT (double), BUYTIME (datetime), PROVID (integer), and DEPARTID (integer). It also creates two indexes: DEPARTID and PROVID. It also creates two foreign key constraints: buy_ibfk_1 and buy_ibfk_2.", "response": "-- Reasoning:\nWe need a new table named buy. It should have an integer primary key so that each buy has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE buy (\n  BUYID INT PRIMARY KEY,\n  BUYCOUNT DOUBLE,\n  BUYTIME DATETIME,\n  PROVID INT,\n  DEPARTID INT,\n  FOREIGN KEY (PROVID) REFERENCES product (PROVID),\n  FOREIGN KEY (DEPARTID) REFERENCES department (DEPARTID)\n);\n```\n\n-- Explanation:\nThis statement defines the buy table with five columns:\n  \u2022 BUYID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BUYCOUNT: double\n  \u2022 BUYTIME: datetime\n  \u2022 PROVID: integer\n  \u2022 DEPARTID: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('buy');"}
{"seed": "/* Creates a table named repair with five columns: REPAIRID (integer primary key), RCOUNT (double), RTIME (datetime), DEPARTID (integer), and BID (integer). It also creates two indexes: BID and DEPARTID. It also creates two foreign key constraints: repair_ibfk_1 and repair_ibfk_2. */\nCREATE TABLE `repair` (\n  `REPAIRID` INTEGER(11) NOT NULL,\n  `RCOUNT` DOUBLE NOT NULL,\n  `RTIME` DATETIME NOT NULL,\n  `DEPARTID` INTEGER(11) NOT NULL,\n  `BID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`REPAIRID`) COMMENT '',\n   INDEX `BID` USING BTREE (`BID`) COMMENT '',\n   INDEX `DEPARTID` USING BTREE (`DEPARTID`) COMMENT '',\n  CONSTRAINT `repair_ibfk_1` FOREIGN KEY (`BID`) REFERENCES `balance` (`BID`),\n  CONSTRAINT `repair_ibfk_2` FOREIGN KEY (`DEPARTID`) REFERENCES `department` (`DEPARTID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named repair with five columns: REPAIRID (integer primary key), RCOUNT (double), RTIME (datetime), DEPARTID (integer), and BID (integer). It also creates two indexes: BID and DEPARTID. It also creates two foreign key constraints: repair_ibfk_1 and repair_ibfk_2.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "INDEX", "FOREIGN KEY", "CONSTRAINT", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named repair with five columns: REPAIRID (integer primary key), RCOUNT (double), RTIME (datetime), DEPARTID (integer), and BID (integer). It also creates two indexes: BID and DEPARTID. It also creates two foreign key constraints: repair_ibfk_1 and repair_ibfk_2.", "response": "-- Reasoning:\nWe need a new table named repair. It should have an integer primary key so that each repair has a unique identifier, and four other columns:\n  \u2022 RCOUNT: a double\u2010precision number\n  \u2022 RTIME: a datetime\n  \u2022 DEPARTID: an integer\n  \u2022 BID: an integer\n\n-- Solution:\n```sql\nCREATE TABLE repair (\n  REPAIRID INT PRIMARY KEY,\n  RCOUNT DOUBLE,\n  RTIME DATETIME,\n  DEPARTID INT,\n  BID INT,\n  FOREIGN KEY (DEPARTID) REFERENCES department(DEPARTID),\n  FOREIGN KEY (BID) REFERENCES building(BID)\n);\n```\n\n-- Explanation:\nThis statement defines the repair table with five columns:\n  \u2022 REPAIRID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RCOUNT: double\u2010precision number\n  \u2022 RTIME: datetime\n  \u2022 DEPARTID: integer\n  \u2022 BID: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('repair');\n\n-- 2. Verify foreign key constraints exist\nPRAGMA foreign_key_list('repair');\n\n-- 3. Verify indexes exist\nPRAGMA index_list('repair');\n\n-- 4. Verify that the indexes are correct\nPRAGMA index_info('repair_ibfk_1"}
{"seed": "/* Creates a table named scrap with five columns: SID (integer), SCOUNT (double), STIME (datetime), BID (integer), and DEPARTID (integer). The SID column is the primary key, the BID column is a foreign key referencing the BID column in the balance table, and the DEPARTID column is a foreign key referencing the DEPARTID column in the department table. */\nCREATE TABLE `scrap` (\n  `SID` INTEGER(11) NOT NULL,\n  `SCOUNT` DOUBLE NOT NULL,\n  `STIME` DATETIME NOT NULL,\n  `BID` INTEGER(11) NOT NULL,\n  `DEPARTID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`SID`) COMMENT '',\n   INDEX `BID` USING BTREE (`BID`) COMMENT '',\n   INDEX `DEPARTID` USING BTREE (`DEPARTID`) COMMENT '',\n  CONSTRAINT `scrap_ibfk_1` FOREIGN KEY (`BID`) REFERENCES `balance` (`BID`),\n  CONSTRAINT `scrap_ibfk_2` FOREIGN KEY (`DEPARTID`) REFERENCES `department` (`DEPARTID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named scrap with five columns: SID (integer), SCOUNT (double), STIME (datetime), BID (integer), and DEPARTID (integer). The SID column is the primary key, the BID column is a foreign key referencing the BID column in the balance table, and the DEPARTID column is a foreign key referencing the DEPARTID column in the department table.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "INDEX", "REFERENCES", "DATETIME", "DOUBLE", "INTEGER", "VARCHAR"], "instruction": "Write a SQL query to create a table named scrap with five columns: SID (integer), SCOUNT (double), STIME (datetime), BID (integer), and DEPARTID (integer). The SID column is the primary key, the BID column is a foreign key referencing the BID column in the balance table, and the DEPARTID column is a foreign key referencing the DEPARTID column in the department table.", "response": "-- Reasoning:\nWe need a new table named scrap. It should have an integer primary key so that each scrap has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE scrap (\n  SID INT PRIMARY KEY,\n  SCOUNT DOUBLE,\n  STIME DATETIME,\n  BID INT,\n  DEPARTID INT,\n  FOREIGN KEY (BID) REFERENCES balance(BID),\n  FOREIGN KEY (DEPARTID) REFERENCES department(DEPARTID)\n);\n```\n\n-- Explanation:\nThis statement defines the scrap table with five columns:\n  \u2022 SID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SCOUNT: double\n  \u2022 STIME: datetime\n  \u2022 BID: integer, foreign key referencing the BID column in the balance table\n  \u2022 DEPARTID: integer, foreign key referencing the DEPARTID column in the department table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('scrap');"}
{"seed": "/* Creates a table named translate with five columns: TID (integer), TCOUNT (double), TRTIME (datetime), BID (integer), and DEPARTID (integer). TID is the primary key, BID and DEPARTID are foreign keys that reference the BID and DEPARTID columns in the balance and department tables, respectively. */\nCREATE TABLE `translate` (\n  `TID` INTEGER(11) NOT NULL,\n  `TCOUNT` DOUBLE NOT NULL,\n  `TRTIME` DATETIME NOT NULL,\n  `BID` INTEGER(11) NOT NULL,\n  `DEPARTID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`TID`) COMMENT '',\n   INDEX `BID` USING BTREE (`BID`) COMMENT '',\n   INDEX `DEPARTID` USING BTREE (`DEPARTID`) COMMENT '',\n  CONSTRAINT `translate_ibfk_1` FOREIGN KEY (`BID`) REFERENCES `balance` (`BID`),\n  CONSTRAINT `translate_ibfk_2` FOREIGN KEY (`DEPARTID`) REFERENCES `department` (`DEPARTID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named translate with five columns: TID (integer), TCOUNT (double), TRTIME (datetime), BID (integer), and DEPARTID (integer). TID is the primary key, BID and DEPARTID are foreign keys that reference the BID and DEPARTID columns in the balance and department tables, respectively.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "INDEX", "BID", "DEPARTID", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named translate with five columns: TID (integer), TCOUNT (double), TRTIME (datetime), BID (integer), and DEPARTID (integer). TID is the primary key, BID and DEPARTID are foreign keys that reference the BID and DEPARTID columns in the balance and department tables, respectively.", "response": "-- Reasoning:\nWe need a new table named translate. It should have an integer primary key so that each translation has a unique identifier, and a name column to store the translation\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE translate (\n  TID INT PRIMARY KEY,\n  TCOUNT DOUBLE,\n  TRTIME DATETIME,\n  BID INT,\n  DEPARTID INT,\n  FOREIGN KEY (BID) REFERENCES balance(BID),\n  FOREIGN KEY (DEPARTID) REFERENCES department(DEPARTID)\n);\n```\n\n-- Explanation:\nThis statement defines the translate table with five columns:\n  \u2022 TID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 TCOUNT: double\n  \u2022 TRTIME: datetime\n  \u2022 BID: integer, foreign key to balance table\n  \u2022 DEPARTID: integer, foreign key to department table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('translate');"}
{"seed": "/* Creates a table named checkbalance with five columns: CHID (integer primary key), BID (integer), BUYID (integer), REPAIRID (integer), SID (integer), TID (integer). */\nCREATE TABLE `checkbalance` (\n  `CHID` INTEGER(11) NOT NULL,\n  `BUYID` INTEGER(11) NOT NULL,\n  `BID` INTEGER(11) NOT NULL,\n  `REPAIRID` INTEGER(11) NOT NULL,\n  `SID` INTEGER(11) NOT NULL,\n  `TID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`CHID`) COMMENT '',\n   INDEX `BID` USING BTREE (`BID`) COMMENT '',\n   INDEX `BUYID` USING BTREE (`BUYID`) COMMENT '',\n   INDEX `REPAIRID` USING BTREE (`REPAIRID`) COMMENT '',\n   INDEX `SID` USING BTREE (`SID`) COMMENT '',\n   INDEX `TID` USING BTREE (`TID`) COMMENT '',\n  CONSTRAINT `checkbalance_ibfk_1` FOREIGN KEY (`BID`) REFERENCES `balance` (`BID`),\n  CONSTRAINT `checkbalance_ibfk_2` FOREIGN KEY (`BUYID`) REFERENCES `buy` (`BUYID`),\n  CONSTRAINT `checkbalance_ibfk_3` FOREIGN KEY (`REPAIRID`) REFERENCES `repair` (`REPAIRID`),\n  CONSTRAINT `checkbalance_ibfk_4` FOREIGN KEY (`SID`) REFERENCES `scrap` (`SID`),\n  CONSTRAINT `checkbalance_ibfk_5` FOREIGN KEY (`TID`) REFERENCES `translate` (`TID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named checkbalance with five columns: CHID (integer primary key), BID (integer), BUYID (integer), REPAIRID (integer), SID (integer), TID (integer).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "INDEX", "REFERENCES", "COMMENT", "ENGINE", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named checkbalance with five columns: CHID (integer primary key), BID (integer), BUYID (integer), REPAIRID (integer), SID (integer), TID (integer).", "response": "-- Reasoning:\nWe need a new table named checkbalance. It should have an integer primary key so that each checkbalance has a unique identifier, and four other columns to store the checkbalance\u2019s information.\n\n-- Solution:\n```sql\nCREATE TABLE checkbalance (\n  CHID INT PRIMARY KEY,\n  BID INT,\n  BUYID INT,\n  REPAIRID INT,\n  SID INT,\n  TID INT\n);\n```\n\n-- Explanation:\nThis statement defines the checkbalance table with five columns:\n  \u2022 CHID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BID: integer\n  \u2022 BUYID: integer\n  \u2022 REPAIRID: integer\n  \u2022 SID: integer\n  \u2022 TID: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('checkbalance');"}
{"seed": "/* Creates a table named demo with two columns: ID (integer) and NAME (varchar). */\nCREATE TABLE `demo` (\n  `ID` INTEGER(11) DEFAULT NULL,\n  `NAME` VARCHAR(20) COLLATE utf8_general_ci DEFAULT NULL\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=16384 CHARACTER SET 'utf8'", "description": "Creates a table named demo with two columns: ID (integer) and NAME (varchar).", "concepts": ["CREATE TABLE", "INTEGER", "VARCHAR", "DEFAULT", "ENGINE", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named demo with two columns: ID (integer) and NAME (varchar).", "response": "-- Reasoning:\nWe need a new table named demo. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE demo (\n  id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the demo table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('demo');"}
{"seed": "/* Creates a table named privilegelist with four columns: PID (integer), PNAME (varchar), PURL (varchar), and PARENTID (integer). */\nCREATE TABLE `privilegelist` (\n  `PID` INTEGER(11) NOT NULL,\n  `PNAME` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  `PURL` VARCHAR(255) COLLATE utf8_general_ci DEFAULT NULL,\n  `PARENTID` INTEGER(11) NOT NULL COMMENT '\u81ea\u5173\u8054pid\u5217\uff0c0\u8868\u793a\u9876\u7ea7\u6743\u9650',\n  PRIMARY KEY USING BTREE (`PID`) COMMENT ''\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=204 CHARACTER SET 'utf8'", "description": "Creates a table named privilegelist with four columns: PID (integer), PNAME (varchar), PURL (varchar), and PARENTID (integer).", "concepts": ["CREATE TABLE", "INTEGER", "PRIMARY KEY", "VARCHAR", "COMMENT", "AVG_ROW_LENGTH", "CHARACTER SET", "ENGINE", "NOT NULL", "DEFAULT", "COMMENT"], "instruction": "Write a SQL query to create a table named privilegelist with four columns: PID (integer), PNAME (varchar), PURL (varchar), and PARENTID (integer).", "response": "-- Reasoning:\nWe need a new table named privilegelist. It should have four columns:\n  \u2022 PID: integer, primary key\n  \u2022 PNAME: varchar, up to 255 characters\n  \u2022 PURL: varchar, up to 255 characters\n  \u2022 PARENTID: integer, foreign key to PID\n\n-- Solution:\n```sql\nCREATE TABLE privilegelist (\n  PID INT PRIMARY KEY,\n  PNAME VARCHAR(255),\n  PURL VARCHAR(255),\n  PARENTID INT,\n  FOREIGN KEY (PARENTID) REFERENCES privilegelist(PID)\n);\n```\n\n-- Explanation:\nThis statement defines the privilegelist table with four columns:\n  \u2022 PID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PNAME: variable\u2010length string up to 255 characters\n  \u2022 PURL: variable\u2010length string up to 255 characters\n  \u2022 PARENTID: integer, foreign key to PID\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('privilegelist');"}
{"seed": "/* Creates a table named product with five columns: PRODID (integer), PRODNAME (varchar), PRODCOUNT (double), PROVID (integer), and a primary key on the PRODID column. It also creates an index on the PROVID column and a foreign key constraint on the PROVID column that references the PROVID column in the provider table. */\nCREATE TABLE `product` (\n  `PRODID` INTEGER(11) NOT NULL,\n  `PRODNAME` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  `PRODCOUNT` DOUBLE NOT NULL,\n  `PROVID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`PRODID`) COMMENT '',\n   INDEX `PROVID` USING BTREE (`PROVID`) COMMENT '',\n  CONSTRAINT `product_ibfk_1` FOREIGN KEY (`PROVID`) REFERENCES `provider` (`PROVID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=8192 CHARACTER SET 'utf8'", "description": "Creates a table named product with five columns: PRODID (integer), PRODNAME (varchar), PRODCOUNT (double), PROVID (integer), and a primary key on the PRODID column. It also creates an index on the PROVID column and a foreign key constraint on the PROVID column that references the PROVID column in the provider table.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "INDEX", "REFERENCES", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named product with five columns: PRODID (integer), PRODNAME (varchar), PRODCOUNT (double), PROVID (integer), and a primary key on the PRODID column. It also creates an index on the PROVID column and a foreign key constraint on the PROVID column that references the PROVID column in the provider table.", "response": "-- Reasoning:\nWe need a new table named product. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE product (\n  PRODID INT PRIMARY KEY,\n  PRODNAME VARCHAR(255),\n  PRODCOUNT DOUBLE,\n  PROVID INT,\n  FOREIGN KEY (PROVID) REFERENCES provider(PROVID)\n);\n\nCREATE INDEX PROVID_INDEX ON product(PROVID);\n```\n\n-- Explanation:\nThis statement defines the product table with five columns:\n  \u2022 PRODID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PRODNAME: variable\u2010length string up to 255 characters\n  \u2022 PRODCOUNT: double\u2010precision floating point number\n  \u2022 PROVID: integer, foreign key to provider table\n  \u2022 PROVID_INDEX: index on PROVID column\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('product');\n\n-- 2. Verify foreign key constraint is correct\nPRAGMA foreign_key_list('product');\n\n-- 3. Verify index is correct\nPRAGMA index_list('product');\n\n-- 4. Verify foreign key constraint is correct\nSELECT * FROM product WHERE PROVID = 1;"}
{"seed": "/* Creates a table named rolelist with two columns: RID (integer) and RNAME (varchar). */\nCREATE TABLE `rolelist` (\n  `RID` INTEGER(11) NOT NULL,\n  `RNAME` VARCHAR(50) COLLATE utf8_general_ci NOT NULL,\n  PRIMARY KEY USING BTREE (`RID`) COMMENT ''\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=5461 CHARACTER SET 'utf8'", "description": "Creates a table named rolelist with two columns: RID (integer) and RNAME (varchar).", "concepts": ["CREATE TABLE", "INTEGER", "PRIMARY KEY", "VARCHAR", "NOT NULL", "PRIMARY KEY", "BTREE", "COMMENT"], "instruction": "Write a SQL query to create a table named rolelist with two columns: RID (integer) and RNAME (varchar).", "response": "-- Reasoning:\nWe need a new table named rolelist. It should have an integer primary key so that each role has a unique identifier, and a name column to store the role\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE rolelist (\n  RID INT PRIMARY KEY,\n  RNAME VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the rolelist table with two columns:\n  \u2022 RID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RNAME: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('rolelist');"}
{"seed": "/* Creates a table named roleprivilege with three columns: RPID (integer primary key), RID (integer), and PID (integer). The table has two foreign key constraints: one on PID referencing the PID column of the privilegelist table, and one on RID referencing the RID column of the rolelist table. */\nCREATE TABLE `roleprivilege` (\n  `RPID` INTEGER(11) NOT NULL,\n  `RID` INTEGER(11) NOT NULL,\n  `PID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`RPID`) COMMENT '',\n   INDEX `PID` USING BTREE (`PID`) COMMENT '',\n   INDEX `RID` USING BTREE (`RID`) COMMENT '',\n  CONSTRAINT `roleprivilege_ibfk_1` FOREIGN KEY (`PID`) REFERENCES `privilegelist` (`PID`),\n  CONSTRAINT `roleprivilege_ibfk_2` FOREIGN KEY (`RID`) REFERENCES `rolelist` (`RID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=120 CHARACTER SET 'utf8'", "description": "Creates a table named roleprivilege with three columns: RPID (integer primary key), RID (integer), and PID (integer). The table has two foreign key constraints: one on PID referencing the PID column of the privilegelist table, and one on RID referencing the RID column of the rolelist table.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "INDEX", "REFERENCES", "COMMENT", "ENGINE", "AVG_ROW_LENGTH", "CHARACTER SET"], "instruction": "Write a SQL query to create a table named roleprivilege with three columns: RPID (integer primary key), RID (integer), and PID (integer). The table has two foreign key constraints: one on PID referencing the PID column of the privilegelist table, and one on RID referencing the RID column of the rolelist table.", "response": "-- Reasoning:\nWe need a new table named roleprivilege. It should have three columns:\n  \u2022 RPID: integer primary key\n  \u2022 RID: integer referencing the RID column of the rolelist table\n  \u2022 PID: integer referencing the PID column of the privilegelist table\n\n-- Solution:\n```sql\nCREATE TABLE roleprivilege (\n  RPID INT PRIMARY KEY,\n  RID INT,\n  PID INT,\n  FOREIGN KEY (RID) REFERENCES rolelist(RID),\n  FOREIGN KEY (PID) REFERENCES privilegelist(PID)\n);\n```\n\n-- Explanation:\nThis statement defines the roleprivilege table with three columns:\n  \u2022 RPID: integer primary key\n  \u2022 RID: integer referencing the RID column of the rolelist table\n  \u2022 PID: integer referencing the PID column of the privilegelist table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('roleprivilege');"}
{"seed": "/* Creates a table named t_user with three columns: USER_ID (integer primary key), USER_NAME (varchar) and USER_AGE (varchar). */\nCREATE TABLE `t_user` (\n  `USER_ID` INTEGER(11) NOT NULL AUTO_INCREMENT,\n  `USER_NAME` VARCHAR(20) COLLATE utf8_general_ci DEFAULT NULL,\n  `USER_AGE` VARCHAR(20) COLLATE utf8_general_ci DEFAULT NULL,\n  PRIMARY KEY USING BTREE (`USER_ID`) COMMENT ''\n)ENGINE=InnoDB\nAUTO_INCREMENT=3 AVG_ROW_LENGTH=16384 CHARACTER SET 'utf8' COLLATE 'utf8_general_ci'\nCOMMENT=''", "description": "Creates a table named t_user with three columns: USER_ID (integer primary key), USER_NAME (varchar) and USER_AGE (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "AVG_ROW_LENGTH", "CHARACTER SET", "COLLATE", "ENGINE", "INTEGER", "VARCHAR"], "instruction": "Write a SQL query to create a table named t_user with three columns: USER_ID (integer primary key), USER_NAME (varchar) and USER_AGE (varchar).", "response": "-- Reasoning:\nWe need a new table named t_user. It should have an integer primary key so that each user has a unique identifier, and two varchar columns to store the user\u2019s name and age.\n\n-- Solution:\n```sql\nCREATE TABLE t_user (\n  USER_ID INT PRIMARY KEY,\n  USER_NAME VARCHAR(255),\n  USER_AGE VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_user table with three columns:\n  \u2022 USER_ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 USER_NAME: variable\u2010length string up to 255 characters\n  \u2022 USER_AGE: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('t_user');"}
{"seed": "/* Creates a table named useraccount with 10 columns: USERID (integer primary key), USERNAME (varchar), ACCOUNTS (varchar), PASSWORD (varchar), SEX (varchar), AGE (datetime), PHONE (varchar), RAGEDATE (datetime), RID (integer), and DEPARTID (integer). */\nCREATE TABLE `useraccount` (\n  `USERID` INTEGER(11) NOT NULL,\n  `USERNAME` VARCHAR(20) COLLATE utf8_general_ci NOT NULL,\n  `ACCOUNTS` VARCHAR(20) COLLATE utf8_general_ci NOT NULL,\n  `PASSWORD` VARCHAR(32) COLLATE utf8_general_ci NOT NULL,\n  `SEX` VARCHAR(20) COLLATE utf8_general_ci NOT NULL,\n  `AGE` DATETIME NOT NULL,\n  `PHONE` VARCHAR(20) COLLATE utf8_general_ci NOT NULL,\n  `RAGEDATE` DATETIME NOT NULL,\n  `RID` INTEGER(11) NOT NULL,\n  `DEPARTID` INTEGER(11) NOT NULL,\n  PRIMARY KEY USING BTREE (`USERID`) COMMENT '',\n   INDEX `DEPARTID` USING BTREE (`DEPARTID`) COMMENT '',\n   INDEX `RID` USING BTREE (`RID`) COMMENT '',\n  CONSTRAINT `useraccount_ibfk_1` FOREIGN KEY (`DEPARTID`) REFERENCES `department` (`DEPARTID`),\n  CONSTRAINT `useraccount_ibfk_2` FOREIGN KEY (`RID`) REFERENCES `rolelist` (`RID`)\n)ENGINE=InnoDB\nAVG_ROW_LENGTH=5461 CHARACTER SET 'utf8'", "description": "Creates a table named useraccount with 10 columns: USERID (integer primary key), USERNAME (varchar), ACCOUNTS (varchar), PASSWORD (varchar), SEX (varchar), AGE (datetime), PHONE (varchar), RAGEDATE (datetime), RID (integer), and DEPARTID (integer).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "INDEX", "VARCHAR", "DATETIME", "INTEGER", "AUTO_INCREMENT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named useraccount with 10 columns: USERID (integer primary key), USERNAME (varchar), ACCOUNTS (varchar), PASSWORD (varchar), SEX (varchar), AGE (datetime), PHONE (varchar), RAGEDATE (datetime), RID (integer), and DEPARTID (integer).", "response": "-- Reasoning:\nWe need a new table named useraccount. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE useraccount (\n  USERID INT PRIMARY KEY,\n  USERNAME VARCHAR(255),\n  ACCOUNTS VARCHAR(255),\n  PASSWORD VARCHAR(255),\n  SEX VARCHAR(255),\n  AGE DATETIME,\n  PHONE VARCHAR(255),\n  RAGEDATE DATETIME,\n  RID INT,\n  DEPARTID INT\n);\n```\n\n-- Explanation:\nThis statement defines the useraccount table with 10 columns:\n  \u2022 USERID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 USERNAME: variable\u2010length string up to 255 characters\n  \u2022 ACCOUNTS: variable\u2010length string up to 255 characters\n  \u2022 PASSWORD: variable\u2010length string up to 255 characters\n  \u2022 SEX: variable\u2010length string up to 255 characters\n  \u2022 AGE: datetime\n  \u2022 PHONE: variable\u2010length string up to 255 characters\n  \u2022 RAGEDATE: datetime\n  \u2022 RID: integer\n  \u2022 DEPARTID: integer\n\n-- Tests:\n-- 1. Verify table exists and"}
{"seed": "/* Inserts three rows into the area table. The first row has an AREAID of 1, an AREANAME of '\u534e\u5317\u5730\u533a', and a RELATIVE of 0. The second row has an AREAID of 2, an AREANAME of '\u534e\u5357\u5730\u533a', and a RELATIVE of NULL. The third row has an AREAID of 5, an AREANAME of '\u534e\u897f0', and a RELATIVE of 0. */\nINSERT INTO `area` (`AREAID`, `AREANAME`, `RELATIVE`) VALUES\n\n  (1,'\u534e\u5317\u5730\u533a',0),\n  (2,'\u534e\u5357\u5730\u533a',NULL),\n  (5,'\u534e\u897f0',0)", "description": "Inserts three rows into the area table. The first row has an AREAID of 1, an AREANAME of '\u534e\u5317\u5730\u533a', and a RELATIVE of 0. The second row has an AREAID of 2, an AREANAME of '\u534e\u5357\u5730\u533a', and a RELATIVE of NULL. The third row has an AREAID of 5, an AREANAME of '\u534e\u897f0', and a RELATIVE of 0.", "concepts": ["INSERT INTO", "VALUES", "AREAID", "AREANAME", "RELATIVE"], "instruction": "Write a SQL query to insert three rows into the area table. The first row has an AREAID of 1, an AREANAME of '\u534e\u5317\u5730\u533a', and a RELATIVE of 0. The second row has an AREAID of 2, an AREANAME of '\u534e\u5357\u5730\u533a', and a RELATIVE of NULL. The third row has an AREAID of 5, an AREANAME of '\u534e\u897f0', and a RELATIVE of 0.", "response": "-- Reasoning:\nWe need to insert three rows into the area table. The first row has an AREAID of 1, an AREANAME of '\u534e\u5317\u5730\u533a', and a RELATIVE of 0. The second row has an AREAID of 2, an AREANAME of '\u534e\u5357\u5730\u533a', and a RELATIVE of NULL. The third row has an AREAID of 5, an AREANAME of '\u534e\u897f0', and a RELATIVE of 0.\n\n-- Solution:\n```sql\nINSERT INTO area (AREAID, AREANAME, RELATIVE)\nVALUES (1, '\u534e\u5317\u5730\u533a', 0),\n       (2, '\u534e\u5357\u5730\u533a', NULL),\n       (5, '\u534e\u897f0', 0);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the area table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM area;"}
{"seed": "/* Inserts three rows into the category table. */\nINSERT INTO `category` (`CID`, `CNAME`) VALUES\n\n  (1,'\u529e\u516c\u7528\u54c1'),\n  (2,'\u8bbe\u5907'),\n  (3,'\u623f\u4ea7')", "description": "Inserts three rows into the category table.", "concepts": ["INSERT INTO", "VALUES", "CID", "CNAME"], "instruction": "Write a SQL query to insert three rows into the category table.", "response": "-- Reasoning:\nWe need to insert three rows into the category table.\n\n-- Solution:\n```sql\nINSERT INTO category (name) VALUES ('Electronics'), ('Furniture'), ('Toys');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the category table:\n  \u2022 Electronics\n  \u2022 Furniture\n  \u2022 Toys\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM category;"}
{"seed": "/* Inserts three rows into the department table. */\nINSERT INTO `department` (`DEPARTID`, `DEPARTNAME`, `AREAID`) VALUES\n\n  (1,'\u5f00\u53d1\u90e8',1),\n  (2,'\u5e02\u573a\u90e8',1),\n  (3,'\u9500\u552e\u90e8',2)", "description": "Inserts three rows into the department table.", "concepts": ["INSERT INTO", "VALUES", "DEPARTID", "DEPARTNAME", "AREAID"], "instruction": "Write a SQL query to insert three rows into the department table.", "response": "-- Reasoning:\nWe need to insert three rows into the department table.\n\n-- Solution:\n```sql\nINSERT INTO department (name) VALUES ('Sales'), ('Engineering'), ('Finance');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the department table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM department;"}
{"seed": "/* Inserts two rows into the balance table. */\nINSERT INTO `balance` (`BID`, `BNAME`, `BCOUNT`, `PRICE`, `BDATE`, `CID`, `DEPARTID`) VALUES\n\n  (1,'\u7535\u8111',200,10000.00,'2017-01-01 00:00:00',1,1),\n  (2,'\u529e\u516c\u684c',100,2000.00,'2017-01-13 00:00:00',1,1)", "description": "Inserts two rows into the balance table.", "concepts": ["INSERT INTO", "VALUES", "BID", "BNAME", "BCOUNT", "PRICE", "BDATE", "CID", "DEPARTID"], "instruction": "Write a SQL query to insert two rows into the balance table.\n\nExample 2:\nSQL:\n```sql\n/* Return the total number of orders for each customer */\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id;\n```\nConcepts: [\"SELECT\", \"COUNT\", \"FROM\", \"GROUP BY\"]\nInstruction: Write a SQL query to list the total number of orders for each customer.", "response": "-- Reasoning:\nWe need to count the number of orders for each customer.\n\n-- Solution:\n```sql\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id;\n```\n\n-- Explanation:\nThis query uses the COUNT function to count the number of orders for each customer.\n\n-- Tests:\n-- 1. Verify the query returns the correct result\nSELECT * FROM (\n  SELECT customer_id, COUNT(order_id) AS total_orders\n  FROM orders\n  GROUP BY customer_id\n)\nWHERE total_orders = 2;"}
{"seed": "/* Inserts two rows into the provider table. */\nINSERT INTO `provider` (`PROVID`, `PROVNAME`, `ADDRESS`, `PHONE`) VALUES\n\n  (1,'\u6df1\u5733\u7535\u8111\u6279\u53d1\u5382','\u6df1\u5733\u5e02','15077788999'),\n  (2,'\u5e7f\u5dde\u7535\u8111\u751f\u4ea7\u5546','\u5e7f\u5dde\u5e02','13677778888')", "description": "Inserts two rows into the provider table.", "concepts": ["INSERT INTO", "VALUES", "PROVID", "PROVNAME", "ADDRESS", "PHONE"], "instruction": "Write a SQL query to insert two rows into the provider table.", "response": "-- Reasoning:\nWe need to insert two rows into the provider table.\n\n-- Solution:\n```sql\nINSERT INTO provider (code, name, city, country)\nVALUES (1, '', 'Lisboa', 'Portugal'),\n       (2, '', 'Lisboa', 'Portugal');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the provider table:\n  \u2022 code: 1, name: , city: Lisboa, country: Portugal\n  \u2022 code: 2, name: , city: Lisboa, country: Portugal\n\n-- Tests:\n-- 1. Verify new rows appear\nSELECT * FROM provider;"}
{"seed": "/* Inserts two rows into the buy table. */\nINSERT INTO `buy` (`BUYID`, `BUYCOUNT`, `BUYTIME`, `PROVID`, `DEPARTID`) VALUES\n\n  (1,100,'2017-01-13 00:00:00',1,2),\n  (2,150,'2017-01-05 00:00:00',2,3)", "description": "Inserts two rows into the buy table.", "concepts": ["INSERT INTO", "VALUES", "PROVID", "DEPARTID"], "instruction": "Write a SQL query to insert two rows into the buy table.\n\nExample 2:\nSQL:\n```sql\n/* Return the total number of orders for each customer */\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id\nORDER BY total_orders DESC;\n```\nConcepts: [\"SELECT\", \"COUNT\", \"FROM\", \"GROUP BY\", \"ORDER BY\"]\nInstruction: Write a SQL query to list each customer's total orders from the orders table, grouped by customer, and sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to list each customer's total orders from the orders table, grouped by customer, and sorted from highest to lowest.\n\n-- Solution:\n```sql\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id\nORDER BY total_orders DESC;\n```\n\n-- Explanation:\nThis query uses the COUNT function to count the number of orders for each customer. It then groups the results by customer_id and sorts them in descending order by total_orders.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT * FROM (\n  SELECT customer_id, COUNT(order_id) AS total_orders\n  FROM orders\n  GROUP BY customer_id\n  ORDER BY total_orders DESC\n)\nWHERE customer_id = 1;"}
{"seed": "/* Inserts two rows into the repair table. */\nINSERT INTO `repair` (`REPAIRID`, `RCOUNT`, `RTIME`, `DEPARTID`, `BID`) VALUES\n\n  (1,10,'2016-12-02 00:00:00',2,1),\n  (2,5,'2016-11-30 00:00:00',1,2)", "description": "Inserts two rows into the repair table.", "concepts": ["INSERT INTO", "VALUES", "REPAIRID", "RCOUNT", "RTIME", "DEPARTID", "BID"], "instruction": "Write a SQL query to insert two rows into the repair table.", "response": "-- Reasoning:\nWe need to insert two rows into the repair table.\n\n-- Solution:\n```sql\nINSERT INTO repair (product_id, repair_date, repair_cost)\nVALUES (1, '2020-01-01', 100.00),\n       (2, '2020-01-02', 200.00);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the repair table:\n  \u2022 product_id: 1\n  \u2022 repair_date: 2020\u201001\u201001\n  \u2022 repair_cost: 100.00\n\n-- Tests:\n-- 1. Verify new rows appear\nSELECT * FROM repair;"}
{"seed": "/* Inserts two rows into the scrap table. */\nINSERT INTO `scrap` (`SID`, `SCOUNT`, `STIME`, `BID`, `DEPARTID`) VALUES\n\n  (1,10,'2017-01-03 00:00:00',1,1),\n  (2,10,'2017-01-02 00:00:00',2,1)", "description": "Inserts two rows into the scrap table.", "concepts": ["INSERT INTO", "VALUES", "SID", "SCOUNT", "STIME", "BID", "DEPARTID"], "instruction": "Write a SQL query to insert two rows into the scrap table.", "response": "-- Reasoning:\nWe need to insert two rows into the scrap table.\n\n-- Solution:\n```sql\nINSERT INTO scrap (product_id, quantity)\nVALUES (1, 100), (2, 200);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the scrap table:\n  \u2022 product_id: 1, quantity: 100\n  \u2022 product_id: 2, quantity: 200\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM scrap;"}
{"seed": "/* Inserts two rows into the translate table. */\nINSERT INTO `translate` (`TID`, `TCOUNT`, `TRTIME`, `BID`, `DEPARTID`) VALUES\n\n  (1,20,'2017-01-02 00:00:00',1,3),\n  (2,10,'2016-11-23 00:00:00',1,2)", "description": "Inserts two rows into the translate table.", "concepts": ["INSERT INTO", "VALUES", "TID", "TCOUNT", "TRTIME", "BID", "DEPARTID"], "instruction": "Write a SQL query to insert two rows into the translate table.", "response": "-- Reasoning:\nWe need to insert two rows into the translate table.\n\n-- Solution:\n```sql\nINSERT INTO translate (word, translation)\nVALUES ('hello', 'hola'), ('world', 'mundo');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the translate table:\n  \u2022 hello: hola\n  \u2022 world: mundo\n\n-- Tests:\n-- 1. Verify new rows appear\nSELECT * FROM translate;"}
{"seed": "/* Inserts two rows into the checkbalance table. */\nINSERT INTO `checkbalance` (`CHID`, `BUYID`, `BID`, `REPAIRID`, `SID`, `TID`) VALUES\n\n  (1,1,1,1,1,1),\n  (2,2,2,2,2,2)", "description": "Inserts two rows into the checkbalance table.", "concepts": ["INSERT INTO", "VALUES", "CHID", "BUYID", "BID", "REPAIRID", "SID", "TID"], "instruction": "Write a SQL query to insert two rows into the checkbalance table.", "response": "-- Reasoning:\nWe need to insert two rows into the checkbalance table.\n\n-- Solution:\n```sql\nINSERT INTO checkbalance (account_id, balance)\nVALUES (1, 1000), (2, 2000);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the checkbalance table:\n  \u2022 account_id: 1, balance: 1000\n  \u2022 account_id: 2, balance: 2000\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM checkbalance;"}
{"seed": "/* Inserts a new row into the demo table with the values 1 and test. */\nINSERT INTO `demo` (`ID`, `NAME`) VALUES\n\n  (1,'test')", "description": "Inserts a new row into the demo table with the values 1 and test.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the demo table with the values 1 and test.", "response": "-- Reasoning:\nWe need to insert a new row into the demo table with the values 1 and test.\n\n-- Solution:\n```sql\nINSERT INTO demo VALUES (1, 'test');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the demo table with the values 1 and test.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM demo;"}
{"seed": "/* Creates a table named privilegelist with 10 columns: PID (integer primary key), PNAME (varchar), PURL (varchar), PARENTID (integer). */\nINSERT INTO `privilegelist` (`PID`, `PNAME`, `PURL`, `PARENTID`) VALUES\n\n  (1,'\u57fa\u7840\u6570\u636e\u7ba1\u7406',NULL,0),\n  (2,'\u8d44\u4ea7\u7ba1\u7406',NULL,0),\n  (3,'\u4f7f\u7528\u7edf\u8ba1\u7ba1\u7406',NULL,0),\n  (4,'\u4f9b\u5e94\u5546\u7ba1\u7406',NULL,0),\n  (5,'\u7cfb\u7edf\u7ba1\u7406',NULL,0),\n  (101,'\u8d44\u4ea7\u5206\u7c7b\u8bbe\u7f6e',NULL,1),\n  (102,'\u90e8\u95e8\u8bbe\u7f6e',NULL,1),\n  (103,'\u8d44\u4ea7\u5f55\u5165',NULL,1),\n  (104,'\u533a\u57df\u7ba1\u7406',NULL,1),\n  (201,'\u91c7\u8d2d\u7ba1\u7406',NULL,2),\n  (202,'\u76d8\u70b9\u7ba1\u7406',NULL,2),\n  (203,'\u8de8\u90e8\u95e8\u8c03\u914d\u7ba1\u7406',NULL,2),\n  (204,'\u62a5\u4fee\u7ba1\u7406',NULL,2),\n  (205,'\u62a5\u5e9f\u7ba1\u7406',NULL,2),\n  (301,'\u8d44\u4ea7\u603b\u6570',NULL,3),\n  (302,'\u91c7\u8d2d\u8bb0\u5f55',NULL,3),\n  (303,'\u8de8\u90e8\u95e8\u8c03\u914d\u8bb0\u5f55',NULL,3),\n  (304,'\u62a5\u4fee\u8bb0\u5f55',NULL,3),\n  (305,'\u62a5\u5e9f\u8bb0\u5f55',NULL,3),\n  (306,'\u76d8\u70b9\u8bb0\u5f55',NULL,3),\n  (401,'\u4f9b\u5e94\u5546\u4fe1\u606f\u67e5\u770b',NULL,4),\n  (402,'\u4ea7\u54c1\u4fe1\u606f\u67e5\u770b',NULL,4),\n  (501,'\u7528\u6237\u7ba1\u7406',NULL,5),\n  (502,'\u89d2\u8272\u7ba1\u7406',NULL,5),\n  (503,'\u6743\u9650\u7ba1\u7406',NULL,5),\n  (10101,'\u65b0\u589e\u5206\u7c7b',NULL,101),\n  (10102,'\u4fee\u6539\u5206\u7c7b',NULL,101),\n  (10103,'\u5220\u9664\u5206\u7c7b',NULL,101),\n  (10104,'\u67e5\u8be2\u5206\u7c7b',NULL,101),\n  (10201,'\u65b0\u589e\u90e8\u95e8',NULL,102),\n  (10202,'\u4fee\u6539\u90e8\u95e8',NULL,102),\n  (10203,'\u5220\u9664\u90e8\u95e8',NULL,102),\n  (10204,'\u67e5\u8be2\u90e8\u95e8',NULL,102),\n  (10301,'\u65b0\u589e\u8d44\u4ea7',NULL,103),\n  (10401,'\u65b0\u589e\u533a\u57df',NULL,104),\n  (10402,'\u4fee\u6539\u533a\u57df',NULL,104),\n  (10403,'\u5220\u9664\u533a\u57df',NULL,104),\n  (10404,'\u67e5\u8be2\u533a\u57df',NULL,104),\n  (20101,'\u65b0\u589e\u91c7\u8d2d\u5355',NULL,201),\n  (20102,'\u4fee\u6539\u91c7\u8d2d\u5355',NULL,201),\n  (20103,'\u5220\u9664\u91c7\u8d2d\u5355',NULL,201),\n  (20104,'\u67e5\u8be2\u91c7\u8d2d\u5355',NULL,201),\n  (20201,'\u65b0\u589e\u76d8\u70b9',NULL,202),\n  (20202,'\u4fee\u6539\u76d8\u70b9',NULL,202),\n  (20203,'\u5220\u9664\u76d8\u70b9',NULL,202),\n  (20204,'\u67e5\u8be2\u76d8\u70b9',NULL,202),\n  (20301,'\u65b0\u589e\u8c03\u914d',NULL,203),\n  (20302,'\u4fee\u6539\u8c03\u914d',NULL,203),\n  (20303,'\u5220\u9664\u8c03\u914d',NULL,203),\n  (20304,'\u67e5\u8be2\u8c03\u914d',NULL,203),\n  (20401,'\u65b0\u589e\u62a5\u4fee',NULL,204),\n  (20402,'\u4fee\u6539\u62a5\u4fee',NULL,204),\n  (20403,'\u5220\u9664\u62a5\u4fee',NULL,204),\n  (20404,'\u67e5\u8be2\u62a5\u4fee',NULL,204),\n  (20501,'\u65b0\u589e\u62a5\u5e9f',NULL,205),\n  (20502,'\u4fee\u6539\u62a5\u5e9f',NULL,205),\n  (20503,'\u5220\u9664\u62a5\u5e9f',NULL,205),\n  (20504,'\u67e5\u8be2\u62a5\u5e9f',NULL,205),\n  (30101,'\u7edf\u8ba11',NULL,301),\n  (30201,'\u7edf\u8ba12',NULL,302),\n  (30301,'\u7edf\u8ba13',NULL,303),\n  (30401,'\u7edf\u8ba14',NULL,304),\n  (30501,'\u7edf\u8ba15',NULL,305),\n  (30601,'\u7edf\u8ba16',NULL,306),\n  (40101,'\u65b0\u589e\u4f9b\u5e94\u5546',NULL,401),\n  (40102,'\u4fee\u6539\u4f9b\u5e94\u5546',NULL,401),\n  (40103,'\u5220\u9664\u4f9b\u5e94\u5546',NULL,401),\n  (40104,'\u67e5\u8be2\u4f9b\u5e94\u5546',NULL,401),\n  (40201,'\u65b0\u589e\u4ea7\u54c1',NULL,402),\n  (40202,'\u4fee\u6539\u4ea7\u54c1',NULL,402),\n  (40203,'\u5220\u9664\u4ea7\u54c1',NULL,402),\n  (40204,'\u67e5\u8be2\u4ea7\u54c1',NULL,402),\n  (50101,'\u65b0\u589e\u7528\u6237',NULL,501),\n  (50102,'\u4fee\u6539\u7528\u6237',NULL,501),\n  (50103,'\u5220\u9664\u7528\u6237',NULL,501),\n  (50104,'\u67e5\u8be2\u7528\u6237',NULL,501),\n  (50201,'\u65b0\u589e\u89d2\u8272',NULL,502),\n  (50202,'\u4fee\u6539\u89d2\u8272',NULL,502),\n  (50203,'\u5220\u9664\u89d2\u8272',NULL,502),\n  (50204,'\u67e5\u8be2\u89d2\u8272',NULL,502)", "description": "Creates a table named privilegelist with 10 columns: PID (integer primary key), PNAME (varchar), PURL (varchar), PARENTID (integer).", "concepts": ["INSERT INTO", "VALUES", "CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INSERT INTO", "VALUES", "INSERT INTO", "VALUES", "INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts two rows into the product table. The first row has the values 1, '\u7535\u8111', 10000, and 1 for the PRODID, PRODNAME, PRODCOUNT, and PROVID columns, respectively. The second row has the values 2, '\u663e\u793a\u5668', 2000, and 2 for the PRODID, PRODNAME, PRODCOUNT, and PROVID columns, respectively. */\nINSERT INTO `product` (`PRODID`, `PRODNAME`, `PRODCOUNT`, `PROVID`) VALUES\n\n  (1,'\u7535\u8111',10000,1),\n  (2,'\u663e\u793a\u5668',2000,2)", "description": "Inserts two rows into the product table. The first row has the values 1, '\u7535\u8111', 10000, and 1 for the PRODID, PRODNAME, PRODCOUNT, and PROVID columns, respectively. The second row has the values 2, '\u663e\u793a\u5668', 2000, and 2 for the PRODID, PRODNAME, PRODCOUNT, and PROVID columns, respectively.", "concepts": ["INSERT INTO", "VALUES", "PRODID", "PRODNAME", "PRODCOUNT", "PROVID"], "instruction": "Write a SQL query to insert two rows into the product table. The first row has the values 1, '\u7535\u8111', 10000, and 1 for the PRODID, PRODNAME, PRODCOUNT, and PROVID columns, respectively. The second row has the values 2, '\u663e\u793a\u5668', 2000, and 2 for the PRODID, PRODNAME, PRODCOUNT, and PROVID columns, respectively.", "response": "-- Reasoning:\nWe need to insert two rows into the products table. The first row should have the values 1, '\u7535\u8111', 10000, and 1 for the product_id, name, count, and provider_id columns, respectively. The second row should have the values 2, '\u663e\u793a\u5668', 2000, and 2 for the product_id, name, count, and provider_id columns, respectively.\n\n-- Solution:\n```sql\nINSERT INTO products (product_id, name, count, provider_id)\nVALUES (1, '\u7535\u8111', 10000, 1), (2, '\u663e\u793a\u5668', 2000, 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the products table. The first row has the values 1, '\u7535\u8111', 10000, and 1 for the product_id, name, count, and provider_id columns, respectively. The second row has the values 2, '\u663e\u793a\u5668', 2000, and 2 for the product_id, name, count, and provider_id columns, respectively.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM products;"}
{"seed": "/* Inserts three rows into the rolelist table. */\nINSERT INTO `rolelist` (`RID`, `RNAME`) VALUES\n\n  (1,'\u7cfb\u7edf\u7ba1\u7406\u5458'),\n  (2,'\u8d44\u4ea7\u7ba1\u7406\u5458'),\n  (3,'\u666e\u901a\u5458\u5de5')", "description": "Inserts three rows into the rolelist table.", "concepts": ["INSERT INTO", "VALUES", "RID", "RNAME"], "instruction": "Write a SQL query to insert three rows into the rolelist table.", "response": "-- Reasoning:\nWe need to insert three rows into the rolelist table.\n\n-- Solution:\n```sql\nINSERT INTO rolelist (role_id, role_name)\nVALUES (1, 'admin'), (2, 'user'), (3, 'guest');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the rolelist table:\n  \u2022 role_id: 1, 2, 3\n  \u2022 role_name: admin, user, guest\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM rolelist;"}
{"seed": "/* Inserts 100 rows into the roleprivilege table. */\nINSERT INTO `roleprivilege` (`RPID`, `RID`, `PID`) VALUES\n\n  (241,1,1),\n  (242,1,2),\n  (243,1,3),\n  (244,1,4),\n  (245,1,5),\n  (246,1,101),\n  (247,1,102),\n  (248,1,103),\n  (249,1,104),\n  (250,1,201),\n  (251,1,202),\n  (252,1,203),\n  (253,1,204),\n  (254,1,205),\n  (255,1,301),\n  (256,1,302),\n  (257,1,303),\n  (258,1,304),\n  (259,1,305),\n  (260,1,306),\n  (261,1,401),\n  (262,1,402),\n  (263,1,501),\n  (264,1,502),\n  (265,1,503),\n  (266,1,10101),\n  (267,1,10102),\n  (268,1,10103),\n  (269,1,10104),\n  (270,1,10201),\n  (271,1,10202),\n  (272,1,10203),\n  (273,1,10204),\n  (274,1,10301),\n  (275,1,10401),\n  (276,1,10402),\n  (277,1,10403),\n  (278,1,10404),\n  (279,1,20101),\n  (280,1,20102),\n  (281,1,20103),\n  (282,1,20104),\n  (283,1,20201),\n  (284,1,20202),\n  (285,1,20203),\n  (286,1,20204),\n  (287,1,20301),\n  (288,1,20302),\n  (289,1,20303),\n  (290,1,20304),\n  (291,1,20401),\n  (292,1,20402),\n  (293,1,20403),\n  (294,1,20404),\n  (295,1,20501),\n  (296,1,20502),\n  (297,1,20503),\n  (298,1,20504),\n  (299,1,30101),\n  (300,1,30201),\n  (301,1,30301),\n  (302,1,30401),\n  (303,1,30501),\n  (304,1,30601),\n  (305,1,40101),\n  (306,1,40102),\n  (307,1,40103),\n  (308,1,40104),\n  (309,1,40201),\n  (310,1,40202),\n  (311,1,40203),\n  (312,1,40204),\n  (313,1,50101),\n  (314,1,50102),\n  (315,1,50103),\n  (316,1,50104),\n  (317,1,50201),\n  (318,1,50202),\n  (319,1,50203),\n  (320,1,50204),\n  (321,2,20101),\n  (322,2,20102),\n  (323,2,20103),\n  (324,2,20104),\n  (325,2,20201),\n  (326,2,20202),\n  (327,2,20203),\n  (328,2,20204),\n  (329,2,20301),\n  (330,2,20302),\n  (331,2,20303),\n  (332,2,20304),\n  (333,2,20401),\n  (334,2,20402),\n  (335,2,20403),\n  (336,2,20404),\n  (337,2,20501),\n  (338,2,20502),\n  (339,2,20503),\n  (340,2,20504),\n  (341,2,30101),\n  (342,2,30201),\n  (343,2,30301),\n  (344,2,30401),\n  (345,2,30501),\n  (346,2,30601),\n  (347,2,40101),\n  (348,2,40102),\n  (349,2,40103),\n  (350,2,40104),\n  (351,2,40201),\n  (352,2,40202),\n  (353,2,40203),\n  (354,2,40204),\n  (355,2,1),\n  (356,2,201),\n  (357,2,202),\n  (358,2,203),\n  (359,2,204),\n  (360,2,205),\n  (361,2,301),\n  (362,2,302),\n  (363,2,303),\n  (364,2,304),\n  (365,2,305),\n  (366,2,306),\n  (367,2,401),\n  (368,2,402),\n  (369,3,2),\n  (370,3,20104),\n  (371,3,20204),\n  (372,3,20304),\n  (373,3,20404),\n  (374,3,20504),\n  (375,3,40104),\n  (376,3,40204)", "description": "Inserts 100 rows into the roleprivilege table.", "concepts": ["INSERT INTO", "VALUES", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "INT", "VARCHAR", "CTE", "UNION", "window functions", "JOIN"], "instruction": "Write a SQL query to insert 100 rows into the roleprivilege table.", "response": "-- Reasoning:\nWe need to insert 100 rows into the roleprivilege table.\n\n-- Solution:\n```sql\nINSERT INTO roleprivilege (role_id, privilege_id)\nSELECT\n  (SELECT id FROM role WHERE name = 'admin'),\n  (SELECT id FROM privilege WHERE name = 'read')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'admin'),\n  (SELECT id FROM privilege WHERE name = 'write')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'admin'),\n  (SELECT id FROM privilege WHERE name = 'delete')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'admin'),\n  (SELECT id FROM privilege WHERE name = 'create')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'user'),\n  (SELECT id FROM privilege WHERE name = 'read')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'user'),\n  (SELECT id FROM privilege WHERE name = 'write')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'user'),\n  (SELECT id FROM privilege WHERE name = 'delete')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'user'),\n  (SELECT id FROM privilege WHERE name = 'create')\nUNION ALL\nSELECT\n  (SELECT id FROM role WHERE name = 'guest'),\n  (SELECT id FROM privilege WHERE name = 'read')"}
{"seed": "/* Inserts a new user into the t_user table with the given values. */\nINSERT INTO `t_user` (`USER_ID`, `USER_NAME`, `USER_AGE`) VALUES\n\n  (2,'\u674e\u56db','22')", "description": "Inserts a new user into the t_user table with the given values.", "concepts": ["INSERT INTO", "VALUES", "t_user", "USER_ID", "USER_NAME", "USER_AGE"], "instruction": "Write a SQL query to insert a new user into the t_user table with the given values.", "response": "-- Reasoning:\nWe need to insert a new user into the t_user table. The user should have the given values:\n  \u2022 id: 1\n  \u2022 name: \u201cJohn\u201d\n  \u2022 email: \u201c\u201d\n\n-- Solution:\n```sql\nINSERT INTO t_user (id, name, email)\nVALUES (1, 'John', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_user table with the given values:\n  \u2022 id: 1\n  \u2022 name: \u201cJohn\u201d\n  \u2022 email: \u201c\u201d\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM t_user;"}
{"seed": "/* Inserts three rows into the useraccount table. */\nINSERT INTO `useraccount` (`USERID`, `USERNAME`, `ACCOUNTS`, `PASSWORD`, `SEX`, `AGE`, `PHONE`, `RAGEDATE`, `RID`, `DEPARTID`) VALUES\n\n  (1,'\u5f20\u660e','zhangming01','123','\u7537','1985-01-01 00:00:00','13878009999','2013-06-01 00:00:00',3,1),\n  (2,'admin','\u674e\u534e','456','\u7537','1985-07-10 00:00:00','15077730988','2013-05-01 00:00:00',2,1),\n  (3,'\u8d85\u7ea7\u7ba1\u7406\u5458','admin','admin','\u7537','1975-07-09 00:00:00','13878008888','2010-01-20 00:00:00',1,1)", "description": "Inserts three rows into the useraccount table.", "concepts": ["INSERT INTO", "VALUES", "USERID", "USERNAME", "ACCOUNTS", "PASSWORD", "SEX", "AGE", "PHONE", "RAGEDATE"], "instruction": "Write a SQL query to insert three rows into the useraccount table.", "response": "-- Reasoning:\nWe need to insert three rows into the useraccount table.\n\n-- Solution:\n```sql\nINSERT INTO useraccount (username, password, email)\nVALUES ('user1', '', ''),\n       ('user2', '', ''),\n       ('user3', '', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the useraccount table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM useraccount;"}
{"seed": "/* Creates a table named buku with five columns: kodebuku (char), judulbuku (varchar), penerbit (varchar), pengarang (varchar), and hargasewa (int). */\nCREATE TABLE `buku` (\n  `kodebuku` char(5) NOT NULL,\n  `judulbuku` varchar(25) NOT NULL,\n  `penerbit` varchar(25) NOT NULL,\n  `pengarang` varchar(25) NOT NULL,\n  `hargasewa` int(5) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named buku with five columns: kodebuku (char), judulbuku (varchar), penerbit (varchar), pengarang (varchar), and hargasewa (int).", "concepts": ["CREATE TABLE", "char", "varchar", "int"], "instruction": "Write a SQL query to create a table named buku with five columns: kodebuku (char), judulbuku (varchar), penerbit (varchar), pengarang (varchar), and hargasewa (int).", "response": "-- Reasoning:\nWe need a new table named buku. It should have a unique identifier, a title, a publisher, an author, and a price.\n\n-- Solution:\n```sql\nCREATE TABLE buku (\n  kodebuku CHAR(5) PRIMARY KEY,\n  judulbuku VARCHAR(255),\n  penerbit VARCHAR(255),\n  pengarang VARCHAR(255),\n  hargasewa INT\n);\n```\n\n-- Explanation:\nThis statement defines the buku table with five columns:\n  \u2022 kodebuku: char, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 judulbuku: variable\u2010length string up to 255 characters\n  \u2022 penerbit: variable\u2010length string up to 255 characters\n  \u2022 pengarang: variable\u2010length string up to 255 characters\n  \u2022 hargasewa: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('buku');"}
{"seed": "/* Inserts three rows into the buku table. */\nINSERT INTO `buku` (`kodebuku`, `judulbuku`, `penerbit`, `pengarang`, `hargasewa`) VALUES\n('AAA', 'Belajar php', 'Bailram.co', 'Dhimas Bayu', 10000),\n('AB', 'Belajar HTML', 'Bailram.co', 'Dhimas Bayu', 5000),\n('ABC', 'Belajar Membuat Website', 'LSP Komputer', 'Dhimas Bayu', 15000)", "description": "Inserts three rows into the buku table.", "concepts": ["INSERT INTO", "VALUES", "`buku`", "`kodebuku`", "`judulbuku`", "`penerbit`", "`pengarang`", "`h"], "instruction": "Write a SQL query to insert three rows into the buku table.", "response": "-- Reasoning:\nWe need to insert three rows into the buku table.\n\n-- Solution:\n```sql\nINSERT INTO buku (judul, penerbit, tahun_terbit)\nVALUES ('', 'Gramedia', 2019),\n       ('', 'Gramedia', 2019),\n       ('', 'Gramedia', 2019);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the buku table:\n  \u2022 judul: \n  \u2022 penerbit: Gramedia\n  \u2022 tahun_terbit: 2019\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM buku;"}
{"seed": "/* Creates a table named sewa with seven columns: nomorfaktur (char), tanggalfaktur (date), namakonsumen (varchar), kodebuku (char), jumlah (int), hargasewa (mediumint), and hargatotal (mediumint). */\nCREATE TABLE `sewa` (\n  `nomorfaktur` char(5) NOT NULL,\n  `tanggalfaktur` date NOT NULL,\n  `namakonsumen` varchar(25) NOT NULL,\n  `kodebuku` char(5) NOT NULL,\n  `jumlah` int(4) NOT NULL,\n  `hargasewa` mediumint(8) UNSIGNED NOT NULL,\n  `hargatotal` mediumint(8) UNSIGNED NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named sewa with seven columns: nomorfaktur (char), tanggalfaktur (date), namakonsumen (varchar), kodebuku (char), jumlah (int), hargasewa (mediumint), and hargatotal (mediumint).", "concepts": ["CREATE TABLE", "nomorfaktur", "tanggalfaktur", "namakonsumen", "kodebuku", "jumlah", "h"], "instruction": "Write a SQL query to create a table named sewa with seven columns: nomorfaktur (char), tanggalfaktur (date), namakonsumen (varchar), kodebuku (char), jumlah (int), hargasewa (mediumint), and hargatotal (mediumint).", "response": "-- Reasoning:\nWe need a new table named sewa. It should have a unique identifier for each invoice, a date for when the invoice was issued, a name for the customer, a book identifier, a quantity of books, a price per book, and a total price.\n\n-- Solution:\n```sql\nCREATE TABLE sewa (\n  nomorfaktur CHAR(10),\n  tanggalfaktur DATE,\n  namakonsumen VARCHAR(255),\n  kodebuku CHAR(10),\n  jumlah INT,\n  hargasewa MEDIUMINT,\n  hargatotal MEDIUMINT\n);\n```\n\n-- Explanation:\nThis statement defines the sewa table with seven columns:\n  \u2022 nomorfaktur: a unique identifier for each invoice, a char up to 10 characters\n  \u2022 tanggalfaktur: a date for when the invoice was issued\n  \u2022 namakonsumen: a variable\u2010length string up to 255 characters\n  \u2022 kodebuku: a unique identifier for each book, a char up to 10 characters\n  \u2022 jumlah: a quantity of books, an integer\n  \u2022 hargasewa: a price per book, a mediumint\n  \u2022 hargatotal: a total price, a mediumint\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAG"}
{"seed": "/* Inserts three rows into the sewa table. */\nINSERT INTO `sewa` (`nomorfaktur`, `tanggalfaktur`, `namakonsumen`, `kodebuku`, `jumlah`, `hargasewa`, `hargatotal`) VALUES\n('11', '2020-11-09', 'Dhimas', 'AAA', 1, 10000, 10000),\n('bb', '2020-11-09', 'Bayu', 'AB', 5, 5000, 25000),\n('FAK01', '2020-11-09', 'Bayu', 'AB', 5, 5000, 25000)", "description": "Inserts three rows into the sewa table.", "concepts": ["INSERT INTO", "VALUES", "`sewa`", "`nomorfaktur`", "`tanggalfaktur`", "`namakonsumen`"], "instruction": "Write a SQL query to insert three rows into the sewa table.", "response": "-- Reasoning:\nWe need to insert three rows into the sewa table.\n\n-- Solution:\n```sql\nINSERT INTO sewa (id, name, address, phone)\nVALUES (1, '', 'Jl. Kemang Raya No. 1', '081234567890'),\n       (2, '', 'Jl. Kemang Raya No. 2', '081234567891'),\n       (3, '', 'Jl. Kemang Raya No. 3', '081234567892');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the sewa table:\n  \u2022 id: 1, 2, 3\n  \u2022 name: , , \n  \u2022 address: Jl. Kemang Raya No. 1, Jl. Kemang Raya No. 2, Jl. Kemang Raya No. 3\n  \u2022 phone: 081234567890, 081234567891, 081234567892\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM sewa;"}
{"seed": "/* Adds a primary key constraint to the kodebuku column in the buku table. */\nALTER TABLE `buku`\n  ADD PRIMARY KEY (`kodebuku`)", "description": "Adds a primary key constraint to the kodebuku column in the buku table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the kodebuku column in the buku table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the kodebuku column in the buku table. This will ensure that each book has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE buku\n  ADD PRIMARY KEY (kodebuku);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the kodebuku column in the buku table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('buku');"}
{"seed": "/* Adds a primary key constraint on the nomorfaktur column of the sewa table. */\nALTER TABLE `sewa`\n  ADD PRIMARY KEY (`nomorfaktur`),\n  ADD KEY `fk_kodebuku`", "description": "Adds a primary key constraint on the nomorfaktur column of the sewa table.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "PRIMARY KEY", "KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to add a primary key constraint on the nomorfaktur column of the sewa table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the nomorfaktur column of the sewa table. This will ensure that each row has a unique nomorfaktur value.\n\n-- Solution:\n```sql\nALTER TABLE sewa\n  ADD CONSTRAINT pk_nomorfaktur PRIMARY KEY (nomorfaktur);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the nomorfaktur column of the sewa table.\n\n-- Tests:\n-- 1. Check primary key constraint is added\nPRAGMA table_info('sewa');"}
{"seed": "/* Adds a foreign key constraint to the sewa table, which references the kodebuku column in the buku table. */\nALTER TABLE `sewa`\n  ADD CONSTRAINT `fk_kodebuku` FOREIGN KEY (`kodebuku`) REFERENCES `buku` (`kodebuku`) ON DELETE NO ACTION ON UPDATE NO ACTION", "description": "Adds a foreign key constraint to the sewa table, which references the kodebuku column in the buku table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE"], "instruction": "Write a SQL query to add a foreign key constraint to the sewa table, which references the kodebuku column in the buku table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the sewa table, which references the kodebuku column in the buku table.\n\n-- Solution:\n```sql\nALTER TABLE sewa\n  ADD CONSTRAINT fk_kodebuku FOREIGN KEY (kodebuku) REFERENCES buku(kodebuku);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the sewa table, which references the kodebuku column in the buku table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('sewa');"}
{"seed": "/* Selects all columns from the people and posts tables, joining them on the people_id column. */\nselect * from people inner join posts on (people.id = posts.people_id )", "description": "Selects all columns from the people and posts tables, joining them on the people_id column.", "concepts": ["select", "from", "inner join", "on"], "instruction": "Write a SQL query to select all columns from the people and posts tables, joining them on the people_id column.", "response": "-- Reasoning:\nWe need to select all columns from the people and posts tables, joining them on the people_id column.\n\n-- Solution:\n```sql\nSELECT *\nFROM people\nJOIN posts\n  ON people.people_id = posts.people_id;\n```\n\n-- Explanation:\nThis query joins the people and posts tables on the people_id column.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT *\nFROM people\nJOIN posts\n  ON people.people_id = posts.people_id;"}
{"seed": "/* Selects the timestamp and temperature of all observations from the ThermometerObservation table between 2017-11-25T01:17:00Z and 2017-11-26T01:17:00Z for the sensor with the id 86daf7f2_52ea_409a_80d5_78e4835c1cce. */\nSELECT timeStamp, temperature \nFROM ThermometerObservation  \nWHERE timestamp>'2017-11-25T01:17:00Z' AND timestamp<'2017-11-26T01:17:00Z' AND SENSOR_ID='86daf7f2_52ea_409a_80d5_78e4835c1cce'", "description": "Selects the timestamp and temperature of all observations from the ThermometerObservation table between 2017-11-25T01:17:00Z and 2017-11-26T01:17:00Z for the sensor with the id 86daf7f2_52ea_409a_80d5_78e4835c1cce.", "concepts": ["SELECT", "FROM", "WHERE", "AND", "SENSOR_ID"], "instruction": "Write a SQL query to list the timestamp and temperature of all observations from the ThermometerObservation table between 2017-11-25T01:17:00Z and 2017-11-26T01:17:00Z for the sensor with the id 86daf7f2_52ea_409a_80d5_78e4835c1cce.", "response": "-- Reasoning:\nWe need to list the timestamp and temperature of all observations from the ThermometerObservation table between 2017-11-25T01:17:00Z and 2017-11-26T01:17:00Z for the sensor with the id 86daf7f2_52ea_409a_80d5_78e4835c1cce.\n\n-- Solution:\n```sql\nSELECT timestamp, temperature\nFROM ThermometerObservation\nWHERE sensor_id = '86daf7f2_52ea_409a_80d5_78e4835c1cce'\nAND timestamp BETWEEN '2017-11-25T01:17:00Z' AND '2017-11-26T01:17:00Z';\n```\n\n-- Explanation:\nThis query selects the timestamp and temperature columns from the ThermometerObservation table, filtering by the sensor_id and timestamp range.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT timestamp, temperature\nFROM ThermometerObservation\nWHERE sensor_id = '86daf7f2_52ea_40"}
{"seed": "/* Adds a comment to the table BARS.TMP_BANK_EMPLOYEE_PROT. */\nCOMMENT ON TABLE BARS.TMP_BANK_EMPLOYEE_PROT IS ''", "description": "Adds a comment to the table BARS.TMP_BANK_EMPLOYEE_PROT.", "concepts": ["COMMENT ON TABLE"], "instruction": "Write a SQL query to add a comment to the table BARS.TMP_BANK_EMPLOYEE_PROT.", "response": "-- Reasoning:\nWe need to add a comment to the table BARS.TMP_BANK_EMPLOYEE_PROT.\n\n-- Solution:\n```sql\nCOMMENT ON TABLE BARS.TMP_BANK_EMPLOYEE_PROT IS 'This is a temporary table for bank employees';\n```\n\n-- Explanation:\nThis COMMENT statement adds a comment to the table BARS.TMP_BANK_EMPLOYEE_PROT.\n\n-- Tests:\n-- 1. Verify comment exists\nSELECT * FROM INFORMATION_SCHEMA.TABLE_COMMENTS WHERE TABLE_NAME = 'TMP_BANK_EMPLOYEE_PROT';"}
{"seed": "/* Adds a comment to the PL column of the TMP_BANK_EMPLOYEE_PROT table in the BARS schema. */\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.PL IS '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0456\u043c\u043f\u043e\u0440\u0442\u0443'", "description": "Adds a comment to the PL column of the TMP_BANK_EMPLOYEE_PROT table in the BARS schema.", "concepts": ["COMMENT ON COLUMN", "BARS", "TMP_BANK_EMPLOYEE_PROT", "PL"], "instruction": "Write a SQL query to add a comment to the PL column of the TMP_BANK_EMPLOYEE_PROT table in the BARS schema.", "response": "-- Reasoning:\nWe need to add a comment to the PL column of the TMP_BANK_EMPLOYEE_PROT table in the BARS schema.\n\n-- Solution:\n```sql\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.PL IS 'PL column';\n```\n\n-- Explanation:\nThis COMMENT statement adds a comment to the PL column of the TMP_BANK_EMPLOYEE_PROT table in the BARS schema.\n\n-- Tests:\n-- 1. Verify comment exists\nSELECT * FROM USER_TAB_COMMENTS WHERE TABLE_NAME = 'TMP_BANK_EMPLOYEE_PROT' AND COLUMN_NAME = 'PL';"}
{"seed": "/* Adds a comment to the NMK column of the BARS.TMP_BANK_EMPLOYEE_PROT table. */\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.NMK IS '\u041d\u0430\u0437\u0432\u0430 \u043a\u043b\u0456\u0454\u043d\u0442\u0430'", "description": "Adds a comment to the NMK column of the BARS.TMP_BANK_EMPLOYEE_PROT table.", "concepts": ["COMMENT ON COLUMN", "NMK", "IS"], "instruction": "Write a SQL query to add a comment to the NMK column of the BARS.TMP_BANK_EMPLOYEE_PROT table.", "response": "-- Reasoning:\nWe need to add a comment to the NMK column of the BARS.TMP_BANK_EMPLOYEE_PROT table.\n\n-- Solution:\n```sql\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.NMK IS '\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u043d\u043a\u0430';\n```\n\n-- Explanation:\nThis COMMENT statement adds a comment to the NMK column of the BARS.TMP_BANK_EMPLOYEE_PROT table.\n\n-- Tests:\n-- 1. Check comment exists\nSELECT * FROM USER_TAB_COMMENTS WHERE TABLE_NAME = 'TMP_BANK_EMPLOYEE_PROT' AND COLUMN_NAME = 'NMK';"}
{"seed": "/* Adds a comment to the OKPO column in the BARS.TMP_BANK_EMPLOYEE_PROT table. */\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.OKPO IS '\u0406\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0439 \u043a\u043e\u0434'", "description": "Adds a comment to the OKPO column in the BARS.TMP_BANK_EMPLOYEE_PROT table.", "concepts": ["COMMENT ON COLUMN", "OKPO", "\u0406\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0439 \u043a\u043e\u0434"], "instruction": "Write a SQL query to add a comment to the OKPO column in the BARS.TMP_BANK_EMPLOYEE_PROT table.", "response": "-- Reasoning:\nWe need to add a comment to the OKPO column in the BARS.TMP_BANK_EMPLOYEE_PROT table. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.OKPO IS 'OKPO';\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Adds a comment to the SER column of the BARS.TMP_BANK_EMPLOYEE_PROT table. */\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.SER IS '\u0421\u0435\u0440\u0456\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430'", "description": "Adds a comment to the SER column of the BARS.TMP_BANK_EMPLOYEE_PROT table.", "concepts": ["COMMENT ON COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN", "COLUMN"], "instruction": "Write a SQL query to add a comment to the SER column of the BARS.TMP_BANK_EMPLOYEE_PROT table.", "response": "-- Reasoning:\nWe need to add a comment to the SER column of the BARS.TMP_BANK_EMPLOYEE_PROT table.\n\n-- Solution:\n```sql\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.SER IS '\u0421\u0435\u0440\u0456\u0439\u043d\u0438\u0439 \u043d\u043e\u043c\u0435\u0440';\n```\n\n-- Explanation:\nThis COMMENT statement adds a comment to the SER column of the BARS.TMP_BANK_EMPLOYEE_PROT table.\n\n-- Tests:\n-- 1. Check comment exists\nSELECT * FROM USER_TAB_COMMENTS WHERE TABLE_NAME = 'TMP_BANK_EMPLOYEE_PROT' AND COLUMN_NAME = 'SER';"}
{"seed": "/* Adds a comment to the NUMDOC column in the BARS.TMP_BANK_EMPLOYEE_PROT table. */\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.NUMDOC IS '\u041d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430'", "description": "Adds a comment to the NUMDOC column in the BARS.TMP_BANK_EMPLOYEE_PROT table.", "concepts": ["COMMENT ON COLUMN", "NUMDOC"], "instruction": "Write a SQL query to add a comment to the NUMDOC column in the BARS.TMP_BANK_EMPLOYEE_PROT table.", "response": "-- Reasoning:\nWe need to add a comment to the NUMDOC column in the BARS.TMP_BANK_EMPLOYEE_PROT table. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nCOMMENT ON COLUMN BARS.TMP_BANK_EMPLOYEE_PROT.NUMDOC IS '\u041d\u043e\u043c\u0435\u0440 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430';\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Selects all columns from the TMP_BANK_EMPLOYEE_PROT table. */\nSELECT                                                                 on TMP_BANK_EMPLOYEE_PROT", "description": "Selects all columns from the TMP_BANK_EMPLOYEE_PROT table.", "concepts": ["SELECT"], "instruction": "Write a SQL query to select all columns from the TMP_BANK_EMPLOYEE_PROT table.", "response": "-- Reasoning:\nWe need to select all columns from the TMP_BANK_EMPLOYEE_PROT table.\n\n-- Solution:\n```sql\nSELECT * FROM TMP_BANK_EMPLOYEE_PROT;\n```\n\n-- Explanation:\nThis query selects all columns from the TMP_BANK_EMPLOYEE_PROT table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nPRAGMA table_info('TMP_BANK_EMPLOYEE_PROT');"}
{"seed": "/* Inserts two rows into the contract_account table with the given values. */\nINSERT INTO contract_account (reg,ccc,name) VALUES (0111,28149794464,\"WORKOUT\"),(0111,28223561449,\"WORKOUT_RETAIL\")", "description": "Inserts two rows into the contract_account table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert two rows into the contract_account table with the given values.", "response": "-- Reasoning:\nWe need to insert two rows into the contract_account table. Each row should have the following values:\n  \u2022 contract_id: 1\n  \u2022 account_id: 1\n\n-- Solution:\n```sql\nINSERT INTO contract_account (contract_id, account_id)\nVALUES (1, 1), (1, 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the contract_account table with the given values.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM contract_account;"}
{"seed": "/* Explains the query plan for the given query. */\nexplain (verbose, analyze) select title from film where ((rating='R' or rating='PG-13') and film_id in (select film_id from film_category where (category_id=11 or category_id=14)) and film_id not in (select film_id from inventory where inventory_id in (select inventory_id from rental)))", "description": "Explains the query plan for the given query.", "concepts": ["EXPLAIN", "VERBOSE", "ANALYZE", "SELECT", "FROM", "WHERE", "IN", "NOT", "IN", "IN", "IN", "IN", "IN"], "instruction": "Write a SQL query to explain the query plan for the given query.", "response": "-- Reasoning:\nWe need to explain the query plan for the given query.\n\n-- Solution:\nEXPLAIN QUERY PLAN\nSELECT *\nFROM orders\nWHERE status = 'shipped';\n\n-- Explanation:\nThis EXPLAIN statement generates a query plan for the given query.\n\n-- Tests:\n-- 1. Verify query plan is correct"}
{"seed": "/* Explains the query and shows the execution plan. */\nexplain (verbose, analyze) select * from (select store_id, sum(amount) as money from payment right join customer using (customer_id) right join store using (store_id) where payment_date > '2007/04/14' and payment_date <= '2007/05/14' group by store_id) as answer order by money desc", "description": "Explains the query and shows the execution plan.", "concepts": ["EXPLAIN", "VERBOSE", "ANALYZE", "SELECT", "FROM", "RIGHT JOIN", "USING", "WHERE", "GROUP BY", "ORDER BY", "DESC"], "instruction": "Write a SQL query to explain the query and show the execution plan.", "response": "-- Reasoning:\nWe need to write a query to explain the execution plan of the following query:\n\nSELECT * FROM orders WHERE status = 'shipped';\n\n-- Solution:\nEXPLAIN QUERY PLAN\nSELECT * FROM orders WHERE status = 'shipped';\n\n-- Explanation:\nThis EXPLAIN statement shows the execution plan of the query.\n\n-- Tests:\n-- 1. Verify the execution plan"}
{"seed": "/* Creates a btree index on the inventory table using the inventory_id and film_id columns. */\ncreate index on inventory using btree (inventory_id, film_id)", "description": "Creates a btree index on the inventory table using the inventory_id and film_id columns.", "concepts": ["CREATE INDEX", "USING", "BTREE"], "instruction": "Write a SQL query to create a btree index on the inventory table using the inventory_id and film_id columns.", "response": "-- Reasoning:\nWe need to create a btree index on the inventory table to speed up queries that use the inventory_id and film_id columns.\n\n-- Solution:\n```sql\nCREATE INDEX inventory_index ON inventory (inventory_id, film_id);\n```\n\n-- Explanation:\nThis statement creates a btree index on the inventory table using the inventory_id and film_id columns.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('inventory');"}
{"seed": "/* Creates a B-tree index on the film_category table using the category_id and film_id columns. */\ncreate index on film_category using btree (category_id, film_id)", "description": "Creates a B-tree index on the film_category table using the category_id and film_id columns.", "concepts": ["CREATE INDEX", "USING BTREE", "ON", "INDEX", "USING", "BTREE", "ON", "INDEX", "USING", "BTREE"], "instruction": "Write a SQL query to create a B-tree index on the film_category table using the category_id and film_id columns.", "response": "-- Reasoning:\nWe need to create a B-tree index on the film_category table to speed up queries that use both the category_id and film_id columns.\n\n-- Solution:\n```sql\nCREATE INDEX film_category_index ON film_category (category_id, film_id);\n```\n\n-- Explanation:\nThis statement creates a B-tree index on the film_category table using the category_id and film_id columns.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('film_category');"}
{"seed": "/* Creates an index on the payment table using the btree method on the payment_date column. */\ncreate index on payment using btree(payment_date)", "description": "Creates an index on the payment table using the btree method on the payment_date column.", "concepts": ["CREATE INDEX", "ON", "USING", "BTREE"], "instruction": "Write a SQL query to create an index on the payment table using the btree method on the payment_date column.", "response": "-- Reasoning:\nWe need to create an index on the payment table to speed up queries that use the payment_date column.\n\n-- Solution:\n```sql\nCREATE INDEX payment_date_idx ON payment (payment_date);\n```\n\n-- Explanation:\nThis statement creates an index on the payment table using the btree method on the payment_date column.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('payment');"}
{"seed": "/* Drops the view named TJ30T if it exists. */\nDROP VIEW IF EXISTS \"TJ30T\"", "description": "Drops the view named TJ30T if it exists.", "concepts": ["DROP VIEW", "IF EXISTS", "TJ30T"], "instruction": "Write a SQL query to drop the view named TJ30T if it exists.", "response": "-- Reasoning:\nWe need to drop the view named TJ30T if it exists.\n\n-- Solution:\n```sql\nDROP VIEW IF EXISTS TJ30T;\n```\n\n-- Explanation:\nThis statement drops the view named TJ30T if it exists.\n\n-- Tests:\n-- 1. Verify view is gone\nSELECT name FROM sqlite_master WHERE type='view' AND name='TJ30T';"}
{"seed": "/* Creates a view named TJ30T that contains the data from all tables with the same name. */\nCreate VIEW \"TJ30T\" AS(\nSELECT \n'590652c7-87a4-46e6-a9e9-60c90cb7c4e3_fff504b3-61e6-431a-9589-a0c8a1ccd3c6' AS \"SCHEMA\"\n,\"MANDT\"\n,\"STSMA\"\n,\"ESTAT\"\n,\"SPRAS\"\n,\"TXT04\"\n,\"TXT30\"\n,\"LTEXT\"\n,\"_CELONIS_CHANGE_DATE\"\nFROM \"590652c7-87a4-46e6-a9e9-60c90cb7c4e3_fff504b3-61e6-431a-9589-a0c8a1ccd3c6\".\"TJ30T\"\nUNION ALL\nSELECT \n'590652c7-87a4-46e6-a9e9-60c90cb7c4e3_f9111368-fa6e-436c-b891-ad340f7d20d8' AS \"SCHEMA\"\n,\"MANDT\"\n,\"STSMA\"\n,\"ESTAT\"\n,\"SPRAS\"\n,\"TXT04\"\n,\"TXT30\"\n,\"LTEXT\"\n,\"_CELONIS_CHANGE_DATE\"\nFROM \"590652c7-87a4-46e6-a9e9-60c90cb7c4e3_f9111368-fa6e-436c-b891-ad340f7d20d8\".\"TJ30T\"\nUNION ALL\nSELECT \n'590652c7-87a4-46e6-a9e9-60c90cb7c4e3_bd6565ee-257a-4349-b3a2-ad0dfa097db7' AS \"SCHEMA\"\n,\"MANDT\"\n,\"STSMA\"\n,\"ESTAT\"\n,\"SPRAS\"\n,\"TXT04\"\n,\"TXT30\"\n,\"LTEXT\"\n,\"_CELONIS_CHANGE_DATE\"\nFROM \"590652c7-87a4-46e6-a9e9-60c90cb7c4e3_bd6565ee-257a-4349-b3a2-ad0dfa097db7\".\"TJ30T\"\nUNION ALL\nSELECT \n'590652c7-87a4-46e6-a9e9-60c90cb7c4e3_897d99cb-b81d-4da1-b3da-d6c986f854bf' AS \"SCHEMA\"\n,\"MANDT\"\n,\"STSMA\"\n,\"ESTAT\"\n,\"SPRAS\"\n,\"TXT04\"\n,\"TXT30\"\n,\"LTEXT\"\n,\"_CELONIS_CHANGE_DATE\"\nFROM \"590652c7-87a4-46e6-a9e9-60c90cb7c4e3_897d99cb-b81d-4da1-b3da-d6c986f854bf\".\"TJ30T\"\nUNION ALL\nSELECT \n'590652c7-87a4-46e6-a9e9-60c90cb7c4e3_9ea3d196-29ab-45e3-b825-4f6b80c543d2' AS \"SCHEMA\"\n,\"MANDT\"\n,\"STSMA\"\n,\"ESTAT\"\n,\"SPRAS\"\n,\"TXT04\"\n,\"TXT30\"\n,\"LTEXT\"\n,\"_CELONIS_CHANGE_DATE\"\nFROM \"590652c7-87a4-46e6-a9e9-60c90cb7c4e3_9ea3d196-29ab-45e3-b825-4f6b80c543d2\".\"TJ30T\"\n)", "description": "Creates a view named TJ30T that contains the data from all tables with the same name.", "concepts": ["CREATE VIEW", "UNION", "SELECT", "FROM", "AS", "INT", "VARCHAR", "LTEXT", "_CELONIS_CHANGE_DATE"], "instruction": "Write a SQL query to create a view named TJ30T that contains the data from all tables with the same name.", "response": "-- Reasoning:\nWe need to create a view named TJ30T that contains the data from all tables with the same name.\n\n-- Solution:\n```sql\nCREATE VIEW TJ30T AS\n  SELECT * FROM TJ30T;\n```\n\n-- Explanation:\nThis statement creates a view named TJ30T that contains the data from all tables with the same name.\n\n-- Tests:\n-- 1. Verify view exists\nSELECT name FROM sqlite_master WHERE type='view';"}
{"seed": "/* Selects the timestamp and temperature of all observations from the ThermometerOBSERVATION table that occurred between 2017-11-09T14:15:00Z and 2017-11-10T14:15:00Z and have a temperature between 36 and 49 degrees. */\nSELECT timeStamp, temperature FROM ThermometerOBSERVATION o \nWHERE timestamp>'2017-11-09T14:15:00Z' AND timestamp<'2017-11-10T14:15:00Z' AND temperature>=36 AND temperature<=49", "description": "Selects the timestamp and temperature of all observations from the ThermometerOBSERVATION table that occurred between 2017-11-09T14:15:00Z and 2017-11-10T14:15:00Z and have a temperature between 36 and 49 degrees.", "concepts": ["SELECT", "FROM", "WHERE", "AND", "OR", "BETWEEN", "TIMESTAMP", "DATE", "TIME", "INTERVAL", "INTERVAL", "INTERVAL", "INTERVAL"], "instruction": "Write a SQL query to list the timestamp and temperature of all observations from the ThermometerOBSERVATION table that occurred between 2017-11-09T14:15:00Z and 2017-11-10T14:15:00Z and have a temperature between 36 and 49 degrees.", "response": "-- Reasoning:\nWe need to find all observations from the ThermometerOBSERVATION table that occurred between 2017-11-09T14:15:00Z and 2017-11-10T14:15:00Z and have a temperature between 36 and 49 degrees.\n\n-- Solution:\n```sql\nSELECT timestamp, temperature\nFROM ThermometerOBSERVATION\nWHERE timestamp BETWEEN '2017-11-09T14:15:00Z' AND '2017-11-10T14:15:00Z'\nAND temperature BETWEEN 36 AND 49;\n```\n\n-- Explanation:\nThis query selects the timestamp and temperature columns from the ThermometerOBSERVATION table, filtering the results to only include observations that occurred between 2017-11-09T14:15:00Z and 2017-11-10T14:15:00Z and have a temperature between 36 and 49 degrees.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT timestamp, temperature\nFROM ThermometerOBSERVATION\nWHERE timestamp BETWEEN '2017-11-"}
{"seed": "/* Creates a schema named weather if it does not already exist. */\ncreate schema if not exists weather", "description": "Creates a schema named weather if it does not already exist.", "concepts": ["CREATE SCHEMA"], "instruction": "Write a SQL query to create a schema named weather if it does not already exist.", "response": "-- Reasoning:\nWe need to create a new schema named weather if it does not already exist.\n\n-- Solution:\n```sql\nCREATE SCHEMA IF NOT EXISTS weather;\n```\n\n-- Explanation:\nThis statement creates a new schema named weather if it does not already exist.\n\n-- Tests:\n-- 1. Verify schema exists\nSELECT name FROM sqlite_master WHERE type='schema';"}
{"seed": "/* Drops the database named practice if it exists. */\ndrop database if exists practice", "description": "Drops the database named practice if it exists.", "concepts": ["drop database"], "instruction": "Write a SQL query to drop the database named practice if it exists.", "response": "-- Reasoning:\nWe need to drop the database named practice if it exists.\n\n-- Solution:\n```sql\nDROP DATABASE IF EXISTS practice;\n```\n\n-- Explanation:\nThis statement drops the database named practice if it exists.\n\n-- Tests:\n-- 1. Verify database is dropped\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named practice if it does not already exist. */\ncreate database if not exists practice", "description": "Creates a database named practice if it does not already exist.", "concepts": ["CREATE DATABASE", "IF", "EXISTS"], "instruction": "Write a SQL query to create a database named practice if it does not already exist.", "response": "-- Reasoning:\nWe need to create a database named practice if it does not already exist.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS practice;\n```\n\n-- Explanation:\nThis statement creates a database named practice if it does not already exist.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named student with three columns: maSinhVien (varchar primary key), Ten (nvarchar), DiaChi (nvarchar), and DienThoai (varchar). The DienThoai column has a check constraint that ensures that the value is a valid phone number. */\ncreate table student (\r\n    maSinhVien varchar(50) primary key,\r\n    Ten nvarchar(100),\r\n    DiaChi nvarchar(100),\r\n    DienThoai varchar(50) check ( Phone REGEXP '[0-9]{8,15}')\r\n)", "description": "Creates a table named student with three columns: maSinhVien (varchar primary key), Ten (nvarchar), DiaChi (nvarchar), and DienThoai (varchar). The DienThoai column has a check constraint that ensures that the value is a valid phone number.", "concepts": ["CREATE TABLE", "VARCHAR", "PRIMARY KEY", "NVARCHAR", "CHECK", "REGEXP"], "instruction": "Write a SQL query to create a table named student with three columns: maSinhVien (varchar primary key), Ten (nvarchar), DiaChi (nvarchar), and DienThoai (varchar). The DienThoai column has a check constraint that ensures that the value is a valid phone number.", "response": "-- Reasoning:\nWe need a new table named student. It should have a primary key, a name column, a phone number column, and a home address column. The phone number should be a valid phone number.\n\n-- Solution:\n```sql\nCREATE TABLE student (\n  maSinhVien VARCHAR(10) PRIMARY KEY,\n  Ten NVARCHAR(255),\n  DiaChi NVARCHAR(255),\n  DienThoai VARCHAR(10) CHECK (DienThoai LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')\n);\n```\n\n-- Explanation:\nThis statement defines the student table with four columns:\n  \u2022 maSinhVien: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Ten: variable\u2010length string up to 255 characters\n  \u2022 DiaChi: variable\u2010length string up to 255 characters\n  \u2022 DienThoai: varchar, with a check constraint that ensures that the value is a valid phone number\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('student');"}
{"seed": "/* Inserts two rows into the student table. */\ninsert into student values ('B010110', 'Nguyen Tuan Anh', 'Ha Noi', '0904818238'),\r\n                           ('B10394', 'Nguyen Hoang Hai', 'Hai Duong', '0494949494')", "description": "Inserts two rows into the student table.", "concepts": ["insert into", "values", "student", "values"], "instruction": "Write a SQL query to insert two rows into the student table.", "response": "-- Reasoning:\nWe need to insert two rows into the student table.\n\n-- Solution:\n```sql\nINSERT INTO student (name, age) VALUES ('John', 15);\nINSERT INTO student (name, age) VALUES ('Jane', 12);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the student table:\n  \u2022 John, 15\n  \u2022 Jane, 12\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM student;"}
{"seed": "/* Selects all columns from the student table. */\nselect * from student", "description": "Selects all columns from the student table.", "concepts": ["select", "*"], "instruction": "Write a SQL query to select all columns from the student table.", "response": "-- Reasoning:\nWe need to select all columns from the student table.\n\n-- Solution:\n```sql\nSELECT * FROM student;\n```\n\n-- Explanation:\nThis query selects all columns from the student table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM student;"}
{"seed": "/* Inserts a new row into the Departamentos table with the specified values. */\ninsert into Departamentos(dept_no, dnombre, loc) values(10, \"INFORMATICA\", \"DESPA6\")", "description": "Inserts a new row into the Departamentos table with the specified values.", "concepts": ["insert into", "values", "dept_no", "dnombre", "loc"], "instruction": "Write a SQL query to insert a new row into the Departamentos table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the Departamentos table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO Departamentos (id, nombre)\nVALUES (1, 'Marketing');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Departamentos table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Departamentos;"}
{"seed": "/* Inserts a new department with dept_no 20, dnombre \"COMERCIO\", and loc \"DESPA7\" into the Departamentos table. */\ninsert into Departamentos(dept_no, dnombre, loc) values(20, \"COMERCIO\", \"DESPA7\")", "description": "Inserts a new department with dept_no 20, dnombre \"COMERCIO\", and loc \"DESPA7\" into the Departamentos table.", "concepts": ["insert into", "values", "dept_no", "dnombre", "loc"], "instruction": "Write a SQL query to insert a new department with dept_no 20, dnombre \"COMERCIO\", and loc \"DESPA7\" into the Departamentos table.", "response": "-- Reasoning:\nWe need to insert a new department into the Departamentos table. It should have a dept_no of 20, a dnombre of \"COMERCIO\", and a loc of \"DESPA7\".\n\n-- Solution:\n```sql\nINSERT INTO Departamentos (dept_no, dnombre, loc)\nVALUES (20, \"COMERCIO\", \"DESPA7\");\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Departamentos table with the specified values.\n\n-- Tests:\n-- 1. Verify new department appears\nSELECT * FROM Departamentos;"}
{"seed": "/* Creates a database named bamazon. */\nCREATE DATABASE bamazon", "description": "Creates a database named bamazon.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named bamazon.", "response": "-- Reasoning:\nWe need to create a new database named bamazon.\n\n-- Solution:\n```sql\nCREATE DATABASE bamazon;\n```\n\n-- Explanation:\nThis statement creates a new database named bamazon.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named products with five columns: item_id (integer primary key), product_name (varchar), department_name (varchar), price (decimal), stock_quantity (integer), and product_sales (decimal). */\nCREATE TABLE products (\n    item_id INT(100) AUTO_INCREMENT,\n    product_name VARCHAR(40) NOT NULL,\n    department_name VARCHAR(40) NOT NULL,\n    price DECIMAL(10,2) NOT NULL,\n    stock_quantity INT(100) NOT NULL,\n    product_sales DECIMAL(10,2) NOT NULL,\n    PRIMARY KEY (item_id)\n)", "description": "Creates a table named products with five columns: item_id (integer primary key), product_name (varchar), department_name (varchar), price (decimal), stock_quantity (integer), and product_sales (decimal).", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DECIMAL", "NOT NULL"], "instruction": "Write a SQL query to create a table named products with five columns: item_id (integer primary key), product_name (varchar), department_name (varchar), price (decimal), stock_quantity (integer), and product_sales (decimal).", "response": "-- Reasoning:\nWe need a new table named products. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE products (\n  item_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  department_name VARCHAR(255),\n  price DECIMAL,\n  stock_quantity INT,\n  product_sales DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the products table with five columns:\n  \u2022 item_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 product_name: variable\u2010length string up to 255 characters\n  \u2022 department_name: variable\u2010length string up to 255 characters\n  \u2022 price: decimal number\n  \u2022 stock_quantity: integer\n  \u2022 product_sales: decimal number\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('products');"}
{"seed": "/* Inserts 10 rows into the products table. */\nINSERT INTO products (product_name, department_name, price, stock_quantity, product_sales)\n    VALUES (\"Atari\", \"Electronics\", 230.00, 50, 300.00),\n            (\"Turneck\", \"Clothing\", 30.00, 10, 30.00),\n            (\"Yoga mat\", \"Furniture\", 40.00, 40, 400.00),\n            (\"Cell Phone\", \"Electronics\", 500.00, 20, 700.00),\n            (\"Pillow\", \"Furniture\", 20.00, 10, 0),\n            (\"Chair\", \"Furniture\", 40.00, 4, 800),\n            (\"Shelf\", \"Furniture\", 65.00, 5, 500.00),\n            (\"Dress\", \"Clothing\", 445.00, 10, 240.00),\n            (\"Pants\", \"Clothing\", 68.00, 25, 300.00),\n            (\"Jshorts\", \"Clothing\", 123.00, 30, 100.00)", "description": "Inserts 10 rows into the products table.", "concepts": ["INSERT INTO", "VALUES", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "FOREIGN KEY", "CTE", "window functions", "UNION"], "instruction": "Write a SQL query to insert 10 rows into the products table.", "response": "-- Reasoning:\nWe need to insert 10 rows into the products table.\n\n-- Solution:\n```sql\nINSERT INTO products (product_id, name)\nVALUES (1, 'Apple'), (2, 'Banana'), (3, 'Orange'), (4, 'Pear'), (5, 'Grape'), (6, 'Strawberry'), (7, 'Pineapple'), (8, 'Mango'), (9, 'Kiwi'), (10, 'Lemon');\n```\n\n-- Explanation:\nThis INSERT statement inserts 10 rows into the products table.\n\n-- Tests:\n-- 1. Verify 10 rows are inserted\nSELECT * FROM products;"}
{"seed": "/* Creates a table named departments with three columns: department_id (integer auto increment), department_name (varchar), and over_head_costs (decimal). */\nCREATE TABLE departments (\n    department_id INT AUTO_INCREMENT,\n    department_name VARCHAR(40) NOT NULL,\n    over_head_costs DECIMAL(10,2) NOT NULL,\n    PRIMARY KEY (department_id)\n)", "description": "Creates a table named departments with three columns: department_id (integer auto increment), department_name (varchar), and over_head_costs (decimal).", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "DECIMAL", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named departments with three columns: department_id (integer auto increment), department_name (varchar), and over_head_costs (decimal).", "response": "-- Reasoning:\nWe need a new table named departments. It should have an integer primary key so that each department has a unique identifier, a name column to store the department\u2019s name as text, and an over_head_costs column to store the department\u2019s overhead costs as a decimal.\n\n-- Solution:\n```sql\nCREATE TABLE departments (\n  department_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  department_name VARCHAR(255),\n  over_head_costs DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the departments table with three columns:\n  \u2022 department_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 department_name: variable\u2010length string up to 255 characters\n  \u2022 over_head_costs: decimal number\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('departments');"}
{"seed": "/* Inserts three rows into the departments table. The first row has department_name \"Electronics\" and over_head_costs 2000. The second row has department_name \"Clothing\" and over_head_costs 500. The third row has department_name \"Furniture\" and over_head_costs 1000. */\nINSERT INTO departments (department_name, over_head_costs)\n    VALUES (\"Electronics\", 2000),\n            (\"Clothing\", 500),\n            (\"Furniture\", 1000)", "description": "Inserts three rows into the departments table. The first row has department_name \"Electronics\" and over_head_costs 2000. The second row has department_name \"Clothing\" and over_head_costs 500. The third row has department_name \"Furniture\" and over_head_costs 1000.", "concepts": ["INSERT INTO", "VALUES", "department_name", "over_head_costs"], "instruction": "Write a SQL query to insert three rows into the departments table. The first row has department_name \"Electronics\" and over_head_costs 2000. The second row has department_name \"Clothing\" and over_head_costs 500. The third row has department_name \"Furniture\" and over_head_costs 1000.", "response": "-- Reasoning:\nWe need to insert three rows into the departments table. The first row should have department_name \"Electronics\" and over_head_costs 2000. The second row should have department_name \"Clothing\" and over_head_costs 500. The third row should have department_name \"Furniture\" and over_head_costs 1000.\n\n-- Solution:\n```sql\nINSERT INTO departments (department_name, over_head_costs)\nVALUES (\"Electronics\", 2000), (\"Clothing\", 500), (\"Furniture\", 1000);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the departments table. Each row has a department_name and over_head_costs.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM departments;"}
{"seed": "/* Renames the table named text_condition to attribute_condition_text. */\nRENAME TABLE text_condition TO attribute_condition_text", "description": "Renames the table named text_condition to attribute_condition_text.", "concepts": ["RENAME TABLE"], "instruction": "Write a SQL query to rename the table named text_condition to attribute_condition_text.", "response": "-- Reasoning:\nWe need to rename the table named text_condition to attribute_condition_text.\n\n-- Solution:\n```sql\nALTER TABLE text_condition RENAME TO attribute_condition_text;\n```\n\n-- Explanation:\nThis ALTER statement renames the text_condition table to attribute_condition_text.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('attribute_condition_text');"}
{"seed": "/* Renames the table int_condition to attribute_condition_int. */\nRENAME TABLE int_condition TO attribute_condition_int", "description": "Renames the table int_condition to attribute_condition_int.", "concepts": ["RENAME TABLE"], "instruction": "Write a SQL query to rename the table int_condition to attribute_condition_int.", "response": "-- Reasoning:\nWe need to rename the table int_condition to attribute_condition_int.\n\n-- Solution:\n```sql\nALTER TABLE int_condition RENAME TO attribute_condition_int;\n```\n\n-- Explanation:\nThis ALTER statement renames the int_condition table to attribute_condition_int.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('attribute_condition_int');"}
{"seed": "/* Renames the table float_condition to attribute_condition_float. */\nRENAME TABLE float_condition TO attribute_condition_float", "description": "Renames the table float_condition to attribute_condition_float.", "concepts": ["RENAME TABLE", "TO"], "instruction": "Write a SQL query to rename the table float_condition to attribute_condition_float.", "response": "-- Reasoning:\nWe need to rename the table float_condition to attribute_condition_float.\n\n-- Solution:\n```sql\nALTER TABLE float_condition RENAME TO attribute_condition_float;\n```\n\n-- Explanation:\nThis ALTER statement renames the table float_condition to attribute_condition_float.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('attribute_condition_float');"}
{"seed": "/* Renames the table file_condition to attribute_condition_file. */\nRENAME TABLE file_condition TO attribute_condition_file", "description": "Renames the table file_condition to attribute_condition_file.", "concepts": ["RENAME TABLE", "TO"], "instruction": "Write a SQL query to rename the table file_condition to attribute_condition_file.", "response": "-- Reasoning:\nWe need to rename the file_condition table to attribute_condition_file.\n\n-- Solution:\n```sql\nALTER TABLE file_condition RENAME TO attribute_condition_file;\n```\n\n-- Explanation:\nThis ALTER statement renames the file_condition table to attribute_condition_file.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('attribute_condition_file');"}
{"seed": "/* Renames the table date_condition to attribute_condition_date. */\nRENAME TABLE date_condition TO attribute_condition_date", "description": "Renames the table date_condition to attribute_condition_date.", "concepts": ["RENAME TABLE"], "instruction": "Write a SQL query to rename the table date_condition to attribute_condition_date.", "response": "-- Reasoning:\nWe need to rename the table date_condition to attribute_condition_date.\n\n-- Solution:\n```sql\nALTER TABLE date_condition RENAME TO attribute_condition_date;\n```\n\n-- Explanation:\nThis ALTER statement renames the table date_condition to attribute_condition_date.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('attribute_condition_date');"}
{"seed": "/* Renames the table named list_condition to attribute_condition_list. */\nRENAME TABLE list_condition TO attribute_condition_list", "description": "Renames the table named list_condition to attribute_condition_list.", "concepts": ["RENAME TABLE", "TO"], "instruction": "Write a SQL query to rename the table named list_condition to attribute_condition_list.", "response": "-- Reasoning:\nWe need to rename the table named list_condition to attribute_condition_list.\n\n-- Solution:\n```sql\nALTER TABLE list_condition RENAME TO attribute_condition_list;\n```\n\n-- Explanation:\nThis ALTER statement updates the table schema by renaming the table named list_condition to attribute_condition_list.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('attribute_condition_list');"}
{"seed": "/* Creates a table named pg_hba_file_rules with 9 columns: line_number (integer), type (text), database (array), user_name (array), address (text), netmask (text), auth_method (text), options (array), and error (text). */\nCREATE TABLE IF NOT EXISTS pg_catalog.pg_hba_file_rules (\nline_number integer ,\ntype text ,\ndatabase ARRAY ,\nuser_name ARRAY ,\naddress text ,\nnetmask text ,\nauth_method text ,\noptions ARRAY ,\nerror text \n)", "description": "Creates a table named pg_hba_file_rules with 9 columns: line_number (integer), type (text), database (array), user_name (array), address (text), netmask (text), auth_method (text), options (array), and error (text).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "ARRAY", "pg_catalog", "pg_hba_file_rules", "line_number", "type"], "instruction": "Write a SQL query to create a table named pg_hba_file_rules with 9 columns: line_number (integer), type (text), database (array), user_name (array), address (text), netmask (text), auth_method (text), options (array), and error (text).", "response": "-- Reasoning:\nWe need a new table named pg_hba_file_rules. It should have 9 columns:\n  \u2022 line_number: integer, the line number in the file\n  \u2022 type: text, the type of rule\n  \u2022 database: array, the database name\n  \u2022 user_name: array, the user name\n  \u2022 address: text, the address\n  \u2022 netmask: text, the netmask\n  \u2022 auth_method: text, the authentication method\n  \u2022 options: array, the options\n  \u2022 error: text, the error message\n\n-- Solution:\n```sql\nCREATE TABLE pg_hba_file_rules (\n  line_number INT,\n  type TEXT,\n  database TEXT[],\n  user_name TEXT[],\n  address TEXT,\n  netmask TEXT,\n  auth_method TEXT,\n  options TEXT[],\n  error TEXT\n);\n```\n\n-- Explanation:\nThis statement defines the pg_hba_file_rules table with 9 columns:\n  \u2022 line_number: integer, the line number in the file\n  \u2022 type: text, the type of rule\n  \u2022 database: array, the database name\n  \u2022 user_name: array, the user name\n  \u2022 address: text, the address\n  \u2022 netmask: text, the netmask\n  \u2022 auth_method: text, the authentication method\n  \u2022 options: array, the options\n  \u2022 error: text, the error message"}
{"seed": "/* These are the SQL keywords that are used to perform specific operations on the database. */\nSELECT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER", "description": "These are the SQL keywords that are used to perform specific operations on the database.", "concepts": ["SELECT", "UPDATE", "DELETE", "TRUNCATE", "REFERENCES", "TRIGGER"], "instruction": "Write a SQL query to list the SQL keywords that are used to perform specific operations on the database.", "response": "-- Reasoning:\nWe need to list all the SQL keywords that are used to perform specific operations on the database.\n\n-- Solution:\n```sql\nSELECT name FROM sqlite_master WHERE type='keyword';\n```\n\n-- Explanation:\nThis query lists all the SQL keywords that are used to perform specific operations on the database.\n\n-- Tests:\n-- 1. Verify keywords are correct\nSELECT name FROM sqlite_master WHERE type='keyword';"}
{"seed": "/* Creates a table named PLAYING with three columns: ACCOUNT_ID (text), TRACK_ID (text), and AT_TIME (timestamp). ACCOUNT_ID and TRACK_ID are foreign keys that reference the ID columns of the ACCOUNT and TRACK tables, respectively. AT_TIME is the time at which the user started playing the track. */\nCREATE TABLE PLAYING (\n  ACCOUNT_ID TEXT NOT NULL,\n  TRACK_ID TEXT NOT NULL,\n  AT_TIME TIMESTAMP NOT NULL,\n  PRIMARY KEY(ACCOUNT_ID, TRACK_ID, AT_TIME),\n  FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNT(ID),\n  FOREIGN KEY(TRACK_ID) REFERENCES TRACK(ID)\n)", "description": "Creates a table named PLAYING with three columns: ACCOUNT_ID (text), TRACK_ID (text), and AT_TIME (timestamp). ACCOUNT_ID and TRACK_ID are foreign keys that reference the ID columns of the ACCOUNT and TRACK tables, respectively. AT_TIME is the time at which the user started playing the track.", "concepts": ["CREATE TABLE", "TEXT", "NOT NULL", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "TIMESTAMP", "NOT NULL"], "instruction": "Write a SQL query to create a table named PLAYING with three columns: ACCOUNT_ID (text), TRACK_ID (text), and AT_TIME (timestamp). ACCOUNT_ID and TRACK_ID are foreign keys that reference the ID columns of the ACCOUNT and TRACK tables, respectively. AT_TIME is the time at which the user started playing the track.", "response": "-- Reasoning:\nWe need a new table named PLAYING. It should have three columns:\n  \u2022 ACCOUNT_ID: text, a foreign key to the ID column of the ACCOUNT table\n  \u2022 TRACK_ID: text, a foreign key to the ID column of the TRACK table\n  \u2022 AT_TIME: timestamp, the time at which the user started playing the track\n\n-- Solution:\n```sql\nCREATE TABLE PLAYING (\n  ACCOUNT_ID TEXT,\n  TRACK_ID TEXT,\n  AT_TIME TIMESTAMP,\n  FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID),\n  FOREIGN KEY (TRACK_ID) REFERENCES TRACK (ID)\n);\n```\n\n-- Explanation:\nThis statement defines the PLAYING table with three columns:\n  \u2022 ACCOUNT_ID: text, a foreign key to the ID column of the ACCOUNT table\n  \u2022 TRACK_ID: text, a foreign key to the ID column of the TRACK table\n  \u2022 AT_TIME: timestamp, the time at which the user started playing the track\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('PLAYING');"}
{"seed": "/*  */\ndelete from HtmlLabelIndex where id=126584 \n/\ndelete from HtmlLabelInfo where indexid=126584 \n/\nINSERT INTO HtmlLabelIndex values(126584,'\u9ed8\u8ba4\u5bc6\u7801') \n/\nINSERT INTO HtmlLabelInfo VALUES(126584,'\u9ed8\u8ba4\u5bc6\u7801',7) \n/\nINSERT INTO HtmlLabelInfo VALUES(126584,'default password',8) \n/\nINSERT INTO HtmlLabelInfo VALUES(126584,'\u9ed8\u8a8d\u5bc6\u78bc',9) \n/\ndelete from HtmlLabelIndex where id=127005 \n/\ndelete from HtmlLabelInfo where indexid=127005 \n/\nINSERT INTO HtmlLabelIndex values(127005,'\u9ed8\u8ba4\u5b89\u5168\u7ea7\u522b') \n/\nINSERT INTO HtmlLabelInfo VALUES(127005,'\u9ed8\u8ba4\u5b89\u5168\u7ea7\u522b',7) \n/\nINSERT INTO HtmlLabelInfo VALUES(127005,'default Security level',8) \n/\nINSERT INTO HtmlLabelInfo VALUES(127005,'\u9ed8\u8a8d\u5b89\u5168\u7d1a\u522b',9) \n/", "description": "", "concepts": ["DEFAULT", "PASSWORD", "SECURITY"], "instruction": "Write a SQL query to list each customer's total sales from the orders table, grouped by customer, and sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to list each customer's total sales from the orders table, grouped by customer, and sorted from highest to lowest.\n\n-- Solution:\n```sql\nSELECT customer, SUM(amount) AS total_sales\nFROM orders\nGROUP BY customer\nORDER BY total_sales DESC;\n```\n\n-- Explanation:\nThis query uses the SUM function to calculate the total sales for each customer. It uses the GROUP BY clause to group the results by customer, and the ORDER BY clause to sort the results in descending order by total sales.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT customer, SUM(amount) AS total_sales\nFROM orders\nGROUP BY customer\nORDER BY total_sales DESC;"}
{"seed": "/* Drops the table c3p0test if it exists. */\nDROP TABLE IF EXISTS `c3p0test`", "description": "Drops the table c3p0test if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table c3p0test if it exists.", "response": "-- Reasoning:\nWe need to drop the table c3p0test if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS c3p0test;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('c3p0test');"}
{"seed": "/* Creates a table named c3p0test with a single column named a of type char(1). */\nCREATE TABLE `c3p0test` (\r\n  `a` char(1) DEFAULT NULL\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named c3p0test with a single column named a of type char(1).", "concepts": ["CREATE TABLE", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named c3p0test with a single column named a of type char(1).", "response": "-- Reasoning:\nWe need a new table named c3p0test. It should have a single column named a of type char(1).\n\n-- Solution:\n```sql\nCREATE TABLE c3p0test (\n  a CHAR(1)\n);\n```\n\n-- Explanation:\nThis statement defines the c3p0test table with a single column:\n  \u2022 a: char(1)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('c3p0test');"}
{"seed": "/* Drops the table sys_menu_t if it exists. */\nDROP TABLE IF EXISTS `sys_menu_t`", "description": "Drops the table sys_menu_t if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "sys_menu_t"], "instruction": "Write a SQL query to drop the sys_menu_t table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_menu_t table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_menu_t;\n```\n\n-- Explanation:\nThis DROP statement drops the sys_menu_t table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_menu_t');"}
{"seed": "/* Creates a table named sys_menu_t with the following columns: id (integer primary key), name (varchar), p_id (integer), lft (integer), rgt (integer), is_parent (tinyint), icon (varchar), menu_desc (varchar), menu_type (varchar), Weight (integer). */\nCREATE TABLE `sys_menu_t` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(255) NOT NULL,\r\n  `p_id` int(11) DEFAULT NULL,\r\n  `lft` int(11) NOT NULL,\r\n  `rgt` int(11) NOT NULL,\r\n  `is_parent` tinyint(4) DEFAULT NULL,\r\n  `icon` varchar(255) DEFAULT NULL,\r\n  `menu_desc` varchar(255) DEFAULT NULL,\r\n  `menu_type` varchar(10) NOT NULL DEFAULT 'menu' COMMENT '\u83dc\u5355\u7684\u7b49\u7ea7\u7c7b\u578b\uff0c\u6309\u7167\u5e38\u89c4\u5206\u7c7b\u53ef\u5206\u4e3a\uff0c\u5e94\u7528\uff0c\u83dc\u5355\uff0c\u5b50\u529f\u80fd\uff0c\u6309\u94ae\u7b49\u4e0d\u540c\u7b49\u7ea7\u3002\u4e0d\u540c\u7c7b\u578b\u7684\u5728\u4e0d\u540c\u7684\u533a\u57df\u6216\u8005\u6811\u4e2d\u5c55\u793a\uff0c\u53ef\u4ee5\u81ea\u7531\u914d\u7f6e\u3002\u9ed8\u8ba4\u4e3amenu\uff0c\u4e3a\u83dc\u5355\u3002',\r\n  `Weight` int(11) NOT NULL DEFAULT '100',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `menu_name` (`name`) USING BTREE,\r\n  KEY `menu_p_id` (`p_id`),\r\n  KEY `menu_lft` (`lft`),\r\n  KEY `menu_right` (`rgt`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8", "description": "Creates a table named sys_menu_t with the following columns: id (integer primary key), name (varchar), p_id (integer), lft (integer), rgt (integer), is_parent (tinyint), icon (varchar), menu_desc (varchar), menu_type (varchar), Weight (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named sys_menu_t with the following columns: id (integer primary key), name (varchar), p_id (integer), lft (integer), rgt (integer), is_parent (tinyint), icon (varchar), menu_desc (varchar), menu_type (varchar), Weight (integer).", "response": "-- Reasoning:\nWe need a new table named sys_menu_t. It should have an integer primary key so that each menu has a unique identifier, and a name column to store the menu\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE sys_menu_t (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  p_id INT,\n  lft INT,\n  rgt INT,\n  is_parent TINYINT,\n  icon VARCHAR(255),\n  menu_desc VARCHAR(255),\n  menu_type VARCHAR(255),\n  Weight INT\n);\n```\n\n-- Explanation:\nThis statement defines the sys_menu_t table with eight columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 p_id: integer\n  \u2022 lft: integer\n  \u2022 rgt: integer\n  \u2022 is_parent: tinyint\n  \u2022 icon: variable\u2010length string up to 255 characters\n  \u2022 menu_desc: variable\u2010length string up to 255 characters\n  \u2022 menu_type: variable\u2010length string up to 255 characters\n  \u2022 Weight: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('"}
{"seed": "/* Inserts a new row into the sys_menu_t table with the specified values. */\nINSERT INTO `sys_menu_t` VALUES ('1', '\u9996\u9875', '0', '1', '2', '0', '', 'bb', 'menu', '100')", "description": "Inserts a new row into the sys_menu_t table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_menu_t table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_menu_t table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO sys_menu_t (menu_id, menu_name, menu_url, parent_id, menu_order, menu_icon, menu_type, visible, perms, icon, create_by, create_time, update_by, update_time, remark)\nVALUES (1, '\u7cfb\u7edf\u7ba1\u7406', 'modules/sys', 0, 1, 'fa fa-cog', 1, 1, 'sys:menu:list,sys:menu:info,sys:menu:save,sys:menu:update,sys:menu:delete', '#', 'admin', '2018-03-16 11:33:00', 'ry', '2018-03-16 11:33:00', '\u7528\u6237\u83dc\u5355');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_menu_t table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_menu_t;"}
{"seed": "/* Inserts a new row into the sys_menu_t table with the given values. */\nINSERT INTO `sys_menu_t` VALUES ('5', '\u83dc\u5355\u7ba1\u7406', '2', '8', '9', '0', null, null, 'menu', '100')", "description": "Inserts a new row into the sys_menu_t table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_menu_t table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_menu_t table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO sys_menu_t (menu_id, menu_name, menu_url, parent_id, menu_order, menu_icon, menu_type, visible, perms, icon_show, create_by, create_time, update_by, update_time, remark)\nVALUES (1, '\u7cfb\u7edf\u7ba1\u7406', 'modules/sys', 0, 1, 'fa fa-cog', 1, 1, 'sys:menu:list,sys:menu:info,sys:menu:save,sys:menu:update,sys:menu:delete', 0, 'admin', '2018-03-16 11:33:00', 'ry', '2018-03-16 11:33:00', '\u7528\u6237\u83dc\u5355');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_menu_t table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_menu_t;"}
{"seed": "/* Drops the table sys_menu_url_t if it exists. */\nDROP TABLE IF EXISTS `sys_menu_url_t`", "description": "Drops the table sys_menu_url_t if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table sys_menu_url_t if it exists.", "response": "-- Reasoning:\nWe need to drop the table sys_menu_url_t if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_menu_url_t;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_menu_url_t');"}
{"seed": "/* Creates a table named sys_menu_url_t with the following columns: id (integer primary key), url_name (varchar), menu_id (integer), url (varchar), channel (varchar), match_type (varchar), auth_type (varchar), func_desc (varchar), is_access (tinyint). */\nCREATE TABLE `sys_menu_url_t` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `url_name` varchar(255) DEFAULT NULL,\r\n  `menu_id` int(11) NOT NULL,\r\n  `url` varchar(255) NOT NULL,\r\n  `channel` varchar(10) DEFAULT NULL COMMENT '\u8be5\u8bf7\u6c42\u7684\u4f20\u8f93\u901a\u9053\uff0c\u5305\u542bhttp\uff0chttps\uff0c\u65e0\uff0cany\u51e0\u79cd\u3002',\r\n  `match_type` varchar(10) DEFAULT 'ant' COMMENT 'url\u7684\u5339\u914d\u5f0f\u7684\u7c7b\u578b\uff0c\u5305\u542bant\uff0cregex\uff0cciRegex\u51e0\u79cd\uff0c\u9ed8\u8ba4\u4e3aant',\r\n  `auth_type` varchar(10) DEFAULT '' COMMENT '\u9700\u8981\u901a\u8fc7\u7684\u8ba4\u8bc1\u7c7b\u578b\uff0c\u4e00\u822c\u6765\u8bf4\u6709\u51e0\u79cd\uff0c\u4e00\u79cd\u662f\u901a\u8fc7\u4e86REMEMBERED\u8ba4\u8bc1\uff0c\u4e00\u79cd\u662f\u5168\u6743\u9650\u7684\u8ba4\u8bc1(\u6709\u8f93\u5165\u7528\u540d\u5bc6\u7801\u8ba4\u8bc1),\u7b2c\u4e09\u79cd\u662f\u6240\u6709\u4eba\u90fd\u80fd\u591f\u67e5\u770b\uff0c\u9ed8\u8ba4\u503c\u6682\u65f6\u672a\u77e5\u3002',\r\n  `func_desc` varchar(255) DEFAULT NULL,\r\n  `is_access` tinyint(2) NOT NULL DEFAULT '0' COMMENT '\u662f\u5426\u662f \u83dc\u5355\u7684\u5bf9\u5e94\u754c\u9762\u7684\u5165\u53e3',\r\n  PRIMARY KEY (`id`),\r\n  KEY `menu_id` (`menu_id`),\r\n  CONSTRAINT `sys_menu_url_t_ibfk_1` FOREIGN KEY (`menu_id`) REFERENCES `sys_menu_t` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8", "description": "Creates a table named sys_menu_url_t with the following columns: id (integer primary key), url_name (varchar), menu_id (integer), url (varchar), channel (varchar), match_type (varchar), auth_type (varchar), func_desc (varchar), is_access (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "KEY", "CONSTRAINT", "ENGINE", "DEFAULT", "COMMENT", "NOT", "NULL"], "instruction": "Write a SQL query to create a table named sys_menu_url_t with the following columns: id (integer primary key), url_name (varchar), menu_id (integer), url (varchar), channel (varchar), match_type (varchar), auth_type (varchar), func_desc (varchar), is_access (tinyint).", "response": "-- Reasoning:\nWe need a new table named sys_menu_url_t. It should have an integer primary key so that each record has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE sys_menu_url_t (\n  id INT PRIMARY KEY,\n  url_name VARCHAR(255),\n  menu_id INT,\n  url VARCHAR(255),\n  channel VARCHAR(255),\n  match_type VARCHAR(255),\n  auth_type VARCHAR(255),\n  func_desc VARCHAR(255),\n  is_access TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the sys_menu_url_t table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_menu_url_t');"}
{"seed": "/* Inserts a new row into the sys_menu_url_t table with the given values. */\nINSERT INTO `sys_menu_url_t` VALUES ('1', '\u9996\u9875', '1', '/index.jsp', null, 'ant', '', null, '1')", "description": "Inserts a new row into the sys_menu_url_t table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_menu_url_t table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_menu_url_t table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO sys_menu_url_t (menu_id, url)\nVALUES (1, 'https://www.google.com');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_menu_url_t table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_menu_url_t;"}
{"seed": "/* Drops the table sys_role_menu_m if it exists. */\nDROP TABLE IF EXISTS `sys_role_menu_m`", "description": "Drops the table sys_role_menu_m if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the sys_role_menu_m table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_role_menu_m table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_role_menu_m;\n```\n\n-- Explanation:\nThis DROP statement removes the sys_role_menu_m table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_role_menu_m');"}
{"seed": "/* Creates a table named sys_role_menu_m with three columns: role_id (integer), menu_id (integer), and is_all (tinyint). */\nCREATE TABLE `sys_role_menu_m` (\r\n  `role_id` int(11) NOT NULL,\r\n  `menu_id` int(11) NOT NULL,\r\n  `is_all` tinyint(4) NOT NULL DEFAULT '0' COMMENT '\u662f\u5426\u5305\u542bmenu_id\u5bf9\u5e94\u7684\u83dc\u5355\u7684\u6240\u6709\u5b50\u83dc\u5355\uff0c\u9ed8\u8ba4\u4e3afalse\u3002',\r\n  PRIMARY KEY (`role_id`,`menu_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sys_role_menu_m with three columns: role_id (integer), menu_id (integer), and is_all (tinyint).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "TINYINT", "DEFAULT", "COMMENT"], "instruction": "Write a SQL query to create a table named sys_role_menu_m with three columns: role_id (integer), menu_id (integer), and is_all (tinyint).", "response": "-- Reasoning:\nWe need a new table named sys_role_menu_m. It should have three columns:\n  \u2022 role_id: integer, a foreign key to sys_role.role_id\n  \u2022 menu_id: integer, a foreign key to sys_menu.menu_id\n  \u2022 is_all: tinyint, 0 or 1\n\n-- Solution:\n```sql\nCREATE TABLE sys_role_menu_m (\n  role_id INT,\n  menu_id INT,\n  is_all TINYINT,\n  FOREIGN KEY (role_id) REFERENCES sys_role (role_id),\n  FOREIGN KEY (menu_id) REFERENCES sys_menu (menu_id)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_role_menu_m table with three columns:\n  \u2022 role_id: integer, a foreign key to sys_role.role_id\n  \u2022 menu_id: integer, a foreign key to sys_menu.menu_id\n  \u2022 is_all: tinyint, 0 or 1\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_role_menu_m');"}
{"seed": "/* Inserts a new row into the sys_role_menu_m table with the values 1, 1, 1. */\nINSERT INTO `sys_role_menu_m` VALUES ('1', '1', '1')", "description": "Inserts a new row into the sys_role_menu_m table with the values 1, 1, 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_role_menu_m table with the values 1, 1, 1.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_role_menu_m table with the values 1, 1, 1.\n\n-- Solution:\n```sql\nINSERT INTO sys_role_menu_m (role_id, menu_id, create_time)\nVALUES (1, 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_role_menu_m table with the values 1, 1, 1.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_role_menu_m;"}
{"seed": "/* Drops the table sys_role_t if it exists. */\nDROP TABLE IF EXISTS `sys_role_t`", "description": "Drops the table sys_role_t if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table sys_role_t if it exists.", "response": "-- Reasoning:\nWe need to drop the table sys_role_t if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_role_t;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_role_t');"}
{"seed": "/* Creates a table named sys_role_t with three columns: id (integer primary key), role_name (varchar) and role_desc (varchar). The table has a unique constraint on the role_name column. */\nCREATE TABLE `sys_role_t` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `role_name` varchar(255) NOT NULL,\r\n  `role_desc` varchar(255) DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `role_name` (`role_name`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8", "description": "Creates a table named sys_role_t with three columns: id (integer primary key), role_name (varchar) and role_desc (varchar). The table has a unique constraint on the role_name column.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "UNIQUE", "AUTO_INCREMENT", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named sys_role_t with three columns: id (integer primary key), role_name (varchar) and role_desc (varchar). The table has a unique constraint on the role_name column.", "response": "-- Reasoning:\nWe need a new table named sys_role_t. It should have an integer primary key so that each role has a unique identifier, and two varchar columns: role_name and role_desc. The role_name column should be unique so that each role has a unique name.\n\n-- Solution:\n```sql\nCREATE TABLE sys_role_t (\n  id INTEGER PRIMARY KEY,\n  role_name VARCHAR(255) UNIQUE,\n  role_desc VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_role_t table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 role_name: variable\u2010length string up to 255 characters, marked UNIQUE so it cannot be null and is unique\n  \u2022 role_desc: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_role_t');"}
{"seed": "/* Inserts a new row into the sys_role_t table with the id 1 and name \u7ba1\u7406\u5458. */\nINSERT INTO `sys_role_t` VALUES ('1', '\u7ba1\u7406\u5458', null)", "description": "Inserts a new row into the sys_role_t table with the id 1 and name \u7ba1\u7406\u5458.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_role_t table with the id 1 and name \u7ba1\u7406\u5458.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_role_t table. It should have an id of 1 and a name of \u7ba1\u7406\u5458.\n\n-- Solution:\n```sql\nINSERT INTO sys_role_t (id, name)\nVALUES (1, '\u7ba1\u7406\u5458');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_role_t table with:\n  \u2022 id: 1\n  \u2022 name: \u7ba1\u7406\u5458\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_role_t;"}
{"seed": "/* Drops the table sys_user_login_error_t if it exists. */\nDROP TABLE IF EXISTS `sys_user_login_error_t`", "description": "Drops the table sys_user_login_error_t if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table sys_user_login_error_t if it exists.", "response": "-- Reasoning:\nWe need to drop the table sys_user_login_error_t if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_user_login_error_t;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_user_login_error_t');"}
{"seed": "/* Creates a table named sys_user_login_error_t with the following columns: id (bigint), user_id (bigint), error_msg (varchar), error_time (varchar), error_count (int), error_ip (varchar). The id column is the primary key, and the user_id column is a foreign key that references the id column in the sys_user_t table. */\nCREATE TABLE `sys_user_login_error_t` (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `user_id` bigint(20) NOT NULL,\r\n  `error_msg` varchar(255) NOT NULL,\r\n  `error_time` varchar(255) NOT NULL,\r\n  `error_count` int(11) NOT NULL,\r\n  `error_ip` varchar(255) NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  KEY `user_id` (`user_id`),\r\n  CONSTRAINT `sys_user_login_error_t_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `sys_user_t` (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sys_user_login_error_t with the following columns: id (bigint), user_id (bigint), error_msg (varchar), error_time (varchar), error_count (int), error_ip (varchar). The id column is the primary key, and the user_id column is a foreign key that references the id column in the sys_user_t table.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "BIGINT", "VARCHAR", "INT", "NOT NULL", "AUTO_INCREMENT", "KEY", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named sys_user_login_error_t with the following columns: id (bigint), user_id (bigint), error_msg (varchar), error_time (varchar), error_count (int), error_ip (varchar). The id column is the primary key, and the user_id column is a foreign key that references the id column in the sys_user_t table.", "response": "-- Reasoning:\nWe need a new table named sys_user_login_error_t. It should have an integer primary key so that each error has a unique identifier, and a user_id column to store the user\u2019s id. It should also have a varchar column for the error message, a varchar column for the error time, an integer column for the error count, and a varchar column for the error IP.\n\n-- Solution:\n```sql\nCREATE TABLE sys_user_login_error_t (\n  id BIGINT PRIMARY KEY,\n  user_id BIGINT,\n  error_msg VARCHAR(255),\n  error_time VARCHAR(255),\n  error_count INT,\n  error_ip VARCHAR(255),\n  FOREIGN KEY (user_id) REFERENCES sys_user_t (id)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user_login_error_t table with six columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id: integer, a foreign key that references the id column in the sys_user_t table\n  \u2022 error_msg: variable\u2010length string up to 255 characters\n  \u2022 error_time: variable\u2010length string up to 255 characters\n  \u2022 error_count: integer\n  \u2022 error_ip: variable\u2010length string up to"}
{"seed": "/* Drops the table sys_user_login_ip_t if it exists. */\nDROP TABLE IF EXISTS `sys_user_login_ip_t`", "description": "Drops the table sys_user_login_ip_t if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the sys_user_login_ip_t table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_user_login_ip_t table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_user_login_ip_t;\n```\n\n-- Explanation:\nThis DROP statement removes the sys_user_login_ip_t table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_user_login_ip_t');"}
{"seed": "/* Creates a table named sys_user_login_ip_t with five columns: id (bigint), user_id (bigint), login_ip (varchar), login_count (int), and logint_time (datetime). The id column is the primary key, and the user_id column is a foreign key that references the id column in the sys_user_t table. */\nCREATE TABLE `sys_user_login_ip_t` (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `user_id` bigint(20) NOT NULL,\r\n  `login_ip` varchar(255) NOT NULL,\r\n  `login_count` int(11) NOT NULL DEFAULT '1',\r\n  `logint_time` datetime NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  KEY `user_id` (`user_id`),\r\n  CONSTRAINT `sys_user_login_ip_t_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `sys_user_t` (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sys_user_login_ip_t with five columns: id (bigint), user_id (bigint), login_ip (varchar), login_count (int), and logint_time (datetime). The id column is the primary key, and the user_id column is a foreign key that references the id column in the sys_user_t table.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "CONSTRAINT", "KEY", "NOT NULL", "DEFAULT", "AUTO_INCREMENT", "BIGINT", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named sys_user_login_ip_t with five columns: id (bigint), user_id (bigint), login_ip (varchar), login_count (int), and logint_time (datetime). The id column is the primary key, and the user_id column is a foreign key that references the id column in the sys_user_t table.", "response": "-- Reasoning:\nWe need a new table named sys_user_login_ip_t. It should have an integer primary key so that each record has a unique identifier, and a user_id column to store the user\u2019s id. It should also have a login_ip column to store the user\u2019s login IP address, a login_count column to store the number of times the user has logged in, and a logint_time column to store the time of the last login.\n\n-- Solution:\n```sql\nCREATE TABLE sys_user_login_ip_t (\n  id BIGINT PRIMARY KEY,\n  user_id BIGINT,\n  login_ip VARCHAR(255),\n  login_count INT,\n  logint_time DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user_login_ip_t table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id: integer, foreign key to sys_user_t.id\n  \u2022 login_ip: variable\u2010length string up to 255 characters\n  \u2022 login_count: integer\n  \u2022 logint_time: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_user_login_ip_t');"}
{"seed": "/* Drops the table sys_user_role_m if it exists. */\nDROP TABLE IF EXISTS `sys_user_role_m`", "description": "Drops the table sys_user_role_m if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the sys_user_role_m table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_user_role_m table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_user_role_m;\n```\n\n-- Explanation:\nThis DROP statement deletes the sys_user_role_m table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_user_role_m');"}
{"seed": "/* Creates a table named sys_user_role_m with two columns: user_id (bigint) and role_id (int). The user_id column is a foreign key that references the id column of the sys_user_t table. The role_id column is a foreign key that references the id column of the sys_role_t table. */\nCREATE TABLE `sys_user_role_m` (\r\n  `user_id` bigint(20) NOT NULL,\r\n  `role_id` int(11) NOT NULL,\r\n  PRIMARY KEY (`user_id`,`role_id`),\r\n  KEY `role_id` (`role_id`),\r\n  KEY `user_id` (`user_id`),\r\n  CONSTRAINT `sys_user_role_m_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `sys_user_t` (`id`),\r\n  CONSTRAINT `sys_user_role_m_ibfk_2` FOREIGN KEY (`role_id`) REFERENCES `sys_role_t` (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sys_user_role_m with two columns: user_id (bigint) and role_id (int). The user_id column is a foreign key that references the id column of the sys_user_t table. The role_id column is a foreign key that references the id column of the sys_role_t table.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "CONSTRAINT", "KEY", "BIGINT", "INT"], "instruction": "Write a SQL query to create a table named sys_user_role_m with two columns: user_id (bigint) and role_id (int). The user_id column is a foreign key that references the id column of the sys_user_t table. The role_id column is a foreign key that references the id column of the sys_role_t table.", "response": "-- Reasoning:\nWe need a new table named sys_user_role_m to store the relationship between users and roles. It should have two foreign keys:\n  \u2022 user_id: references the id column of the sys_user_t table\n  \u2022 role_id: references the id column of the sys_role_t table\n\n-- Solution:\n```sql\nCREATE TABLE sys_user_role_m (\n  user_id BIGINT,\n  role_id INT,\n  FOREIGN KEY (user_id) REFERENCES sys_user_t (id),\n  FOREIGN KEY (role_id) REFERENCES sys_role_t (id)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user_role_m table with two foreign keys:\n  \u2022 user_id: references the id column of the sys_user_t table\n  \u2022 role_id: references the id column of the sys_role_t table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_user_role_m');"}
{"seed": "/* Inserts a new row into the sys_user_role_m table with the values 1 and 1. */\nINSERT INTO `sys_user_role_m` VALUES ('1', '1')", "description": "Inserts a new row into the sys_user_role_m table with the values 1 and 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_user_role_m table with the values 1 and 1.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_user_role_m table with the values 1 and 1.\n\n-- Solution:\n```sql\nINSERT INTO sys_user_role_m (user_id, role_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_user_role_m table with the values 1 and 1.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_user_role_m;"}
{"seed": "/* Drops the table sys_user_t if it exists. */\nDROP TABLE IF EXISTS `sys_user_t`", "description": "Drops the table sys_user_t if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table sys_user_t if it exists.", "response": "-- Reasoning:\nWe need to drop the table sys_user_t if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_user_t;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_user_t');"}
{"seed": "/* Creates a table named sys_user_t with the following columns: id (bigint), username (varchar), password (varchar), nickname (varchar), real_name (varchar), email (varchar), status (varchar), register_time (datetime), register_ip (varchar), register_address (varchar). */\nCREATE TABLE `sys_user_t` (\r\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(255) NOT NULL COMMENT '\u7528\u6237\u540d',\r\n  `password` varchar(255) NOT NULL COMMENT '\u5bc6\u7801',\r\n  `nickname` varchar(255) DEFAULT NULL COMMENT '\u6635\u79f0',\r\n  `real_name` varchar(255) DEFAULT '' COMMENT '\u771f\u5b9e\u59d3\u540d',\r\n  `email` varchar(255) DEFAULT NULL COMMENT '\u90ae\u7bb1\u5730\u5740',\r\n  `status` varchar(255) NOT NULL COMMENT '\u5f53\u524d\u8d26\u53f7\u72b6\u6001',\r\n  `register_time` datetime DEFAULT NULL COMMENT '\u6ce8\u518c\u65f6\u95f4',\r\n  `register_ip` varchar(255) DEFAULT NULL COMMENT '\u6ce8\u518cip',\r\n  `register_address` varchar(255) DEFAULT NULL COMMENT '\u6ce8\u518c\u5730\u5740',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `user_name` (`username`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8", "description": "Creates a table named sys_user_t with the following columns: id (bigint), username (varchar), password (varchar), nickname (varchar), real_name (varchar), email (varchar), status (varchar), register_time (datetime), register_ip (varchar), register_address (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "DEFAULT", "COMMENT", "VARCHAR", "NOT NULL", "DEFAULT", "NULL", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named sys_user_t with the following columns: id (bigint), username (varchar), password (varchar), nickname (varchar), real_name (varchar), email (varchar), status (varchar), register_time (datetime), register_ip (varchar), register_address (varchar).", "response": "-- Reasoning:\nWe need a new table named sys_user_t. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE sys_user_t (\n  id BIGINT PRIMARY KEY,\n  username VARCHAR(255),\n  password VARCHAR(255),\n  nickname VARCHAR(255),\n  real_name VARCHAR(255),\n  email VARCHAR(255),\n  status VARCHAR(255),\n  register_time DATETIME,\n  register_ip VARCHAR(255),\n  register_address VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user_t table with nine columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 nickname: variable\u2010length string up to 255 characters\n  \u2022 real_name: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 status: variable\u2010length string up to 255 characters\n  \u2022 register_time: datetime\n  \u2022 register_ip"}
{"seed": "/* Inserts a new user into the sys_user_t table with the given values. */\nINSERT INTO `sys_user_t` VALUES ('1', 'zhezhiren', '123456', '\u6298\u679d\u4eba', '\u90d1\u5174', '451179870@qq.com', 'normal', '2014-03-11 09:19:38', '127.0.0.1', '\u957f\u6c99')", "description": "Inserts a new user into the sys_user_t table with the given values.", "concepts": ["INSERT INTO", "VALUES", "sys_user_t", "123456", "\u90d1\u5174", "45117"], "instruction": "Write a SQL query to insert a new user into the sys_user_t table with the given values.", "response": "-- Reasoning:\nWe need to insert a new user into the sys_user_t table. The user should have the given values:\n  \u2022 user_id: 1\n  \u2022 user_name: 'John'\n  \u2022 user_email: ''\n  \u2022 user_password: ''\n\n-- Solution:\n```sql\nINSERT INTO sys_user_t (user_id, user_name, user_email, user_password)\nVALUES (1, 'John', '', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_user_t table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM sys_user_t;"}
{"seed": "/* Creates a table named donor with five columns: donorId (integer), donorName (varchar), bloodGroup (varchar), healthComplications (varchar), phoneNumber (bigint), address (varchar). */\nCREATE TABLE `donor` (\n  `donorId` int(11) NOT NULL,\n  `donorName` varchar(20) NOT NULL,\n  `bloodGroup` varchar(3) NOT NULL,\n  `healthComplications` varchar(50) NOT NULL,\n  `phoneNumber` bigint(20) NOT NULL,\n  `address` varchar(100) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named donor with five columns: donorId (integer), donorName (varchar), bloodGroup (varchar), healthComplications (varchar), phoneNumber (bigint), address (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "BIGINT", "VARCHAR"], "instruction": "Write a SQL query to create a table named donor with five columns: donorId (integer), donorName (varchar), bloodGroup (varchar), healthComplications (varchar), phoneNumber (bigint), address (varchar).", "response": "-- Reasoning:\nWe need a new table named donor. It should have an integer primary key so that each donor has a unique identifier, and a name column to store the donor\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE donor (\n  donorId INT PRIMARY KEY,\n  donorName VARCHAR(255),\n  bloodGroup VARCHAR(255),\n  healthComplications VARCHAR(255),\n  phoneNumber BIGINT,\n  address VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the donor table with five columns:\n  \u2022 donorId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 donorName: variable\u2010length string up to 255 characters\n  \u2022 bloodGroup: variable\u2010length string up to 255 characters\n  \u2022 healthComplications: variable\u2010length string up to 255 characters\n  \u2022 phoneNumber: integer\n  \u2022 address: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('donor');"}
{"seed": "/* Inserts a new row into the donor table with the given values. */\nINSERT INTO `donor` (`donorId`, `donorName`, `bloodGroup`, `healthComplications`, `phoneNumber`, `address`) VALUES\n(1, 'Sam', 'A+', 'none', 1733333333, 'Banani, Dhaka')", "description": "Inserts a new row into the donor table with the given values.", "concepts": ["INSERT INTO", "VALUES", "donor", "donorId", "donorName", "bloodGroup", "healthComplications", "phoneNumber", "address"], "instruction": "Write a SQL query to insert a new row into the donor table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the donor table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO donor (donor_id, name, address, city, state, zip, phone, email)\nVALUES (1, '', '123 Main St', 'Anytown', 'CA', '90210', '555-555-5555', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the donor table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM donor;"}
{"seed": "/* Creates a table named users with four columns: id (integer), user_name (varchar), password (varchar), and name (varchar). */\nCREATE TABLE `users` (\n  `id` int(11) NOT NULL,\n  `user_name` varchar(20) NOT NULL,\n  `password` varchar(20) NOT NULL,\n  `name` varchar(20) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named users with four columns: id (integer), user_name (varchar), password (varchar), and name (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "NOT NULL", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named users with four columns: id (integer), user_name (varchar), password (varchar), and name (varchar).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, a user_name column to store the user\u2019s username as text, a password column to store the user\u2019s password as text, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  user_name VARCHAR(255),\n  password VARCHAR(255),\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the users table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_name: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Inserts four rows into the users table. */\nINSERT INTO `users` (`id`, `user_name`, `password`, `name`) VALUES\n(1, 'sam', '1234', 'Sam'),\n(2, 'kim1', '7dd11ae2d5ed34925bdb', 'kim'),\n(3, 'rahul1', '6473275bea530d628855', 'rahul'),\n(4, 'israt', '250cf8b51c773f3f8dc8', 'israt')", "description": "Inserts four rows into the users table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert four rows into the users table.", "response": "-- Reasoning:\nWe need to insert four rows into the users table.\n\n-- Solution:\n```sql\nINSERT INTO users (name, email, phone)\nVALUES ('', '', '1234567890'),\n       ('', '', '0987654321'),\n       ('', '', '1112223333'),\n       ('', '', '3334445555');\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the users table.\n\n-- Tests:\n-- 1. Verify all rows are inserted\nSELECT * FROM users;"}
{"seed": "/* Adds a primary key constraint to the donor table. */\nALTER TABLE `donor`\n  ADD PRIMARY KEY (`donorId`)", "description": "Adds a primary key constraint to the donor table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the donor table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the donor table. This will ensure that each donor has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE donor\n  ADD PRIMARY KEY (donor_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the donor table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('donor');"}
{"seed": "/* Adds a primary key constraint to the id column in the users table. */\nALTER TABLE `users`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the users table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the users table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the users table. This will ensure that each user has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE users\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the users table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('users');"}
{"seed": "/* Modifies the donor table to add an auto-incrementing id column. */\nALTER TABLE `donor`\n  MODIFY `donorId` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the donor table to add an auto-incrementing id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY", "INT", "NOT NULL", "PRIMARY KEY"], "instruction": "Write a SQL query to modify the donor table to add an auto-incrementing id column.", "response": "-- Reasoning:\nWe need to modify the donor table by adding a new column named id. It should be an integer and auto\u2010incrementing.\n\n-- Solution:\n```sql\nALTER TABLE donor\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the donor table schema by adding:\n  \u2022 id: an integer column that is auto\u2010incrementing and primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('donor');"}
{"seed": "/* Modifies the users table by adding an auto-incrementing id column. */\nALTER TABLE `users`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the users table by adding an auto-incrementing id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY"], "instruction": "Write a SQL query to modify the users table by adding an auto-incrementing id column.", "response": "-- Reasoning:\nWe need to modify the existing users table by adding a new column named id. It should be an integer and auto\u2010incrementing, so that every user has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE users\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the users table schema by adding:\n  \u2022 id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('users');"}
{"seed": "/* Creates a table named s_card with 10 columns: card_id, disp_id, card_type, year, month, day, fulldate, creation_date, modification_date, record_source, card_hk, and effectiv_timerange. card_hk is the primary key of the table. */\nCREATE TABLE SRCSCHEMA_ID.s_card(\ncard_id VARCHAR(10 ),\ndisp_id VARCHAR(10 ),\ncard_type VARCHAR(100 ),\nyear integer,\nmonth integer,\nday integer,\nfulldate DATE,\ncreation_date DATE,\nmodification_date DATE,\n\nrecord_source varchar(255),\ncard_hk CHAR(32),\neffectiv_timerange tstzrange,\nPRIMARY KEY(card_hk,effectiv_timerange)\n)", "description": "Creates a table named s_card with 10 columns: card_id, disp_id, card_type, year, month, day, fulldate, creation_date, modification_date, record_source, card_hk, and effectiv_timerange. card_hk is the primary key of the table.", "concepts": ["CREATE TABLE", "VARCHAR", "INTEGER", "DATE", "CHAR", "TSTZRANGE", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named s_card with 10 columns: card_id, disp_id, card_type, year, month, day, fulldate, creation_date, modification_date, record_source, card_hk, and effectiv_timerange. card_hk is the primary key of the table.", "response": "-- Reasoning:\nWe need a new table named s_card. It should have a primary key card_hk, and other columns to store the card\u2019s information.\n\n-- Solution:\n```sql\nCREATE TABLE s_card (\n  card_hk INT PRIMARY KEY,\n  disp_id INT,\n  card_type INT,\n  year INT,\n  month INT,\n  day INT,\n  fulldate INT,\n  creation_date INT,\n  modification_date INT,\n  record_source INT,\n  card_hk INT,\n  effectiv_timerange INT\n);\n```\n\n-- Explanation:\nThis statement defines the s_card table with 10 columns:\n  \u2022 card_hk: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 disp_id: integer\n  \u2022 card_type: integer\n  \u2022 year: integer\n  \u2022 month: integer\n  \u2022 day: integer\n  \u2022 fulldate: integer\n  \u2022 creation_date: integer\n  \u2022 modification_date: integer\n  \u2022 record_source: integer\n  \u2022 card_hk: integer\n  \u2022 effectiv_timerange: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('s_card');"}
{"seed": "/* Creates a table named s_card_hist in the SRCSCHEMA_ID schema that is a copy of the s_card table. */\nCREATE TABLE SRCSCHEMA_ID.s_card_hist (like SRCSCHEMA_ID.s_card including all)", "description": "Creates a table named s_card_hist in the SRCSCHEMA_ID schema that is a copy of the s_card table.", "concepts": ["CREATE TABLE", "SRCSCHEMA_ID", "s_card_hist", "like", "including all"], "instruction": "Write a SQL query to create a table named s_card_hist in the SRCSCHEMA_ID schema that is a copy of the s_card table.", "response": "-- Reasoning:\nWe need to create a new table named s_card_hist in the SRCSCHEMA_ID schema that is a copy of the s_card table.\n\n-- Solution:\n```sql\nCREATE TABLE SRCSCHEMA_ID.s_card_hist AS SELECT * FROM s_card;\n```\n\n-- Explanation:\nThis statement creates a new table named s_card_hist in the SRCSCHEMA_ID schema that is a copy of the s_card table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SRCSCHEMA_ID.s_card_hist');"}
{"seed": "/* Creates a trigger named versioning_trigger_s_card that runs the versioning procedure whenever a row is inserted, updated, or deleted in the s_card table of the SRCSCHEMA_ID schema. */\nCREATE TRIGGER versioning_trigger_s_card BEFORE INSERT OR UPDATE OR DELETE ON SRCSCHEMA_ID.s_card FOR EACH ROW EXECUTE PROCEDURE versioning('effectiv_timerange', 'SRCSCHEMA_ID.s_card_hist', true)", "description": "Creates a trigger named versioning_trigger_s_card that runs the versioning procedure whenever a row is inserted, updated, or deleted in the s_card table of the SRCSCHEMA_ID schema.", "concepts": ["CREATE TRIGGER", "BEFORE", "INSERT", "OR", "UPDATE", "OR", "DELETE", "ON", "FOR", "EACH", "ROW", "EXECUTE"], "instruction": "Write a SQL query to create a trigger named versioning_trigger_s_card that runs the versioning procedure whenever a row is inserted, updated, or deleted in the s_card table of the SRCSCHEMA_ID schema.", "response": "-- Reasoning:\nWe need to create a trigger that runs the versioning procedure whenever a row is inserted, updated, or deleted in the s_card table of the SRCSCHEMA_ID schema.\n\n-- Solution:\n```sql\nCREATE TRIGGER versioning_trigger_s_card\nAFTER INSERT OR UPDATE OR DELETE ON SRCSCHEMA_ID.s_card\nFOR EACH ROW\nBEGIN\n  CALL versioning_procedure();\nEND;\n```\n\n-- Explanation:\nThis trigger runs the versioning_procedure() procedure whenever a row is inserted, updated, or deleted in the s_card table of the SRCSCHEMA_ID schema.\n\n-- Tests:\n-- 1. Verify trigger exists\nSELECT name FROM sqlite_master WHERE type='trigger';"}
{"seed": "/* Creates a table named h_card in the SRCSCHEMA_ID schema with two columns: card_id (varchar) and disp_id (varchar). The card_hk column is the primary key. */\nCREATE TABLE SRCSCHEMA_ID.h_card(\ncard_id VARCHAR(10 ),\ndisp_id VARCHAR(10 ),\ncard_hk CHAR(32),\nPRIMARY KEY(card_hk)\n)", "description": "Creates a table named h_card in the SRCSCHEMA_ID schema with two columns: card_id (varchar) and disp_id (varchar). The card_hk column is the primary key.", "concepts": ["CREATE TABLE", "SRCSCHEMA_ID", "h_card", "VARCHAR", "PRIMARY KEY", "CHAR"], "instruction": "Write a SQL query to create a table named h_card in the SRCSCHEMA_ID schema with two columns: card_id (varchar) and disp_id (varchar). The card_hk column is the primary key.", "response": "-- Reasoning:\nWe need a new table named h_card in the SRCSCHEMA_ID schema. It should have a primary key card_id and a foreign key disp_id.\n\n-- Solution:\n```sql\nCREATE TABLE SRCSCHEMA_ID.h_card (\n  card_id VARCHAR(255) PRIMARY KEY,\n  disp_id VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the h_card table with two columns:\n  \u2022 card_id: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 disp_id: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SRCSCHEMA_ID.h_card');"}
{"seed": "/* Selects the CustomerID and Country of all customers whose country starts with a letter between B and G, inclusive. */\nSELECT\n  CustomerID,\n  Country\nFROM Customers\nWHERE LEFT(Country, 1) >= 'B' AND LEFT(Country, 1) <= 'G'\n--WHERE LEFT(Country, 1) IN ('B', 'C', 'D', 'E', 'F', 'G')\nORDER BY Country", "description": "Selects the CustomerID and Country of all customers whose country starts with a letter between B and G, inclusive.", "concepts": ["SELECT", "FROM", "WHERE", "ORDER BY", "LEFT", "IN"], "instruction": "Write a SQL query to list each customer's CustomerID and Country from the Customers table, where the country starts with a letter between B and G, inclusive.", "response": "-- Reasoning:\nWe need to list each customer's CustomerID and Country from the Customers table, where the country starts with a letter between B and G, inclusive.\n\n-- Solution:\n```sql\nSELECT CustomerID, Country\nFROM Customers\nWHERE Country LIKE 'B%' OR Country LIKE 'C%' OR Country LIKE 'D%' OR Country LIKE 'E%' OR Country LIKE 'F%' OR Country LIKE 'G%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to filter the results based on the country column. It checks if the country starts with a letter between B and G, inclusive.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT CustomerID, Country\nFROM Customers\nWHERE Country LIKE 'B%' OR Country LIKE 'C%' OR Country LIKE 'D%' OR Country LIKE 'E%' OR Country LIKE 'F%' OR Country LIKE 'G%';"}
{"seed": "/* Creates a database named yygh_cmn if it does not already exist. Then, it uses the yygh_cmn database. */\nCREATE DATABASE IF NOT EXISTS `yygh_cmn` CHARACTER SET utf8;\nUSE `yygh_cmn`", "description": "Creates a database named yygh_cmn if it does not already exist. Then, it uses the yygh_cmn database.", "concepts": ["CREATE DATABASE", "IF NOT EXISTS", "USE"], "instruction": "Write a SQL query to create a database named yygh_cmn if it does not already exist. Then, use the yygh_cmn database.", "response": "-- Reasoning:\nWe need to create a database named yygh_cmn if it does not already exist. Then, use the yygh_cmn database.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS yygh_cmn;\nUSE yygh_cmn;\n```\n\n-- Explanation:\nThis statement creates a database named yygh_cmn if it does not already exist. Then, it uses the yygh_cmn database.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named dict with the following columns: id (bigint), parent_id (bigint), name (varchar), value (bigint), dict_code (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint). */\nCREATE TABLE `dict` (\n  `id` bigint(20) NOT NULL DEFAULT '0' COMMENT 'id',\n  `parent_id` bigint(20) NOT NULL DEFAULT '0' COMMENT '\u4e0a\u7ea7id',\n  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '\u540d\u79f0',\n  `value` bigint(20) DEFAULT NULL COMMENT '\u503c',\n  `dict_code` varchar(20) DEFAULT NULL COMMENT '\u7f16\u7801',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '1' COMMENT '\u5220\u9664\u6807\u8bb0\uff080:\u4e0d\u53ef\u7528 1:\u53ef\u7528\uff09',\n  PRIMARY KEY (`id`),\n  KEY `idx_dict_code` (`dict_code`),\n  KEY `idx_parent_id` (`parent_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='\u7ec4\u7ec7\u67b6\u6784\u8868'", "description": "Creates a table named dict with the following columns: id (bigint), parent_id (bigint), name (varchar), value (bigint), dict_code (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "concepts": ["CREATE TABLE", "BIGINT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "COMMENT", "CREATE TABLE", "BIGINT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "COMMENT", "CREATE TABLE"], "instruction": "Write a SQL query to create a table named dict with the following columns: id (bigint), parent_id (bigint), name (varchar), value (bigint), dict_code (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "response": "-- Reasoning:\nWe need a new table named dict. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE dict (\n  id BIGINT,\n  parent_id BIGINT,\n  name VARCHAR(255),\n  value BIGINT,\n  dict_code VARCHAR(255),\n  create_time TIMESTAMP,\n  update_time TIMESTAMP,\n  is_deleted TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the dict table with eight columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 parent_id: integer\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 value: integer\n  \u2022 dict_code: variable\u2010length string up to 255 characters\n  \u2022 create_time: timestamp\n  \u2022 update_time: timestamp\n  \u2022 is_deleted: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('dict');"}
{"seed": "/* Creates a database named yygh_hosp if it does not already exist. Then, it uses the yygh_hosp database. */\nCREATE DATABASE IF NOT EXISTS `yygh_hosp` CHARACTER SET utf8mb4;\nUSE `yygh_hosp`", "description": "Creates a database named yygh_hosp if it does not already exist. Then, it uses the yygh_hosp database.", "concepts": ["CREATE DATABASE", "IF NOT EXISTS", "USE"], "instruction": "Write a SQL query to create a database named yygh_hosp if it does not already exist. Then, use the yygh_hosp database.", "response": "-- Reasoning:\nWe need to create a database named yygh_hosp if it does not already exist. Then, use the yygh_hosp database.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS yygh_hosp;\nUSE yygh_hosp;\n```\n\n-- Explanation:\nThis statement creates a database named yygh_hosp if it does not already exist. Then, it uses the yygh_hosp database.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named hospital_set with the following columns: id (bigint), hosname (varchar), hoscode (varchar), api_url (varchar), sign_key (varchar), contacts_name (varchar), contacts_phone (varchar), status (tinyint), create_time (timestamp), update_time (timestamp), is_deleted (tinyint). */\nCREATE TABLE `hospital_set` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '\u7f16\u53f7',\n  `hosname` varchar(100) DEFAULT NULL COMMENT '\u533b\u9662\u540d\u79f0',\n  `hoscode` varchar(30) DEFAULT NULL COMMENT '\u533b\u9662\u7f16\u53f7',\n  `api_url` varchar(100) DEFAULT NULL COMMENT 'api\u57fa\u7840\u8def\u5f84',\n  `sign_key` varchar(50) DEFAULT NULL COMMENT '\u7b7e\u540d\u79d8\u94a5',\n  `contacts_name` varchar(20) DEFAULT NULL COMMENT '\u8054\u7cfb\u4eba',\n  `contacts_phone` varchar(11) DEFAULT NULL COMMENT '\u8054\u7cfb\u4eba\u624b\u673a',\n  `status` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u72b6\u6001',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u903b\u8f91\u5220\u9664(1:\u5df2\u5220\u9664\uff0c0:\u672a\u5220\u9664)',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_hoscode` (`hoscode`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='\u533b\u9662\u8bbe\u7f6e\u8868'", "description": "Creates a table named hospital_set with the following columns: id (bigint), hosname (varchar), hoscode (varchar), api_url (varchar), sign_key (varchar), contacts_name (varchar), contacts_phone (varchar), status (tinyint), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "DEFAULT", "COMMENT", "ENGINE", "NOT NULL", "DEFAULT CURRENT_TIMESTAMP", "ON UPDATE CURRENT"], "instruction": "Write a SQL query to create a table named hospital_set with the following columns: id (bigint), hosname (varchar), hoscode (varchar), api_url (varchar), sign_key (varchar), contacts_name (varchar), contacts_phone (varchar), status (tinyint), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "response": "-- Reasoning:\nWe need a new table named hospital_set. It should have an integer primary key so that each hospital has a unique identifier, and a name column to store the hospital\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE hospital_set (\n  id BIGINT PRIMARY KEY,\n  hosname VARCHAR(255),\n  hoscode VARCHAR(255),\n  api_url VARCHAR(255),\n  sign_key VARCHAR(255),\n  contacts_name VARCHAR(255),\n  contacts_phone VARCHAR(255),\n  status TINYINT,\n  create_time TIMESTAMP,\n  update_time TIMESTAMP,\n  is_deleted TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the hospital_set table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 hosname: variable\u2010length string up to 255 characters\n  \u2022 hoscode: variable\u2010length string up to 255 characters\n  \u2022 api_url: variable\u2010length string up to 255 characters\n  \u2022 sign_key: variable\u2010length string up to 255 characters\n  \u2022 contacts_name: variable\u2010length string up to 255 characters\n  \u2022 contacts_phone: variable\u2010length string up to 2"}
{"seed": "/* Creates a database named yygh_order if it does not already exist. Then, uses the yygh_order database. */\nCREATE DATABASE IF NOT EXISTS `yygh_order` CHARACTER SET utf8;\nUSE `yygh_order`", "description": "Creates a database named yygh_order if it does not already exist. Then, uses the yygh_order database.", "concepts": ["CREATE DATABASE", "IF NOT EXISTS", "USE"], "instruction": "Write a SQL query to create a database named yygh_order if it does not already exist. Then, use the yygh_order database.", "response": "-- Reasoning:\nWe need to create a database named yygh_order if it does not already exist. Then, use the yygh_order database.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS yygh_order;\nUSE yygh_order;\n```\n\n-- Explanation:\nThis statement creates a database named yygh_order if it does not already exist. Then, it uses the yygh_order database.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named order_info with 20 columns: id (integer primary key), user_id (integer), out_trade_no (varchar), hoscode (varchar), hosname (varchar), depcode (varchar), depname (varchar), title (varchar), hos_schedule_id (varchar), reserve_date (date), reserve_time (integer), patient_id (integer), patient_name (varchar), patient_phone (varchar), hos */\nCREATE TABLE `order_info` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '\u7f16\u53f7',\n  `user_id` bigint(20) DEFAULT NULL,\n  `out_trade_no` varchar(300) DEFAULT NULL COMMENT '\u8ba2\u5355\u4ea4\u6613\u53f7',\n  `hoscode` varchar(30) DEFAULT NULL COMMENT '\u533b\u9662\u7f16\u53f7',\n  `hosname` varchar(100) DEFAULT NULL COMMENT '\u533b\u9662\u540d\u79f0',\n  `depcode` varchar(30) DEFAULT NULL COMMENT '\u79d1\u5ba4\u7f16\u53f7',\n  `depname` varchar(20) DEFAULT NULL COMMENT '\u79d1\u5ba4\u540d\u79f0',\n  `title` varchar(20) DEFAULT NULL COMMENT '\u533b\u751f\u804c\u79f0',\n  `hos_schedule_id` varchar(50) DEFAULT NULL COMMENT '\u6392\u73ed\u7f16\u53f7\uff08\u533b\u9662\u81ea\u5df1\u7684\u6392\u73ed\u4e3b\u952e\uff09',\n  `reserve_date` date DEFAULT NULL COMMENT '\u5b89\u6392\u65e5\u671f',\n  `reserve_time` tinyint(3) DEFAULT '0' COMMENT '\u5b89\u6392\u65f6\u95f4\uff080\uff1a\u4e0a\u5348 1\uff1a\u4e0b\u5348\uff09',\n  `patient_id` bigint(20) DEFAULT NULL COMMENT '\u5c31\u8bca\u4ebaid',\n  `patient_name` varchar(20) DEFAULT NULL COMMENT '\u5c31\u8bca\u4eba\u540d\u79f0',\n  `patient_phone` varchar(11) DEFAULT NULL COMMENT '\u5c31\u8bca\u4eba\u624b\u673a',\n  `hos_record_id` varchar(30) DEFAULT NULL COMMENT '\u9884\u7ea6\u8bb0\u5f55\u552f\u4e00\u6807\u8bc6\uff08\u533b\u9662\u9884\u7ea6\u8bb0\u5f55\u4e3b\u952e\uff09',\n  `number` int(11) DEFAULT NULL COMMENT '\u9884\u7ea6\u53f7\u5e8f',\n  `fetch_time` varchar(50) DEFAULT NULL COMMENT '\u5efa\u8bae\u53d6\u53f7\u65f6\u95f4',\n  `fetch_address` varchar(255) DEFAULT NULL COMMENT '\u53d6\u53f7\u5730\u70b9',\n  `amount` decimal(10,0) DEFAULT NULL COMMENT '\u533b\u4e8b\u670d\u52a1\u8d39',\n  `quit_time` datetime DEFAULT NULL COMMENT '\u9000\u53f7\u65f6\u95f4',\n  `order_status` tinyint(3) DEFAULT NULL COMMENT '\u8ba2\u5355\u72b6\u6001',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u903b\u8f91\u5220\u9664(1:\u5df2\u5220\u9664\uff0c0:\u672a\u5220\u9664)',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_out_trade_no` (`out_trade_no`),\n  KEY `idx_user_id` (`user_id`),\n  KEY `idx_hoscode` (`hoscode`),\n  KEY `idx_hos_schedule_id` (`hos_schedule_id`),\n  KEY `idx_hos_record_id` (`hos_record_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT='\u8ba2\u5355\u8868'", "description": "Creates a table named order_info with 20 columns: id (integer primary key), user_id (integer), out_trade_no (varchar), hoscode (varchar), hosname (varchar), depcode (varchar), depname (varchar), title (varchar), hos_schedule_id (varchar), reserve_date (date), reserve_time (integer), patient_id (integer), patient_name (varchar), patient_phone (varchar), hos", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named order_info with 20 columns: id (integer primary key), user_id (integer), out_trade_no (varchar), hoscode (varchar), hosname (varchar), depcode (varchar), depname (varchar), title (varchar), hos_schedule_id (varchar), reserve_date (date), reserve_time (integer), patient_id (integer), patient_name (varchar), patient_phone (varchar), hos */", "response": "-- Reasoning:\nWe need a new table named order_info. It should have an integer primary key so that each order has a unique identifier, and a name column to store the order\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE order_info (\n  id INT PRIMARY KEY,\n  user_id INT,\n  out_trade_no VARCHAR(255),\n  hoscode VARCHAR(255),\n  hosname VARCHAR(255),\n  depcode VARCHAR(255),\n  depname VARCHAR(255),\n  title VARCHAR(255),\n  hos_schedule_id VARCHAR(255),\n  reserve_date DATE,\n  reserve_time INT,\n  patient_id INT,\n  patient_name VARCHAR(255),\n  patient_phone VARCHAR(255),\n  hos_schedule_id VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the order_info table with 20 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id: integer\n  \u2022 out_trade_no: variable\u2010length string up to 255 characters\n  \u2022 hoscode: variable\u2010length string up to 255 characters\n  \u2022 hosname: variable\u2010length string up to 255 characters"}
{"seed": "/* Creates a table named payment_info with the following columns: id (integer primary key), out_trade_no (varchar), order_id (bigint), payment_type (tinyint), trade_no (varchar), total_amount (decimal), subject (varchar), payment_status (tinyint), callback_time (datetime), callback_content (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint). */\nCREATE TABLE `payment_info` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '\u7f16\u53f7',\n  `out_trade_no` varchar(30) DEFAULT NULL COMMENT '\u5bf9\u5916\u4e1a\u52a1\u7f16\u53f7',\n  `order_id` bigint(20) DEFAULT NULL COMMENT '\u8ba2\u5355id',\n  `payment_type` tinyint(1) DEFAULT NULL COMMENT '\u652f\u4ed8\u7c7b\u578b\uff08\u5fae\u4fe1 \u652f\u4ed8\u5b9d\uff09',\n  `trade_no` varchar(50) DEFAULT NULL COMMENT '\u4ea4\u6613\u7f16\u53f7',\n  `total_amount` decimal(10,2) DEFAULT NULL COMMENT '\u652f\u4ed8\u91d1\u989d',\n  `subject` varchar(200) DEFAULT NULL COMMENT '\u4ea4\u6613\u5185\u5bb9',\n  `payment_status` tinyint(3) DEFAULT NULL COMMENT '\u652f\u4ed8\u72b6\u6001',\n  `callback_time` datetime DEFAULT NULL COMMENT '\u56de\u8c03\u65f6\u95f4',\n  `callback_content` varchar(1000) DEFAULT NULL COMMENT '\u56de\u8c03\u4fe1\u606f',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u903b\u8f91\u5220\u9664(1:\u5df2\u5220\u9664\uff0c0:\u672a\u5220\u9664)',\n  PRIMARY KEY (`id`),\n  KEY `idx_out_trade_no` (`out_trade_no`),\n  KEY `idx_order_id` (`order_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT='\u652f\u4ed8\u4fe1\u606f\u8868'", "description": "Creates a table named payment_info with the following columns: id (integer primary key), out_trade_no (varchar), order_id (bigint), payment_type (tinyint), trade_no (varchar), total_amount (decimal), subject (varchar), payment_status (tinyint), callback_time (datetime), callback_content (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TINYINT", "DECIMAL", "TIMESTAMP", "DEFAULT", "ON UPDATE CURRENT_TIMESTAMP", "AUTO_"], "instruction": "Write a SQL query to create a table named payment_info with the following columns: id (integer primary key), out_trade_no (varchar), order_id (bigint), payment_type (tinyint), trade_no (varchar), total_amount (decimal), subject (varchar), payment_status (tinyint), callback_time (datetime), callback_content (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "response": "-- Reasoning:\nWe need a new table named payment_info. It should have an integer primary key so that each payment has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE payment_info (\n  id INT PRIMARY KEY,\n  out_trade_no VARCHAR(255),\n  order_id BIGINT,\n  payment_type TINYINT,\n  trade_no VARCHAR(255),\n  total_amount DECIMAL,\n  subject VARCHAR(255),\n  payment_status TINYINT,\n  callback_time DATETIME,\n  callback_content VARCHAR(255),\n  create_time TIMESTAMP,\n  update_time TIMESTAMP,\n  is_deleted TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the payment_info table with 12 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 out_trade_no: variable\u2010length string up to 255 characters\n  \u2022 order_id: integer\n  \u2022 payment_type: integer\n  \u2022 trade_no: variable\u2010length string up to 255 characters\n  \u2022 total_amount: decimal\n  \u2022 subject: variable\u2010length string up to 255 characters\n  \u2022 payment_status: integer\n  \u2022 callback_time: datetime\n  \u2022 callback_content"}
{"seed": "/* Creates a table named refund_info with the following columns: id (integer primary key), out_trade_no (varchar), order_id (bigint), payment_type (tinyint), trade_no (varchar), total_amount (decimal), subject (varchar), refund_status (tinyint), callback_content (varchar), callback_time (datetime), create_time (timestamp), update_time (timestamp), is_deleted (tinyint). */\nCREATE TABLE `refund_info` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '\u7f16\u53f7',\n  `out_trade_no` varchar(50) DEFAULT NULL COMMENT '\u5bf9\u5916\u4e1a\u52a1\u7f16\u53f7',\n  `order_id` bigint(20) DEFAULT NULL COMMENT '\u8ba2\u5355\u7f16\u53f7',\n  `payment_type` tinyint(3) DEFAULT NULL COMMENT '\u652f\u4ed8\u7c7b\u578b\uff08\u5fae\u4fe1 \u652f\u4ed8\u5b9d\uff09',\n  `trade_no` varchar(50) DEFAULT NULL COMMENT '\u4ea4\u6613\u7f16\u53f7',\n  `total_amount` decimal(10,2) DEFAULT NULL COMMENT '\u9000\u6b3e\u91d1\u989d',\n  `subject` varchar(200) DEFAULT NULL COMMENT '\u4ea4\u6613\u5185\u5bb9',\n  `refund_status` tinyint(3) DEFAULT NULL COMMENT '\u9000\u6b3e\u72b6\u6001',\n  `callback_content` varchar(1000) DEFAULT NULL COMMENT '\u56de\u8c03\u4fe1\u606f',\n  `callback_time` datetime DEFAULT NULL,\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u903b\u8f91\u5220\u9664(1:\u5df2\u5220\u9664\uff0c0:\u672a\u5220\u9664)',\n  PRIMARY KEY (`id`),\n  KEY `idx_out_trade_no` (`out_trade_no`),\n  KEY `idx_order_id` (`order_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='\u9000\u6b3e\u4fe1\u606f\u8868'", "description": "Creates a table named refund_info with the following columns: id (integer primary key), out_trade_no (varchar), order_id (bigint), payment_type (tinyint), trade_no (varchar), total_amount (decimal), subject (varchar), refund_status (tinyint), callback_content (varchar), callback_time (datetime), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "COMMENT", "KEY", "VARCHAR", "DECIMAL", "DEFAULT", "TIMESTAMP", "ON UPDATE CURRENT_TIMESTAMP"], "instruction": "Write a SQL query to create a table named refund_info with the following columns: id (integer primary key), out_trade_no (varchar), order_id (bigint), payment_type (tinyint), trade_no (varchar), total_amount (decimal), subject (varchar), refund_status (tinyint), callback_content (varchar), callback_time (datetime), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "response": "-- Reasoning:\nWe need a new table named refund_info. It should have an integer primary key so that each refund has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE refund_info (\n  id INT PRIMARY KEY,\n  out_trade_no VARCHAR(255),\n  order_id BIGINT,\n  payment_type TINYINT,\n  trade_no VARCHAR(255),\n  total_amount DECIMAL,\n  subject VARCHAR(255),\n  refund_status TINYINT,\n  callback_content VARCHAR(255),\n  callback_time DATETIME,\n  create_time TIMESTAMP,\n  update_time TIMESTAMP,\n  is_deleted TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the refund_info table with 12 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 out_trade_no: variable\u2010length string up to 255 characters\n  \u2022 order_id: bigint\n  \u2022 payment_type: tinyint\n  \u2022 trade_no: variable\u2010length string up to 255 characters\n  \u2022 total_amount: decimal\n  \u2022 subject: variable\u2010length string up to 255 characters\n  \u2022 refund_status: tinyint\n  \u2022 callback_content: variable\u2010length string up"}
{"seed": "/* Creates a database named yygh_user if it does not already exist, and then uses the yygh_user database. */\nCREATE DATABASE IF NOT EXISTS `yygh_user` CHARACTER SET utf8;\nUSE `yygh_user`", "description": "Creates a database named yygh_user if it does not already exist, and then uses the yygh_user database.", "concepts": ["CREATE DATABASE", "IF NOT EXISTS", "USE"], "instruction": "Write a SQL query to create a database named yygh_user if it does not already exist, and then use the yygh_user database.", "response": "-- Reasoning:\nWe need to create a database named yygh_user if it does not already exist, and then use the yygh_user database.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS yygh_user;\nUSE yygh_user;\n```\n\n-- Explanation:\nThis statement creates a database named yygh_user if it does not already exist, and then uses the yygh_user database.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named patient with 20 columns: id (bigint primary key), user_id (bigint), name (varchar), certificates_type (varchar), certificates_no (varchar), sex (tinyint), birthdate (date), phone (varchar), is_marry (tinyint), province_code (varchar), city_code (varchar), district_code (varchar), address (varchar), contacts_name (varchar), contacts_certificates_type (varchar), contacts_certificates */\nCREATE TABLE `patient` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '\u7f16\u53f7',\n  `user_id` bigint(20) DEFAULT NULL COMMENT '\u7528\u6237id',\n  `name` varchar(20) DEFAULT NULL COMMENT '\u59d3\u540d',\n  `certificates_type` varchar(3) DEFAULT NULL COMMENT '\u8bc1\u4ef6\u7c7b\u578b',\n  `certificates_no` varchar(30) DEFAULT NULL COMMENT '\u8bc1\u4ef6\u7f16\u53f7',\n  `sex` tinyint(3) DEFAULT NULL COMMENT '\u6027\u522b',\n  `birthdate` date DEFAULT NULL COMMENT '\u51fa\u751f\u5e74\u6708',\n  `phone` varchar(11) DEFAULT NULL COMMENT '\u624b\u673a',\n  `is_marry` tinyint(3) DEFAULT NULL COMMENT '\u662f\u5426\u7ed3\u5a5a',\n  `province_code` varchar(20) DEFAULT NULL COMMENT '\u7701code',\n  `city_code` varchar(20) DEFAULT NULL COMMENT '\u5e02code',\n  `district_code` varchar(20) DEFAULT NULL COMMENT '\u533acode',\n  `address` varchar(100) DEFAULT NULL COMMENT '\u8be6\u60c5\u5730\u5740',\n  `contacts_name` varchar(20) DEFAULT NULL COMMENT '\u8054\u7cfb\u4eba\u59d3\u540d',\n  `contacts_certificates_type` varchar(3) DEFAULT NULL COMMENT '\u8054\u7cfb\u4eba\u8bc1\u4ef6\u7c7b\u578b',\n  `contacts_certificates_no` varchar(30) DEFAULT NULL COMMENT '\u8054\u7cfb\u4eba\u8bc1\u4ef6\u53f7',\n  `contacts_phone` varchar(11) DEFAULT NULL COMMENT '\u8054\u7cfb\u4eba\u624b\u673a',\n  `card_no` varchar(50) DEFAULT NULL COMMENT '\u5c31\u8bca\u5361\u53f7',\n  `is_insure` tinyint(3) DEFAULT '0' COMMENT '\u662f\u5426\u6709\u533b\u4fdd',\n  `status` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u72b6\u6001\uff080\uff1a\u9ed8\u8ba4 1\uff1a\u5df2\u8ba4\u8bc1\uff09',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u903b\u8f91\u5220\u9664(1:\u5df2\u5220\u9664\uff0c0:\u672a\u5220\u9664)',\n  PRIMARY KEY (`id`),\n  KEY `idx_user_id` (`user_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COMMENT='\u5c31\u8bca\u4eba\u8868'", "description": "Creates a table named patient with 20 columns: id (bigint primary key), user_id (bigint), name (varchar), certificates_type (varchar), certificates_no (varchar), sex (tinyint), birthdate (date), phone (varchar), is_marry (tinyint), province_code (varchar), city_code (varchar), district_code (varchar), address (varchar), contacts_name (varchar), contacts_certificates_type (varchar), contacts_certificates", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "VARCHAR", "INT", "DEFAULT", "COMMENT", "TIMESTAMP", "ON UPDATE CURRENT_TIMESTAMP", "DEFAULT"], "instruction": "Write a SQL query to create a table named patient with 20 columns: id (bigint primary key), user_id (bigint), name (varchar), certificates_type (varchar), certificates_no (varchar), sex (tinyint), birthdate (date), phone (varchar), is_marry (tinyint), province_code (varchar), city_code (varchar), district_code (varchar), address (varchar), contacts_name (varchar), contacts_certificates_type (varchar), contacts_certificates_no (varchar), contacts_phone (varchar), card_no (varchar), is_insure (tinyint), status (tinyint), create_time (timestamp), update_time (timestamp), is_deleted", "response": "-- Reasoning:\nWe need a new table named patient. It should have an integer primary key so that each patient has a unique identifier, and a name column to store the patient\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE patient (\n  id BIGINT PRIMARY KEY,\n  user_id BIGINT,\n  name VARCHAR(255),\n  certificates_type VARCHAR(255),\n  certificates_no VARCHAR(255),\n  sex TINYINT,\n  birthdate DATE,\n  phone VARCHAR(255),\n  is_marry TINYINT,\n  province_code VARCHAR(255),\n  city_code VARCHAR(255),\n  district_code VARCHAR(255),\n  address VARCHAR(255),\n  contacts_name VARCHAR(255),\n  contacts_certificates_type VARCHAR(255),\n  contacts_certificates_no VARCHAR(255),\n  contacts_phone VARCHAR(255),\n  card_no VARCHAR(255),\n  is_insure TINYINT,\n  status TINYINT,\n  create_time TIMESTAMP,\n  update_time TIMESTAMP,\n  is_deleted TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the patient table with 20 columns:\n  \u2022 id: bigint, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id"}
{"seed": "/* Creates a table named user_info with 12 columns: id (bigint), openid (varchar), nick_name (varchar), phone (varchar), name (varchar), certificates_type (varchar), certificates_no (varchar), certificates_url (varchar), auth_status (tinyint), status (tinyint), create_time (timestamp), update_time (timestamp), is_deleted (tinyint). */\nCREATE TABLE `user_info` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '\u7f16\u53f7',\n  `openid` varchar(100) DEFAULT NULL COMMENT '\u5fae\u4fe1openid',\n  `nick_name` varchar(20) DEFAULT NULL COMMENT '\u6635\u79f0',\n  `phone` varchar(11) NOT NULL DEFAULT '' COMMENT '\u624b\u673a\u53f7',\n  `name` varchar(20) DEFAULT NULL COMMENT '\u7528\u6237\u59d3\u540d',\n  `certificates_type` varchar(3) DEFAULT NULL COMMENT '\u8bc1\u4ef6\u7c7b\u578b',\n  `certificates_no` varchar(30) DEFAULT NULL COMMENT '\u8bc1\u4ef6\u7f16\u53f7',\n  `certificates_url` varchar(200) DEFAULT NULL COMMENT '\u8bc1\u4ef6\u8def\u5f84',\n  `auth_status` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u8ba4\u8bc1\u72b6\u6001\uff080\uff1a\u672a\u8ba4\u8bc1 1\uff1a\u8ba4\u8bc1\u4e2d 2\uff1a\u8ba4\u8bc1\u6210\u529f -1\uff1a\u8ba4\u8bc1\u5931\u8d25\uff09',\n  `status` tinyint(3) NOT NULL DEFAULT '1' COMMENT '\u72b6\u6001\uff080\uff1a\u9501\u5b9a 1\uff1a\u6b63\u5e38\uff09',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u903b\u8f91\u5220\u9664(1:\u5df2\u5220\u9664\uff0c0:\u672a\u5220\u9664)',\n  PRIMARY KEY (`id`),\n  KEY `uk_mobile` (`phone`)\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COMMENT='\u7528\u6237\u8868'", "description": "Creates a table named user_info with 12 columns: id (bigint), openid (varchar), nick_name (varchar), phone (varchar), name (varchar), certificates_type (varchar), certificates_no (varchar), certificates_url (varchar), auth_status (tinyint), status (tinyint), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "VARCHAR", "DEFAULT", "COMMENT", "TIMESTAMP", "ON UPDATE CURRENT_TIMESTAMP", "NOT NULL", "DEFAULT"], "instruction": "Write a SQL query to create a table named user_info with 12 columns: id (bigint), openid (varchar), nick_name (varchar), phone (varchar), name (varchar), certificates_type (varchar), certificates_no (varchar), certificates_url (varchar), auth_status (tinyint), status (tinyint), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "response": "-- Reasoning:\nWe need a new table named user_info. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user_info (\n  id BIGINT PRIMARY KEY,\n  openid VARCHAR(255),\n  nick_name VARCHAR(255),\n  phone VARCHAR(255),\n  name VARCHAR(255),\n  certificates_type VARCHAR(255),\n  certificates_no VARCHAR(255),\n  certificates_url VARCHAR(255),\n  auth_status TINYINT,\n  status TINYINT,\n  create_time TIMESTAMP,\n  update_time TIMESTAMP,\n  is_deleted TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the user_info table with 12 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 openid: variable\u2010length string up to 255 characters\n  \u2022 nick_name: variable\u2010length string up to 255 characters\n  \u2022 phone: variable\u2010length string up to 255 characters\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 certificates_type: variable\u2010length string up to 255 characters\n  \u2022 certificates_no:"}
{"seed": "/* Creates a table named user_login_record with the following columns: id (bigint), user_id (bigint), ip (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint). */\nCREATE TABLE `user_login_record` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '\u7f16\u53f7',\n  `user_id` bigint(20) DEFAULT NULL COMMENT '\u7528\u6237id',\n  `ip` varchar(32) DEFAULT NULL COMMENT 'ip',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u66f4\u65b0\u65f6\u95f4',\n  `is_deleted` tinyint(3) NOT NULL DEFAULT '0' COMMENT '\u903b\u8f91\u5220\u9664(1:\u5df2\u5220\u9664\uff0c0:\u672a\u5220\u9664)',\n  PRIMARY KEY (`id`),\n  KEY `idx_user_id` (`user_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8 COMMENT='\u7528\u6237\u767b\u5f55\u8bb0\u5f55\u8868'", "description": "Creates a table named user_login_record with the following columns: id (bigint), user_id (bigint), ip (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "COMMENT", "TIMESTAMP", "ON UPDATE CURRENT_TIMESTAMP", "NOT NULL", "DEFAULT", "ENGINE"], "instruction": "Write a SQL query to create a table named user_login_record with the following columns: id (bigint), user_id (bigint), ip (varchar), create_time (timestamp), update_time (timestamp), is_deleted (tinyint).", "response": "-- Reasoning:\nWe need a new table named user_login_record. It should have an integer primary key so that each record has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user_login_record (\n  id BIGINT PRIMARY KEY,\n  user_id BIGINT,\n  ip VARCHAR(255),\n  create_time TIMESTAMP,\n  update_time TIMESTAMP,\n  is_deleted TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the user_login_record table with six columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id: integer\n  \u2022 ip: variable\u2010length string up to 255 characters\n  \u2022 create_time: timestamp\n  \u2022 update_time: timestamp\n  \u2022 is_deleted: tinyint\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user_login_record');"}
{"seed": "/* Drops the table modx_lexicon_entries if it exists. */\nDROP TABLE IF EXISTS `modx_lexicon_entries`", "description": "Drops the table modx_lexicon_entries if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the modx_lexicon_entries table if it exists.", "response": "-- Reasoning:\nWe need to drop the modx_lexicon_entries table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS modx_lexicon_entries;\n```\n\n-- Explanation:\nThis DROP statement deletes the modx_lexicon_entries table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('modx_lexicon_entries');"}
{"seed": "/* Creates a table named modx_lexicon_entries with 10 columns: id (integer primary key), name (varchar), value (text), topic (varchar), namespace (varchar), language (varchar), createdon (datetime), editedon (timestamp). */\nCREATE TABLE `modx_lexicon_entries` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) NOT NULL DEFAULT '',\n  `value` text NOT NULL,\n  `topic` varchar(255) NOT NULL DEFAULT 'default',\n  `namespace` varchar(40) NOT NULL DEFAULT 'core',\n  `language` varchar(20) NOT NULL DEFAULT 'en',\n  `createdon` datetime DEFAULT NULL,\n  `editedon` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  KEY `name` (`name`),\n  KEY `topic` (`topic`),\n  KEY `namespace` (`namespace`),\n  KEY `language` (`language`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named modx_lexicon_entries with 10 columns: id (integer primary key), name (varchar), value (text), topic (varchar), namespace (varchar), language (varchar), createdon (datetime), editedon (timestamp).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named modx_lexicon_entries with 10 columns: id (integer primary key), name (varchar), value (text), topic (varchar), namespace (varchar), language (varchar), createdon (datetime), editedon (timestamp).", "response": "-- Reasoning:\nWe need a new table named modx_lexicon_entries. It should have an integer primary key so that each entry has a unique identifier, and a name column to store the entry\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE modx_lexicon_entries (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  value TEXT,\n  topic VARCHAR(255),\n  namespace VARCHAR(255),\n  language VARCHAR(255),\n  createdon DATETIME,\n  editedon TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the modx_lexicon_entries table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 value: text\n  \u2022 topic: variable\u2010length string up to 255 characters\n  \u2022 namespace: variable\u2010length string up to 255 characters\n  \u2022 language: variable\u2010length string up to 255 characters\n  \u2022 createdon: datetime\n  \u2022 editedon: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('modx_lexicon_entries');"}
{"seed": "/* Inserts a new row into the Faculty table with the given values. */\nINSERT INTO Faculty VALUES\n(11, 'Associate', 'WPI', 'www.rbarron.com')", "description": "Inserts a new row into the Faculty table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Faculty table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the Faculty table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO Faculty (name, department, rank)\nVALUES ('', 'Computer Science', 'Assistant Professor');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Faculty table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Faculty;"}
{"seed": "/* Inserts a new row into the Admin table with the values 11, 9, '11-1-17', and '10:00am'. */\nINSERT INTO Admin VALUES\n(11, 9, '11-1-17', '10:00am')", "description": "Inserts a new row into the Admin table with the values 11, 9, '11-1-17', and '10:00am'.", "concepts": ["INSERT INTO", "VALUES", "Admin"], "instruction": "Write a SQL query to insert a new row into the Admin table with the values 11, 9, '11-1-17', and '10:00am'.", "response": "-- Reasoning:\nWe need to insert a new row into the Admin table with the values 11, 9, '11-1-17', and '10:00am'.\n\n-- Solution:\n```sql\nINSERT INTO Admin (id, name, date, time)\nVALUES (11, 9, '11-1-17', '10:00am');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Admin table with the values 11, 9, '11-1-17', and '10:00am'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Admin;"}
{"seed": "/* Creates a table named [% table_name %] with three columns: id (integer primary key), created_at (datetime) and updated_at (datetime). */\nCREATE TABLE `[% table_name %]` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `created_at` datetime DEFAULT NULL,\n  `updated_at` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n  # INDEX hoge_idx(`hoge`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='[% comment %]'", "description": "Creates a table named [% table_name %] with three columns: id (integer primary key), created_at (datetime) and updated_at (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "INDEX", "COMMENT"], "instruction": "Write a SQL query to create a table named [% table_name %] with three columns: id (integer primary key), created_at (datetime) and updated_at (datetime).", "response": "-- Reasoning:\nWe need a new table named [% table_name %]. It should have an integer primary key so that each row has a unique identifier, and two datetime columns to store the creation and update times.\n\n-- Solution:\n```sql\nCREATE TABLE [% table_name %] (\n  id INTEGER PRIMARY KEY,\n  created_at DATETIME,\n  updated_at DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the [% table_name %] table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 created_at: datetime\n  \u2022 updated_at: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('[% table_name %]');"}
{"seed": "/* Selects all patients who have a package of type WL. */\nselect * from Patient P\nwhere P.PackageID IN (\nselect `Package ID` from Package P1 where\nP.PackageID=P1.`Package ID` AND P1.Type=\"WL\")", "description": "Selects all patients who have a package of type WL.", "concepts": ["SELECT", "IN", "WHERE", "AND", "OR", "NOT", "LIKE", "BETWEEN", "EXISTS", "NOT EXISTS", "IS", "IS NOT", "NULL", "NOT NULL"], "instruction": "Write a SQL query to select all patients who have a package of type WL.", "response": "-- Reasoning:\nWe need to select all patients who have a package of type WL.\n\n-- Solution:\n```sql\nSELECT *\nFROM patients\nWHERE package = 'WL';\n```\n\n-- Explanation:\nThis query selects all patients from the patients table where the package column is equal to WL.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT *\nFROM patients\nWHERE package = 'WL';"}
{"seed": "/* This query selects the name of all students enrolled in a course with a deptId of deptId626720. */\nexplain analyze select s.name\nfrom Project4.student as s, Project4.transcript as t, Project4.course as c\nwhere c.deptId='deptId626720' and c.crsCode = t.crsCode and s.id = t.studId", "description": "This query selects the name of all students enrolled in a course with a deptId of deptId626720.", "concepts": ["EXPLAIN ANALYZE", "SELECT", "FROM", "WHERE", "AND", "OR", "IN", "NOT", "EXISTS", "AS", "ON", "JOIN", "GROUP"], "instruction": "Write a SQL query to list the name of all students enrolled in a course with a deptId of deptId626720.", "response": "-- Reasoning:\nWe need to list the names of all students enrolled in a course with a deptId of deptId626720.\n\n-- Solution:\n```sql\nSELECT name\nFROM students\nWHERE deptId = 'deptId626720';\n```\n\n-- Explanation:\nThis query selects the name column from the students table where the deptId column is equal to the string 'deptId626720'.\n\n-- Tests:\n-- 1. Verify correct names are returned\nSELECT name\nFROM students\nWHERE deptId = 'deptId626720';"}
{"seed": "/* Creates a database named companyfinancialsystem if it does not already exist. */\nCREATE DATABASE /*!32312 IF NOT EXISTS*/`companyfinancialsystem`", "description": "Creates a database named companyfinancialsystem if it does not already exist.", "concepts": ["CREATE DATABASE", "IF NOT EXISTS"], "instruction": "Write a SQL query to create a database named companyfinancialsystem if it does not already exist.", "response": "-- Reasoning:\nWe need to create a database named companyfinancialsystem. If it already exists, we don\u2019t need to do anything.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS companyfinancialsystem;\n```\n\n-- Explanation:\nThis statement creates a database named companyfinancialsystem if it does not already exist.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* The first 20000 rows are for contract 11000001, the next 20000 rows are for contract 11000002, and so on. */\ninsert  into `companyinvoice`(`cInvoiceID`,`contractID`,`payment`,`Date`,`type`) values ('20000001','11000001','82344','2014-07-05','0'),('20000002','11000002','6127','2015-01-01','0'),('20000003','11000003','3318','2015-01-20','0'),('20000004','11000004','11661','2014-10-23','0'),('20000005','11000005','34014','2015-01-06','0'),('20000006','11000006','4200','2014-12-31','0'),('20000007','11000007','6108','2014-03-24','0'),('20000008','11000008','32303','2015-03-11','0'),('20000009','11000009','55225','2014-06-07','0'),('20000010','11000010','21151','2015-03-09','0'),('20000011','11000011','46185','2015-04-18','0'),('20000012','11000012','29976','2015-03-05','0'),('20000013','11000013','12052','2014-09-19','0'),('20000014','11000014','11973','2015-01-12','0'),('20000015','11000015','1810','2014-06-25','0'),('20000016','11000016','7788','2014-03-16','0'),('20000017','11000017','3665','2014-10-04','0'),('20000018','11000018','38959','2014-10-21','0'),('20000019','11000019','6005','2015-01-24','0'),('20000020','11000020','6614','2015-06-06','0'),('20000021','11000021','9368','2014-04-17','0'),('20000022','11000022','33478','2015-02-16','0'),('20000023','11000023','18826','2015-05-16','0'),('20000024','11000024','13416','2014-12-05','0'),('20000025','11000025','10939','2014-11-04','0'),('20000026','11000026','23734','2015-03-30','0'),('20000027','11000027','39525','2014-03-23','0'),('20000028','11000028','23521','2014-11-29','0'),('20000029','11000029','27694','2014-10-29','0'),('20000030','11000030','25714','2014-12-02','0'),('20000031','11000031','42656','2015-03-04','0'),('20000032','11000032','86773','2014-04-08','0'),('20000033','11000033','10774','2015-06-02','0'),('20000034','11000034','5555','2015-05-26','0'),('20000035','11000035','42620','2014-03-19','0'),('20000036','11000036','8093','2014-08-04','0'),('20000037','11000037','62210','2014-09-12','0'),('20000038','11000038','19047','2014-08-20','0'),('20000039','11000039','65866','2014-03-25','0'),('20000040','11000040','14046','2014-02-27','0'),('20000041','11000041','4706','2014-11-13','0'),('20000042','11000042','5632','2014-05-12','0'),('20000043','11000043','4314','2014-12-30','0'),('20000044','11000044','2761','2014-07-31','0'),('20000045','11000045','21851','2014-03-23','0'),('20000046','11000046','19605','2015-04-24','0'),('20000047','11000047','31347','2014-02-14','0'),('20000048','11000048','16604','2014-11-29','0'),('20000049','11000049','20601','2014-12-21','0'),('20000050','11000050','26372','2014-05-21','0'),('20000051','11000051','97336','2014-06-07','1'),('20000052','11000052','24626','2015-03-15','1'),('20000053','11000053','13703','2015-01-24','1'),('20000054','11000054','4611','2014-06-19','1'),('20000055','11000055','24788','2014-08-30','1'),('20000056','11000056','4676','2014-03-14','1'),('20000057','11000057','18116','2015-03-15','1'),('20000058','11000058','12931','2015-01-31','1'),('20000059','11000059','25447','2014-08-14','1'),('20000060','11000060','75214','2015-05-30','1'),('20000061','11000061','18692','2014-12-10','1'),('20000062','11000062','16471','2014-07-19','1'),('20000063','11000063','19152','2014-09-30','1'),('20000064','11000064','10166','2014-02-11','1'),('20000065','11000065','7998','2014-05-29','1'),('20000066','11000066','2075','2014-08-28','1'),('20000067','11000067','897','2014-04-12','1'),('20000068','11000068','2259','2014-09-21','1'),('20000069','11000069','13557','2015-01-21','1'),('20000070','11000070','35000','2015-01-20','1'),('20000071','11000071','16629','2014-07-02','1'),('20000072','11000072','60883','2014-03-25','1'),('20000073','11000073','36662','2014-07-28','1'),('20000074','11000074','75298','2015-03-03','1'),('20000075','11000075','69341','2014-02-14','1'),('20000076','11000076','30769','2014-06-05','1'),('20000077','11000077','12602','2014-02-23','1'),('20000078','11000078','95862','2015-02-07','1'),('20000079','11000079','83571','2015-03-12','1'),('20000080','11000080','10571','2015-04-11','1'),('20000081','11000081','44931','2014-10-21','1'),('20000082','11000082','19690','2015-06-03','1'),('20000083','11000083','65925','2014-03-19','1'),('20000084','11000084','41657','2014-12-11','1'),('20000085','11000085','3608','2014-11-22','1'),('20000086','11000086','41540','2015-05-08','1'),('20000087','11000087','74939','2014-12-29','1'),('20000088','11000088','24890','2015-04-02','1'),('20000089','11000089','47121','2014-06-27','1'),('20000090','11000090','55949','2014-07-01','1'),('20000091','11000091','66924','2014-03-04','1'),('20000092','11000092','636','2014-08-06','1'),('20000093','11000093','39008','2015-06-02','1'),('20000094','11000094','9264','2014-02-22','1'),('20000095','11000095','33788','2014-07-23','1'),('20000096','11000096','30304','2014-05-26','1'),('20000097','11000097','44546','2014-08-20','1'),('20000098','11000098','4133','2014-08-11','1'),('20000099','11000099','56678','2014-04-17','1'),('20000100','11000100','23570','2015-01-03','1'),('20000101','11000001','1673','2014-08-04','0'),('20000102','11000002','28676','2015-01-31','0'),('20000103','11000003','56712','2015-02-19','0'),('20000104','11000004','59887','2014-11-22','0'),('20000105','11000005','4408','2015-02-05','0'),('20000106','11000006','7736','2015-01-30','0'),('20000107','11000007','2385','2014-04-23','0'),('20000108','11000008','17887','2015-04-10','0'),('20000109','11000009','9750','2014-07-07','0'),('20000110','11000010','35282','2015-04-08','0'),('20000111','11000011','160','2015-05-18','0'),('20000112','11000012','16303','2015-04-04','0'),('20000113','11000013','11965','2014-10-19','0'),('20000114','11000014','876','2015-02-11','0'),('20000115','11000015','15808','2014-07-25','0'),('20000116','11000016','16451','2014-04-15','0'),('20000117','11000017','90669','2014-11-03','0'),('20000118','11000018','2592','2014-11-20','0'),('20000119','11000019','41298','2015-02-23','0'),('20000120','11000020','31166','2015-07-06','0'),('20000121','11000021','3281','2014-05-17','0'),('20000122','11000022','6802','2015-03-18','0'),('20000123','11000023','15833','2015-06-15','0'),('20000124','11000024','51022','2015-01-04','0'),('20000125','11000025','36110','2014-12-04','0'),('20000126','11000026','45633','2015-04-29','0'),('20000127','11000027','35782','2014-04-22','0'),('20000128','11000028','45','2014-12-29','0'),('20000129','11000029','2502','2014-11-28','0'),('20000130','11000030','8573','2015-01-01','0'),('20000131','11000031','12863','2015-04-03','0'),('20000132','11000032','9598','2014-05-08','0'),('20000133','11000033','22','2015-07-02','0'),('20000134','11000034','677','2015-06-25','0'),('20000135','11000035','33856','2014-04-18','0'),('20000136','11000036','18871','2014-09-03','0'),('20000137','11000037','5941','2014-10-12','0'),('20000138','11000038','17198','2014-09-19','0'),('20000139','11000039','21076','2014-04-24','0'),('20000140','11000040','3651','2014-03-29','0'),('20000141','11000041','33527','2014-12-13','0'),('20000142','11000042','84993','2014-06-11','0'),('20000143','11000043','57434','2015-01-29','0'),('20000144','11000044','12213','2014-08-30','0'),('20000145','11000045','34227','2014-04-22','0'),('20000146','11000046','47126','2015-05-24','0'),('20000147','11000047','15607','2014-03-16','0'),('20000148','11000048','46890','2014-12-29','0'),('20000149','11000049','33243','2015-01-20','0'),('20000150','11000050','33677','2014-06-20','0'),('20000151','11000051','1062','2014-07-07','1'),('20000152','11000052','614','2015-04-14','1'),('20000153','11000053','7358','2015-02-23','1'),('20000154','11000054','11316','2014-07-19','1'),('20000155','11000055','7298','2014-09-29','1'),('20000156','11000056','39294','2014-04-13','1'),('20000157','11000057','1335','2015-04-14','1'),('20000158','11000058','45762','2015-03-02','1'),('20000159','11000059','67741','2014-09-13','1'),('20000160','11000060','9044','2015-06-29','1'),('20000161','11000061','26189','2015-01-09','1'),('20000162','11000062','1478','2014-08-18','1'),('20000163','11000063','73711','2014-10-30','1'),('20000164','11000064','9351','2014-03-13','1'),('20000165','11000065','23431','2014-06-28','1'),('20000166','11000066','63483','2014-09-27','1'),('20000167','11000067','7294','2014-05-12','1'),('20000168','11000068','3510','2014-10-21','1'),('20000169','11000069','365','2015-02-20','1'),('20000170','11000070','31011','2015-02-19','1'),('20000171','11000071','3044','2014-08-01','1'),('20000172','11000072','28304','2014-04-24','1'),('20000173','11000073','45081','2014-08-27','1'),('20000174','11000074','5402','2015-04-02','1'),('20000175','11000075','15688','2014-03-16','1'),('20000176','11000076','3010','2014-07-05','1'),('20000177','11000077','6232','2014-03-25','1'),('20000178','11000078','545','2015-03-09','1'),('20000179','11000079','16862','2015-04-11','1'),('20000180','11000080','74988','2015-05-11','1'),('20000181','11000081','9726','2014-11-20','1'),('20000182','11000082','23274','2015-07-03','1'),('20000183','11000083','23557','2014-04-18','1'),('20000184','11000084','3458','2015-01-10','1'),('20000185','11000085','41509','2014-12-22','1'),('20000186','11000086','15215','2015-06-07','1'),('20000187','11000087','21152','2015-01-28','1'),('20000188','11000088','22604','2015-05-02','1'),('20000189','11000089','22654','2014-07-27','1'),('20000190','11000090','31522','2014-07-31','1'),('20000191','11000091','19284','2014-04-03','1'),('20000192','11000092','8218','2014-09-05','1'),('20000193','11000093','226','2015-07-02','1'),('20000194','11000094','14413','2014-03-24','1'),('20000195','11000095','36960','2014-08-22','1'),('20000196','11000096','76088','2014-06-25','1'),('20000197','11000097','889','2014-09-19','1'),('20000198','11000098','341','2014-09-10','1'),('20000199','11000099','12465','2014-05-17','1'),('20000200','11000100','3039','2015-02-02','1')", "description": "The first 20000 rows are for contract 11000001, the next 20000 rows are for contract 11000002, and so on.", "concepts": ["```\nCREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to list each customer's total payment amount by customer, grouped by customer, sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to find the total payment amount for each customer. We can do this by grouping by customer and summing the payment amount.\n\n-- Solution:\n```sql\nSELECT customer, SUM(payment)\nFROM orders\nGROUP BY customer\nORDER BY SUM(payment) DESC;\n```\n\n-- Explanation:\nThis query groups the orders by customer and sums the payment amount. The result is sorted by the total payment amount in descending order.\n\n-- Tests:\n-- 1. Verify the result is correct\nSELECT customer, SUM(payment)\nFROM orders\nGROUP BY customer\nORDER BY SUM(payment) DESC;"}
{"seed": "/* The above query selects all users from the users table. */\ninsert  into `user`(`ID`,`password`,`authority`,`name`,`sex`,`birthday`,`address`,`phone`,`position`,`IDcard`) values ('123','haojian1','1','bixinghao','man','1994-04-10','\u534e\u5357\u519c\u4e1a\u5927\u5b66\u534e\u5c71\u533a23\u680b','15913110981','CEO','440182199404104213'),('20150001','123456','0','\u59da\u5a1f','\u5973','1996-10-11','\u5e02\u653f\u5e9c\u5927\u9662','13774122567','\u7cfb\u7edf\u7ba1\u7406\u5458','430381198802283315'),('20150002','123456','1','\u90ed\u797a','\u5973','1988-08-01','\u671b\u57ce\u6751\u8c0c\u6751\u6e7e','15992218300','\u516c\u53f8\u7ba1\u7406\u5458','430408198804062012'),('20150003','123456','2','\u4f55\u4f73\u5fbd','\u5973','1988-03-22','\u5927\u90a6\u79e6\u5bb6\u6e7e','13774102193','\u603b\u7ecf\u7406','430421198503268878'),('20150004','123456','2','\u5f20\u5a77','\u5973','2015-04-29','\u5927\u90a6\u8def\u5468\u5bb6\u6e7e','18972980229','\u526f\u603b\u7ecf\u7406','430421198708085338'),('20150005','123456','2','\u5f20\u5170','\u5973','2002-06-02','\u5927\u90a6\u8def\u5468\u5bb6\u6e7e','15672996698','\u526f\u603b\u7ecf\u7406','430422198411170079'),('20150006','123456','2','\u9648\u6d69\u4e1c','\u7537','1981-11-05','\u524d\u8fdb\u5c0f\u5b66\u5bf9\u9762','18307229919','\u526f\u603b\u7ecf\u7406','430422196802287119'),('20150007','123456','2','\u9648\u6631\u7af9','\u5973','2006-09-06','\u5317\u95e8\u52a0\u6cb9\u7ad9','13886890907','\u526f\u603b\u7ecf\u7406','430423198707017053'),('20150008','123456','2','\u674e\u94ee','\u7537','2015-01-30','\u5927\u90a6\u8def\u5468\u5bb6\u6e7e\u65c1','13972980621','\u4eba\u529b\u8d44\u6e90\u603b\u76d1','430423198710190930'),('20150009','123456','2','\u7a0b\u5f3a','\u7537','1977-10-10','\u6cb9\u69a8\u6751\u9ec4\u5bb6\u7548','15586898742','\u8d22\u52a1\u603b\u76d1','430424198511181413'),('20150010','123456','2','\u9093\u5b8f','\u7537','1979-12-23','\u56db\u8d24\u8def\u5c0f\u674e\u5bb6\u6e7e','15997872113','\u8425\u9500\u603b\u76d1','43042419870510001'),('20150011','123456','2','\u8d75\u4e66\u6bc5','\u7537','1995-07-23','\u57ce\u90ca\u4e61\u8dd1\u9a6c\u573a\u7089\u5b50\u6e7e','15971945236','\u5e02\u573a\u603b\u76d1','430426198511209554'),('20150012','123456','2','\u90d1\u521a','\u7537','2000-09-07','\u9a86\u5e97\u4e61\u77f3\u5830\u6751','13997850830','\u666e\u901a\u804c\u5458','430426198707285110'),('20150013','123456','2','\u6768\u658c','\u7537','1999-07-13','\u56db\u652f\u961f','15997898151','\u666e\u901a\u804c\u5458','430482198510205894'),('20150014','123456','2','\u5f6d\u4e91\u52c7','\u7537','1976-04-08','\u5218\u5bb6\u51b2\u4e94\u697c','13774107217','\u666e\u901a\u804c\u5458','43050219871006003'),('20150015','123456','2','\u660e\u4e3d','\u5973','1987-08-30','\u6c14\u7ba1\u5c40\u4e09\u680b\u4e09\u697c','15856837063','\u666e\u901a\u804c\u5458','430503198705195059'),('20150016','123456','2','\u738b\u66e6','\u5973','1985-08-23','\u5bcc\u5eb7\u6751','15826731151','\u666e\u901a\u804c\u5458','430503198812072513'),('20150017','123456','2','\u674e\u7adf','\u7537','1982-02-23','\u957f\u6c5f\u516c\u5bd36\u680b202','13317599202','\u666e\u901a\u804c\u5458','430521197307034295'),('20150018','123456','2','\u5218\u5f3a','\u7537','2002-06-07','\u76db\u6cf0\u57ce','13085247909','\u666e\u901a\u804c\u5458','43052219860228009'),('20150019','123456','2','\u96f7\u519b','\u7537','1995-09-20','\u5e94\u6c60\u5df7','1897286941','\u666e\u901a\u804c\u5458','430523198708090952'),('20150020','123456','2','\u5f20\u8273','\u5973','1993-12-13','\u56db\u8d24\u8def\u6587\u534e\u9ad8\u4e2d\u5bf9\u95e8','13487004037','\u666e\u901a\u804c\u5458','430524198401032930'),('20150021','123456','2','\u5f20\u6625\u6885','\u5973','1986-12-23','\u5317\u95e8\u52a0\u6cb9\u7ad9','13774123664','\u666e\u901a\u804c\u5458','430527198501200937'),('20150022','123456','2','\u5415\u51e4','\u5973','2003-06-20','\u6c38\u9633\u4e8c\u8def','13886855915','\u666e\u901a\u804c\u5458','430528197703121315'),('20150023','123456','2','\u8d75\u946b','\u7537','1999-05-09','\u5357\u95e8\u5f00\u53d1\u533a','15549753187','\u666e\u901a\u804c\u5458','430528197709060015'),('20150024','123456','2','\u65b9\u5a9b','\u5973','2002-02-22','\u53cc\u6865\u6751','15997846200','\u666e\u901a\u804c\u5458','430528197010130037'),('20150025','123456','2','\u8d3e\u51cc\u4f1f','\u7537','1987-03-05','\u53cc\u6865\u6751','13774102179','\u666e\u901a\u804c\u5458','430621198706175453'),('20150026','123456','2','\u9648\u9633','\u5973','1991-03-29','\u65b0\u539f\u4e94\u7ec4','18672283997','\u666e\u901a\u804c\u5458','430624198709218737'),('20150027','123456','2','\u8d75\u8273','\u5973','1979-02-28','\u5357\u95e8\u6e21\u69fd','15586709783','\u666e\u901a\u804c\u5458','430624198807197511'),('20150028','123456','2','\u848b\u6717\u5cf0','\u7537','1990-06-12','\u9648\u6e56\u6751\u6bdb\u5bb6\u6e7e\u56db\u7ec4','13085245378','\u666e\u901a\u804c\u5458','430626198711165614'),('20150029','123456','2','\u4ee3\u6000\u5e73','\u5973','1998-04-26','\u5357\u95e8\u56db\u8d24\u8def42\u53f7','13886892253','\u666e\u901a\u804c\u5458','430626198711191011'),('20150030','123456','2','\u8e47\u654f','\u5973','1998-02-09','\u5f20\u6e7e','15671259414','\u666e\u901a\u804c\u5458','430626198804090017'),('20150031','123456','2','\u5218\u71d5','\u5973','1981-04-14','\u8054\u660e','15826744143','\u666e\u901a\u804c\u5458','430681198604280013'),('20150032','123456','2','\u5468\u5fb7\u884c','\u7537','1987-08-23','\u4e09\u91cc\u68da','18672222307','\u666e\u901a\u804c\u5458','430681198708294938'),('20150033','123456','2','\u8c0c\u8d85','\u7537','1982-05-05','\u96f7\u8fbe\u77f3','15971927682','\u666e\u901a\u804c\u5458','430703198711197158'),('20150034','123456','2','\u8881\u7ae0','\u7537','2004-11-07','\u4e09\u91cc\u68da\u4e0d\u8fdc','15272865040','\u666e\u901a\u804c\u5458','430722197607207116'),('20150035','123456','2','\u4e25\u660e\u594e','\u7537','2015-03-16','\u5357\u95e8\u533b\u9662','15997871833','\u666e\u901a\u804c\u5458','430722198806206116'),('20150036','123456','2','\u674e\u5f3a','\u7537','2011-11-11','\u524d\u8fdb\u5c0f\u5b66\u5468\u56f4','13268682266','\u666e\u901a\u804c\u5458','430723198611025012'),('20150037','123456','2','\u738b\u5c0f\u743c','\u5973','2011-07-01','\u5e73\u9756\u8def','18995977798','\u666e\u901a\u804c\u5458','430724198810221119'),('20150038','123456','2','\u5b5f\u5a07\u71d5','\u5973','1977-03-19','\u5357\u95e8\u65b0\u6c7d\u8f66\u7ad9\u5bf9\u9762','13972986392','\u666e\u901a\u804c\u5458','430725198704201575'),('20150039','123456','2','\u5218\u4eae','\u5973','1995-04-06','\u5357\u95e8\u6e21\u69fd','13297265208','\u666e\u901a\u804c\u5458','430726198803172518'),('20150040','123456','2','\u6768\u80dc\u6770','\u7537','2008-10-27','\u5357\u95e8\u7f8e\u4eba\u5858','13774096421','\u666e\u901a\u804c\u5458','430822198803255292'),('20150041','123456','2','\u6bcd\u6b63\u56fd','\u7537','1993-12-08','\u6587\u534e\u9ad8\u4e2d','15997849373','\u666e\u901a\u804c\u5458','430902198609066033'),('20150042','123456','2','\u5218\u52c7','\u7537','1982-02-05','\u5357\u95e8\u8f7b\u5de5\u8d85\u5e02\u4e0a\u9762','15997852750','\u666e\u901a\u804c\u5458','430903196707241217'),('20150043','123456','2','\u8d3e\u96e8\u71b9','\u5973','1991-07-23','\u897f\u95e8\u5468\u5bb6\u6e7e','13972991372','\u666e\u901a\u804c\u5458','430981198712027214'),('20150044','123456','2','\u9648\u7965\u82f1','\u5973','2004-03-14','\u5341\u91cc\u94fa','15871222636','\u666e\u901a\u804c\u5458','430981198712237756'),('20150045','123456','2','\u7533\u8363\u660e','\u7537','1999-11-07','\u5e73\u9756\u8def','18995977798','\u666e\u901a\u804c\u5458','431023198809136511'),('20150046','123456','2','\u9648\u5e73\u5e73','\u5973','1984-04-16','\u57ce\u90ca\u4e61\u5bcc\u5eb7\u6751\u4e8c\u7ec4','15997878151','\u666e\u901a\u804c\u5458','431123198701060012'),('20150047','123456','2','\u8d3e\u6bc5','\u7537','1985-04-08','\u957f\u6c5f\u516c\u5bd3','13972980718','\u666e\u901a\u804c\u5458','431126198712277013'),('20150048','123456','2','\u6768\u6670','\u5973','1997-04-10','\u6c38\u9633\u4e09\u8def118\u53f7','15342804888','\u666e\u901a\u804c\u5458','431128198502191812'),('20150049','123456','2','\u5f20\u677e','\u7537','1992-12-19','\u65b0\u8349\u88578\u53f7','13997890850','\u666e\u901a\u804c\u5458','431128198911287639'),('20150050','123456','2','\u96f7\u5a55','\u5973','1977-07-05','\u5927\u90a6\u8def','18371897023','\u666e\u901a\u804c\u5458','431229198512200438'),('20150051','123456','2','\u8bf8\u65b9\u6653','\u5973','2006-02-19','\u677f\u5b50\u6865\u6751','15391697475','\u666e\u901a\u804c\u5458','432501198603234511'),('20150052','123456','2','\u674e\u7d2b\u8587','\u5973','1998-03-29','\u897f\u95e8\u5927\u90a6\u5317\u8def146\u53f7','13329888255','\u666e\u901a\u804c\u5458','432503197510180094'),('20150053','123456','2','\u5468\u73c2\u65ed','\u5973','2002-09-24','\u897f\u95e8\u5927\u90a6\u5317\u8def146\u53f7','15997853846','\u666e\u901a\u804c\u5458','432503198603106213'),('20150054','123456','2','\u9648\u8bd7\u6674','\u5973','2012-05-01','\u897f\u6b63\u8857','15971940871','\u666e\u901a\u804c\u5458','43250319860918591'),('20150055','123456','2','\u67ef\u7acb','\u7537','1992-04-08','\u53cc\u6865\u6751','13537614598','\u666e\u901a\u804c\u5458','43250319861120653'),('20150056','123456','2','\u9a6c\u5029','\u5973','2012-03-29','\u5357\u95e8\u56db\u8d24\u8def5123\u53f7','13329892515','\u666e\u901a\u804c\u5458','432522198405283736'),('20150057','123456','2','\u738b\u51a0\u7fa4','\u7537','2007-12-16','\u4e09\u91cc\u68da\u4e0d\u8fdc','15586870655','\u666e\u901a\u804c\u5458','432522198509227392'),('20150058','123456','2','\u8c22\u5b5f\u6c5f','\u7537','2006-10-06','\u5357\u95e8\u533b\u9662','15727224844','\u666e\u901a\u804c\u5458','432522198611297397'),('20150059','123456','2','\u5f20\u4e00\u5ddd','\u5973','1994-06-17','\u524d\u8fdb\u5c0f\u5b66\u5468\u56f4','13872875704','\u666e\u901a\u804c\u5458','432522198708077059'),('20150060','123456','2','\u5f20\u5c55\u73ae','\u7537','1999-02-07','\u5e73\u9756\u8def','13997852676','\u666e\u901a\u804c\u5458','432522196708150818'),('20150061','123456','2','\u674e\u66f4\u751f','\u7537','1994-11-04','\u5357\u95e8\u65b0\u6c7d\u8f66\u7ad9\u5bf9\u9762','13997857052','\u666e\u901a\u804c\u5458','430381198512206012'),('20150062','123456','2','\u5f20\u598d\u5a1f','\u5973','1996-06-05','\u5357\u95e8\u6e21\u69fd','15172785222','\u666e\u901a\u804c\u5458','430381198608202673'),('20150063','123456','2','\u738b\u7405','\u5973','1996-02-07','\u5357\u95e8\u7f8e\u4eba\u5858','13972990897','\u666e\u901a\u804c\u5458','430381196705185019'),('20150064','123456','2','\u4f55\u82b8\u4f7c','\u5973','1986-01-28','\u6c38\u9633\u4e8c\u8def','15572206798','\u666e\u901a\u804c\u5458','430381198707086030'),('20150065','123456','2','\u6768\u519b','\u7537','1988-07-19','\u5357\u95e8\u5f00\u53d1\u533a','13872875606','\u666e\u901a\u804c\u5458','430381198712151458')", "description": "The above query selects all users from the users table.", "concepts": ["```\nCREATE TABLE", "INSERT INTO", "VALUES\n```"], "instruction": "```\n/*\n * 1. \u8bf7\u7f16\u5199\u4e00\u4e2aSQL\u8bed\u53e5\uff0c\u5c06\u6240\u6709\u7528\u6237\u7684ID\u3001\u59d3\u540d\u3001\u6027\u522b\u3001\u751f\u65e5\u3001\u5730\u5740\u3001\u7535\u8bdd\u3001\u804c\u4f4d\u3001\u8eab\u4efd\u8bc1\u53f7\u7801\u63d2\u5165\u5230user\u8868\u4e2d\n * 2. \u8bf7\u7f16\u5199\u4e00\u4e2aSQL\u8bed\u53e5\uff0c\u5c06\u6240\u6709\u7528\u6237\u7684ID\u3001\u59d3\u540d\u3001\u6027\u522b\u3001\u751f\u65e5\u3001\u5730\u5740\u3001\u7535\u8bdd\u3001\u804c\u4f4d\u3001\u8eab\u4efd\u8bc1\u53f7\u7801\u63d2\u5165\u5230user\u8868\u4e2d\n * 3. \u8bf7\u7f16\u5199\u4e00\u4e2aSQL\u8bed\u53e5\uff0c\u5c06\u6240\u6709\u7528\u6237\u7684ID\u3001\u59d3\u540d\u3001\u6027\u522b\u3001\u751f\u65e5\u3001\u5730\u5740\u3001\u7535\u8bdd\u3001\u804c\u4f4d\u3001\u8eab\u4efd\u8bc1\u53f7\u7801\u63d2\u5165\u5230user\u8868\u4e2d\n * 4. \u8bf7\u7f16\u5199\u4e00\u4e2aSQL\u8bed\u53e5\uff0c\u5c06\u6240\u6709\u7528\u6237", "response": "-- Reasoning:\nWe need to insert a new user into the user table.\n\n-- Solution:\n```sql\nINSERT INTO user (id, name, gender, birthday, address, phone, position, id_card)\nVALUES (1, '', 'M', '1990-01-01', '123 Main St', '123-456-7890', 'CEO', '1234567890');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new user into the user table with the following values:\n  \u2022 id: 1\n  \u2022 name: \n  \u2022 gender: M\n  \u2022 birthday: 1990-01-01\n  \u2022 address: 123 Main St\n  \u2022 phone: 123-456-7890\n  \u2022 position: CEO\n  \u2022 id_card: 1234567890\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM user;"}
{"seed": "/* The table reimb contains the following columns: */\ninsert  into `reim`(`ID`,`pInvoiceID`,`isread`,`Date`,`goods`,`number`,`unitPrice`,`remark`) values ('20150001','10000092',1,'2014-02-01','\u6c34\u679c','1','61','\u65e0'),('20150001','10000096',1,'2014-02-26','\u6c34\u679c','1','378','\u65e0'),('20150002','10000003',0,'2014-05-01','\u9910\u996e','1','998','\u65e0'),('20150002','10000036',0,'2015-01-11','\u8f66\u8d39','1','468','\u65e0'),('20150002','10000041',0,'2014-08-20','\u590d\u5370','1','478','\u65e0'),('20150003','10000010',0,'2015-02-08','\u9910\u996e','1','795','\u65e0'),('20150003','10000061',0,'2014-04-27','U\u76d8','1','679','\u65e0'),('20150003','10000095',1,'2014-05-09','\u6c34\u679c','1','581','\u65e0'),('20150005','10000047',0,'2014-06-27','\u590d\u5370','1','578','\u65e0'),('20150005','10000048',0,'2014-11-10','\u590d\u5370','1','985','\u65e0'),('20150005','10000076',1,'2014-06-15','\u6c34\u679c','1','682','\u65e0'),('20150006','10000080',1,'2014-01-20','\u6c34\u679c','1','801','\u65e0'),('20150007','10000042',0,'2014-08-15','\u590d\u5370','1','843','\u65e0'),('20150007','10000053',0,'2014-05-07','\u590d\u5370','1','357','\u65e0'),('20150008','10000034',0,'2015-05-15','\u8f66\u8d39','1','668','\u65e0'),('20150009','10000056',0,'2014-12-14','U\u76d8','1','723','\u65e0'),('20150010','10000005',0,'2015-01-09','\u9910\u996e','1','592','\u65e0'),('20150011','10000081',1,'2014-07-09','\u6c34\u679c','1','816','\u65e0'),('20150012','10000018',0,'2014-12-17','\u9910\u996e','1','992','\u65e0'),('20150012','10000027',0,'2014-04-13','\u8f66\u8d39','1','198','\u65e0'),('20150012','10000085',1,'2014-11-21','\u6c34\u679c','1','916','\u65e0'),('20150013','10000064',0,'2015-03-21','U\u76d8','1','439','\u65e0'),('20150013','10000072',1,'2015-02-21','\u6c34\u679c','1','578','\u65e0'),('20150013','10000094',1,'2014-09-08','\u6c34\u679c','1','231','\u65e0'),('20150014','10000097',1,'2015-03-12','\u6c34\u679c','1','821','\u65e0'),('20150015','10000026',0,'2014-09-17','\u8f66\u8d39','1','823','\u65e0'),('20150016','10000009',0,'2014-03-16','\u9910\u996e','1','543','\u65e0'),('20150018','10000035',0,'2015-03-29','\u8f66\u8d39','1','32','\u65e0'),('20150018','10000039',0,'2015-03-13','\u8f66\u8d39','1','270','\u65e0'),('20150018','10000050',0,'2015-02-20','\u590d\u5370','1','660','\u65e0'),('20150018','10000069',0,'2014-01-03','U\u76d8','1','684','\u65e0'),('20150018','10000100',1,'2014-09-21','\u6c34\u679c','1','772','\u65e0'),('20150019','10000083',1,'2015-01-24','\u6c34\u679c','1','727','\u65e0'),('20150020','10000016',0,'2015-01-19','\u9910\u996e','1','329','\u65e0'),('20150020','10000021',0,'2014-12-21','\u8f66\u8d39','1','602','\u65e0'),('20150021','10000019',0,'2015-03-21','\u9910\u996e','1','818','\u65e0'),('20150021','10000079',1,'2014-07-25','\u6c34\u679c','1','340','\u65e0'),('20150022','10000040',0,'2015-05-11','\u8f66\u8d39','1','154','\u65e0'),('20150023','10000091',1,'2014-03-23','\u6c34\u679c','1','389','\u65e0'),('20150024','10000054',0,'2015-04-30','\u590d\u5370','1','1022','\u65e0'),('20150024','10000075',1,'2015-04-07','\u6c34\u679c','1','642','\u65e0'),('20150026','10000002',0,'2015-02-24','\u9910\u996e','1','269','\u65e0'),('20150026','10000068',0,'2014-03-15','U\u76d8','1','702','\u65e0'),('20150028','10000032',0,'2014-07-27','\u8f66\u8d39','1','389','\u65e0'),('20150029','10000017',0,'2014-12-03','\u9910\u996e','1','568','\u65e0'),('20150029','10000030',0,'2014-02-10','\u8f66\u8d39','1','384','\u65e0'),('20150029','10000046',0,'2014-12-12','\u590d\u5370','1','347','\u65e0'),('20150030','10000008',0,'2015-01-05','\u9910\u996e','1','202','\u65e0'),('20150030','10000089',1,'2014-06-04','\u6c34\u679c','1','349','\u65e0'),('20150031','10000006',0,'2014-09-24','\u9910\u996e','1','830','\u65e0'),('20150031','10000023',0,'2014-04-24','\u8f66\u8d39','1','616','\u65e0'),('20150031','10000065',0,'2014-05-02','U\u76d8','1','819','\u65e0'),('20150031','10000073',1,'2015-01-04','\u6c34\u679c','1','772','\u65e0'),('20150032','10000087',1,'2014-08-18','\u6c34\u679c','1','347','\u65e0'),('20150032','10000099',1,'2014-08-10','\u6c34\u679c','1','61','\u65e0'),('20150033','10000043',0,'2014-04-26','\u590d\u5370','1','327','\u65e0'),('20150034','10000033',0,'2014-04-01','\u8f66\u8d39','1','873','\u65e0'),('20150034','10000058',0,'2015-01-03','U\u76d8','1','652','\u65e0'),('20150035','10000098',1,'2014-10-21','\u6c34\u679c','1','436','\u65e0'),('20150036','10000025',0,'2014-04-27','\u8f66\u8d39','1','738','\u65e0'),('20150040','10000011',0,'2014-10-08','\u9910\u996e','1','398','\u65e0'),('20150042','10000063',0,'2014-07-10','U\u76d8','1','804','\u65e0'),('20150045','10000022',0,'2014-11-08','\u8f66\u8d39','1','35','\u65e0'),('20150045','10000029',0,'2014-06-26','\u8f66\u8d39','1','529','\u65e0'),('20150045','10000038',0,'2014-06-12','\u8f66\u8d39','1','729','\u65e0'),('20150045','10000074',1,'2014-12-24','\u6c34\u679c','1','547','\u65e0'),('20150046','10000090',1,'2014-07-01','\u6c34\u679c','1','497','\u65e0'),('20150047','10000051',0,'2014-03-28','\u590d\u5370','1','222','\u65e0'),('20150047','10000082',1,'2014-07-18','\u6c34\u679c','1','223','\u65e0'),('20150048','10000086',1,'2014-11-22','\u6c34\u679c','1','676','\u65e0'),('20150049','10000060',0,'2015-02-03','U\u76d8','1','363','\u65e0'),('20150050','10000012',0,'2015-05-12','\u9910\u996e','1','834','\u65e0'),('20150051','10000001',0,'2014-05-01','\u9910\u996e','1','795','\u65e0'),('20150051','10000015',0,'2014-09-22','\u9910\u996e','1','500','\u65e0'),('20150051','10000078',1,'2014-11-10','\u6c34\u679c','1','489','\u65e0'),('20150052','10000020',0,'2014-03-30','\u8f66\u8d39','1','372','\u65e0'),('20150052','10000028',0,'2014-10-05','\u8f66\u8d39','1','338','\u65e0'),('20150052','10000055',0,'2014-11-15','U\u76d8','1','656','\u65e0'),('20150052','10000067',0,'2014-05-13','U\u76d8','1','748','\u65e0'),('20150053','10000013',0,'2015-03-01','\u9910\u996e','1','616','\u65e0'),('20150053','10000024',0,'2015-04-14','\u8f66\u8d39','1','478','\u65e0'),('20150053','10000031',0,'2014-11-06','\u8f66\u8d39','1','815','\u65e0'),('20150053','10000052',0,'2014-12-19','\u590d\u5370','1','249','\u65e0'),('20150054','10000062',0,'2014-04-19','U\u76d8','1','314','\u65e0'),('20150055','10000077',1,'2014-08-09','\u6c34\u679c','1','913','\u65e0'),('20150056','10000057',0,'2014-04-30','U\u76d8','1','1075','\u65e0'),('20150056','10000093',1,'2015-03-20','\u6c34\u679c','1','787','\u65e0'),('20150057','10000066',0,'2014-09-14','U\u76d8','1','376','\u65e0'),('20150058','10000037',0,'2014-04-29','\u8f66\u8d39','1','44','\u65e0'),('20150058','10000049',0,'2014-08-23','\u590d\u5370','1','794','\u65e0'),('20150059','10000004',0,'2014-07-12','\u9910\u996e','1','163','\u65e0'),('20150059','10000070',1,'2014-06-26','\u6c34\u679c','1','917','\u65e0'),('20150060','10000014',0,'2014-02-28','\u9910\u996e','1','236','\u65e0'),('20150061','10000088',1,'2014-12-29','\u6c34\u679c','1','471','\u65e0'),('20150062','10000044',0,'2015-03-31','\u590d\u5370','1','922','\u65e0'),('20150063','10000071',1,'2014-09-20','\u6c34\u679c','1','246','\u65e0'),('20150064','10000007',0,'2014-01-12','\u9910\u996e','1','57','\u65e0'),('20150064','10000045',0,'2014-11-30','\u590d\u5370','1','768','\u65e0'),('20150064','10000059',0,'2014-05-11','U\u76d8','1','199','\u65e0'),('20150064','10000084',1,'2014-08-03','\u6c34\u679c','1','771','\u65e0')", "description": "The table reimb contains the following columns:", "concepts": ["```\nCREATE TABLE", "INSERT INTO", "VALUES\n```"], "instruction": "Write a SQL query to list the total sales for each product category, sorted by the total sales from highest to lowest.", "response": "-- Reasoning:\nWe need to find the total sales for each product category. To do this, we need to group the products by category and sum the sales for each category.\n\n-- Solution:\n```sql\nSELECT category, SUM(sales) AS total_sales\nFROM products\nGROUP BY category\nORDER BY total_sales DESC;\n```\n\n-- Explanation:\nThis query uses the GROUP BY clause to group the products by category and the SUM() function to calculate the total sales for each category. The ORDER BY clause is used to sort the results in descending order based on the total sales.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT category, SUM(sales) AS total_sales\nFROM products\nGROUP BY category\nORDER BY total_sales DESC;"}
{"seed": "/* Inserts 100 rows into the personalinvoice table. */\ninsert  into `personalinvoice`(`pInvoiceID`,`payment`,`Date`) values ('10000001','795','2014-04-30'),('10000002','269','2015-02-23'),('10000003','998','2014-04-30'),('10000004','163','2014-07-11'),('10000005','592','2015-01-08'),('10000006','830','2014-09-23'),('10000007','57','2014-01-11'),('10000008','202','2015-01-04'),('10000009','543','2014-03-15'),('10000010','795','2015-02-07'),('10000011','398','2014-10-07'),('10000012','834','2015-05-11'),('10000013','616','2015-02-28'),('10000014','236','2014-02-27'),('10000015','500','2014-09-21'),('10000016','329','2015-01-18'),('10000017','568','2014-12-02'),('10000018','992','2014-12-16'),('10000019','818','2015-03-20'),('10000020','372','2014-03-29'),('10000021','602','2014-12-20'),('10000022','35','2014-11-07'),('10000023','616','2014-04-23'),('10000024','478','2015-04-13'),('10000025','738','2014-04-26'),('10000026','823','2014-09-16'),('10000027','198','2014-04-12'),('10000028','338','2014-10-04'),('10000029','529','2014-06-25'),('10000030','384','2014-02-09'),('10000031','815','2014-11-05'),('10000032','389','2014-07-26'),('10000033','873','2014-03-31'),('10000034','668','2015-05-14'),('10000035','32','2015-03-28'),('10000036','468','2015-01-10'),('10000037','44','2014-04-28'),('10000038','729','2014-06-11'),('10000039','270','2015-03-12'),('10000040','154','2015-05-10'),('10000041','478','2014-08-19'),('10000042','843','2014-08-14'),('10000043','327','2014-04-25'),('10000044','922','2015-03-30'),('10000045','768','2014-11-29'),('10000046','347','2014-12-11'),('10000047','578','2014-06-26'),('10000048','985','2014-11-09'),('10000049','794','2014-08-22'),('10000050','660','2015-02-19'),('10000051','222','2014-03-27'),('10000052','249','2014-12-18'),('10000053','357','2014-05-06'),('10000054','1022','2015-04-29'),('10000055','656','2014-11-14'),('10000056','723','2014-12-13'),('10000057','1075','2014-04-29'),('10000058','652','2015-01-02'),('10000059','199','2014-05-10'),('10000060','363','2015-02-02'),('10000061','679','2014-04-26'),('10000062','314','2014-04-18'),('10000063','804','2014-07-09'),('10000064','439','2015-03-20'),('10000065','819','2014-05-01'),('10000066','376','2014-09-13'),('10000067','748','2014-05-12'),('10000068','702','2014-03-14'),('10000069','684','2014-01-02'),('10000070','917','2014-06-25'),('10000071','246','2014-09-19'),('10000072','578','2015-02-20'),('10000073','772','2015-01-03'),('10000074','547','2014-12-23'),('10000075','642','2015-04-06'),('10000076','682','2014-06-14'),('10000077','913','2014-08-08'),('10000078','489','2014-11-09'),('10000079','340','2014-07-24'),('10000080','801','2014-01-19'),('10000081','816','2014-07-08'),('10000082','223','2014-07-17'),('10000083','727','2015-01-23'),('10000084','771','2014-08-02'),('10000085','916','2014-11-20'),('10000086','676','2014-11-21'),('10000087','347','2014-08-17'),('10000088','471','2014-12-28'),('10000089','349','2014-06-03'),('10000090','497','2014-06-30'),('10000091','389','2014-03-22'),('10000092','61','2014-01-31'),('10000093','787','2015-03-19'),('10000094','231','2014-09-07'),('10000095','581','2014-05-08'),('10000096','378','2014-02-25'),('10000097','821','2015-03-11'),('10000098','436','2014-10-20'),('10000099','61','2014-08-09'),('10000100','772','2014-09-20')", "description": "Inserts 100 rows into the personalinvoice table.", "concepts": ["INSERT INTO", "VALUES", "INT", "VARCHAR", "Date"], "instruction": "Write a SQL query to insert 100 rows into the personalinvoice table.", "response": "-- Reasoning:\nWe need to insert 100 rows into the personalinvoice table.\n\n-- Solution:\n```sql\nINSERT INTO personalinvoice (\n  invoice_id,\n  invoice_date,\n  invoice_amount,\n  invoice_paid,\n  invoice_outstanding\n)\nSELECT\n  invoice_id,\n  invoice_date,\n  invoice_amount,\n  invoice_paid,\n  invoice_outstanding\nFROM\n  (\n    SELECT\n      invoice_id,\n      invoice_date,\n      invoice_amount,\n      invoice_paid,\n      invoice_outstanding\n    FROM\n      (\n        SELECT\n          invoice_id,\n          invoice_date,\n          invoice_amount,\n          invoice_paid,\n          invoice_outstanding\n        FROM\n          (\n            SELECT\n              invoice_id,\n              invoice_date,\n              invoice_amount,\n              invoice_paid,\n              invoice_outstanding\n            FROM\n              (\n                SELECT\n                  invoice_id,\n                  invoice_date,\n                  invoice_amount,\n                  invoice_paid,\n                  invoice_outstanding\n                FROM\n                  (\n                    SELECT\n                      invoice_id,\n                      invoice_date,\n                      invoice_amount,\n                      invoice_paid,\n                      invoice_outstanding\n                    FROM\n                      (\n                        SELECT\n                          invoice_id,\n                          invoice_date,\n                          invoice_amount,\n                          invoice_paid,\n                          invoice_outstanding\n                        FROM\n                          (\n                            SELECT\n                              invoice_id,\n                              invoice_date,\n                              invoice_amount,\n                              invoice_paid,"}
{"seed": "/* Creates a table named salarycurrent with 100 rows and 6 columns. */\ninsert  into `salarycurrent`(`ID`,`basicSalary`,`livingAllowance`,`workDay`,`attendanceAward`,`socialSecurity`,`tax`) values ('20150001','3205','176','20','156','288','0'),('20150002','3540','109','25','195','318','106'),('20150003','3144','193','27','185','282','0'),('20150004','3114','155','27','162','280','0'),('20150005','3616','109','24','144','325','108'),('20150006','3786','183','28','132','340','113'),('20150007','3907','119','24','162','351','117'),('20150008','3678','118','27','161','331','110'),('20150009','3118','163','23','165','280','0'),('20150010','3712','182','25','181','334','111'),('20150011','3401','125','23','149','306','0'),('20150012','3218','150','24','129','289','0'),('20150013','3140','192','20','189','282','0'),('20150014','3190','124','22','138','287','0'),('20150015','3668','100','25','144','330','110'),('20150016','3244','103','24','193','291','0'),('20150017','3939','113','20','184','354','118'),('20150018','3970','186','26','123','357','119'),('20150019','3832','110','23','126','344','114'),('20150020','3481','185','27','107','313','0'),('20150021','3352','188','20','189','301','0'),('20150022','3369','190','23','112','303','0'),('20150023','3824','135','20','144','344','114'),('20150024','3792','125','20','104','341','113'),('20150025','3210','178','25','165','288','0'),('20150026','3573','199','23','130','321','107'),('20150027','3043','188','21','132','273','0'),('20150028','3934','120','22','136','354','118'),('20150029','3751','120','25','135','337','112'),('20150030','3086','109','25','176','277','0'),('20150031','3892','150','23','149','350','116'),('20150032','3081','127','26','192','277','0'),('20150033','3323','100','24','144','299','0'),('20150034','3903','189','28','119','351','117'),('20150035','3166','133','20','180','284','0'),('20150036','3424','146','23','114','308','0'),('20150037','3774','119','26','155','339','113'),('20150038','3646','196','25','107','328','109'),('20150039','3846','138','27','157','346','115'),('20150040','3318','127','25','164','298','0'),('20150041','3487','176','21','191','313','0'),('20150042','3230','187','28','103','290','0'),('20150043','3103','140','24','106','279','0'),('20150044','3725','126','23','150','335','111'),('20150045','3956','157','25','197','356','118'),('20150046','3341','147','28','122','300','0'),('20150047','3979','180','22','194','358','119'),('20150048','3463','178','20','131','311','0'),('20150049','3469','185','29','144','312','0'),('20150050','3624','107','24','128','326','108'),('20150051','3189','158','23','184','287','0'),('20150052','3614','136','24','138','325','108'),('20150053','3555','151','28','191','319','106'),('20150054','3861','105','22','177','347','115'),('20150055','3518','170','28','169','316','105'),('20150056','3830','156','29','172','344','114'),('20150057','3990','150','26','136','359','119'),('20150058','3105','123','27','194','279','0'),('20150059','3934','195','21','196','354','118'),('20150060','3759','145','26','151','338','112'),('20150061','3124','134','21','196','281','0'),('20150062','3366','112','29','111','302','0'),('20150063','3765','193','27','179','338','112'),('20150064','3667','165','24','198','330','110'),('20150065','3208','125','21','175','288','0')", "description": "Creates a table named salarycurrent with 100 rows and 6 columns.", "concepts": ["INSERT INTO", "VALUES", "CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "CTE", "window functions"], "instruction": "Write a SQL query to create a table named salarycurrent with 100 rows and 6 columns.", "response": "-- Reasoning:\nWe need a new table named salarycurrent with 100 rows and 6 columns.\n\n-- Solution:\n```sql\nCREATE TABLE salarycurrent (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  salary INT,\n  city VARCHAR(255),\n  country VARCHAR(255),\n  department VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the salarycurrent table with six columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 salary: integer\n  \u2022 city: variable\u2010length string up to 255 characters\n  \u2022 country: variable\u2010length string up to 255 characters\n  \u2022 department: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('salarycurrent');"}
{"seed": "/* Drops the table named PredictedFusionsForSwordArmOfDragon if it exists. */\nDROP TABLE IF EXISTS PredictedFusionsForSwordArmOfDragon", "description": "Drops the table named PredictedFusionsForSwordArmOfDragon if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named PredictedFusionsForSwordArmOfDragon if it exists.", "response": "-- Reasoning:\nWe need to drop the table named PredictedFusionsForSwordArmOfDragon if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS PredictedFusionsForSwordArmOfDragon;\n```\n\n-- Explanation:\nThis DROP statement removes the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('PredictedFusionsForSwordArmOfDragon');"}
{"seed": "/* Drops the table named FusionsForSwordArmOfDragon if it exists. */\nDROP TABLE IF EXISTS FusionsForSwordArmOfDragon", "description": "Drops the table named FusionsForSwordArmOfDragon if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named FusionsForSwordArmOfDragon if it exists.", "response": "-- Reasoning:\nWe need to drop the table named FusionsForSwordArmOfDragon if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS FusionsForSwordArmOfDragon;\n```\n\n-- Explanation:\nThis DROP statement removes the table named FusionsForSwordArmOfDragon if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('FusionsForSwordArmOfDragon');"}
{"seed": "/* Drops the table named IncorrectPredictedFusionsForSwordArmOfDragon if it exists. */\nDROP TABLE IF EXISTS IncorrectPredictedFusionsForSwordArmOfDragon", "description": "Drops the table named IncorrectPredictedFusionsForSwordArmOfDragon if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named IncorrectPredictedFusionsForSwordArmOfDragon if it exists.", "response": "-- Reasoning:\nWe need to drop the table named IncorrectPredictedFusionsForSwordArmOfDragon if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS IncorrectPredictedFusionsForSwordArmOfDragon;\n```\n\n-- Explanation:\nThis DROP statement removes the table named IncorrectPredictedFusionsForSwordArmOfDragon if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('IncorrectPredictedFusionsForSwordArmOfDragon');"}
{"seed": "/* Drops the table named IncorrectPredictedFusionsForSwordArmOfDragonPlus if it exists. */\nDROP TABLE IF EXISTS IncorrectPredictedFusionsForSwordArmOfDragonPlus", "description": "Drops the table named IncorrectPredictedFusionsForSwordArmOfDragonPlus if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named IncorrectPredictedFusionsForSwordArmOfDragonPlus if it exists.", "response": "-- Reasoning:\nWe need to drop the table named IncorrectPredictedFusionsForSwordArmOfDragonPlus if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS IncorrectPredictedFusionsForSwordArmOfDragonPlus;\n```\n\n-- Explanation:\nThis DROP statement removes the table named IncorrectPredictedFusionsForSwordArmOfDragonPlus if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('IncorrectPredictedFusionsForSwordArmOfDragonPlus');"}
{"seed": "/* Drops the table named MissingPredictedFusionsForSwordArmOfDragon if it exists. */\nDROP TABLE IF EXISTS MissingPredictedFusionsForSwordArmOfDragon", "description": "Drops the table named MissingPredictedFusionsForSwordArmOfDragon if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named MissingPredictedFusionsForSwordArmOfDragon if it exists.", "response": "-- Reasoning:\nWe need to drop the table named MissingPredictedFusionsForSwordArmOfDragon if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS MissingPredictedFusionsForSwordArmOfDragon;\n```\n\n-- Explanation:\nThis DROP statement removes the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('MissingPredictedFusionsForSwordArmOfDragon');"}
{"seed": "/* Creates a temporary table named PredictedFusionsForSwordArmOfDragon with the following columns: Material1Name, Material1Type, Material1SecTypes, Material1Attack, Material2Name, Material2Type, Material2SecTypes, Material2Attack. The table contains all possible combinations of cards that can be used to create a fusion monster with the Sword Arm of Dragon as the first material. */\nCREATE TEMPORARY TABLE PredictedFusionsForSwordArmOfDragon AS\nSELECT C1.CardName AS Material1Name, C1.CardType AS Material1Type, C1.CardSecTypes AS Material1SecTypes, C1.Attack as Material1Attack,\n       C2.CardName AS Material2Name, C2.CardType AS Material2Type, C2.CardSecTypes AS Material2SecTypes, C2.Attack as Material2Attack\nFROM Cards AS C1\nJOIN Cards AS C2\nWHERE\n  C1.IsDragon = 1 AND C2.CardType = 'Warrior' AND\n  C1.Attack < 1750 AND C2.Attack < 1750 AND\n  (C1.Attack >= 1300 OR C2.Attack >= 1300)", "description": "Creates a temporary table named PredictedFusionsForSwordArmOfDragon with the following columns: Material1Name, Material1Type, Material1SecTypes, Material1Attack, Material2Name, Material2Type, Material2SecTypes, Material2Attack. The table contains all possible combinations of cards that can be used to create a fusion monster with the Sword Arm of Dragon as the first material.", "concepts": ["CREATE TEMPORARY TABLE", "SELECT", "JOIN", "WHERE", "AS", "Cards", "IsDragon", "Warrior", "Attack", "CardName", "Card"], "instruction": "Write a SQL query to create a temporary table named PredictedFusionsForSwordArmOfDragon with the following columns: Material1Name, Material1Type, Material1SecTypes, Material1Attack, Material2Name, Material2Type, Material2SecTypes, Material2Attack. The table contains all possible combinations of cards that can be used to create a fusion monster with the Sword Arm of Dragon as the first material.", "response": "-- Reasoning:\nWe need to create a temporary table named PredictedFusionsForSwordArmOfDragon with the following columns:\n  \u2022 Material1Name: the name of the first material\n  \u2022 Material1Type: the type of the first material\n  \u2022 Material1SecTypes: the secondary types of the first material\n  \u2022 Material1Attack: the attack of the first material\n  \u2022 Material2Name: the name of the second material\n  \u2022 Material2Type: the type of the second material\n  \u2022 Material2SecTypes: the secondary types of the second material\n  \u2022 Material2Attack: the attack of the second material\n\n-- Solution:\n```sql\nCREATE TEMPORARY TABLE PredictedFusionsForSwordArmOfDragon AS\nSELECT\n  Material1.Name AS Material1Name,\n  Material1.Type AS Material1Type,\n  Material1.SecondaryTypes AS Material1SecTypes,\n  Material1.Attack AS Material1Attack,\n  Material2.Name AS Material2Name,\n  Material2.Type AS Material2Type,\n  Material2.SecondaryTypes AS Material2SecTypes,\n  Material2.Attack AS Material2Attack\nFROM\n  Cards AS Material1,\n  Cards AS Material2\nWHERE\n  Material1.Name = 'Sword Arm of Dragon' AND\n  Material2.Attack > Material1.Attack;\n```\n\n-- Explanation:\nThis statement creates a temporary table named Predict"}
{"seed": "/* Creates a new table named PredictedFusionsForSwordArmOfDragon with the same columns as the original table. */\nINSERT INTO PredictedFusionsForSwordArmOfDragon\nSELECT Material2Name, Material2Type, Material2SecTypes, Material2Attack,\n       Material1Name, Material1Type, Material1SecTypes, Material1Attack\nFROM PredictedFusionsForSwordArmOfDragon", "description": "Creates a new table named PredictedFusionsForSwordArmOfDragon with the same columns as the original table.", "concepts": ["INSERT INTO", "SELECT", "FROM"], "instruction": "Write a SQL query to create a new table named PredictedFusionsForSwordArmOfDragon with the same columns as the original table.", "response": "-- Reasoning:\nWe need to create a new table with the same columns as the original table.\n\n-- Solution:\n```sql\nCREATE TABLE PredictedFusionsForSwordArmOfDragon AS\n  SELECT * FROM PredictedFusionsForSwordArmOfDragon;\n```\n\n-- Explanation:\nThis statement creates a new table named PredictedFusionsForSwordArmOfDragon with the same columns as the original table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('PredictedFusionsForSwordArmOfDragon');"}
{"seed": "/* Creates a temporary table named FusionsForSwordArmOfDragon with the columns Material1Name, Material1Type, Material1SecTypes, Material1Attack, Material2Name, Material2Type, Material2SecTypes, and Material2Attack. The table contains all the fusions that result in the Sword Arm of Dragon. */\nCREATE TEMPORARY TABLE FusionsForSwordArmOfDragon AS\nSELECT Material1Name, Material1Type, Material1SecTypes, Material1Attack,\n       Material2Name, Material2Type, Material2SecTypes, Material2Attack\nFROM FusionsPlus\nWHERE ResultName = 'Sword Arm of Dragon'", "description": "Creates a temporary table named FusionsForSwordArmOfDragon with the columns Material1Name, Material1Type, Material1SecTypes, Material1Attack, Material2Name, Material2Type, Material2SecTypes, and Material2Attack. The table contains all the fusions that result in the Sword Arm of Dragon.", "concepts": ["CREATE TEMPORARY TABLE", "FusionsForSwordArmOfDragon", "AS", "SELECT", "FROM", "WHERE", "ResultName"], "instruction": "Write a SQL query to create a temporary table named FusionsForSwordArmOfDragon with the columns Material1Name, Material1Type, Material1SecTypes, Material1Attack, Material2Name, Material2Type, Material2SecTypes, and Material2Attack. The table contains all the fusions that result in the Sword Arm of Dragon.", "response": "-- Reasoning:\nWe need to create a temporary table named FusionsForSwordArmOfDragon that contains all the fusions that result in the Sword Arm of Dragon.\n\n-- Solution:\n```sql\nCREATE TEMPORARY TABLE FusionsForSwordArmOfDragon AS\nSELECT\n  Material1Name,\n  Material1Type,\n  Material1SecTypes,\n  Material1Attack,\n  Material2Name,\n  Material2Type,\n  Material2SecTypes,\n  Material2Attack\nFROM\n  Fusions\nWHERE\n  Material1Name = 'Sword Arm of Dragon'\n  OR Material2Name = 'Sword Arm of Dragon';\n```\n\n-- Explanation:\nThis statement creates a temporary table named FusionsForSwordArmOfDragon that contains all the fusions that result in the Sword Arm of Dragon.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('FusionsForSwordArmOfDragon');"}
{"seed": "/* Creates a temporary table named IncorrectPredictedFusionsForSwordArmOfDragon by selecting all rows from PredictedFusionsForSwordArmOfDragon except those that exist in FusionsForSwordArmOfDragon. */\nCREATE TEMPORARY TABLE IncorrectPredictedFusionsForSwordArmOfDragon AS\nSELECT * FROM PredictedFusionsForSwordArmOfDragon\nEXCEPT \nSELECT * FROM FusionsForSwordArmOfDragon", "description": "Creates a temporary table named IncorrectPredictedFusionsForSwordArmOfDragon by selecting all rows from PredictedFusionsForSwordArmOfDragon except those that exist in FusionsForSwordArmOfDragon.", "concepts": ["CREATE TEMPORARY TABLE", "AS", "EXCEPT"], "instruction": "Write a SQL query to create a temporary table named IncorrectPredictedFusionsForSwordArmOfDragon by selecting all rows from PredictedFusionsForSwordArmOfDragon except those that exist in FusionsForSwordArmOfDragon.", "response": "-- Reasoning:\nWe need to create a temporary table named IncorrectPredictedFusionsForSwordArmOfDragon that contains all rows from PredictedFusionsForSwordArmOfDragon that do not exist in FusionsForSwordArmOfDragon.\n\n-- Solution:\n```sql\nCREATE TEMPORARY TABLE IncorrectPredictedFusionsForSwordArmOfDragon AS\n  SELECT * FROM PredictedFusionsForSwordArmOfDragon\n  EXCEPT\n  SELECT * FROM FusionsForSwordArmOfDragon;\n```\n\n-- Explanation:\nThis statement creates a temporary table named IncorrectPredictedFusionsForSwordArmOfDragon by selecting all rows from PredictedFusionsForSwordArmOfDragon except those that exist in FusionsForSwordArmOfDragon.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('IncorrectPredictedFusionsForSwordArmOfDragon');"}
{"seed": "/* Creates a temporary table named IncorrectPredictedFusionsForSwordArmOfDragonPlus with the same columns as IncorrectPredictedFusionsForSwordArmOfDragon, but also includes the ResultName, ResultType, ResultSecTypes, and ResultAttack columns from the FusionsPlus table. */\nCREATE TEMPORARY TABLE IncorrectPredictedFusionsForSwordArmOfDragonPlus AS\nSELECT IncorrectPredictedFusionsForSwordArmOfDragon.Material1Name,\nIncorrectPredictedFusionsForSwordArmOfDragon.Material1Type,\nIncorrectPredictedFusionsForSwordArmOfDragon.Material1SecTypes,\nIncorrectPredictedFusionsForSwordArmOfDragon.Material1Attack,\nIncorrectPredictedFusionsForSwordArmOfDragon.Material2Name,\nIncorrectPredictedFusionsForSwordArmOfDragon.Material2Type,\nIncorrectPredictedFusionsForSwordArmOfDragon.Material2SecTypes,\nIncorrectPredictedFusionsForSwordArmOfDragon.Material2Attack,\nFusionsPlus.ResultName, FusionsPlus.ResultType,\nFusionsPlus.ResultSecTypes, FusionsPlus.ResultAttack\nFROM IncorrectPredictedFusionsForSwordArmOfDragon\nLEFT JOIN FusionsPlus\nON IncorrectPredictedFusionsForSwordArmOfDragon.Material1Name = FusionsPlus.Material1Name\nAND IncorrectPredictedFusionsForSwordArmOfDragon.Material2Name = FusionsPlus.Material2Name", "description": "Creates a temporary table named IncorrectPredictedFusionsForSwordArmOfDragonPlus with the same columns as IncorrectPredictedFusionsForSwordArmOfDragon, but also includes the ResultName, ResultType, ResultSecTypes, and ResultAttack columns from the FusionsPlus table.", "concepts": ["CREATE TEMPORARY TABLE", "SELECT", "FROM", "LEFT JOIN", "ON", "AS", "FusionsPlus"], "instruction": "Write a SQL query to create a temporary table named IncorrectPredictedFusionsForSwordArmOfDragonPlus with the same columns as IncorrectPredictedFusionsForSwordArmOfDragon, but also includes the ResultName, ResultType, ResultSecTypes, and ResultAttack columns from the FusionsPlus table.", "response": "-- Reasoning:\nWe need to create a temporary table named IncorrectPredictedFusionsForSwordArmOfDragonPlus that contains the same columns as IncorrectPredictedFusionsForSwordArmOfDragon, but also includes the ResultName, ResultType, ResultSecTypes, and ResultAttack columns from the FusionsPlus table.\n\n-- Solution:\n```sql\nCREATE TEMPORARY TABLE IncorrectPredictedFusionsForSwordArmOfDragonPlus AS\n  SELECT * FROM IncorrectPredictedFusionsForSwordArmOfDragon\n  LEFT JOIN FusionsPlus ON IncorrectPredictedFusionsForSwordArmOfDragon.ResultName = FusionsPlus.Name;\n```\n\n-- Explanation:\nThis statement creates a temporary table named IncorrectPredictedFusionsForSwordArmOfDragonPlus that contains the same columns as IncorrectPredictedFusionsForSwordArmOfDragon, but also includes the ResultName, ResultType, ResultSecTypes, and ResultAttack columns from the FusionsPlus table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('IncorrectPredictedFusionsForSwordArmOfDragonPlus');"}
{"seed": "/* Creates a temporary table named MissingPredictedFusionsForSwordArmOfDragon by selecting all rows from FusionsForSwordArmOfDragon that are not present in PredictedFusionsForSwordArmOfDragon. */\nCREATE TEMPORARY TABLE MissingPredictedFusionsForSwordArmOfDragon AS\nSELECT * FROM FusionsForSwordArmOfDragon\nEXCEPT \nSELECT * FROM PredictedFusionsForSwordArmOfDragon", "description": "Creates a temporary table named MissingPredictedFusionsForSwordArmOfDragon by selecting all rows from FusionsForSwordArmOfDragon that are not present in PredictedFusionsForSwordArmOfDragon.", "concepts": ["CREATE TEMPORARY TABLE", "AS", "EXCEPT"], "instruction": "Write a SQL query to create a temporary table named MissingPredictedFusionsForSwordArmOfDragon by selecting all rows from FusionsForSwordArmOfDragon that are not present in PredictedFusionsForSwordArmOfDragon.", "response": "-- Reasoning:\nWe need to create a temporary table named MissingPredictedFusionsForSwordArmOfDragon that contains all rows from FusionsForSwordArmOfDragon that are not present in PredictedFusionsForSwordArmOfDragon.\n\n-- Solution:\n```sql\nCREATE TEMPORARY TABLE MissingPredictedFusionsForSwordArmOfDragon AS\n  SELECT * FROM FusionsForSwordArmOfDragon\n  WHERE NOT EXISTS (\n    SELECT * FROM PredictedFusionsForSwordArmOfDragon\n    WHERE FusionsForSwordArmOfDragon.fusion_id = PredictedFusionsForSwordArmOfDragon.fusion_id\n  );\n```\n\n-- Explanation:\nThis statement creates a temporary table named MissingPredictedFusionsForSwordArmOfDragon by selecting all rows from FusionsForSwordArmOfDragon that are not present in PredictedFusionsForSwordArmOfDragon.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MissingPredictedFusionsForSwordArmOfDragon');"}
{"seed": "/* Selects the top 50 employees from the Employees table, along with their manager and department. */\nSELECT  TOP(50) e.EmployeeID , e.FirstName + ' ' + e.LastName AS EmployeeName,\n               m.FirstName + ' ' + m.LastName AS ManagerName , d.[Name] AS DepartmenName\n  FROM Employees AS e\n  JOIN\tEmployees AS m\n    ON m.EmployeeID = e.ManagerID\n  JOIN Departments AS d\n  ON d.DepartmentID = e.DepartmentID\nORDER BY e.EmployeeID", "description": "Selects the top 50 employees from the Employees table, along with their manager and department.", "concepts": ["SELECT", "TOP", "EmployeeID", "FirstName", "LastName", "ManagerID", "DepartmentID", "Name", "ORDER BY", "JOIN", "ON", "AS"], "instruction": "Write a SQL query to list the top 50 employees from the Employees table, along with their manager and department.", "response": "-- Reasoning:\nWe need to list the top 50 employees from the Employees table, along with their manager and department.\n\n-- Solution:\n```sql\nSELECT e.employee_id, e.first_name, e.last_name, e.manager_id, e.department_id,\n  m.first_name AS manager_first_name, m.last_name AS manager_last_name,\n  d.name AS department_name\nFROM employees e\nLEFT JOIN employees m ON e.manager_id = m.employee_id\nLEFT JOIN departments d ON e.department_id = d.department_id\nORDER BY e.employee_id\nLIMIT 50;\n```\n\n-- Explanation:\nThis query joins the employees table with itself to get the manager\u2019s name and department name.\n\n-- Tests:\n-- 1. Verify the query returns the correct number of rows\nSELECT COUNT(*) FROM (\n  SELECT e.employee_id, e.first_name, e.last_name, e.manager_id, e.department_id,\n    m.first_name AS manager_first_name, m.last_name AS manager_last_name,\n    d.name AS department_name\n  FROM employees e\n  LEFT JOIN employees m ON e.manager_id = m.employee_id\n  LEFT JOIN departments d ON"}
{"seed": "/* Selects all contacts for the user with the id $1. The contacts table is joined with the users table on the friend_id column. */\nSELECT * FROM contacts JOIN users ON contacts.friend_id=users.id WHERE contacts.user_id=$1", "description": "Selects all contacts for the user with the id $1. The contacts table is joined with the users table on the friend_id column.", "concepts": ["SELECT", "JOIN", "ON", "WHERE"], "instruction": "Write a SQL query to select all contacts for the user with the id $1. The contacts table is joined with the users table on the friend_id column.", "response": "-- Reasoning:\nWe need to select all contacts for a given user. The contacts table is joined with the users table on the friend_id column.\n\n-- Solution:\n```sql\nSELECT * FROM contacts\nJOIN users ON contacts.friend_id = users.id\nWHERE users.id = $1;\n```\n\n-- Explanation:\nThis query selects all contacts for a given user. It joins the contacts and users tables on the friend_id column. The WHERE clause filters the results to only include contacts for the given user.\n\n-- Tests:\n-- 1. Verify that the query returns the correct results\nSELECT * FROM contacts\nJOIN users ON contacts.friend_id = users.id\nWHERE users.id = $1;"}
{"seed": "/* Creates a view named VW_ACD_ALUNOS_MATRICULADOS_POR_TURMA_DISCIPLINA that shows the number of students enrolled in each class by discipline. */\nCREATE VIEW VW_ACD_ALUNOS_MATRICULADOS_POR_TURMA_DISCIPLINA AS \nSELECT TURMA_ID, turma_nome, DISCIPLINA_ID, disciplina_nome, CURRICULO_ID, curriculo_nome, COUNT(ALUNO_ID) AS QTD_MATRICULADO\nFROM vw_curriculo_curso_turma_disciplina_aluno_grade GRA\nWHERE status_mat_dis_id = 14\nGROUP BY TURMA_ID, turma_nome, DISCIPLINA_ID, disciplina_nome, CURRICULO_ID, curriculo_nome", "description": "Creates a view named VW_ACD_ALUNOS_MATRICULADOS_POR_TURMA_DISCIPLINA that shows the number of students enrolled in each class by discipline.", "concepts": ["CREATE VIEW", "VIEW", "AS", "COUNT", "GROUP BY", "WHERE", "TURMA_ID", "turma_nome", "DISCIPLINA_"], "instruction": "Write a SQL query to create a view named VW_ACD_ALUNOS_MATRICULADOS_POR_TURMA_DISCIPLINA that shows the number of students enrolled in each class by discipline.", "response": "-- Reasoning:\nWe need to create a view that shows the number of students enrolled in each class by discipline.\n\n-- Solution:\n```sql\nCREATE VIEW VW_ACD_ALUNOS_MATRICULADOS_POR_TURMA_DISCIPLINA AS\nSELECT\n  turma.id_turma,\n  turma.id_disciplina,\n  turma.id_professor,\n  turma.id_curso,\n  turma.id_periodo,\n  turma.id_turno,\n  turma.id_sala,\n  turma.id_tipo_turma,\n  turma.id_tipo_aula,\n  turma.id_tipo_horario,\n  turma.id_tipo_frequencia,\n  turma.id_tipo_avaliacao,\n  turma.id_tipo_matricula,\n  turma.id_tipo_situacao,\n  turma.id_tipo_situacao_turma,\n  turma.id_tipo_situacao_aluno,\n  turma.id_tipo_situacao_aluno_turma,\n  turma.id_tipo_situacao_aluno_turma_disciplina,\n  turma.id_tipo_situacao_aluno_turma_disciplina_"}
{"seed": "/* Adds a new column named billdate to the bill table. */\nALTER TABLE bill\nADD billdate datetime", "description": "Adds a new column named billdate to the bill table.", "concepts": ["ALTER TABLE", "ADD", "datetime"], "instruction": "Write a SQL query to add a new column named billdate to the bill table.", "response": "-- Reasoning:\nWe need to modify the existing bill table by adding a new column named billdate. It should be a DATE and not allow NULLs so that every bill has a defined date.\n\n-- Solution:\n```sql\nALTER TABLE bill\n  ADD COLUMN billdate DATE NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the bill table schema by adding:\n  \u2022 billdate: a non\u2010nullable date column\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('bill');"}
{"seed": "/* Adds a new column named schedule to the EJB__TIMER__TBL table. */\nALTER TABLE EJB__TIMER__TBL ADD COLUMN SCHEDULE VARCHAR(255)", "description": "Adds a new column named schedule to the EJB__TIMER__TBL table.", "concepts": ["ALTER TABLE", "ADD COLUMN", "VARCHAR"], "instruction": "Write a SQL query to add a new column named schedule to the EJB__TIMER__TBL table.", "response": "-- Reasoning:\nWe need to add a new column to the EJB__TIMER__TBL table. It should be a VARCHAR(255) and not allow NULLs so that every timer has a defined schedule.\n\n-- Solution:\n```sql\nALTER TABLE EJB__TIMER__TBL\n  ADD COLUMN schedule VARCHAR(255) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the EJB__TIMER__TBL table schema by adding:\n  \u2022 schedule: a non\u2010nullable varchar column up to 255 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('EJB__TIMER__TBL');"}
{"seed": "/* Selects the id and type of all Toyota vehicles from the VEHICLES table, ordered by id. */\nSELECT id, type FROM VEHICLES\nWHERE type = 'Toyota' ORDER BY id", "description": "Selects the id and type of all Toyota vehicles from the VEHICLES table, ordered by id.", "concepts": ["SELECT", "FROM", "WHERE", "ORDER BY", "Toyota"], "instruction": "Write a SQL query to list the id and type of all Toyota vehicles from the VEHICLES table, ordered by id.", "response": "-- Reasoning:\nWe need to list all Toyota vehicles from the VEHICLES table, ordered by id.\n\n-- Solution:\n```sql\nSELECT id, type\nFROM VEHICLES\nWHERE make = 'Toyota'\nORDER BY id;\n```\n\n-- Explanation:\nThis query selects the id and type columns from the VEHICLES table, filtering for rows where the make is Toyota. The ORDER BY clause sorts the results by id.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT id, type\nFROM VEHICLES\nWHERE make = 'Toyota'\nORDER BY id;"}
{"seed": "/* Updates the sample_from and sample_to columns of the um.cd_metric_ref table to 14 and 0, respectively. */\nupdate um.cd_metric_ref set sample_from=14, sample_to=0", "description": "Updates the sample_from and sample_to columns of the um.cd_metric_ref table to 14 and 0, respectively.", "concepts": ["update", "set"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Selects the id, data, czas, klub_1, klub_2, stadion, lokalizacja of all matches from the matches table. */\nSELECT\r\nID_MECZU, \r\nDATA_MECZU, \r\nCZAS_MECZU,\r\n(SELECT KLUB.NAZWA FROM DRUZYNA join klub on KLUB.ID_KLUBU = DRUZYNA.KLUB_ID_KLUBU WHERE MECZ.DRUZYNA_ID_DRUZYNY_1 = DRUZYNA.ID_DRUZYNY ) as KLUB_1,\r\n(SELECT KLUB.NAZWA FROM DRUZYNA join klub on KLUB.ID_KLUBU = DRUZYNA.KLUB_ID_KLUBU WHERE MECZ.DRUZYNA_ID_DRUZYNY_2 = DRUZYNA.ID_DRUZYNY ) as KLUB_2,\r\n(SELECT STADION.NAZWA FROM STADION WHERE MECZ.STADION_ID_STADIONU = STADION.ID_STADIONU) as STADION,\r\n(SELECT STADION.LOKALIZACJA FROM STADION WHERE MECZ.STADION_ID_STADIONU = STADION.ID_STADIONU) as LOKALIZACJA\r\nFROM MECZ", "description": "Selects the id, data, czas, klub_1, klub_2, stadion, lokalizacja of all matches from the matches table.", "concepts": ["SELECT", "FROM", "AS", "WHERE", "JOIN", "GROUP BY", "ORDER BY", "HAVING", "UNION", "CTE", "window functions", "AUTO_"], "instruction": "Write a SQL query to select the id, data, czas, klub_1, klub_2, stadion, lokalizacja of all matches from the matches table.", "response": "-- Reasoning:\nWe need to select all the columns from the matches table.\n\n-- Solution:\n```sql\nSELECT id, data, czas, klub_1, klub_2, stadion, lokalizacja\nFROM matches;\n```\n\n-- Explanation:\nThis query selects all the columns from the matches table.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT * FROM matches;"}
{"seed": "/* Selects the time, surname and name of all players who scored a goal in the specified match. */\nSELECT\r\n  ZDARZENIE.CZAS,\r\n  OSOBA.NAZWISKO AS NAZWISKO_ZAWODNIKA,\r\n  OSOBA.IMIE AS IMIE_ZAWODNIKA\r\nFROM ZDARZENIE\r\n  JOIN ZAWODNIK_MECZ \r\n    ON ZDARZENIE.ZAWODNIK_1_ID_OSOBY = ZAWODNIK_MECZ.ZAWODNIK_ID_OSOBY\r\n    AND ZDARZENIE.MECZ_ID_MECZU = ZAWODNIK_MECZ.MECZ_ID_MECZU\r\n  JOIN DRUZYNA \r\n    ON DRUZYNA.ID_DRUZYNY = ZAWODNIK_MECZ.DRUZYNA_ID_DRUZYNY\r\n  JOIN KLUB\r\n    ON KLUB.ID_KLUBU = DRUZYNA.KLUB_ID_KLUBU\r\n  JOIN OSOBA\r\n    ON OSOBA.ID_OSOBY = ZDARZENIE.ZAWODNIK_1_ID_OSOBY \r\n  WHERE ZDARZENIE.MECZ_ID_MECZU = &Podaj_Id_Meczu\r\n    AND ZDARZENIE.TYP_ZDARZENIA_ID_TYPU = 4000\r\nGROUP BY \r\n  KLUB.NAZWA, \r\n  ZDARZENIE.TYP_ZDARZENIA_ID_TYPU,\r\n  OSOBA.IMIE,\r\n  OSOBA.NAZWISKO,\r\n  ZDARZENIE.CZAS\r\nORDER BY KLUB.NAZWA", "description": "Selects the time, surname and name of all players who scored a goal in the specified match.", "concepts": ["SELECT", "FROM", "JOIN", "WHERE", "GROUP BY", "ORDER BY", "INT", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to list the time, surname and name of all players who scored a goal in the specified match.", "response": "-- Reasoning:\nWe need to find all players who scored a goal in the specified match.\n\n-- Solution:\n```sql\nSELECT time, surname, name\nFROM players\nWHERE match_id = 12345;\n```\n\n-- Explanation:\nThis query selects the time, surname and name of all players who scored a goal in the specified match.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT time, surname, name\nFROM players\nWHERE match_id = 12345;"}
{"seed": "/* Selects the shard number of the current node from the cluster. */\nSELECT _shard_num FROM cluster('test_shard_localhost', system.one)", "description": "Selects the shard number of the current node from the cluster.", "concepts": ["SELECT", "_shard_num", "FROM", "cluster", "system.one"], "instruction": "Write a SQL query to select the shard number of the current node from the cluster.", "response": "-- Reasoning:\nWe need to find the shard number of the current node in the cluster.\n\n-- Solution:\n```sql\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'sqlite_master';\n```\n\n-- Explanation:\nThis query selects the shard_id from the sqlite_master table, which is a system table that contains information about the database.\n\n-- Tests:\n-- 1. Verify shard number is correct\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'sqlite_master';"}
{"seed": "/* Selects the shard number of the current node from the cluster named test_shard_localhost. */\nSELECT _shard_num FROM cluster('test_shard_localhost')", "description": "Selects the shard number of the current node from the cluster named test_shard_localhost.", "concepts": ["SELECT", "_shard_num", "cluster", "FROM"], "instruction": "Write a SQL query to select the shard number of the current node from the cluster named test_shard_localhost.", "response": "-- Reasoning:\nWe need to find the shard number of the current node in the cluster named test_shard_localhost.\n\n-- Solution:\n```sql\nSELECT shard_number FROM sqlite_master WHERE name = 'test_shard_localhost';\n```\n\n-- Explanation:\nThis query selects the shard number from the sqlite_master table, which is a system table that contains information about the database. The WHERE clause filters the results to only include rows with the name test_shard_localhost.\n\n-- Tests:\n-- 1. Verify shard number is correct\nSELECT shard_number FROM sqlite_master WHERE name = 'test_shard_localhost';"}
{"seed": "/* Selects the shard number of the current replica from the clusterAllReplicas function. */\nSELECT _shard_num FROM clusterAllReplicas('test_shard_localhost', system.one)", "description": "Selects the shard number of the current replica from the clusterAllReplicas function.", "concepts": ["SELECT", "_shard_num", "FROM", "clusterAllReplicas", "system.one"], "instruction": "Write a SQL query to select the shard number of the current replica from the clusterAllReplicas function.", "response": "-- Reasoning:\nWe need to select the shard number of the current replica from the clusterAllReplicas function.\n\n-- Solution:\n```sql\nSELECT clusterAllReplicas()\n```\n\n-- Explanation:\nThis query returns the shard number of the current replica.\n\n-- Tests:\n-- 1. Verify the shard number is correct\nSELECT clusterAllReplicas();"}
{"seed": "/* Selects the shard number of all replicas of the test_shard_localhost table. */\nSELECT _shard_num FROM clusterAllReplicas('test_shard_localhost')", "description": "Selects the shard number of all replicas of the test_shard_localhost table.", "concepts": ["SELECT", "_shard_num", "clusterAllReplicas"], "instruction": "Write a SQL query to select the shard number of all replicas of the test_shard_localhost table.", "response": "-- Reasoning:\nWe need to select the shard number of all replicas of the test_shard_localhost table.\n\n-- Solution:\n```sql\nSELECT shard_number FROM sqlite_master WHERE type = 'table' AND name = 'test_shard_localhost';\n```\n\n-- Explanation:\nThis query selects the shard_number column from the sqlite_master table, which is a system table that contains information about all tables in the database. The WHERE clause filters the results to only include rows where the type is 'table' and the name is 'test_shard_localhost'.\n\n-- Tests:\n-- 1. Verify the shard number is correct\nSELECT shard_number FROM sqlite_master WHERE type = 'table' AND name = 'test_shard_localhost';"}
{"seed": "/* Selects the shard number of all shards in the test_cluster_two_shards cluster. */\nSELECT _shard_num FROM cluster('test_cluster_two_shards', system.one) ORDER BY _shard_num", "description": "Selects the shard number of all shards in the test_cluster_two_shards cluster.", "concepts": ["SELECT", "FROM", "ORDER BY", "_shard_num"], "instruction": "Write a SQL query to list the shard number of all shards in the test_cluster_two_shards cluster.", "response": "-- Reasoning:\nWe need to list the shard numbers of all shards in the test_cluster_two_shards cluster.\n\n-- Solution:\n```sql\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_two_shards';\n```\n\n-- Explanation:\nThis query selects the shard_id column from the sqlite_master table, which is a system table that contains metadata about the database. The WHERE clause filters the results to only include rows where the type column is equal to 'table' and the name column is equal to 'test_cluster_two_shards'.\n\n-- Tests:\n-- 1. Verify shard numbers are correct\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_two_shards';"}
{"seed": "/* Selects the shard number of all replicas in the test_cluster_two_shards cluster. */\nSELECT _shard_num FROM clusterAllReplicas('test_cluster_two_shards', system.one) ORDER BY _shard_num", "description": "Selects the shard number of all replicas in the test_cluster_two_shards cluster.", "concepts": ["SELECT", "_shard_num", "FROM", "ORDER BY", "clusterAllReplicas", "system.one"], "instruction": "Write a SQL query to list the shard number of all replicas in the test_cluster_two_shards cluster.", "response": "-- Reasoning:\nWe need to list the shard number of all replicas in the test_cluster_two_shards cluster.\n\n-- Solution:\n```sql\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_two_shards';\n```\n\n-- Explanation:\nThis query selects the shard_id column from the sqlite_master table, which is a system table that contains information about all tables in the database. The WHERE clause filters the results to only include rows where the type column is equal to 'table' and the name column is equal to 'test_cluster_two_shards'.\n\n-- Tests:\n-- 1. Verify the shard number of all replicas in the test_cluster_two_shards cluster\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_two_shards';"}
{"seed": "/* Selects the shard number from the cluster named test_cluster_one_shard_two_replicas. */\nSELECT _shard_num FROM cluster('test_cluster_one_shard_two_replicas', system.one) ORDER BY _shard_num", "description": "Selects the shard number from the cluster named test_cluster_one_shard_two_replicas.", "concepts": ["SELECT", "FROM", "ORDER BY", "_shard_num", "cluster", "system.one"], "instruction": "Write a SQL query to list the shard number from the cluster named test_cluster_one_shard_two_replicas.", "response": "-- Reasoning:\nWe need to find the shard number of the cluster named test_cluster_one_shard_two_replicas.\n\n-- Solution:\n```sql\nSELECT shard_number\nFROM sqlite_master\nWHERE name = 'test_cluster_one_shard_two_replicas';\n```\n\n-- Explanation:\nThis query selects the shard_number from the sqlite_master table where the name is test_cluster_one_shard_two_replicas.\n\n-- Tests:\n-- 1. Verify shard number is correct\nSELECT shard_number\nFROM sqlite_master\nWHERE name = 'test_cluster_one_shard_two_replicas';"}
{"seed": "/* Selects the shard number of all shards in the test_cluster_one_shard_two_replicas cluster. */\nSELECT _shard_num FROM cluster('test_cluster_one_shard_two_replicas') ORDER BY _shard_num", "description": "Selects the shard number of all shards in the test_cluster_one_shard_two_replicas cluster.", "concepts": ["SELECT", "FROM", "ORDER BY", "_shard_num"], "instruction": "Write a SQL query to list the shard number of all shards in the test_cluster_one_shard_two_replicas cluster.", "response": "-- Reasoning:\nWe need to list the shard numbers of all shards in the test_cluster_one_shard_two_replicas cluster.\n\n-- Solution:\n```sql\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_one_shard_two_replicas';\n```\n\n-- Explanation:\nThis query selects the shard_id column from the sqlite_master table, which is a system table that contains information about all tables in the database. The WHERE clause filters the results to only include rows where the type column is equal to 'table' and the name column is equal to 'test_cluster_one_shard_two_replicas'.\n\n-- Tests:\n-- 1. Verify shard_id is correct\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_one_shard_two_replicas';"}
{"seed": "/* Selects the shard number of all replicas in the test_cluster_one_shard_two_replicas cluster. */\nSELECT _shard_num FROM clusterAllReplicas('test_cluster_one_shard_two_replicas', system.one) ORDER BY _shard_num", "description": "Selects the shard number of all replicas in the test_cluster_one_shard_two_replicas cluster.", "concepts": ["SELECT", "_shard_num", "FROM", "ORDER BY"], "instruction": "Write a SQL query to list the shard number of all replicas in the test_cluster_one_shard_two_replicas cluster.", "response": "-- Reasoning:\nWe need to list the shard number of all replicas in the test_cluster_one_shard_two_replicas cluster.\n\n-- Solution:\n```sql\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_one_shard_two_replicas';\n```\n\n-- Explanation:\nThis query selects the shard_id column from the sqlite_master table, which is a system table that contains information about all tables in the database. The WHERE clause filters the results to only include rows where the type column is equal to 'table' and the name column is equal to 'test_cluster_one_shard_two_replicas'.\n\n-- Tests:\n-- 1. Verify the shard number is correct\nSELECT shard_id FROM sqlite_master WHERE type = 'table' AND name = 'test_cluster_one_shard_two_replicas';"}
{"seed": "/* Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row. */\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\"", "description": "Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row.", "concepts": ["SET", "SQL_MODE"], "instruction": "Write a SQL query to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\", which means that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row.", "response": "-- Reasoning:\nWe need to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" so that the AUTO_INCREMENT value will not be automatically set to 0 when inserting a new row.\n\n-- Solution:\n```sql\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\n```\n\n-- Explanation:\nThis SET statement sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" to prevent the AUTO_INCREMENT value from being automatically set to 0 when inserting a new row.\n\n-- Tests:\n-- 1. Check AUTO_INCREMENT value is not 0\nSELECT * FROM orders;"}
{"seed": "/* Sets the autocommit mode to 0, which means that all statements will be executed in a single transaction. */\nSET AUTOCOMMIT = 0", "description": "Sets the autocommit mode to 0, which means that all statements will be executed in a single transaction.", "concepts": ["SET", "AUTOCOMMIT"], "instruction": "Write a SQL query to set the autocommit mode to 0, which means that all statements will be executed in a single transaction.", "response": "-- Reasoning:\nWe need to set the autocommit mode to 0 so that all statements are executed in a single transaction.\n\n-- Solution:\n```sql\nBEGIN TRANSACTION;\n```\n\n-- Explanation:\nThis BEGIN statement starts a transaction.\n\n-- Tests:\n-- 1. Verify autocommit is 0\nPRAGMA autocommit;"}
{"seed": "/* Creates a table named files with five columns: file_id (integer), file (mediumblob), file_length (integer), file_name (varchar), and file_type (varchar). */\nCREATE TABLE `files` (\n  `file_id` int(10) UNSIGNED NOT NULL,\n  `file` mediumblob NOT NULL,\n  `file_length` int(50) NOT NULL,\n  `file_name` varchar(45) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,\n  `file_type` varchar(50) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named files with five columns: file_id (integer), file (mediumblob), file_length (integer), file_name (varchar), and file_type (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named files with five columns: file_id (integer), file (mediumblob), file_length (integer), file_name (varchar), and file_type (varchar).", "response": "-- Reasoning:\nWe need a new table named files. It should have an integer primary key so that each file has a unique identifier, and a mediumblob column to store the file itself.\n\n-- Solution:\n```sql\nCREATE TABLE files (\n  file_id INT PRIMARY KEY,\n  file MEDIUMBLOB,\n  file_length INT,\n  file_name VARCHAR(255),\n  file_type VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the files table with five columns:\n  \u2022 file_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 file: mediumblob, the file itself\n  \u2022 file_length: integer, the length of the file in bytes\n  \u2022 file_name: variable\u2010length string up to 255 characters\n  \u2022 file_type: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('files');"}
{"seed": "/* Adds a primary key constraint to the file_id column in the files table. */\nALTER TABLE `files`\n  ADD PRIMARY KEY (`file_id`)", "description": "Adds a primary key constraint to the file_id column in the files table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the file_id column in the files table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the files table. This will ensure that each file has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE files\n  ADD PRIMARY KEY (file_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the files table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('files');"}
{"seed": "/* Modifies the files table by adding an AUTO_INCREMENT column to the file_id column. */\nALTER TABLE `files`\n  MODIFY `file_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT", "description": "Modifies the files table by adding an AUTO_INCREMENT column to the file_id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the files table by adding an AUTO_INCREMENT column to the file_id column.", "response": "-- Reasoning:\nWe need to modify the existing files table by adding a new column named file_id. It should be an integer and auto\u2010increment so that every file has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE files\n  ADD COLUMN file_id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the files table schema by adding:\n  \u2022 file_id: an integer column that auto\u2010increments\n\n-- Tests:\n-- 1. Verify new column appears and auto\u2010increments\nPRAGMA table_info('files');"}
{"seed": "/* Inserts a new teacher into the teacher table. */\ninsert into teacher (eid, aadhar, address, allowance, contact, doj, dor, email, hra, huspare, medical, mobile, name, pf, salary, status)  VALUES (122, '123456', 'Hose2', 5000, '04792430962', '2018-04-01', '2020-09-01', 'tc@gmail.com', 5000, 'SAM', 2500, '94750042', 'Divya', 2000, 15000, true)", "description": "Inserts a new teacher into the teacher table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new teacher into the teacher table.", "response": "-- Reasoning:\nWe need to insert a new teacher into the teacher table.\n\n-- Solution:\n```sql\nINSERT INTO teacher (name, age, gender, department, is_fulltime)\nVALUES ('', 32, 'M', 'English', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the teacher table with the following values:\n  \u2022 name: \n  \u2022 age: 32\n  \u2022 gender: M\n  \u2022 department: English\n  \u2022 is_fulltime: 1\n\n-- Tests:\n-- 1. Verify new teacher appears in table\nSELECT * FROM teacher;"}
{"seed": "/* Inserts a new class named LKG with division A and teacher_eid 122 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('LKG', 'A', 122)", "description": "Inserts a new class named LKG with division A and teacher_eid 122 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "LKG", "A", "122"], "instruction": "Write a SQL query to insert a new class named LKG with division A and teacher_eid 122 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name of LKG, a division of A, and a teacher_eid of 122.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('LKG', 'A', 122);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: LKG\n  \u2022 division: A\n  \u2022 teacher_eid: 122\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named UKG with division A and teacher_eid 123 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('UKG', 'A', 123)", "description": "Inserts a new class named UKG with division A and teacher_eid 123 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "UKG", "A", "123"], "instruction": "Write a SQL query to insert a new class named UKG with division A and teacher_eid 123 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name, division, and teacher_eid.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('UKG', 'A', 123);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: UKG\n  \u2022 division: A\n  \u2022 teacher_eid: 123\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named I, division A, and teacher_eid 124 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('I', 'A', 124)", "description": "Inserts a new class named I, division A, and teacher_eid 124 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named I, division A, and teacher_eid 124 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a class name of I, division A, and teacher_eid of 124.\n\n-- Solution:\n```sql\nINSERT INTO classes (class_name, division, teacher_eid)\n  VALUES ('I', 'A', 124);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 class_name: I\n  \u2022 division: A\n  \u2022 teacher_eid: 124\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named II with division A and teacher_eid 125 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('II', 'A', 125)", "description": "Inserts a new class named II with division A and teacher_eid 125 into the classes table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new class named II with division A and teacher_eid 125 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name, division, and teacher_eid.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('II', 'A', 125);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: 'II'\n  \u2022 division: 'A'\n  \u2022 teacher_eid: 125\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named III with division A and teacher_eid 126 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('III', 'A', 126)", "description": "Inserts a new class named III with division A and teacher_eid 126 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named III with division A and teacher_eid 126 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name, division, and teacher_eid.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('III', 'A', 126);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: 'III'\n  \u2022 division: 'A'\n  \u2022 teacher_eid: 126\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named IV in division A with teacher_eid 127. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('IV', 'A', 127)", "description": "Inserts a new class named IV in division A with teacher_eid 127.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named IV in division A with teacher_eid 127.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name of IV, a division of A, and a teacher_eid of 127.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('IV', 'A', 127);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: IV\n  \u2022 division: A\n  \u2022 teacher_eid: 127\n\n-- Tests:\n-- 1. Verify new class appears in classes table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named V, division A, and teacher with employee id 128 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('V', 'A', 128)", "description": "Inserts a new class named V, division A, and teacher with employee id 128 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named V, division A, and teacher with employee id 128 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a class name of V, division of A, and teacher with employee id of 128.\n\n-- Solution:\n```sql\nINSERT INTO classes (class_name, division, teacher_id)\n  VALUES ('V', 'A', 128);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 class_name: V\n  \u2022 division: A\n  \u2022 teacher_id: 128\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named VI, division A, and teacher with employee id 129 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('VI', 'A', 129)", "description": "Inserts a new class named VI, division A, and teacher with employee id 129 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named VI, division A, and teacher with employee id 129 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a class name VI, division A, and teacher with employee id 129.\n\n-- Solution:\n```sql\nINSERT INTO classes (class_name, division, teacher_id)\n  VALUES ('VI', 'A', 129);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 class_name: VI\n  \u2022 division: A\n  \u2022 teacher_id: 129\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named VII with division A and teacher_eid 130 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('VII', 'A', 130)", "description": "Inserts a new class named VII with division A and teacher_eid 130 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named VII with division A and teacher_eid 130 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name of VII, a division of A, and a teacher_eid of 130.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('VII', 'A', 130);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: VII\n  \u2022 division: A\n  \u2022 teacher_eid: 130\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named VIII with division A and teacher_eid 131 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('VIII', 'A', 131)", "description": "Inserts a new class named VIII with division A and teacher_eid 131 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named VIII with division A and teacher_eid 131 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name of VIII, a division of A, and a teacher_eid of 131.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('VIII', 'A', 131);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: VIII\n  \u2022 division: A\n  \u2022 teacher_eid: 131\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named IX in division A with teacher_eid 130. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('IX', 'A', 130)", "description": "Inserts a new class named IX in division A with teacher_eid 130.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new class named IX in division A with teacher_eid 130.", "response": "-- Reasoning:\nWe need to insert a new class named IX in division A with teacher_eid 130.\n\n-- Solution:\n```sql\nINSERT INTO class (name, division, teacher_eid)\n  VALUES ('IX', 'A', 130);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new class named IX in division A with teacher_eid 130.\n\n-- Tests:\n-- 1. Verify new class appears\nSELECT * FROM class;"}
{"seed": "/* Inserts a new class named X, division A, and teacher with employee id 129 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('X', 'A', 129)", "description": "Inserts a new class named X, division A, and teacher with employee id 129 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named X, division A, and teacher with employee id 129 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a class name, division, and teacher.\n\n-- Solution:\n```sql\nINSERT INTO classes (class_name, division, teacher)\n  VALUES ('X', 'A', 129);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 class_name: X\n  \u2022 division: A\n  \u2022 teacher: 129\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named XI in division A with teacher_eid 127. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('XI', 'A', 127)", "description": "Inserts a new class named XI in division A with teacher_eid 127.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named XI in division A with teacher_eid 127.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name, division, and teacher_eid.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('XI', 'A', 127);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: XI\n  \u2022 division: A\n  \u2022 teacher_eid: 127\n\n-- Tests:\n-- 1. Verify new class appears in classes table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named XII in division A with teacher_eid 126. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('XII', 'A', 126)", "description": "Inserts a new class named XII in division A with teacher_eid 126.", "concepts": ["INSERT INTO", "VALUES", "public", "classes", "teacher_eid"], "instruction": "Write a SQL query to insert a new class named XII in division A with teacher_eid 126.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name of XII, a division of A, and a teacher_eid of 126.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\nVALUES ('XII', 'A', 126);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: XII\n  \u2022 division: A\n  \u2022 teacher_eid: 126\n\n-- Tests:\n-- 1. Verify new class appears in classes table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named X, division B, and teacher with employee id 123 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('X', 'B', 123)", "description": "Inserts a new class named X, division B, and teacher with employee id 123 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes"], "instruction": "Write a SQL query to insert a new class named X, division B, and teacher with employee id 123 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name, division, and teacher_id.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_id)\n  VALUES ('X', 'B', 123);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: X\n  \u2022 division: B\n  \u2022 teacher_id: 123\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new class named IX with division B and teacher_eid 124 into the classes table. */\nINSERT INTO public.classes(cname, division, teacher_eid) VALUES ('IX', 'B', 124)", "description": "Inserts a new class named IX with division B and teacher_eid 124 into the classes table.", "concepts": ["INSERT INTO", "VALUES", "public", "classes", "cname", "division", "teacher_eid"], "instruction": "Write a SQL query to insert a new class named IX with division B and teacher_eid 124 into the classes table.", "response": "-- Reasoning:\nWe need to insert a new class into the classes table. It should have a name, division, and teacher_eid.\n\n-- Solution:\n```sql\nINSERT INTO classes (name, division, teacher_eid)\n  VALUES ('IX', 'B', 124);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the classes table with:\n  \u2022 name: IX\n  \u2022 division: B\n  \u2022 teacher_eid: 124\n\n-- Tests:\n-- 1. Verify new class appears in table\nSELECT * FROM classes;"}
{"seed": "/* Inserts a new student record into the student table. */\nINSERT INTO public.student(sid, address, admissiondate, admissionno, bus, caste, category, contactno, distance, dob, father, gender, mobileno, mother, name, religion, classes_cname, classes_division)\r\nVALUES (101, 'Kareelakulangara','2018-04-01', 111, true, 'EZHAVA', 'OBC', '479253052', 5, '2000-04-01', 'SOMAN','M', '9447500425', 'SREE', 'SANU', 'HINDU', 'I', 'A')", "description": "Inserts a new student record into the student table.", "concepts": ["INSERT INTO", "VALUES", "student", "sid", "address", "admissiondate", "admissionno", "bus", "caste", "category", "contactno", "distance"], "instruction": "Write a SQL query to insert a new student record into the student table.", "response": "-- Reasoning:\nWe need to insert a new student record into the student table.\n\n-- Solution:\n```sql\nINSERT INTO student (name, age, gender, department, address)\nVALUES ('John', 25, 'M', 'Computer Science', 'New York');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the student table with the following values:\n  \u2022 name: John\n  \u2022 age: 25\n  \u2022 gender: M\n  \u2022 department: Computer Science\n  \u2022 address: New York\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM student;"}
{"seed": "/* Sets the global variable G_t_max to 24. */\nset G_t_max= 24", "description": "Sets the global variable G_t_max to 24.", "concepts": ["set", "G_t_max"], "instruction": "Write a SQL query to set the global variable G_t_max to 24.", "response": "-- Reasoning:\nWe need to set the global variable G_t_max to 24. This will be used to calculate the time of day for each order.\n\n-- Solution:\n```sql\nSET GLOBAL G_t_max = 24;\n```\n\n-- Explanation:\nThis SET statement sets the global variable G_t_max to 24.\n\n-- Tests:\n-- 1. Verify G_t_max is set to 24\nSELECT G_t_max;"}
{"seed": "/* Inserts a new averia into the averia table. */\ninsert into averia\r\n(prioridad_id,informante_id,gne_rep,fecho_detec,fecho_recep,estado_id,reg_id_open,proceso_id,texto_id,texto,public,tt_ref,gne_repa,t_max,tipo_rep_id,persona_id,info_notif,reg_id_close)\r\nvalues\r\n(cod_prioridad,INFORMANTE,cod_site,fecha_deteccion,now_instancia(),ESTADO_CERRADO,REGISTRA_APERTURA,proceso_id,texto_id,texto,rep_publico,tt_ref,\r\ncod_site,G_t_max,cod_tipo_reporte,responsable_id,texto,1)", "description": "Inserts a new averia into the averia table.", "concepts": ["insert into", "values", "prioridad_id", "informante_id", "gne_rep", "fecho_detec", "fecho_re"], "instruction": "Write a SQL query to insert a new averia into the averia table.", "response": "-- Reasoning:\nWe need to insert a new averia into the averia table.\n\n-- Solution:\n```sql\nINSERT INTO averia (name, description, price)\nVALUES ('New Averia', 'New Averia Description', 100);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new averia into the averia table.\n\n-- Tests:\n-- 1. Verify new averia appears in table\nSELECT * FROM averia;"}
{"seed": "/* Inserts a new row into the zmkj_order_log table with the given values. */\nINSERT INTO `zmkj_order_log` (`log_id`,`order_id`,`log_msg`,`log_time`,`log_role`,`log_user`,`log_orderstate`) VALUES('82','205','\u53d1\u51fa\u4e86\u8d27\u7269 ( \u7f16\u8f91\u4e86\u53d1\u8d27\u4fe1\u606f )','1478507783','\u5546\u5bb6','zhuimengkeji','30')", "description": "Inserts a new row into the zmkj_order_log table with the given values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_order_log", "log_id", "order_id", "log_msg", "log_time", "log"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_order_pay table with the given values. */\nINSERT INTO `zmkj_order_pay` (`pay_id`,`pay_sn`,`buyer_id`,`api_pay_state`) VALUES('1','140531239486685057','57',NULL)", "description": "Inserts a new row into the zmkj_order_pay table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_order_pay table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_order_pay table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_order_pay (order_id, pay_id, pay_time, pay_amount, pay_status)\nVALUES (1, 1, '2020-01-01 00:00:00', 100, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_order_pay table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_order_pay;"}
{"seed": "/* Inserts a new row into the zmkj_order_statis table with the given values. */\nINSERT INTO `zmkj_order_statis` (`os_month`,`os_year`,`os_start_date`,`os_end_date`,`os_order_totals`,`os_shipping_totals`,`os_order_return_totals`,`os_commis_totals`,`os_commis_return_totals`,`os_store_cost_totals`,`os_result_totals`,`os_create_date`) VALUES('10','2016','1','30','10000.00','10000.00','1.00','1.00','1.00','1.00','1.00','1')", "description": "Inserts a new row into the zmkj_order_statis table with the given values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_order_statis", "os_month", "os_year", "os_start_date", "os_"], "instruction": "Write a SQL query to insert a new row into the zmkj_order_statis table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_order_statis table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_order_statis (\n  order_id,\n  order_date,\n  order_status,\n  order_total\n) VALUES (\n  100000000,\n  '2020-01-01',\n  'Shipped',\n  100.00\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_order_statis table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_order_statis;"}
{"seed": "/* Inserts a new row into the zmkj_p_booth_goods table with the given values. */\nINSERT INTO `zmkj_p_booth_goods` (`booth_goods_id`,`store_id`,`goods_id`,`gc_id`,`booth_state`) VALUES('5','51','100562','1362','1')", "description": "Inserts a new row into the zmkj_p_booth_goods table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_p_booth_quota table with the given values. */\nINSERT INTO `zmkj_p_booth_quota` (`booth_quota_id`,`store_id`,`store_name`,`booth_quota_starttime`,`booth_quota_endtime`,`booth_state`) VALUES('1','51','\u6cb3\u5317\u8bfa\u878d\u7f51\u7edc\u79d1\u6280\u6709\u9650\u516c\u53f8','1517198263','1522382263','1')", "description": "Inserts a new row into the zmkj_p_booth_quota table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_p_booth_quota table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_p_booth_quota table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_p_booth_quota (\n  booth_id,\n  quota_id,\n  quota_num\n) VALUES (\n  1,\n  1,\n  100\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_p_booth_quota table with the given values:\n  \u2022 booth_id: 1\n  \u2022 quota_id: 1\n  \u2022 quota_num: 100\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_p_booth_quota;"}
{"seed": "/* Inserts a new row into the zmkj_p_bundling_quota table with the given values. */\nINSERT INTO `zmkj_p_bundling_quota` (`bl_quota_id`,`store_id`,`store_name`,`member_id`,`member_name`,`bl_quota_month`,`bl_quota_starttime`,`bl_quota_endtime`,`bl_state`) VALUES('1','51','\u6cb3\u5317\u8bfa\u878d\u7f51\u7edc\u79d1\u6280\u6709\u9650\u516c\u53f8','262','\u8bfa\u878d\u79d1\u6280','2','1517198021','1522382021','1')", "description": "Inserts a new row into the zmkj_p_bundling_quota table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_p_bundling_quota table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_p_bundling_quota table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_p_bundling_quota (\n  product_id,\n  quota_id,\n  quota_type,\n  quota_value,\n  quota_unit,\n  quota_status,\n  quota_start_date,\n  quota_end_date,\n  quota_create_time,\n  quota_update_time\n) VALUES (\n  1,\n  1,\n  '1',\n  100,\n  '1',\n  '1',\n  '2020-01-01',\n  '2020-01-01',\n  '2020-01-01',\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_p_bundling_quota table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_p_bundling_quota;"}
{"seed": "/* Inserts a new row into the zmkj_p_mansong table with the given values. */\nINSERT INTO `zmkj_p_mansong` (`mansong_id`,`mansong_name`,`quota_id`,`start_time`,`end_time`,`member_id`,`store_id`,`member_name`,`store_name`,`state`,`remark`) VALUES('3','\u6d4b\u8bd5111','1','1517414400','1518710400','262','51','\u8bfa\u878d\u79d1\u6280','\u6cb3\u5317\u8bfa\u878d\u7f51\u7edc\u79d1\u6280\u6709\u9650\u516c\u53f8','1','1111')", "description": "Inserts a new row into the zmkj_p_mansong table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_p_mansong table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_p_mansong table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_p_mansong (id, name, age)\nVALUES (1, 'John', 25);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_p_mansong table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_p_mansong;"}
{"seed": "/* Inserts a new row into the zmkj_p_mansong_quota table with the given values. */\nINSERT INTO `zmkj_p_mansong_quota` (`quota_id`,`apply_id`,`member_id`,`store_id`,`member_name`,`store_name`,`start_time`,`end_time`,`state`) VALUES('1','0','262','51','\u8bfa\u878d\u79d1\u6280','\u6cb3\u5317\u8bfa\u878d\u7f51\u7edc\u79d1\u6280\u6709\u9650\u516c\u53f8','1517197151','1522381151','0')", "description": "Inserts a new row into the zmkj_p_mansong_quota table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_p_mansong_quota table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_p_mansong_quota table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_p_mansong_quota (\n  id,\n  mansong_id,\n  quota,\n  create_time,\n  update_time\n) VALUES (\n  1,\n  1,\n  100,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_p_mansong_quota table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_p_mansong_quota;"}
{"seed": "/* Inserts a new row into the zmkj_p_mansong_rule table with the given values. */\nINSERT INTO `zmkj_p_mansong_rule` (`rule_id`,`mansong_id`,`price`,`discount`,`mansong_goods_name`,`goods_id`) VALUES('3','3','1111','1','','0')", "description": "Inserts a new row into the zmkj_p_mansong_rule table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_p_xianshi table with the given values. */\nINSERT INTO `zmkj_p_xianshi` (`xianshi_id`,`xianshi_name`,`xianshi_title`,`xianshi_explain`,`quota_id`,`start_time`,`end_time`,`member_id`,`store_id`,`member_name`,`store_name`,`lower_limit`,`state`) VALUES('8','\u56e2\u8d2d\u6253\u6298',NULL,NULL,'0','1466956800','1498492800','1','1','zhuimengkeji','\u8ffd\u68a6\u79d1\u6280\u5b98\u65b9\u65d7\u8230\u5e97','1','1')", "description": "Inserts a new row into the zmkj_p_xianshi table with the given values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_p_xianshi", "xianshi_id", "xianshi_name", "xianshi"], "instruction": "Write a SQL query to insert a new row into the zmkj_p_xianshi table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_p_xianshi table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_p_xianshi (id, name, price, num)\nVALUES (1, 'apple', 10, 100);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_p_xianshi table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_p_xianshi;"}
{"seed": "/* Inserts a new row into the zmkj_p_xianshi_goods table with the given values. */\nINSERT INTO `zmkj_p_xianshi_goods` (`xianshi_goods_id`,`xianshi_id`,`xianshi_name`,`xianshi_title`,`xianshi_explain`,`goods_id`,`store_id`,`goods_name`,`goods_price`,`xianshi_price`,`goods_image`,`start_time`,`end_time`,`lower_limit`,`state`,`xianshi_recommend`,`gc_id_1`) VALUES('29','8','\u56e2\u8d2d\u6253\u6298',NULL,NULL,'100013','1','\u5947\u5999\u6b63\u7248\u6f2b\u5a01\u6b63\u54c1\u590d\u4ec7\u8005\u8054\u76df2\u84dd\u7259\u8033\u673a4.0\u7f8e\u56fd\u961f\u957f\u94a2\u94c1\u4fa0\u9ed1\u5be1\u5987','129.00','100.00','1_05127507278614229.jpg','1466956800','1498492800','1','1','0','256')", "description": "Inserts a new row into the zmkj_p_xianshi_goods table with the given values.", "concepts": ["INSERT INTO", "VALUES", "xianshi_goods_id", "xianshi_id", "xianshi_name", "xianshi_title"], "instruction": "Write a SQL query to insert a new row into the zmkj_p_xianshi_goods table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_p_xianshi_goods table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_p_xianshi_goods (goods_id, goods_name, goods_price, goods_number, goods_img, goods_desc, is_on_sale, is_delete, is_best, is_new, is_hot, sort_order, is_promote, is_floor, is_special, is_group, is_virtual, is_promote_group, is_promote_groupbuy, is_promote_allow_to_user, is_promote_allow_to_user_buy, is_promote_allow_to_user_groupbuy, is_promote_allow_to_user_groupbuy_buy, is_promote_allow_to_user_groupbuy_buy_number, is_promote_allow_to_user_groupbuy_buy_price, is_promote_allow_to_user_groupbuy_buy_start_time, is_promote_allow_to_user_groupbuy_buy_end_time, is_promote_allow_to_user_groupbuy_buy_start_number, is_promote_allow_to_user"}
{"seed": "/* Inserts a new row into the zmkj_p_xianshi_quota table with the given values. */\nINSERT INTO `zmkj_p_xianshi_quota` (`quota_id`,`member_id`,`store_id`,`member_name`,`store_name`,`start_time`,`end_time`) VALUES('5','1','1','zhuimengkeji','\u8ffd\u68a6\u79d1\u6280\u5b98\u65b9\u65d7\u8230\u5e97','1389167180','1577721600')", "description": "Inserts a new row into the zmkj_p_xianshi_quota table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_p_xianshi_quota table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_p_xianshi_quota table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_p_xianshi_quota (\n  id,\n  name,\n  quota,\n  status,\n  create_time,\n  update_time\n) VALUES (\n  1,\n  'test',\n  100,\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_p_xianshi_quota table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_p_xianshi_quota;"}
{"seed": "/* Inserts a new row into the zmkj_payment table with the given values. */\nINSERT INTO `zmkj_payment` (`payment_id`,`payment_code`,`payment_name`,`payment_config`,`payment_state`) VALUES('1','offline','\u8d27\u5230\u4ed8\u6b3e','a:1:{s:0:\"\";s:0:\"\";}','0')", "description": "Inserts a new row into the zmkj_payment table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_payment table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_payment table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_payment (\n  payment_id,\n  payment_date,\n  amount,\n  customer_id\n) VALUES (\n  1,\n  '2018-01-01',\n  100,\n  1\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_payment table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_payment;"}
{"seed": "/* Inserts a new row into the zmkj_payment table with the specified values. */\nINSERT INTO `zmkj_payment` (`payment_id`,`payment_code`,`payment_name`,`payment_config`,`payment_state`) VALUES('2','alipay','\u652f\u4ed8\u5b9d','a:4:{s:14:\"alipay_service\";s:25:\"create_direct_pay_by_user\";s:14:\"alipay_account\";s:17:\"2094937979@qq.com\";s:10:\"alipay_key\";s:32:\"vyz3uyzxiitzd27ac1npedeb2uapgjh2\";s:14:\"alipay_partner\";s:16:\"2088921477329316\";}','1')", "description": "Inserts a new row into the zmkj_payment table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_payment", "payment_id", "payment_code", "payment_name", "payment_config", "payment_state"], "instruction": "Write a SQL query to insert a new row into the zmkj_payment table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_payment table with the following values:\n  \u2022 id: 1\n  \u2022 name: \u201c\u201d\n  \u2022 amount: 1000000\n\n-- Solution:\n```sql\nINSERT INTO zmkj_payment (id, name, amount)\nVALUES (1, \"\", 1000000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_payment table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_payment;"}
{"seed": "/* Inserts a new row into the zmkj_pd_cash table with the given values. */\nINSERT INTO `zmkj_pd_cash` (`pdc_id`,`pdc_sn`,`pdc_member_id`,`pdc_member_name`,`pdc_amount`,`pdc_bank_name`,`pdc_bank_no`,`pdc_bank_user`,`pdc_add_time`,`pdc_payment_time`,`pdc_payment_state`,`pdc_payment_admin`) VALUES('7','c0c7c76d30bd3dcaefc96f40275bdc0a','5','cs','1.00',NULL,'3702463625468597','\u6d4b\u8bd5','1473651020',NULL,'0',NULL)", "description": "Inserts a new row into the zmkj_pd_cash table with the given values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_pd_cash", "pdc_id", "pdc_sn", "pdc_member_id"], "instruction": "Write a SQL query to insert a new row into the zmkj_pd_cash table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_pd_cash table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_pd_cash (\n  id,\n  name,\n  amount,\n  date\n) VALUES (\n  1,\n  '',\n  1000000,\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_pd_cash table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_pd_cash;"}
{"seed": "/* Inserts a new row into the zmkj_pd_log table with the specified values. */\nINSERT INTO `zmkj_pd_log` (`lg_id`,`lg_member_id`,`lg_member_name`,`lg_admin_name`,`lg_type`,`lg_av_amount`,`lg_freeze_amount`,`lg_add_time`,`lg_desc`) VALUES('1','4','aaaaaa','admin','sys_add_money','1000000.00','0.00','1467969911','\u7ba1\u7406\u5458\u8c03\u8282\u9884\u5b58\u6b3e\u3010\u589e\u52a0\u3011\uff0c\u5145\u503c\u5355\u53f7: 500521313911663004')", "description": "Inserts a new row into the zmkj_pd_log table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_pd_log", "lg_id", "lg_member_id", "lg_member_name", "lg"], "instruction": "Write a SQL query to insert a new row into the zmkj_pd_log table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_pd_log table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_pd_log (\n  id,\n  name,\n  age,\n  sex,\n  address,\n  phone,\n  email,\n  create_time,\n  update_time\n) VALUES (\n  1,\n  '',\n  25,\n  'M',\n  '123 Main St',\n  '123-456-7890',\n  '',\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_pd_log table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_pd_log;"}
{"seed": "/* Inserts a new row into the zmkj_pd_log table with the given values. */\nINSERT INTO `zmkj_pd_log` (`lg_id`,`lg_member_id`,`lg_member_name`,`lg_admin_name`,`lg_type`,`lg_av_amount`,`lg_freeze_amount`,`lg_add_time`,`lg_desc`) VALUES('10','4','aaaaaa',NULL,'order_pay','0.00','0.00','1470184850','\u4e0b\u5355\uff0c\u652f\u4ed8\u9884\u5b58\u6b3e\uff0c\u8ba2\u5355\u53f7: 4')", "description": "Inserts a new row into the zmkj_pd_log table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_pd_log table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_pd_log table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_pd_log (\n  id,\n  name,\n  age,\n  sex,\n  address,\n  phone,\n  email,\n  create_time,\n  update_time\n) VALUES (\n  1,\n  '',\n  25,\n  'M',\n  '123 Main St',\n  '123-456-7890',\n  '',\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_pd_log table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_pd_log;"}
{"seed": "/* Inserts a new row into the zmkj_pd_recharge table with the given values. */\nINSERT INTO `zmkj_pd_recharge` (`pdr_id`,`pdr_sn`,`pdr_member_id`,`pdr_member_name`,`pdr_amount`,`pdr_payment_code`,`pdr_payment_name`,`pdr_trade_sn`,`pdr_add_time`,`pdr_payment_state`,`pdr_payment_time`,`pdr_admin`) VALUES('1','660571142774609278','278','\u6d53\u8336\u52a0\u5496\u5561','1111.00',NULL,NULL,NULL,'1517798774','0','0',NULL)", "description": "Inserts a new row into the zmkj_pd_recharge table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_pd_recharge table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_pd_recharge table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_pd_recharge (\n  user_id,\n  recharge_type,\n  recharge_amount,\n  recharge_time,\n  recharge_status\n) VALUES (\n  1,\n  'alipay',\n  100,\n  '2020-01-01 00:00:00',\n  1\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_pd_recharge table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_pd_recharge;"}
{"seed": "/* Inserts a new row into the zmkj_points_cart table with the given values. */\nINSERT INTO `zmkj_points_cart` (`pcart_id`,`pmember_id`,`pgoods_id`,`pgoods_name`,`pgoods_points`,`pgoods_choosenum`,`pgoods_image`) VALUES('1','4','1','\u6d4b\u8bd51','11','1',NULL)", "description": "Inserts a new row into the zmkj_points_cart table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_points_goods table with the given values. */\nINSERT INTO `zmkj_points_goods` (`pgoods_id`,`pgoods_name`,`pgoods_price`,`pgoods_points`,`pgoods_image`,`pgoods_tag`,`pgoods_serial`,`pgoods_storage`,`pgoods_show`,`pgoods_commend`,`pgoods_add_time`,`pgoods_keywords`,`pgoods_description`,`pgoods_body`,`pgoods_state`,`pgoods_close_reason`,`pgoods_salenum`,`pgoods_view`,`pgoods_islimit`,`pgoods_limitnum`,`pgoods_islimittime`,`pgoods_limitmgrade`,`pgoods_starttime`,`pgoods_endtime`,`pgoods_sort`) VALUES('1','\u6d4b\u8bd51','111.00','11','05253593972436442.jpg','','1','10','1','1','1472014948','1',NULL,'<img src=\"http://www.nrwspt.com/data/upload/shop/pointprod/05253589397838057.jpg\" alt=\"http://www.nrwspt.com/data/upload/shop/pointprod/05253589397838057.jpg\" />','0',NULL,'1','12','0',NULL,'0','0',NULL,NULL,'0')", "description": "Inserts a new row into the zmkj_points_goods table with the given values.", "concepts": ["INSERT INTO", "VALUES", "pgoods_id", "pgoods_name", "pgoods_price", "pgoods_points", "pgoods_image"], "instruction": "Write a SQL query to insert a new row into the zmkj_points_goods table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_points_goods table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_points_goods (goods_id, points)\nVALUES (1, 100);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_points_goods table with the given values:\n  \u2022 goods_id: 1\n  \u2022 points: 100\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_points_goods;"}
{"seed": "/* Inserts a new row into the zmkj_points_log table with the given values. */\nINSERT INTO `zmkj_points_log` (`pl_id`,`pl_memberid`,`pl_membername`,`pl_adminid`,`pl_adminname`,`pl_points`,`pl_addtime`,`pl_desc`,`pl_stage`) VALUES('1','2','ling15097562072',NULL,NULL,'20','1460945605','\u6ce8\u518c\u4f1a\u5458','regist')", "description": "Inserts a new row into the zmkj_points_log table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_points_log table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_points_log table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_points_log (\n  user_id,\n  points,\n  created_at\n) VALUES (\n  1,\n  100,\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_points_log table with the given values:\n  \u2022 user_id: 1\n  \u2022 points: 100\n  \u2022 created_at: 2020\u201001\u201001\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_points_log;"}
{"seed": "/* Inserts a new row into the zmkj_points_order table with the given values. */\nINSERT INTO `zmkj_points_order` (`point_orderid`,`point_ordersn`,`point_buyerid`,`point_buyername`,`point_buyeremail`,`point_addtime`,`point_shippingtime`,`point_shippingcode`,`point_shipping_ecode`,`point_finnshedtime`,`point_allpoint`,`point_ordermessage`,`point_orderstate`) VALUES('3',NULL,NULL,NULL,NULL,'1472537470',NULL,NULL,NULL,NULL,NULL,NULL,'20')", "description": "Inserts a new row into the zmkj_points_order table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_points_order table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_points_order table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_points_order (\n  order_id,\n  user_id,\n  points,\n  created_at\n) VALUES (\n  1,\n  1,\n  100,\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_points_order table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_points_order;"}
{"seed": "/* Inserts a new row into the zmkj_points_orderaddress table with the given values. */\nINSERT INTO `zmkj_points_orderaddress` (`point_oaid`,`point_orderid`,`point_truename`,`point_areaid`,`point_areainfo`,`point_address`,`point_zipcode`,`point_telphone`,`point_mobphone`) VALUES('3','3',NULL,NULL,NULL,NULL,NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_points_orderaddress table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_points_orderaddress table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_points_orderaddress table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_points_orderaddress (\n  order_id,\n  address_id,\n  shipping_method,\n  shipping_price,\n  shipping_tax,\n  shipping_tax_class_id,\n  shipping_tax_rate,\n  shipping_tax_rate_type,\n  shipping_tax_title,\n  shipping_tax_amount,\n  shipping_tax_amount_incl_tax,\n  shipping_tax_amount_excl_tax,\n  shipping_discount_amount,\n  shipping_discount_tax_compensation_amount,\n  shipping_discount_tax_compensation_amount_incl_tax,\n  shipping_discount_tax_compensation_amount_excl_tax,\n  shipping_discount_tax_compensation_amount_canceled,\n  shipping_discount_tax_compensation_amount_refunded,\n  shipping_discount_tax_compensation_amount_refunded_incl_tax,\n  shipping_discount_tax_compensation_amount_refunded_excl_tax,\n  shipping_discount_tax_compensation_amount_refunded_canceled,\n  shipping_discount_tax_compensation_amount_refunded_canceled_incl_tax,\n  shipping_discount"}
{"seed": "/* Inserts a new row into the zmkj_points_ordergoods table with the given values. */\nINSERT INTO `zmkj_points_ordergoods` (`point_recid`,`point_orderid`,`point_goodsid`,`point_goodsname`,`point_goodspoints`,`point_goodsnum`,`point_goodsimage`) VALUES('1','2','1','\u6d4b\u8bd51','11','1','05253593972436442.jpg')", "description": "Inserts a new row into the zmkj_points_ordergoods table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_rcb_log table with the given values. */\nINSERT INTO `zmkj_rcb_log` (`id`,`member_id`,`member_name`,`type`,`add_time`,`available_amount`,`freeze_amount`,`description`) VALUES('1','4','aaaaaa','recharge','1469588313','122.00','0.00','\u5e73\u53f0\u5145\u503c\u5361\u5145\u503c\uff0c\u5145\u503c\u5361\u53f7: cs8ff4bd4245d017e602101f84f533291f')", "description": "Inserts a new row into the zmkj_rcb_log table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_rcb_log table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_rcb_log table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rcb_log (\n  id,\n  name,\n  age,\n  address,\n  salary\n) VALUES (\n  1,\n  'John',\n  30,\n  'California',\n  20000.00\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_rcb_log table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_rcb_log;"}
{"seed": "/* Inserts a new row into the zmkj_rcb_log table with the specified values. */\nINSERT INTO `zmkj_rcb_log` (`id`,`member_id`,`member_name`,`type`,`add_time`,`available_amount`,`freeze_amount`,`description`) VALUES('2','4','aaaaaa','recharge','1469588324','122.00','0.00','\u5e73\u53f0\u5145\u503c\u5361\u5145\u503c\uff0c\u5145\u503c\u5361\u53f7: csc0eaece84c1b833a4c8fd95137f1661f')", "description": "Inserts a new row into the zmkj_rcb_log table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_rcb_log table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_rcb_log table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rcb_log (\n  id,\n  name,\n  age,\n  address,\n  salary\n) VALUES (\n  1,\n  'John',\n  30,\n  'California',\n  20000.00\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_rcb_log table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_rcb_log;"}
{"seed": "/* Inserts a new record into the zmkj_rec_position table with the specified values. */\nINSERT INTO `zmkj_rec_position` (`rec_id`,`pic_type`,`title`,`content`) VALUES('1','1','\u5e95\u90e8\u63a8\u83501','a:4:{s:4:\"body\";a:1:{i:0;a:2:{s:5:\"title\";s:42:\"shop/rec_position/aafda0df33d2a95e6010.png\";s:3:\"url\";s:0:\"\";}}s:5:\"width\";s:0:\"\";s:6:\"height\";s:0:\"\";s:6:\"target\";i:1;}')", "description": "Inserts a new record into the zmkj_rec_position table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_rec_position", "pic_type", "title", "content"], "instruction": "Write a SQL query to insert a new record into the zmkj_rec_position table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new record into the zmkj_rec_position table with the following values:\n  \u2022 rec_id: 1\n  \u2022 position_id: 1\n  \u2022 position_name: \u201cManager\u201d\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rec_position (rec_id, position_id, position_name)\nVALUES (1, 1, \"Manager\");\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the zmkj_rec_position table with the specified values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM zmkj_rec_position;"}
{"seed": "/* Inserts a new row into the zmkj_rechargecard table with the specified values. */\nINSERT INTO `zmkj_rechargecard` (`id`,`sn`,`denomination`,`batchflag`,`admin_name`,`tscreated`,`tsused`,`state`,`member_id`,`member_name`) VALUES('1','cse81727c3820d740fddbc3ab845169016','122.00','','admin','1469588293','1469589433','1','4','aaaaaa')", "description": "Inserts a new row into the zmkj_rechargecard table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_rechargecard table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_rechargecard table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rechargecard (\n  card_id,\n  card_name,\n  card_type,\n  card_price,\n  card_desc,\n  card_status,\n  card_create_time,\n  card_update_time\n) VALUES (\n  1,\n  '100\u5143\u5145\u503c\u5361',\n  '1',\n  100,\n  '100\u5143\u5145\u503c\u5361',\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_rechargecard table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_rechargecard;"}
{"seed": "/* Inserts a new row into the zmkj_rechargecard table with the given values. */\nINSERT INTO `zmkj_rechargecard` (`id`,`sn`,`denomination`,`batchflag`,`admin_name`,`tscreated`,`tsused`,`state`,`member_id`,`member_name`) VALUES('2','cs610ef077a4d098a14dad72cd3343d626','122.00','','admin','1469588293','1469611275','1','4','aaaaaa')", "description": "Inserts a new row into the zmkj_rechargecard table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_rechargecard table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_rechargecard table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rechargecard (\n  card_id,\n  card_name,\n  card_type,\n  card_price,\n  card_desc,\n  card_status,\n  card_create_time,\n  card_update_time\n) VALUES (\n  1,\n  '100\u5143\u5145\u503c\u5361',\n  '1',\n  100,\n  '100\u5143\u5145\u503c\u5361',\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_rechargecard table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_rechargecard;"}
{"seed": "/* Inserts a new row into the zmkj_refund_reason table with the given values. */\nINSERT INTO `zmkj_refund_reason` (`reason_id`,`reason_info`,`sort`,`update_time`) VALUES('95','\u6548\u679c\u4e0d\u597d\u4e0d\u559c\u6b22','123','1393480261')", "description": "Inserts a new row into the zmkj_refund_reason table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_refund_reason table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_refund_reason table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_refund_reason (reason_id, reason_name)\nVALUES (1, 'Not as described');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_refund_reason table with the given values:\n  \u2022 reason_id: 1\n  \u2022 reason_name: 'Not as described'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_refund_reason;"}
{"seed": "/* Inserts a new row into the zmkj_refund_return table with the given values. */\nINSERT INTO `zmkj_refund_return` (`refund_id`,`order_id`,`order_sn`,`refund_sn`,`store_id`,`store_name`,`buyer_id`,`buyer_name`,`goods_id`,`order_goods_id`,`goods_name`,`goods_num`,`refund_amount`,`goods_image`,`order_goods_type`,`refund_type`,`seller_state`,`refund_state`,`return_type`,`order_lock`,`goods_state`,`add_time`,`seller_time`,`admin_time`,`reason_id`,`reason_info`,`pic_info`,`buyer_message`,`seller_message`,`admin_message`,`express_id`,`invoice_no`,`ship_time`,`delay_time`,`receive_time`,`receive_message`,`commis_rate`) VALUES('1','1106','8000000000110801','241100161018181728','0','\u8ffd\u68a6\u79d1\u6280\u5b98\u65b9\u65d7\u8230\u5e97','57','phone_15238304399','0',NULL,'\u8ba2\u5355\u5546\u54c1\u5168\u90e8\u9000\u6b3e','1','0.00',NULL,'1','1','1','1','1','2','1','1476785848',NULL,NULL,NULL,'\u53d6\u6d88\u8ba2\u5355\uff0c\u5168\u90e8\u9000\u6b3e','a:1:{s:5:\"buyer\";a:0:{}}','\u4e0d\u60f3\u8981\u4e86',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_refund_return table with the given values.", "concepts": ["INSERT INTO", "VALUES", "`zmkj_refund_return`", "`refund_id`", "`order_id`", "`order_sn`", "`"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new record into the zmkj_rent_class table with the given values. */\nINSERT INTO `zmkj_rent_class` (`gc_id`,`gc_name`,`type_id`,`type_name`,`gc_parent_id`,`commis_rate`,`gc_sort`,`gc_virtual`,`gc_title`,`gc_keywords`,`gc_description`,`gc_show`) VALUES('1','\u6570\u7801\u4ea7\u54c1','0','','0','5','4','0','','','','1')", "description": "Inserts a new record into the zmkj_rent_class table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the zmkj_rent_class table with the given values.", "response": "-- Reasoning:\nWe need to insert a new record into the zmkj_rent_class table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rent_class (\n  rent_class_id,\n  name,\n  price\n) VALUES (\n  1,\n  'Standard',\n  100\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the zmkj_rent_class table with the given values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM zmkj_rent_class;"}
{"seed": "/* Inserts a new row into the zmkj_rent_class table with the given values. */\nINSERT INTO `zmkj_rent_class` (`gc_id`,`gc_name`,`type_id`,`type_name`,`gc_parent_id`,`commis_rate`,`gc_sort`,`gc_virtual`,`gc_title`,`gc_keywords`,`gc_description`,`gc_show`) VALUES('2','\u6295\u5f71\u4eea','0','','0','5','2','0','','','','1')", "description": "Inserts a new row into the zmkj_rent_class table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_rent_class table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_rent_class table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rent_class (\n  rent_class_id,\n  name,\n  price\n) VALUES (\n  1,\n  'Standard',\n  100\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_rent_class table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_rent_class;"}
{"seed": "/* Inserts a new row into the zmkj_rent_order table with the specified values. */\nINSERT INTO `zmkj_rent_order` (`rorder_id`,`buyer_id`,`buyer_name`,`buyer_phone`,`buyer_address`,`add_time`,`payment_time`,`goods_id`,`order_amount`,`shipping_fee`,`evaluation_state`,`order_state`,`refund_state`,`lock_state`,`delete_state`,`refund_amount`,`delay_time`,`rorder_from`,`shipping_code`,`model`,`other`) VALUES('130','37','\u554a','1234','\u554a\u554a\u554a','1471233361',NULL,'231','0.00','0.00',NULL,'10',NULL,NULL,'0','0.00',NULL,'1',NULL,'eddd','\u9ed8\u9ed8')", "description": "Inserts a new row into the zmkj_rent_order table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_rent_order", "rorder_id", "buyer_id", "buyer_name", "buyer"], "instruction": "Write a SQL query to insert a new row into the zmkj_rent_order table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_rent_order table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rent_order (\n  order_id,\n  user_id,\n  car_id,\n  start_date,\n  end_date,\n  status\n) VALUES (\n  1,\n  1,\n  1,\n  '2020-01-01',\n  '2020-01-02',\n  'pending'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_rent_order table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_rent_order;"}
{"seed": "/* Inserts a new row into the zmkj_rent_order table with the given values. */\nINSERT INTO `zmkj_rent_order` (`rorder_id`,`buyer_id`,`buyer_name`,`buyer_phone`,`buyer_address`,`add_time`,`payment_time`,`goods_id`,`order_amount`,`shipping_fee`,`evaluation_state`,`order_state`,`refund_state`,`lock_state`,`delete_state`,`refund_amount`,`delay_time`,`rorder_from`,`shipping_code`,`model`,`other`) VALUES('131','37','222','12221','111111','1471241524',NULL,'38','0.00','0.00',NULL,'10',NULL,NULL,'0','0.00',NULL,'1',NULL,'11111','111')", "description": "Inserts a new row into the zmkj_rent_order table with the given values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_rent_order", "rorder_id", "buyer_id", "buyer_name", "buyer"], "instruction": "Write a SQL query to insert a new row into the zmkj_rent_order table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_rent_order table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_rent_order (\n  order_id,\n  customer_id,\n  car_id,\n  start_date,\n  end_date,\n  mileage,\n  price\n) VALUES (\n  1000000000,\n  1000000000,\n  1000000000,\n  '2020-01-01',\n  '2020-01-02',\n  10000,\n  10000\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_rent_order table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_rent_order;"}
{"seed": "/* Inserts a new row into the zmkj_seller table with the given values. */\nINSERT INTO `zmkj_seller` (`seller_id`,`seller_name`,`member_id`,`seller_group_id`,`store_id`,`is_admin`,`seller_quicklink`,`last_login_time`) VALUES('1','zhukun','1','0','1','1',NULL,'1516936140')", "description": "Inserts a new row into the zmkj_seller table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_seller table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_seller table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_seller (seller_id, seller_name, seller_email, seller_phone)\nVALUES (1, '', '', '1234567890');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_seller table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_seller;"}
{"seed": "/* Inserts a new row into the zmkj_seller_log table with the given values. */\nINSERT INTO `zmkj_seller_log` (`log_id`,`log_content`,`log_time`,`log_seller_id`,`log_seller_name`,`log_store_id`,`log_seller_ip`,`log_url`,`log_state`) VALUES('1','\u767b\u5f55\u6210\u529f','1459389482','1','zhuimengkeji','1','60.2.186.163','seller_login&login','1')", "description": "Inserts a new row into the zmkj_seller_log table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_seller_log table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_seller_log table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_seller_log (seller_id, seller_name, seller_phone, seller_address, seller_email, seller_status, seller_created_at, seller_updated_at)\nVALUES (1, '', '0123456789', '123 Main Street', '', 'active', '2020-01-01 00:00:00', '2020-01-01 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_seller_log table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_seller_log;"}
{"seed": "/* Inserts a new row into the zmkj_seller_log table with the specified values. */\nINSERT INTO `zmkj_seller_log` (`log_id`,`log_content`,`log_time`,`log_seller_id`,`log_seller_name`,`log_store_id`,`log_seller_ip`,`log_url`,`log_state`) VALUES('3','\u767b\u5f55\u6210\u529f','1459403426','1','zhuimengkeji','1','60.2.186.163','seller_login&login','1')", "description": "Inserts a new row into the zmkj_seller_log table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_seller_log table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_seller_log table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_seller_log (seller_id, seller_name, seller_phone, seller_address, seller_email, seller_status, seller_created_at, seller_updated_at)\nVALUES (1, '', '0987654321', '123 Main Street', '', 'active', '2020-01-01 00:00:00', '2020-01-01 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_seller_log table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_seller_log;"}
{"seed": "/* Inserts a new row into the zmkj_seo table with the given values. */\nINSERT INTO `zmkj_seo` (`id`,`title`,`keywords`,`description`,`type`) VALUES('1','{sitename}','','','index')", "description": "Inserts a new row into the zmkj_seo table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_seo table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_seo table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_seo (id, name, url)\nVALUES (1, '', 'https://www.zmkj.com');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_seo table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_seo;"}
{"seed": "/* Inserts a new record into the zmkj_seo table with the given values. */\nINSERT INTO `zmkj_seo` (`id`,`title`,`keywords`,`description`,`type`) VALUES('2','{sitename} - \u56e2\u8d2d','{sitename}','','group')", "description": "Inserts a new record into the zmkj_seo table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the zmkj_seo table with the given values.", "response": "-- Reasoning:\nWe need to insert a new record into the zmkj_seo table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_seo (id, name, description)\nVALUES (1, '', ' is a fictional character in the Marvel Cinematic Universe (MCU) film franchise, portrayed by . He is a member of the Avengers, a superhero team consisting of Iron Man, Captain America, Thor, the Hulk, Black Widow, Hawkeye, and the Ant\u2010Man. He is the leader of the team and the team\u2019s primary advisor. He is the team\u2019s primary military advisor and the team\u2019s military commander. He is the team\u2019s primary diplomat and the team\u2019s primary political advisor. He is the team\u2019s primary intelligence advisor and the team\u2019s primary scientific advisor. He is the team\u2019s primary military advisor and the team\u2019s military commander. He is the team\u2019s primary diplomat and the team\u2019s primary political advisor. He is the team\u2019s primary intelligence advisor and the team\u2019s primary scientific advisor. He is the team\u2019s primary military advisor and the team\u2019s military commander. He"}
{"seed": "/* Inserts a new record into the zmkj_seo table with the specified values. */\nINSERT INTO `zmkj_seo` (`id`,`title`,`keywords`,`description`,`type`) VALUES('4','{sitename} - \u54c1\u724c','{sitename}','{sitename}','brand')", "description": "Inserts a new record into the zmkj_seo table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values 'captcha_status_goodsqa' and '1', respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('captcha_status_goodsqa','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values 'captcha_status_goodsqa' and '1', respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values 'captcha_status_goodsqa' and '1', respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values 'captcha_status_goodsqa' and '1', respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('captcha_status_goodsqa', '1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('captcha_status_login','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name and value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\n  VALUES ('name', 'value');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values closed_reason and \u5347\u7ea7\u4e2d\u2026\u2026 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('closed_reason','\u5347\u7ea7\u4e2d\u2026\u2026')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values closed_reason and \u5347\u7ea7\u4e2d\u2026\u2026 respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "\u5347\u7ea7\u4e2d\u2026\u2026"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values closed_reason and \u5347\u7ea7\u4e2d\u2026\u2026 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values closed_reason and \u5347\u7ea7\u4e2d\u2026\u2026 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('closed_reason', '\u5347\u7ea7\u4e2d\u2026\u2026');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values closed_reason and \u5347\u7ea7\u4e2d\u2026\u2026 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to complain_time_limit and 2592000 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('complain_time_limit','2592000')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to complain_time_limit and 2592000 respectively.", "concepts": ["INSERT INTO", "VALUES", "complain_time_limit", "2592000"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to complain_time_limit and 2592000 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to complain_time_limit and 2592000 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('complain_time_limit', 2592000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to complain_time_limit and 2592000 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to default_goods_image and default_goods_image.gif respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('default_goods_image','default_goods_image.gif')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to default_goods_image and default_goods_image.gif respectively.", "concepts": ["INSERT INTO", "VALUES", "default_goods_image", "default_goods_image.gif"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to default_goods_image and default_goods_image.gif respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to default_goods_image and default_goods_image.gif respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('default_goods_image', 'default_goods_image.gif');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to default_goods_image and default_goods_image.gif respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to default_store_avatar and default_store_avatar.gif respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('default_store_avatar','default_store_avatar.gif')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to default_store_avatar and default_store_avatar.gif respectively.", "concepts": ["INSERT INTO", "VALUES", "default_store_avatar", "default_store_avatar.gif"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to default_store_avatar and default_store_avatar.gif respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to default_store_avatar and default_store_avatar.gif respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('default_store_avatar', 'default_store_avatar.gif');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to default_store_logo and default_store_logo.gif respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('default_store_logo','default_store_logo.gif')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to default_store_logo and default_store_logo.gif respectively.", "concepts": ["INSERT INTO", "VALUES", "default_store_logo", "default_store_logo.gif"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to default_store_logo and default_store_logo.gif respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to default_store_logo and default_store_logo.gif respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('default_store_logo', 'default_store_logo.gif');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to default_store_logo and default_store_logo.gif respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to default_user_portrait and default_user_portrait.gif respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('default_user_portrait','default_user_portrait.gif')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to default_user_portrait and default_user_portrait.gif respectively.", "concepts": ["INSERT INTO", "VALUES", "default_user_portrait", "default_user_portrait.gif"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to default_user_portrait and default_user_portrait.gif respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to default_user_portrait and default_user_portrait.gif respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('default_user_portrait', 'default_user_portrait.gif');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to delivery_isuse and 1, respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('delivery_isuse','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to delivery_isuse and 1, respectively.", "concepts": ["INSERT INTO", "VALUES", "delivery_isuse", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to delivery_isuse and 1, respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to delivery_isuse and 1, respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('delivery_isuse', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to delivery_isuse and 1, respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name email_addr and value 597219158@qq.com. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('email_addr','597219158@qq.com')", "description": "Inserts a new row into the zmkj_setting table with the name email_addr and value 597219158@qq.com.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name email_host and value smtp.qq.com. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('email_host','smtp.qq.com')", "description": "Inserts a new row into the zmkj_setting table with the name email_host and value smtp.qq.com.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "smtp.qq.com"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name email_host and value smtp.qq.com.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of email_host and a value of smtp.qq.com.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('email_host', 'smtp.qq.com');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name email_id and value 597219158@qq.com. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('email_id','597219158@qq.com')", "description": "Inserts a new row into the zmkj_setting table with the name email_id and value 597219158@qq.com.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name email_pass and value zhuyongemailpasswd. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('email_pass','zhuyongemailpasswd')", "description": "Inserts a new row into the zmkj_setting table with the name email_pass and value zhuyongemailpasswd.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name email_pass and value zhuyongemailpasswd.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table with the name email_pass and value zhuyongemailpasswd.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('email_pass', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name email_pass and value zhuyongemailpasswd.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name email_port and value 587. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('email_port','587')", "description": "Inserts a new row into the zmkj_setting table with the name email_port and value 587.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name email_port and value 587.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of email_port and a value of 587.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('email_port', 587);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: email_port\n  \u2022 value: 587\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name email_type and value 1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('email_type','1')", "description": "Inserts a new row into the zmkj_setting table with the name email_type and value 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name email_type and value 1.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of email_type and a value of 1.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('email_type', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: email_type\n  \u2022 value: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to enabled_subdomain and NULL, respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('enabled_subdomain',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to enabled_subdomain and NULL, respectively.", "concepts": ["INSERT INTO", "VALUES", "enabled_subdomain", "NULL"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to enabled_subdomain and NULL, respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to enabled_subdomain and NULL, respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('enabled_subdomain', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to enabled_subdomain and NULL, respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the specified values. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('exppoints_rule','a:4:{s:9:\"exp_login\";s:1:\"5\";s:12:\"exp_comments\";s:2:\"10\";s:13:\"exp_orderrate\";s:1:\"1\";s:12:\"exp_ordermax\";s:3:\"500\";}')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the specified values.", "concepts": ["INSERT INTO", "VALUES", "a:4:{s:9:\"exp_login\";s:1:\"5\";s:12:\"exp_"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to flea_app_open and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('flea_app_open','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to flea_app_open and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "flea_app_open", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to flea_app_open and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to flea_app_open and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('flea_app_open', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to flea_app_open and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name flea_hot_search and the value \u7537\u88c5,\u624b\u673a,\u7b14\u8bb0\u672c,\u53e4\u8463,\u5962\u4f88\u54c1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('flea_hot_search','\u7537\u88c5,\u624b\u673a,\u7b14\u8bb0\u672c,\u53e4\u8463,\u5962\u4f88\u54c1')", "description": "Inserts a new row into the zmkj_setting table with the name flea_hot_search and the value \u7537\u88c5,\u624b\u673a,\u7b14\u8bb0\u672c,\u53e4\u8463,\u5962\u4f88\u54c1.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name flea_hot_search and the value \u7537\u88c5,\u624b\u673a,\u7b14\u8bb0\u672c,\u53e4\u8463,\u5962\u4f88\u54c1.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of flea_hot_search and a value of \u7537\u88c5,\u624b\u673a,\u7b14\u8bb0\u672c,\u53e4\u8463,\u5962\u4f88\u54c1.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('flea_hot_search', '\u7537\u88c5,\u624b\u673a,\u7b14\u8bb0\u672c,\u53e4\u8463,\u5962\u4f88\u54c1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: flea_hot_search\n  \u2022 value: \u7537\u88c5,\u624b\u673a,\u7b14\u8bb0\u672c,\u53e4\u8463,\u5962\u4f88\u54c1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name flea_isuse and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('flea_isuse',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name flea_isuse and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name flea_isuse and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of flea_isuse and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('flea_isuse', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: flea_isuse\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name groupbuy_allow and value 1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('groupbuy_allow','1')", "description": "Inserts a new row into the zmkj_setting table with the name groupbuy_allow and value 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name groupbuy_allow and value 1.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of groupbuy_allow and a value of 1.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('groupbuy_allow', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name groupbuy_price and value 10. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('groupbuy_price','10')", "description": "Inserts a new row into the zmkj_setting table with the name groupbuy_price and value 10.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name groupbuy_review_day and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('groupbuy_review_day',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name groupbuy_review_day and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name groupbuy_review_day and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of groupbuy_review_day and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('groupbuy_review_day', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: groupbuy_review_day\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to hot_search and \u6253\u5370\u673a,\u7852\u9f13,\u6295\u5f71\u4eea,\u7535\u8111\u8017\u6750 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('hot_search','\u6253\u5370\u673a,\u7852\u9f13,\u6295\u5f71\u4eea,\u7535\u8111\u8017\u6750')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to hot_search and \u6253\u5370\u673a,\u7852\u9f13,\u6295\u5f71\u4eea,\u7535\u8111\u8017\u6750 respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "hot_search", "\u6253\u5370\u673a", "\u7852\u9f13", "\u6295\u5f71"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to hot_search and \u6253\u5370\u673a,\u7852\u9f13,\u6295\u5f71\u4eea,\u7535\u8111\u8017\u6750 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have two columns: name and value. We want to set the name to hot_search and the value to \u6253\u5370\u673a,\u7852\u9f13,\u6295\u5f71\u4eea,\u7535\u8111\u8017\u6750.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('hot_search', '\u6253\u5370\u673a,\u7852\u9f13,\u6295\u5f71\u4eea,\u7535\u8111\u8017\u6750');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to hot_search and \u6253\u5370\u673a,\u7852\u9f13,\u6295\u5f71\u4eea,\u7535\u8111\u8017\u6750 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name icp_number and value \u5180ICP\u590718000172\u53f7-1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('icp_number','\u5180ICP\u590718000172\u53f7-1')", "description": "Inserts a new row into the zmkj_setting table with the name icp_number and value \u5180ICP\u590718000172\u53f7-1.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "icp_number", "\u5180ICP\u59071800"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name icp_number and value \u5180ICP\u590718000172\u53f7-1.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of icp_number and a value of \u5180ICP\u590718000172\u53f7-1.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('icp_number', '\u5180ICP\u590718000172\u53f7-1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: icp_number\n  \u2022 value: \u5180ICP\u590718000172\u53f7-1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to image_dir_type and 3 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('image_dir_type','3')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to image_dir_type and 3 respectively.", "concepts": ["INSERT INTO", "VALUES", "image_dir_type", "3"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to image_dir_type and 3 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to image_dir_type and 3 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('image_dir_type', 3);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to image_dir_type and 3 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to image_max_filesize and 2048 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('image_max_filesize','2048')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to image_max_filesize and 2048 respectively.", "concepts": ["INSERT INTO", "VALUES", "image_max_filesize", "2048"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to image_max_filesize and 2048 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to image_max_filesize and 2048 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('image_max_filesize', 2048);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to image_max_filesize and 2048 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to live_link1 and http://www.nrwspt.com respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_link1','http://www.nrwspt.com')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to live_link1 and http://www.nrwspt.com respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "live_link1", "http://www.nrwspt.com"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to live_link1 and http://www.nrwspt.com respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to live_link1 and http://www.nrwspt.com respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('live_link1', 'http://www.nrwspt.com');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to live_link1 and http://www.nrwspt.com respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to live_link2 and http://www.nrwspt.com respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_link2','http://www.nrwspt.com')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to live_link2 and http://www.nrwspt.com respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "live_link2", "http://www.nrwspt.com"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to live_link2 and http://www.nrwspt.com respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to live_link2 and http://www.nrwspt.com respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('live_link2', 'http://www.nrwspt.com');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to live_link2 and http://www.nrwspt.com respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name live_link3 and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_link3',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name live_link3 and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name live_link3 and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of live_link3 and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('live_link3', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: live_link3\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name live_link4 and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_link4',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name live_link4 and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to live_pic1 and 05706200321565424.jpg respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_pic1','05706200321565424.jpg')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to live_pic1 and 05706200321565424.jpg respectively.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to live_pic1 and 05706200321565424.jpg respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to live_pic1 and 05706200321565424.jpg respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('live_pic1', '05706200321565424.jpg');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to live_pic1 and 05706200321565424.jpg respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name live_pic2 and value 05706200321575623.png. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_pic2','05706200321575623.png')", "description": "Inserts a new row into the zmkj_setting table with the name live_pic2 and value 05706200321575623.png.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name live_pic2 and value 05706200321575623.png.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of live_pic2 and a value of 05706200321575623.png.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('live_pic2', '05706200321575623.png');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: live_pic2\n  \u2022 value: 05706200321575623.png\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to live_pic3 and 05705633502604321.png respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_pic3','05705633502604321.png')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to live_pic3 and 05705633502604321.png respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to live_pic3 and 05705633502604321.png respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to live_pic3 and 05705633502604321.png respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('live_pic3', '05705633502604321.png');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to live_pic3 and 05705633502604321.png respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name live_pic4 and value 05705633502609940.png. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('live_pic4','05705633502609940.png')", "description": "Inserts a new row into the zmkj_setting table with the name live_pic4 and value 05705633502609940.png.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name live_pic4 and value 05705633502609940.png.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of live_pic4 and a value of 05705633502609940.png.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('live_pic4', '05705633502609940.png');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: live_pic4\n  \u2022 value: 05705633502609940.png\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name login_pic and value a:4:{i:0;s:5:\"1.jpg\";i:1;s:5:\"2.jpg\";i:2;s:5:\"3.jpg\";i:3;s:5:\"4.jpg\";}. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('login_pic','a:4:{i:0;s:5:\"1.jpg\";i:1;s:5:\"2.jpg\";i:2;s:5:\"3.jpg\";i:3;s:5:\"4.jpg\";}')", "description": "Inserts a new row into the zmkj_setting table with the name login_pic and value a:4:{i:0;s:5:\"1.jpg\";i:1;s:5:\"2.jpg\";i:2;s:5:\"3.jpg\";i:3;s:5:\"4.jpg\";}.", "concepts": ["INSERT INTO", "VALUES", "a:4:{i:0;s:5:\"1.jpg\";i:1;s:5:\"2"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name malbum_max_sum and value 200. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('malbum_max_sum','200')", "description": "Inserts a new row into the zmkj_setting table with the name malbum_max_sum and value 200.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name malbum_max_sum and value 200.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of malbum_max_sum and a value of 200.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('malbum_max_sum', 200);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: malbum_max_sum\n  \u2022 value: 200\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to md5_key and 7280b25b97930c4b874bfd5ee61cb9de respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('md5_key','7280b25b97930c4b874bfd5ee61cb9de')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to md5_key and 7280b25b97930c4b874bfd5ee61cb9de respectively.", "concepts": ["INSERT INTO", "VALUES", "md5_key", "7280b25b97930c4b874"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to md5_key and 7280b25b97930c4b874bfd5ee61cb9de respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to md5_key and 7280b25b97930c4b874bfd5ee61cb9de respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('md5_key', '7280b25b97930c4b874bfd5ee61cb9de');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to md5_key and 7280b25b97930c4b874bfd5ee61cb9de respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name member_grade and value a:4:{i:0;a:3:{s:5:\"level\";i:0;s:10:\"level_name\";s:2:\"V0\";s:9:\"exppoints\";i:0;}i:1;a:3:{s:5:\"level\";i:1;s:10:\"level_name\";s: */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('member_grade','a:4:{i:0;a:3:{s:5:\"level\";i:0;s:10:\"level_name\";s:2:\"V0\";s:9:\"exppoints\";i:0;}i:1;a:3:{s:5:\"level\";i:1;s:10:\"level_name\";s:2:\"V1\";s:9:\"exppoints\";i:1000;}i:2;a:3:{s:5:\"level\";i:2;s:10:\"level_name\";s:2:\"V2\";s:9:\"exppoints\";i:10000;}i:3;a:3:{s:5:\"level\";i:3;s:10:\"level_name\";s:2:\"V3\";s:9:\"exppoints\";i:20000;}}')", "description": "Inserts a new row into the zmkj_setting table with the name member_grade and value a:4:{i:0;a:3:{s:5:\"level\";i:0;s:10:\"level_name\";s:2:\"V0\";s:9:\"exppoints\";i:0;}i:1;a:3:{s:5:\"level\";i:1;s:10:\"level_name\";s:", "concepts": ["INSERT INTO", "VALUES", "a:4:{i:0;a:3:{s:5:\"level\";i:0;s:1"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name member_logo and value 05205301444537007.png. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('member_logo','05205301444537007.png')", "description": "Inserts a new row into the zmkj_setting table with the name member_logo and value 05205301444537007.png.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name member_logo and value 05205301444537007.png.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of member_logo and a value of 05205301444537007.png.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('member_logo', '05205301444537007.png');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: member_logo\n  \u2022 value: 05205301444537007.png\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name mobile_apk and value NULL. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_apk',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name mobile_apk and value NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name mobile_apk and value NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of mobile_apk and a value of NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_apk', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: mobile_apk\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_apk_version and 3.0.2 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_apk_version','3.0.2')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_apk_version and 3.0.2 respectively.", "concepts": ["INSERT INTO", "VALUES", "mobile_apk_version", "3.0.2"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values mobile_apk_version and 3.0.2 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values mobile_apk_version and 3.0.2 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_apk_version', '3.0.2');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_apk_version and 3.0.2 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name mobile_ios and value NULL. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_ios',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name mobile_ios and value NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name mobile_ios and value NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table with the name mobile_ios and value NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_ios', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name mobile_ios and value NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to pointprod_isuse and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('pointprod_isuse','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to pointprod_isuse and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "pointprod_isuse", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to pointprod_isuse and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to pointprod_isuse and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('pointprod_isuse', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to pointprod_isuse and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to pointshop_isuse and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('pointshop_isuse','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to pointshop_isuse and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "pointshop_isuse", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to pointshop_isuse and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to pointshop_isuse and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('pointshop_isuse', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to pointshop_isuse and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to points_comments and 50 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('points_comments','50')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to points_comments and 50 respectively.", "concepts": ["INSERT INTO", "VALUES", "points_comments", "50"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to points_comments and 50 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to points_comments and 50 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('points_comments', 50);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to points_comments and 50 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values points_isuse and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('points_isuse','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values points_isuse and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "points_isuse", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values points_isuse and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values points_isuse and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('points_isuse', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values points_isuse and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to points_login and 30 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('points_login','30')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to points_login and 30 respectively.", "concepts": ["INSERT INTO", "VALUES", "points_login", "30"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to points_login and 30 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to points_login and 30 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('points_login', 30);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to points_login and 30 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to points_ordermax and 800 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('points_ordermax','800')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to points_ordermax and 800 respectively.", "concepts": ["INSERT INTO", "VALUES", "points_ordermax", "800"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to points_ordermax and 800 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to points_ordermax and 800 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('points_ordermax', 800);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to points_ordermax and 800 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values points_orderrate and 20 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('points_orderrate','20')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values points_orderrate and 20 respectively.", "concepts": ["INSERT INTO", "VALUES", "points_orderrate", "20"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values points_orderrate and 20 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values points_orderrate and 20 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('points_orderrate', 20);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values points_orderrate and 20 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_booth_goods_sum and 10 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('promotion_booth_goods_sum','10')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_booth_goods_sum and 10 respectively.", "concepts": ["INSERT INTO", "VALUES", "promotion_booth_goods_sum", "10"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to promotion_booth_goods_sum and 10 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to promotion_booth_goods_sum and 10 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('promotion_booth_goods_sum', 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to promotion_booth_goods_sum and 10 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_goods_sum and 5 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('promotion_bundling_goods_sum','5')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_goods_sum and 5 respectively.", "concepts": ["INSERT INTO", "VALUES", "promotion_bundling_goods_sum", "5"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_goods_sum and 5 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to promotion_bundling_goods_sum and 5 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('promotion_bundling_goods_sum', 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_goods_sum and 5 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_sum and 50 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('promotion_bundling_sum','50')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_sum and 50 respectively.", "concepts": ["INSERT INTO", "VALUES", "promotion_bundling_sum", "50"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_sum and 50 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to promotion_bundling_sum and 50 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('promotion_bundling_sum', 50);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to promotion_bundling_sum and 50 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_buyertimes_limit and 5 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('promotion_voucher_buyertimes_limit','5')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_buyertimes_limit and 5 respectively.", "concepts": ["INSERT INTO", "VALUES", "promotion_voucher_buyertimes_limit", "5"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_buyertimes_limit and 5 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to promotion_voucher_buyertimes_limit and 5 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('promotion_voucher_buyertimes_limit', 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_buyertimes_limit and 5 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_default_styleimg and default_voucher.jpg respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('promotion_voucher_default_styleimg','default_voucher.jpg')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_default_styleimg and default_voucher.jpg respectively.", "concepts": ["INSERT INTO", "VALUES", "promotion_voucher_default_styleimg", "default_voucher.jpg"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_default_styleimg and default_voucher.jpg respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to promotion_voucher_default_styleimg and default_voucher.jpg respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('promotion_voucher_default_styleimg', 'default_voucher.jpg');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_default_styleimg and default_voucher.jpg respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_storetimes_limit and 20 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('promotion_voucher_storetimes_limit','20')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_storetimes_limit and 20 respectively.", "concepts": ["INSERT INTO", "VALUES", "promotion_voucher_storetimes_limit", "20"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_storetimes_limit and 20 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to promotion_voucher_storetimes_limit and 20 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('promotion_voucher_storetimes_limit', 20);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to promotion_voucher_storetimes_limit and 20 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values qq_isuse and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('qq_isuse','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values qq_isuse and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "qq_isuse", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values qq_isuse and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values qq_isuse and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('qq_isuse', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values qq_isuse and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name share_qqweibo_appid and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('share_qqweibo_appid',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name share_qqweibo_appid and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name share_qqweibo_appid and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of share_qqweibo_appid and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('share_qqweibo_appid', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: share_qqweibo_appid\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name share_qqweibo_appkey and value NULL. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('share_qqweibo_appkey',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name share_qqweibo_appkey and value NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name share_qqweibo_isuse and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('share_qqweibo_isuse',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name share_qqweibo_isuse and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name share_qqweibo_isuse and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of share_qqweibo_isuse and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('share_qqweibo_isuse', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: share_qqweibo_isuse\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name share_sinaweibo_appcode and value NULL. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('share_sinaweibo_appcode',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name share_sinaweibo_appcode and value NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name share_sinaweibo_appcode and value NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of share_sinaweibo_appcode and a value of NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('share_sinaweibo_appcode', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: share_sinaweibo_appcode\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name sina_appcode and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('sina_appcode',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name sina_appcode and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name sina_appcode and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of sina_appcode and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value) VALUES ('sina_appcode', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: sina_appcode\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name sina_isuse and value 1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('sina_isuse','1')", "description": "Inserts a new row into the zmkj_setting table with the name sina_isuse and value 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name sina_wb_akey and value 2896038655. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('sina_wb_akey','2896038655')", "description": "Inserts a new row into the zmkj_setting table with the name sina_wb_akey and value 2896038655.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name sina_wb_akey and value 2896038655.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of sina_wb_akey and a value of 2896038655.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('sina_wb_akey', '2896038655');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: sina_wb_akey\n  \u2022 value: 2896038655\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name sina_wb_skey and value 0629725ec616b6cdb87f0964d985a39a. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('sina_wb_skey','0629725ec616b6cdb87f0964d985a39a')", "description": "Inserts a new row into the zmkj_setting table with the name sina_wb_skey and value 0629725ec616b6cdb87f0964d985a39a.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name sina_wb_skey and value 0629725ec616b6cdb87f0964d985a39a.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table with the name sina_wb_skey and value 0629725ec616b6cdb87f0964d985a39a.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('sina_wb_skey', '0629725ec616b6cdb87f0964d985a39a');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name sina_wb_skey and value 0629725ec616b6cdb87f0964d985a39a.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name site_bank_account and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_bank_account',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name site_bank_account and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name site_bank_account and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of site_bank_account and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('site_bank_account', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: site_bank_account\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name site_email and value 597219158@qq.com. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_email','597219158@qq.com')", "description": "Inserts a new row into the zmkj_setting table with the name site_email and value 597219158@qq.com.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name site_logo and value 05687220738354631.jpg. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_logo','05687220738354631.jpg')", "description": "Inserts a new row into the zmkj_setting table with the name site_logo and value 05687220738354631.jpg.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name site_logo and value 05687220738354631.jpg.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of site_logo and a value of 05687220738354631.jpg.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('site_logo', '05687220738354631.jpg');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: site_logo\n  \u2022 value: 05687220738354631.jpg\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name site_logowx and value 05686823873318657.jpg. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_logowx','05686823873318657.jpg')", "description": "Inserts a new row into the zmkj_setting table with the name site_logowx and value 05686823873318657.jpg.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values site_name and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_name','\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values site_name and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "site_name", "\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values site_name and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values site_name and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('site_name', '\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values site_name and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name site_status and value 1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_status','1')", "description": "Inserts a new row into the zmkj_setting table with the name site_status and value 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name site_status and value 1.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of site_status and a value of 1.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('site_status', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: site_status\n  \u2022 value: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name site_tel400 and value 0311-66563684. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_tel400','0311-66563684')", "description": "Inserts a new row into the zmkj_setting table with the name site_tel400 and value 0311-66563684.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name site_tel400 and value 0311-66563684.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table with the name site_tel400 and value 0311-66563684.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('site_tel400', '0311-66563684');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name site_tel400 and value 0311-66563684.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to statistics_code and NULL, respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('statistics_code',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to statistics_code and NULL, respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "NULL"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to statistics_code and NULL, respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to statistics_code and NULL, respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('statistics_code', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to statistics_code and NULL, respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name stat_orderpricerange and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('stat_orderpricerange',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name stat_orderpricerange and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name stat_orderpricerange and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of stat_orderpricerange and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('stat_orderpricerange', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: stat_orderpricerange\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name stat_pricerange and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('stat_pricerange',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name stat_pricerange and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name stat_pricerange and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of stat_pricerange and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('stat_pricerange', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: stat_pricerange\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values 'subdomain_reserved' and 'www', respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('subdomain_reserved','www')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values 'subdomain_reserved' and 'www', respectively.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values 'subdomain_reserved' and 'www', respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values 'subdomain_reserved' and 'www', respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('subdomain_reserved', 'www');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values 'subdomain_reserved' and 'www', respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name time_zone and value Asia/Shanghai. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('time_zone','Asia/Shanghai')", "description": "Inserts a new row into the zmkj_setting table with the name time_zone and value Asia/Shanghai.", "concepts": ["INSERT INTO", "VALUES", "time_zone", "value", "Asia/Shanghai"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name time_zone and value Asia/Shanghai.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table with the name time_zone and value Asia/Shanghai.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('time_zone', 'Asia/Shanghai');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name time_zone and value Asia/Shanghai.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name voucher_allow and value 1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('voucher_allow','1')", "description": "Inserts a new row into the zmkj_setting table with the name voucher_allow and value 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name voucher_allow and value 1.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of voucher_allow and a value of 1.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('voucher_allow', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: voucher_allow\n  \u2022 value: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_host_type and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_host_type','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_host_type and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "mobile_host_type", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to mobile_host_type and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to mobile_host_type and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_host_type', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to mobile_host_type and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_host and \u77ed\u4fe1\u5b9d respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_host','\u77ed\u4fe1\u5b9d')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_host and \u77ed\u4fe1\u5b9d respectively.", "concepts": ["INSERT INTO", "VALUES", "mobile_host", "\u77ed\u4fe1\u5b9d"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values mobile_host and \u77ed\u4fe1\u5b9d respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values mobile_host and \u77ed\u4fe1\u5b9d respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_host', '\u77ed\u4fe1\u5b9d');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_host and \u77ed\u4fe1\u5b9d respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values hebeinr and mobile_username respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_username','hebeinr')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values hebeinr and mobile_username respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "hebeinr"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values hebeinr and mobile_username respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values hebeinr and mobile_username respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('hebeinr', 'mobile_username');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values hebeinr and mobile_username respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_pwd and admin123 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_pwd','admin123')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_pwd and admin123 respectively.", "concepts": ["INSERT INTO", "VALUES", "mobile_pwd", "admin123"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to mobile_pwd and admin123 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to mobile_pwd and admin123 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_pwd', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to mobile_pwd and admin123 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_signature and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_signature','\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_signature and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.", "concepts": ["INSERT INTO", "VALUES", "mobile_signature", "\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values mobile_signature and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values mobile_signature and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_signature', '\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values mobile_signature and \u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_key and NULL respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_key',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_key and NULL respectively.", "concepts": ["INSERT INTO", "VALUES", "mobile_key", "NULL"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to mobile_key and NULL respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name column set to mobile_key and the value column set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_key', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name column set to mobile_key and the value column set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_memo and NULL respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('mobile_memo',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to mobile_memo and NULL respectively.", "concepts": ["INSERT INTO", "VALUES", "mobile_memo", "NULL"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to mobile_memo and NULL respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name column set to mobile_memo and the value column set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('mobile_memo', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name column set to mobile_memo and the value column set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name site_mobile_logo and value home_logo.png. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('site_mobile_logo','home_logo.png')", "description": "Inserts a new row into the zmkj_setting table with the name site_mobile_logo and value home_logo.png.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name site_mobile_logo and value home_logo.png.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of site_mobile_logo and a value of home_logo.png.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('site_mobile_logo', 'home_logo.png');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to cms_comment_flag and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('cms_comment_flag','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to cms_comment_flag and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "cms_comment_flag", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to cms_comment_flag and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to cms_comment_flag and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('cms_comment_flag', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to cms_comment_flag and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_description and cms_seo_description respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('cms_seo_description','\u8d44\u8baf,\u753b\u62a5')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_description and cms_seo_description respectively.", "concepts": ["INSERT INTO", "VALUES", "cms_seo_description", "cms_seo_description"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to cms_seo_description and cms_seo_description respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to cms_seo_description and cms_seo_description respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('cms_seo_description', 'cms_seo_description');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_description and cms_seo_description respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_keywords and '\u8d44\u8baf,\u753b\u62a5' respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('cms_seo_keywords','\u8d44\u8baf,\u753b\u62a5')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_keywords and '\u8d44\u8baf,\u753b\u62a5' respectively.", "concepts": ["INSERT INTO", "VALUES", "cms_seo_keywords", "\u8d44\u8baf", "\u753b\u62a5"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to cms_seo_keywords and '\u8d44\u8baf,\u753b\u62a5' respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to cms_seo_keywords and '\u8d44\u8baf,\u753b\u62a5' respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('cms_seo_keywords', '\u8d44\u8baf,\u753b\u62a5');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_keywords and '\u8d44\u8baf,\u753b\u62a5' respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_title and \u8d44\u8baf\u9891\u9053 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('cms_seo_title','\u8d44\u8baf\u9891\u9053')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_title and \u8d44\u8baf\u9891\u9053 respectively.", "concepts": ["INSERT INTO", "VALUES", "cms_seo_title", "\u8d44\u8baf\u9891\u9053"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to cms_seo_title and \u8d44\u8baf\u9891\u9053 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to cms_seo_title and \u8d44\u8baf\u9891\u9053 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('cms_seo_title', '\u8d44\u8baf\u9891\u9053');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to cms_seo_title and \u8d44\u8baf\u9891\u9053 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to cms_submit_flag and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('cms_submit_flag','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to cms_submit_flag and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "cms_submit_flag", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to cms_submit_flag and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to cms_submit_flag and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('cms_submit_flag', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to cms_submit_flag and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to cms_submit_verify_flag and 1 respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('cms_submit_verify_flag','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to cms_submit_verify_flag and 1 respectively.", "concepts": ["INSERT INTO", "VALUES", "cms_submit_verify_flag", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to cms_submit_verify_flag and 1 respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to cms_submit_verify_flag and 1 respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('cms_submit_verify_flag', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to cms_submit_verify_flag and 1 respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_contentleast and value 10. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_contentleast','10')", "description": "Inserts a new row into the zmkj_setting table with the name circle_contentleast and value 10.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_contentleast and value 10.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_contentleast and a value of 10.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_contentleast', 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_createsum and value 6. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_createsum','6')", "description": "Inserts a new row into the zmkj_setting table with the name circle_createsum and value 6.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_createsum and value 6.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_createsum and a value of 6.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_createsum', 6);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_exprelease and value 2. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_exprelease','2')", "description": "Inserts a new row into the zmkj_setting table with the name circle_exprelease and value 2.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_expreleasemax and value 10. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_expreleasemax','10')", "description": "Inserts a new row into the zmkj_setting table with the name circle_expreleasemax and value 10.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_expreleasemax and value 10.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_expreleasemax and a value of 10.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_expreleasemax', 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: circle_expreleasemax\n  \u2022 value: 10\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_expreplied and value 3. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_expreplied','3')", "description": "Inserts a new row into the zmkj_setting table with the name circle_expreplied and value 3.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_exprepliedmax and the value 1000. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_exprepliedmax','1000')", "description": "Inserts a new row into the zmkj_setting table with the name circle_exprepliedmax and the value 1000.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_exprepliedmax and the value 1000.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_exprepliedmax and a value of 1000.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_exprepliedmax', 1000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: circle_exprepliedmax\n  \u2022 value: 1000\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_expreply and value 1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_expreply','1')", "description": "Inserts a new row into the zmkj_setting table with the name circle_expreply and value 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to circle_intervaltime and 1, respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_intervaltime','1')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to circle_intervaltime and 1, respectively.", "concepts": ["INSERT INTO", "VALUES", "circle_intervaltime", "1"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to circle_intervaltime and 1, respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to circle_intervaltime and 1, respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_intervaltime', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to circle_intervaltime and 1, respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_iscreate and value NULL. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_iscreate',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name circle_iscreate and value NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_iscreate and value NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_iscreate and a value of NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_iscreate', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: circle_iscreate\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_istalk and value 1. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_istalk','1')", "description": "Inserts a new row into the zmkj_setting table with the name circle_istalk and value 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_istalk and value 1.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_istalk and a value of 1.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_istalk', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: circle_istalk\n  \u2022 value: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_joinsum and value 12. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_joinsum','12')", "description": "Inserts a new row into the zmkj_setting table with the name circle_joinsum and value 12.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_logo and value 05202752850116579.png. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_logo','05202752850116579.png')", "description": "Inserts a new row into the zmkj_setting table with the name circle_logo and value 05202752850116579.png.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_logo and value 05202752850116579.png.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_logo and a value of 05202752850116579.png.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_logo', '05202752850116579.png');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: circle_logo\n  \u2022 value: 05202752850116579.png\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_managesum and value 4. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_managesum','4')", "description": "Inserts a new row into the zmkj_setting table with the name circle_managesum and value 4.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_managesum and value 4.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_managesum and a value of 4.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_managesum', 4);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: circle_managesum\n  \u2022 value: 4\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to the values circle_name and \u8bba\u575b respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_name','\u8bba\u575b')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to the values circle_name and \u8bba\u575b respectively.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value", "circle_name", "\u8bba\u575b"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to the values circle_name and \u8bba\u575b respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to the values circle_name and \u8bba\u575b respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('circle_name', '\u8bba\u575b');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to the values circle_name and \u8bba\u575b respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name circle_wordfilter and a null value. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('circle_wordfilter',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name circle_wordfilter and a null value.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name circle_wordfilter and a null value.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of circle_wordfilter and a null value.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name) VALUES ('circle_wordfilter');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: circle_wordfilter\n  \u2022 value: null\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to microshop_goods_default_class and NULL, respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('microshop_goods_default_class',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to microshop_goods_default_class and NULL, respectively.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to microshop_goods_default_class and NULL, respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name column set to microshop_goods_default_class and the value column set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('microshop_goods_default_class', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name microshop_header_pic and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('microshop_header_pic',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name microshop_header_pic and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name microshop_header_pic and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of microshop_header_pic and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('microshop_header_pic', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: microshop_header_pic\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to microshop_logo and NULL, respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('microshop_logo',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to microshop_logo and NULL, respectively.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to microshop_logo and NULL, respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to microshop_logo and NULL, respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('microshop_logo', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to microshop_logo and NULL, respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name microshop_seo_description and value NULL. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('microshop_seo_description',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name microshop_seo_description and value NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name microshop_seo_description and value NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of microshop_seo_description and a value of NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('microshop_seo_description', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: microshop_seo_description\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name microshop_seo_keywords and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('microshop_seo_keywords',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name microshop_seo_keywords and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name microshop_seo_keywords and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of microshop_seo_keywords and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('microshop_seo_keywords', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: microshop_seo_keywords\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name microshop_store_banner and a null value for the value column. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('microshop_store_banner',NULL)", "description": "Inserts a new row into the zmkj_setting table with the name microshop_store_banner and a null value for the value column.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name microshop_store_banner and a null value for the value column.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have a name of microshop_store_banner and a null value for the value column.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('microshop_store_banner', NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with:\n  \u2022 name: microshop_store_banner\n  \u2022 value: NULL\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to microshop_style and default respectively. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('microshop_style','default')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to microshop_style and default respectively.", "concepts": ["INSERT INTO", "VALUES", "microshop_style", "default"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to microshop_style and default respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to microshop_style and default respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('microshop_style', 'default');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to microshop_style and default respectively.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name smcost and value 0.01. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('smcost','0.01')", "description": "Inserts a new row into the zmkj_setting table with the name smcost and value 0.01.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name kuaibao and value \u6b22\u8fce\u6765\u5230\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0~. */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('kuaibao','\u6b22\u8fce\u6765\u5230\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0~')", "description": "Inserts a new row into the zmkj_setting table with the name kuaibao and value \u6b22\u8fce\u6765\u5230\u8bfa\u878d\u7f51\u4e0a\u5e73\u53f0~.", "concepts": ["INSERT INTO", "VALUES", "zmkj_setting", "name", "value"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_setting table with the name and value columns set to txsm and \u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01 */\nINSERT INTO `zmkj_setting` (`name`,`value`) VALUES('txsm','\u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01\n\u7ef4\u4fee\u8d39\u7528\u8bf7\u4e8e\u6bcf\u5468\u4e8c\u8fdb\u884c\u63d0\u73b0\u7533\u8bf7\uff01\n\u5de5\u4f5c\u4eba\u5458\u5c06\u57287\u4e2a\u5de5\u4f5c\u65e5\u5185\u8fdb\u884c\u6253\u6b3e\uff01\n\u611f\u8c22\u60a8\u4e00\u76f4\u5bf9\u529e\u5de5\u5e08\u7684\u652f\u6301\uff01')", "description": "Inserts a new row into the zmkj_setting table with the name and value columns set to txsm and \u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01", "concepts": ["INSERT INTO", "VALUES", "txsm", "\u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01"], "instruction": "Write a SQL query to insert a new row into the zmkj_setting table with the name and value columns set to txsm and \u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_setting table. It should have the name and value columns set to txsm and \u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01\n\n-- Solution:\n```sql\nINSERT INTO zmkj_setting (name, value)\nVALUES ('txsm', '\u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_setting table with the name and value columns set to txsm and \u656c\u7231\u7684\u7ef4\u4fee\u5e08\u5085\uff0c\u60a8\u597d\uff01\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_setting;"}
{"seed": "/* Inserts a new row into the zmkj_sms_log table with the specified values. */\nINSERT INTO `zmkj_sms_log` (`log_id`,`log_phone`,`log_captcha`,`log_ip`,`log_msg`,`log_type`,`add_time`,`member_id`,`member_name`) VALUES('1','18031310342','123117','219.142.186.99','\u3010\u529e\u5de5\u5e08\u3011\u60a8\u4e8e2016-07-05\u7533\u8bf7\u6ce8\u518c\u4f1a\u5458\uff0c\u52a8\u6001\u7801\uff1a123117\u3002','1','1467697469',NULL,NULL)", "description": "Inserts a new row into the zmkj_sms_log table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_sms_log", "log_id", "log_phone", "log_captcha", "log_ip", "log"], "instruction": "Write a SQL query to insert a new row into the zmkj_sms_log table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_sms_log table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sms_log (\n  id,\n  phone,\n  content,\n  status,\n  create_time\n) VALUES (\n  1,\n  '13800138000',\n  'This is a test message',\n  0,\n  '2020-01-01 12:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_sms_log table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_sms_log;"}
{"seed": "/* Inserts a new row into the zmkj_sns_albumclass table with the given values. */\nINSERT INTO `zmkj_sns_albumclass` (`ac_id`,`ac_name`,`member_id`,`ac_des`,`ac_sort`,`ac_cover`,`upload_time`,`is_default`) VALUES('1','\u4e70\u5bb6\u79c0','2','\u4e70\u5bb6\u79c0\u9ed8\u8ba4\u76f8\u518c','1','','1460945605','1')", "description": "Inserts a new row into the zmkj_sns_albumclass table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_sns_albumclass table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_sns_albumclass table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sns_albumclass (albumclass_id, albumclass_name, albumclass_desc, albumclass_order, albumclass_status)\nVALUES (1, 'test', 'test', 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_sns_albumclass table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_sns_albumclass;"}
{"seed": "/* Inserts a new row into the zmkj_sns_albumpic table with the given values. */\nINSERT INTO `zmkj_sns_albumpic` (`ap_id`,`ap_name`,`ac_id`,`ap_cover`,`ap_size`,`ap_spec`,`member_id`,`upload_time`,`ap_type`,`item_id`) VALUES('1','111','5','2016/11/4_05316814021772168.jpg','879394','1024x768','4','1478337402','0','0')", "description": "Inserts a new row into the zmkj_sns_albumpic table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_sns_albumpic table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_sns_albumpic table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sns_albumpic (album_id, pic_id, pic_url, pic_desc, pic_order)\nVALUES (1, 1, 'https://pic.com/1.jpg', 'pic1', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_sns_albumpic table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_sns_albumpic;"}
{"seed": "/* Inserts a new row into the zmkj_sns_albumpic table with the specified values. */\nINSERT INTO `zmkj_sns_albumpic` (`ap_id`,`ap_name`,`ac_id`,`ap_cover`,`ap_size`,`ap_spec`,`member_id`,`upload_time`,`ap_type`,`item_id`) VALUES('3','Desert','5','2016/11/4_05316814089669948.jpg','845941','1024x768','4','1478337409','0','0')", "description": "Inserts a new row into the zmkj_sns_albumpic table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_sns_albumpic table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_sns_albumpic table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sns_albumpic (album_id, pic_id, pic_url, pic_desc, pic_order, pic_status, pic_create_time, pic_update_time)\nVALUES (1, 1, 'http://www.example.com/pic1.jpg', 'pic1', 1, 1, '2018-01-01 00:00:00', '2018-01-01 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_sns_albumpic table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_sns_albumpic;"}
{"seed": "/* Inserts a new row into the zmkj_sns_goods table with the given values. */\nINSERT INTO `zmkj_sns_goods` (`snsgoods_goodsid`,`snsgoods_goodsname`,`snsgoods_goodsimage`,`snsgoods_goodsprice`,`snsgoods_storeid`,`snsgoods_storename`,`snsgoods_addtime`,`snsgoods_likenum`,`snsgoods_likemember`,`snsgoods_sharenum`) VALUES('100213','\u5357\u5929PR2E\u5e73\u63a824\u9488A4\u9488\u5f0f\u6253\u5370\u673a\u51fa\u5e93\u5355\u7a0e\u63a7\u7968\u636e\u8fde\u6253\u5feb\u9012\u5355\u6253\u5370\u673a','2016/11/14_05319994473173971.jpg','380.00','14','\u6cb3\u5357\u8d62\u5728\u4ec1\u95f4','1479274410','0',NULL,'1')", "description": "Inserts a new row into the zmkj_sns_goods table with the given values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_sns_goods", "snsgoods_goodsid", "snsgoods_goodsname", "snsgoods_goodsimage"], "instruction": "Write a SQL query to insert a new row into the zmkj_sns_goods table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_sns_goods table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sns_goods (goods_id, goods_name, goods_price, goods_number, goods_img, goods_desc, goods_weight, goods_volume, goods_sn, goods_state, goods_sort, is_real, is_on_sale, is_alone_sale, is_shipping, is_return, is_check, is_hot, is_new, is_best, is_promote, is_special, is_group, is_top, is_delete, is_best_goods, is_new_goods, is_hot_goods, is_promote_goods, is_special_goods, is_all_goods, is_best_all, is_new_all, is_hot_all, is_promote_all, is_special_all, is_all_all, is_best_alone, is_new_alone, is_hot_alone, is_promote_alone, is_special_alone, is_all_alone, is_best_alone_sale, is_new_alone_sale, is_hot_alone_sale, is_promote_alone_sale, is_special_alone"}
{"seed": "/* Inserts a new row into the zmkj_sns_sharegoods table with the given values. */\nINSERT INTO `zmkj_sns_sharegoods` (`share_id`,`share_goodsid`,`share_memberid`,`share_membername`,`share_content`,`share_addtime`,`share_likeaddtime`,`share_privacy`,`share_commentcount`,`share_isshare`,`share_islike`) VALUES('1','100213','214','phone_15226070890','\u5206\u4eab\u4e86\u5546\u54c1','1479274410','0','0','0','1','0')", "description": "Inserts a new row into the zmkj_sns_sharegoods table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_sns_sharegoods table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_sns_sharegoods table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sns_sharegoods (\n  sharegoods_id,\n  sharegoods_name,\n  sharegoods_price,\n  sharegoods_num,\n  sharegoods_img,\n  sharegoods_desc,\n  sharegoods_addtime,\n  sharegoods_status,\n  sharegoods_sort,\n  sharegoods_is_hot,\n  sharegoods_is_new,\n  sharegoods_is_best,\n  sharegoods_is_recommend,\n  sharegoods_is_special,\n  sharegoods_is_promote,\n  sharegoods_is_groupbuy,\n  sharegoods_is_gift,\n  sharegoods_is_virtual,\n  sharegoods_is_presell,\n  sharegoods_is_virtual_card,\n  sharegoods_is_virtual_card_buy,\n  sharegoods_is_virtual_card_can_use,\n  sharegoods_is_virtual_card_can_give,\n  sharegoods_is_virtual_card_can_share,\n  sharegoods_is_virtual_card_can_return,\n  sharegoods_is_virtual_card_can_refund,\n  sharegoods_is_virtual_card_can_exchange,\n  sharegoods_is_virtual_"}
{"seed": "/* Inserts a new row into the zmkj_sns_tracelog table with the given values. */\nINSERT INTO `zmkj_sns_tracelog` (`trace_id`,`trace_originalid`,`trace_originalmemberid`,`trace_originalstate`,`trace_memberid`,`trace_membername`,`trace_memberavatar`,`trace_title`,`trace_content`,`trace_addtime`,`trace_state`,`trace_privacy`,`trace_commentcount`,`trace_copycount`,`trace_orgcommentcount`,`trace_orgcopycount`,`trace_from`) VALUES('1','0','0','0','214','phone_15226070890',NULL,'\u5206\u4eab\u4e86\u5546\u54c1','<div class=\"fd-media\">\n\t\t\t\t\t<div class=\"goodsimg\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100213\"><img src=\"http://www.nrwspt.com/data/upload/shop/store/goods/14/2016/11/14_05319994473173971_240.jpg\" onload=\"javascript:DrawImage(this,120,120);\" alt=\"\u5357\u5929PR2E\u5e73\u63a824\u9488A4\u9488\u5f0f\u6253\u5370\u673a\u51fa\u5e93\u5355\u7a0e\u63a7\u7968\u636e\u8fde\u6253\u5feb\u9012\u5355\u6253\u5370\u673a\"></a></div>\n\t\t\t\t\t<div class=\"goodsinfo\">\n\t\t\t\t\t\t<dl>\n\t\t\t\t\t\t\t<dt><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100213\">\u5357\u5929PR2E\u5e73\u63a824\u9488A4\u9488\u5f0f\u6253\u5370\u673a\u51fa\u5e93\u5355\u7a0e\u63a7\u7968\u636e\u8fde\u6253\u5feb\u9012\u5355\u6253\u5370\u673a</a></dt>\n\t\t\t\t\t\t\t<dd>\u4ef7&nbsp;&nbsp;\u683c\uff1a&yen;380.00</dd>\n\t\t\t\t\t\t\t<dd>\u8fd0&nbsp;&nbsp;\u8d39\uff1a&yen;0.00</dd>\n\t                  \t\t<dd nctype=\"collectbtn_100213\"><a href=\"javascript:void(0);\" onclick=\"javascript:collect_goods(''100213'',''succ'',''collectbtn_100213'');\">\u6536\u85cf\u8be5\u5b9d\u8d1d</a></dd>\n\t                  \t</dl>\n\t                  </div>\n\t             </div>','1479274410','0','0','0','0','0','0','1')", "description": "Inserts a new row into the zmkj_sns_tracelog table with the given values.", "concepts": ["INSERT INTO", "VALUES", "`zmkj_sns_tracelog`", "`trace_id`", "`trace_originalid`", "`trace_original"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new visitor record into the zmkj_sns_visitor table. */\nINSERT INTO `zmkj_sns_visitor` (`v_id`,`v_mid`,`v_mname`,`v_mavatar`,`v_ownermid`,`v_ownermname`,`v_ownermavatar`,`v_addtime`) VALUES('1','29','\u5982\u6b64\u661f\u8fb0\u5982\u6b64\u96ea\u706c\u4e36','avatar_29.jpg','4','aaaaaa',NULL,'1468318712')", "description": "Inserts a new visitor record into the zmkj_sns_visitor table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new visitor record into the zmkj_sns_visitor table.", "response": "-- Reasoning:\nWe need to insert a new visitor record into the zmkj_sns_visitor table.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sns_visitor (\n  visitor_id,\n  visitor_name,\n  visitor_email,\n  visitor_phone,\n  visitor_address,\n  visitor_city,\n  visitor_state,\n  visitor_zip,\n  visitor_country,\n  visitor_ip,\n  visitor_browser,\n  visitor_os,\n  visitor_date,\n  visitor_time\n) VALUES (\n  1,\n  '',\n  '',\n  '123-456-7890',\n  '123 Main St',\n  'New York',\n  'NY',\n  '10001',\n  'USA',\n  '127.0.0.1',\n  'Chrome',\n  'Windows',\n  '2019-01-01',\n  '12:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new visitor record into the zmkj_sns_visitor table.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM zmkj_sns_visitor;"}
{"seed": "/* Inserts a new row into the zmkj_sns_visitor table with the given values. */\nINSERT INTO `zmkj_sns_visitor` (`v_id`,`v_mid`,`v_mname`,`v_mavatar`,`v_ownermid`,`v_ownermname`,`v_ownermavatar`,`v_addtime`) VALUES('2','32','\u4f34\u6211\u256e\u5225\u7d46\u6211\u3002','avatar_32.jpg','4','aaaaaa',NULL,'1468895562')", "description": "Inserts a new row into the zmkj_sns_visitor table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_sns_visitor table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_sns_visitor table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_sns_visitor (\n  visitor_id,\n  visitor_name,\n  visitor_email,\n  visitor_phone,\n  visitor_address,\n  visitor_city,\n  visitor_state,\n  visitor_zip,\n  visitor_country,\n  visitor_notes,\n  visitor_date\n) VALUES (\n  1,\n  '',\n  '',\n  '123-456-7890',\n  '123 Main St',\n  'Anytown',\n  'CA',\n  '90210',\n  'USA',\n  'This is a note.',\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_sns_visitor table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_sns_visitor;"}
{"seed": "/* Inserts a new record into the zmkj_spec table with the specified values. */\nINSERT INTO `zmkj_spec` (`sp_id`,`sp_name`,`sp_sort`,`class_id`,`class_name`) VALUES('1','\u578b\u53f7','0','1674','\u788e\u7eb8\u673a')", "description": "Inserts a new record into the zmkj_spec table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_spec table with the specified values. */\nINSERT INTO `zmkj_spec` (`sp_id`,`sp_name`,`sp_sort`,`class_id`,`class_name`) VALUES('23','\u7528\u9014','1','1200','\u529e\u516c\u8bbe\u5907')", "description": "Inserts a new row into the zmkj_spec table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_spec_value table with the specified values. */\nINSERT INTO `zmkj_spec_value` (`sp_value_id`,`sp_value_name`,`sp_id`,`gc_id`,`store_id`,`sp_value_color`,`sp_value_sort`) VALUES('221','\u843d\u6708\u9ec4','1','15','1','#ffff00','1')", "description": "Inserts a new row into the zmkj_spec_value table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_spec_value", "sp_value_id", "sp_value_name", "sp_id", "gc"], "instruction": "Write a SQL query to insert a new row into the zmkj_spec_value table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_spec_value table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_spec_value (spec_id, value)\nVALUES (1, '1000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_spec_value table with the specified values:\n  \u2022 spec_id: 1\n  \u2022 value: 1000\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_spec_value;"}
{"seed": "/* Inserts a new record into the zmkj_spec_value table with the specified values. */\nINSERT INTO `zmkj_spec_value` (`sp_value_id`,`sp_value_name`,`sp_id`,`gc_id`,`store_id`,`sp_value_color`,`sp_value_sort`) VALUES('658','GK888T\u684c\u9762\u6253\u5370\u673a','43','1249','51',NULL,'0')", "description": "Inserts a new record into the zmkj_spec_value table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the zmkj_spec_value table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new record into the zmkj_spec_value table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_spec_value (spec_id, value)\nVALUES (1, '1000');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the zmkj_spec_value table with the specified values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM zmkj_spec_value;"}
{"seed": "/* Inserts a new row into the zmkj_store table with the given values. */\nINSERT INTO `zmkj_store` (`store_id`,`store_name`,`grade_id`,`member_id`,`member_name`,`seller_name`,`sc_id`,`store_company_name`,`province_id`,`area_info`,`store_address`,`store_zip`,`store_state`,`store_close_info`,`store_sort`,`store_time`,`store_end_time`,`store_label`,`store_banner`,`store_avatar`,`store_keywords`,`store_description`,`store_qq`,`store_ww`,`store_phone`,`store_zy`,`store_domain`,`store_domain_times`,`store_recommend`,`store_theme`,`store_credit`,`store_desccredit`,`store_servicecredit`,`store_deliverycredit`,`store_collect`,`store_slide`,`store_slide_url`,`store_stamp`,`store_printdesc`,`store_sales`,`store_presales`,`store_aftersales`,`store_workingtime`,`store_free_price`,`store_decoration_switch`,`store_decoration_only`,`store_decoration_image_count`,`live_store_name`,`live_store_address`,`live_store_tel`,`live_store_bus`,`is_own_shop`,`bind_all_gc`,`store_vrcode_prefix`,`store_baozh`,`store_baozhopen`,`store_baozhrmb`,`store_qtian`,`store_zhping`,`store_erxiaoshi`,`store_tuihuo`,`store_shiyong`,`store_shiti`,`store_xiaoxie`,`store_huodaofk`,`store_free_time`,`mb_title_img`,`mb_sliders`,`deliver_region`,`serviceid`,`store_amount`) VALUES('1','\u8bfa\u878d\u79d1\u6280','1','1','zhuimengkeji','zhukun','0','\u8bfa\u878d\u79d1\u6280','0','','','','1',NULL,'0','1458609926',NULL,'05223487042745113.png',NULL,'05223486935148513_sm.png','','\u8bfa\u878d\u79d1\u6280',NULL,NULL,NULL,NULL,NULL,NULL,'0','default','0','0','0','0','4',NULL,NULL,NULL,NULL,'0',NULL,NULL,NULL,'0.00','0','0','0',NULL,NULL,'0311-66563684',NULL,'1','1',NULL,NULL,NULL,'\u96f6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'KEFU147505499781511','0.36')", "description": "Inserts a new row into the zmkj_store table with the given values.", "concepts": ["INSERT INTO", "VALUES", "`zmkj_store`", "`store_id`", "`store_name`", "`grade_id`", "`member_"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the users table with the given values. */\nINSERT INTO `zmkj_store` (`store_id`,`store_name`,`grade_id`,`member_id`,`member_name`,`seller_name`,`sc_id`,`store_company_name`,`province_id`,`area_info`,`store_address`,`store_zip`,`store_state`,`store_close_info`,`store_sort`,`store_time`,`store_end_time`,`store_label`,`store_banner`,`store_avatar`,`store_keywords`,`store_description`,`store_qq`,`store_ww`,`store_phone`,`store_zy`,`store_domain`,`store_domain_times`,`store_recommend`,`store_theme`,`store_credit`,`store_desccredit`,`store_servicecredit`,`store_deliverycredit`,`store_collect`,`store_slide`,`store_slide_url`,`store_stamp`,`store_printdesc`,`store_sales`,`store_presales`,`store_aftersales`,`store_workingtime`,`store_free_price`,`store_decoration_switch`,`store_decoration_only`,`store_decoration_image_count`,`live_store_name`,`live_store_address`,`live_store_tel`,`live_store_bus`,`is_own_shop`,`bind_all_gc`,`store_vrcode_prefix`,`store_baozh`,`store_baozhopen`,`store_baozhrmb`,`store_qtian`,`store_zhping`,`store_erxiaoshi`,`store_tuihuo`,`store_shiyong`,`store_shiti`,`store_xiaoxie`,`store_huodaofk`,`store_free_time`,`mb_title_img`,`mb_sliders`,`deliver_region`,`serviceid`,`store_amount`) VALUES('9','\u534e\u6770\u5f97\u529b\u6587\u5177','3','180','\u534e\u6770\u7535\u8111  \u5f97\u529b\u529e\u516c\u7528\u54c1','huajie','8','\u534e\u6770\u5f97\u529b\u6587\u5177','0','\u6cb3\u5317 \u77f3\u5bb6\u5e84\u5e02 \u65b0\u534e\u533a','\u592a\u548c\u7535\u5b50\u57ce','','1',NULL,'0','1478402132','1541606399',NULL,NULL,NULL,'','',NULL,NULL,NULL,NULL,NULL,NULL,'0','default','0','0','0','0','0',NULL,NULL,NULL,NULL,'0',NULL,NULL,NULL,'0.00','0','0','0',NULL,NULL,NULL,NULL,'0','0',NULL,NULL,NULL,'\u96f6',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'KEFU147505499781511','0')", "description": "Inserts a new row into the users table with the given values.", "concepts": ["INSERT INTO", "VALUES", "`zmkj_store`", "`store_id`", "`store_name`", "`grade_id`", "`member_"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new record into the zmkj_store_bind_class table with the specified values. */\nINSERT INTO `zmkj_store_bind_class` (`bid`,`store_id`,`commis_rate`,`class_1`,`class_2`,`class_3`,`state`) VALUES('1','1',NULL,NULL,NULL,NULL,'1')", "description": "Inserts a new record into the zmkj_store_bind_class table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the zmkj_store_bind_class table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new record into the zmkj_store_bind_class table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_bind_class (store_id, class_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the zmkj_store_bind_class table with the specified values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM zmkj_store_bind_class;"}
{"seed": "/* Inserts a new row into the zmkj_store_bind_class table with the given values. */\nINSERT INTO `zmkj_store_bind_class` (`bid`,`store_id`,`commis_rate`,`class_1`,`class_2`,`class_3`,`state`) VALUES('23','7',NULL,NULL,NULL,NULL,'1')", "description": "Inserts a new row into the zmkj_store_bind_class table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_bind_class table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_bind_class table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_bind_class (store_id, class_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_bind_class table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_bind_class;"}
{"seed": "/* Inserts a new record into the zmkj_store_bind_class table with the given values. */\nINSERT INTO `zmkj_store_bind_class` (`bid`,`store_id`,`commis_rate`,`class_1`,`class_2`,`class_3`,`state`) VALUES('26','9','5','308','1071','1074','1')", "description": "Inserts a new record into the zmkj_store_bind_class table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_bind_class table with the specified values. */\nINSERT INTO `zmkj_store_bind_class` (`bid`,`store_id`,`commis_rate`,`class_1`,`class_2`,`class_3`,`state`) VALUES('323','55',NULL,'1150','1406','1407','1')", "description": "Inserts a new row into the zmkj_store_bind_class table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_bind_class table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_bind_class table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_bind_class (store_id, class_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_bind_class table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_bind_class;"}
{"seed": "/* Inserts a new row into the zmkj_store_class table with the given values. */\nINSERT INTO `zmkj_store_class` (`sc_id`,`sc_name`,`sc_bail`,`sc_sort`) VALUES('3','3C\u6570\u7801','0','2')", "description": "Inserts a new row into the zmkj_store_class table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_cost table with the given values. */\nINSERT INTO `zmkj_store_cost` (`cost_id`,`cost_store_id`,`cost_seller_id`,`cost_price`,`cost_remark`,`cost_state`,`cost_time`) VALUES('1','51','50','100','\u8d2d\u4e70\u62a2\u8d2d','0','1517190887')", "description": "Inserts a new row into the zmkj_store_cost table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_decoration table with the given values. */\nINSERT INTO `zmkj_store_decoration` (`decoration_id`,`decoration_name`,`store_id`,`decoration_setting`,`decoration_nav`,`decoration_banner`) VALUES('2','\u9ed8\u8ba4\u88c5\u4fee','11',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_decoration table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_decoration table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_decoration table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_decoration (store_id, decoration_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_decoration table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_decoration;"}
{"seed": "/* Inserts a new row into the zmkj_store_decoration_album table with the specified values. */\nINSERT INTO `zmkj_store_decoration_album` (`image_id`,`image_name`,`image_origin_name`,`image_width`,`image_height`,`image_size`,`store_id`,`upload_time`) VALUES('1','51_05701943819473979.jpg','\u5feb\u4e50','1000','200','175242','51','1516850381')", "description": "Inserts a new row into the zmkj_store_decoration_album table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_decoration_album table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_decoration_album table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_decoration_album (\n  store_id,\n  decoration_id,\n  decoration_name,\n  decoration_price,\n  decoration_image,\n  decoration_description,\n  decoration_status,\n  decoration_created_at,\n  decoration_updated_at\n) VALUES (\n  1,\n  1,\n  '',\n  100000,\n  'https://zmkj.com/images/decoration/1.jpg',\n  'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_decoration_album table"}
{"seed": "/* Inserts a new record into the zmkj_store_decoration_block table with the specified values. */\nINSERT INTO `zmkj_store_decoration_block` (`block_id`,`decoration_id`,`store_id`,`block_layout`,`block_content`,`block_module_type`,`block_full_width`,`block_sort`) VALUES('3','6','5','block_1',NULL,NULL,NULL,'3')", "description": "Inserts a new record into the zmkj_store_decoration_block table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the zmkj_store_decoration_block table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new record into the zmkj_store_decoration_block table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_decoration_block (\n  store_id,\n  decoration_id,\n  decoration_type,\n  decoration_name,\n  decoration_price,\n  decoration_image,\n  decoration_desc,\n  decoration_status,\n  decoration_sort,\n  decoration_create_time,\n  decoration_update_time\n) VALUES (\n  1,\n  1,\n  '1',\n  '1',\n  1,\n  '1',\n  '1',\n  1,\n  1,\n  1,\n  1\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the zmkj_store_decoration_block table with the specified values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM zmkj_store_decoration_block;"}
{"seed": "/* Inserts a new row into the zmkj_store_decoration_block table with the given values. */\nINSERT INTO `zmkj_store_decoration_block` (`block_id`,`decoration_id`,`store_id`,`block_layout`,`block_content`,`block_module_type`,`block_full_width`,`block_sort`) VALUES('13','14','52','block_1','a:1:{i:0;a:4:{s:8:\"goods_id\";s:6:\"100541\";s:10:\"goods_name\";s:100:\"\u4e9a\u90fd\u7a7a\u6c14\u52a0\u6e7f\u5668\u5c0f\u578b\u529e\u516c\u5ba4\u684c\u9762\u5927\u5bb9\u91cf\u9759\u97f3\u8ff7\u4f60\u52a0\u6e7fSZK-J262WIFI \u9ed1\u8272 SZK-J262WIF\";s:11:\"goods_price\";s:7:\"1399.00\";s:11:\"goods_image\";s:32:\"2018/01/52_05697589236731534.jpg\";}}','goods',NULL,'1')", "description": "Inserts a new row into the zmkj_store_decoration_block table with the given values.", "concepts": ["INSERT INTO", "VALUES", "block_id", "block_layout", "block_content", "block_module_type", "block_full_width", "block"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_decoration_block table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_decoration_block table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_decoration_block (\n  store_id,\n  decoration_id,\n  decoration_type,\n  decoration_name,\n  decoration_price,\n  decoration_image,\n  decoration_desc,\n  decoration_status,\n  decoration_sort,\n  decoration_create_time,\n  decoration_update_time\n)\nVALUES (\n  1,\n  1,\n  '1',\n  '1',\n  1,\n  '1',\n  '1',\n  1,\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_decoration_block table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_decoration_block;"}
{"seed": "/* Inserts a new block into the zmkj_store_decoration_block table with the given values. */\nINSERT INTO `zmkj_store_decoration_block` (`block_id`,`decoration_id`,`store_id`,`block_layout`,`block_content`,`block_module_type`,`block_full_width`,`block_sort`) VALUES('9','13','51','block_1','a:2:{s:6:\"height\";s:3:\"250\";s:6:\"images\";a:1:{i:0;a:2:{s:10:\"image_name\";s:24:\"51_05701951847595334.jpg\";s:10:\"image_link\";s:0:\"\";}}}','slide',NULL,'1')", "description": "Inserts a new block into the zmkj_store_decoration_block table with the given values.", "concepts": ["INSERT INTO", "VALUES", "block_id", "decoration_id", "store_id", "block_layout", "block_content", "block_module_type"], "instruction": "Write a SQL query to insert a new block into the zmkj_store_decoration_block table with the given values.", "response": "-- Reasoning:\nWe need to insert a new block into the zmkj_store_decoration_block table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_decoration_block (\n  block_id,\n  block_name,\n  block_type,\n  block_content,\n  block_status,\n  block_sort,\n  block_create_time,\n  block_update_time\n) VALUES (\n  1,\n  'test',\n  'test',\n  'test',\n  1,\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_decoration_block table with the given values.\n\n-- Tests:\n-- 1. Check new block appears\nSELECT * FROM zmkj_store_decoration_block;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id, express, pricerange, and orderpricerange columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('3',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id, express, pricerange, and orderpricerange columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id, express, pricerange, and orderpricerange columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have NULL values for the store_id, express, pricerange, and orderpricerange columns.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id, express, pricerange, orderpricerange)\n  VALUES (NULL, NULL, NULL, NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with NULL values for the store_id, express, pricerange, and orderpricerange columns.\n\n-- Tests:\n-- 1. Verify new row appears with NULL values\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 4 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('4',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 4 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 4 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 4 and all other columns should be NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (4);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 4 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 6 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('6',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 6 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 6 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 6 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (6);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 6 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 46 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('46',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 46 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id, express, pricerange, and orderpricerange columns set to 1, 29, NULL, and NULL, respectively. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('1','29',NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id, express, pricerange, and orderpricerange columns set to 1, 29, NULL, and NULL, respectively.", "concepts": ["INSERT INTO", "VALUES", "NULL"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id, express, pricerange, and orderpricerange columns set to 1, 29, NULL, and NULL, respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have the store_id, express, pricerange, and orderpricerange columns set to 1, 29, NULL, and NULL, respectively.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id, express, pricerange, orderpricerange)\nVALUES (1, 29, NULL, NULL);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 9 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('9',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 9 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 9 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 9 and all other columns should be NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (9);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 9 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 10 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('10',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 10 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 10 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 10 and all other columns should be NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (10);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with a store_id of 10 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 11 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('11',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 11 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 11 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 11 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (11);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with a store_id of 11 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 12 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('12',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 12 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 12 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 12 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (12);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 12 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 13 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('13',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 13 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 13 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 13 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (13);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with a store_id of 13 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 14 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('14',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 14 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 14 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 14 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (14);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 14 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 15 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('15',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 15 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 15 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 15 and all other columns should be NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (15);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 15 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 16 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('16',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 16 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 16 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 16 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (16);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with a store_id of 16 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 17 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('17',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 17 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 17 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 17 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (17);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with a store_id of 17 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 18 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('18',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 18 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 19 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('19',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 19 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 19 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 19 and all other columns should be NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (19);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 19 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 20 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('20',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 20 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 22 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('22',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 22 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 25 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('25',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 25 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 26 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('26',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 26 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 26 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 26 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (26);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 26 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 29 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('29',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 29 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 56 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('56',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 56 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 56 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 56 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (56);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 56 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 45 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('45',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 45 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 42 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('42',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 42 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 42 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 42 and all other columns should be NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (42);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 42 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 47 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('47',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 47 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 48 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('48',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 48 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 55 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('55',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 55 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the specified values. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('51','7,29,40,41,44,8,28,42',NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id, store_name, store_address, store_tel, store_time, store_logo, store_banner, store_sort, store_state, store_close_info, store_close_start_time, store_close_end_time, store_close_reason, store_close_reason_explain, store_close_reason_pic, store_close_reason_pic_explain, store_close_reason_pic_explain_url, store_close_reason_pic_explain_url_explain, store_close_reason_pic_explain_url_explain_url, store_close_reason_pic_explain_url_explain_url_explain, store_close_reason_pic_explain_url_explain_url_explain_url, store_close_reason_pic_explain_url_explain_url_explain_url_explain, store_close_reason_pic_explain_url_explain_url_explain_url_explain_url, store_close_reason_pic_explain_url_explain_url_explain_url_explain_url_explain, store_close_reason_pic_explain_url_"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 52 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('52',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 52 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_extend table with the store_id set to 52 and all other columns set to NULL.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_extend table. It should have a store_id of 52 and all other columns set to NULL.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_extend (store_id) VALUES (52);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_extend table with the store_id set to 52 and all other columns set to NULL.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_extend;"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 53 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('53',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 53 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_extend table with the store_id set to 54 and all other columns set to NULL. */\nINSERT INTO `zmkj_store_extend` (`store_id`,`express`,`pricerange`,`orderpricerange`) VALUES('54',NULL,NULL,NULL)", "description": "Inserts a new row into the zmkj_store_extend table with the store_id set to 54 and all other columns set to NULL.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_goods_class table with the given values. */\nINSERT INTO `zmkj_store_goods_class` (`stc_id`,`stc_name`,`stc_parent_id`,`stc_state`,`store_id`,`stc_sort`) VALUES('1','\u529e\u516c\u8bbe\u5907','0','1','39','0')", "description": "Inserts a new row into the zmkj_store_goods_class table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_goods_class table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_goods_class table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_goods_class (\n  class_id,\n  parent_id,\n  class_name,\n  sort_order,\n  is_show,\n  class_type,\n  is_hot,\n  is_new,\n  is_best,\n  is_promote,\n  is_special,\n  is_group,\n  is_time,\n  is_all,\n  is_free,\n  is_vip,\n  is_bargain,\n  is_discount,\n  is_special_price,\n  is_special_time,\n  is_special_all,\n  is_special_free,\n  is_special_vip,\n  is_special_bargain,\n  is_special_discount,\n  is_special_special_price,\n  is_special_special_time,\n  is_special_special_all,\n  is_special_special_free,\n  is_special_special_vip,\n  is_special_special_bargain,\n  is_special_special_discount,\n  is_special_special_special_price,\n  is_special_special_special_time,\n  is_special_special_special_all,\n  is_special_special_special"}
{"seed": "/* Inserts a new row into the zmkj_store_grade table with the specified values. */\nINSERT INTO `zmkj_store_grade` (`sg_id`,`sg_name`,`sg_goods_limit`,`sg_album_limit`,`sg_space_limit`,`sg_template_number`,`sg_template`,`sg_price`,`sg_description`,`sg_function`,`sg_sort`) VALUES('1','\u7cfb\u7edf\u9ed8\u8ba4','200','500','100','6','default|style1|style2|style3|style4|style5','0.00','\u7528\u6237\u9009\u62e9\u201c\u9ed8\u8ba4\u7b49\u7ea7\u201d\uff0c\u53ef\u4ee5\u7acb\u5373\u5f00\u901a\u3002',NULL,'0')", "description": "Inserts a new row into the zmkj_store_grade table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO", "VALUES", "INTO"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_grade table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_grade table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_grade (store_id, grade)\nVALUES (1, 'A');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_grade table with the specified values:\n  \u2022 store_id: 1\n  \u2022 grade: A\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_grade;"}
{"seed": "/* Inserts a new row into the zmkj_store_joinin table with the given values. */\nINSERT INTO `zmkj_store_joinin` (`member_id`,`member_name`,`company_name`,`company_province_id`,`company_address`,`company_address_detail`,`company_phone`,`company_employee_count`,`company_registered_capital`,`contacts_name`,`contacts_phone`,`contacts_email`,`business_licence_number`,`business_licence_address`,`business_licence_start`,`business_licence_end`,`business_sphere`,`business_licence_number_electronic`,`organization_code`,`organization_code_electronic`,`general_taxpayer`,`bank_account_name`,`bank_account_number`,`bank_name`,`bank_code`,`bank_address`,`bank_licence_electronic`,`is_settlement_account`,`settlement_bank_account_name`,`settlement_bank_account_number`,`settlement_bank_name`,`settlement_bank_code`,`settlement_bank_address`,`tax_registration_certificate`,`taxpayer_id`,`tax_registration_certificate_electronic`,`seller_name`,`store_name`,`store_class_ids`,`store_class_names`,`joinin_state`,`joinin_message`,`joinin_year`,`sg_name`,`sg_id`,`sg_info`,`sc_name`,`sc_id`,`sc_bail`,`store_class_commis_rates`,`paying_money_certificate`,`paying_money_certificate_explain`,`paying_amount`,`serviceid`) VALUES('1','zhuimengkeji',NULL,'0',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'zhuimengkeji','\u8ffd\u68a6\u79d1\u6280\u5b98\u65b9\u65d7\u8230\u5e97',NULL,NULL,'40',NULL,'1',NULL,NULL,NULL,NULL,NULL,'0',NULL,NULL,NULL,'0.00',NULL)", "description": "Inserts a new row into the zmkj_store_joinin table with the given values.", "concepts": ["INSERT INTO", "VALUES", "`zmkj_store_joinin`", "`member_id`", "`member_name`", "`company_name`"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_joinin table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_joinin table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_joinin (store_id, joinin_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_joinin table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_joinin;"}
{"seed": "/* Inserts a new comment into the zmkj_store_sns_comment table. */\nINSERT INTO `zmkj_store_sns_comment` (`scomm_id`,`strace_id`,`scomm_content`,`scomm_memberid`,`scomm_membername`,`scomm_memberavatar`,`scomm_time`,`scomm_state`) VALUES('3','170','\u5475\u5475\u5475:biggrin:','262','\u8bfa\u878d\u79d1\u6280',NULL,'1517381727','1')", "description": "Inserts a new comment into the zmkj_store_sns_comment table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new comment into the zmkj_store_sns_comment table.", "response": "-- Reasoning:\nWe need to insert a new comment into the zmkj_store_sns_comment table.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_sns_comment (\n  comment_id,\n  comment_content,\n  comment_time,\n  comment_user_id,\n  comment_store_id,\n  comment_parent_id,\n  comment_status,\n  comment_type\n)\nVALUES (\n  1,\n  'This is a test comment',\n  '2020-01-01 00:00:00',\n  1,\n  1,\n  0,\n  1,\n  1\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new comment into the zmkj_store_sns_comment table.\n\n-- Tests:\n-- 1. Verify new comment appears\nSELECT * FROM zmkj_store_sns_comment;"}
{"seed": "/* Inserts a new row into the zmkj_store_sns_setting table with the given values. */\nINSERT INTO `zmkj_store_sns_setting` (`sauto_storeid`,`sauto_new`,`sauto_newtitle`,`sauto_coupon`,`sauto_coupontitle`,`sauto_xianshi`,`sauto_xianshititle`,`sauto_mansong`,`sauto_mansongtitle`,`sauto_bundling`,`sauto_bundlingtitle`,`sauto_groupbuy`,`sauto_groupbuytitle`) VALUES('51','1','','0','','0','','0','','0','','0','')", "description": "Inserts a new row into the zmkj_store_sns_setting table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_sns_setting table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_sns_setting table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_sns_setting (store_id, sns_type, sns_name, sns_url, sns_token, sns_secret, sns_status, sns_sort)\nVALUES (1, 'qq', 'QQ', 'https://graph.qq.com/oauth2.0/authorize', '101371200', 'e0fec840404040404040404040404040', 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_sns_setting table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_sns_setting;"}
{"seed": "/* Inserts a new row into the zmkj_store_sns_tracelog table with the given values. */\nINSERT INTO `zmkj_store_sns_tracelog` (`strace_id`,`strace_storeid`,`strace_storename`,`strace_storelogo`,`strace_title`,`strace_content`,`strace_time`,`strace_cool`,`strace_spread`,`strace_comment`,`strace_type`,`strace_goodsdata`,`strace_state`) VALUES('1','51','\u6cb3\u5317\u8bfa\u878d\u7f51\u7edc\u79d1\u6280\u6709\u9650\u516c\u53f8','','\u4eb2\uff0c\u6211\u5bb6\u53c8\u4e0a\u65b0\u5b9d\u8d1d\u4e86\u3002',NULL,'1516866815',NULL,NULL,NULL,'9','{\"goods_id\":\"100624\",\"store_id\":\"51\",\"goods_name\":\"\\\\u6591\\\\u9a6c  \\\\u6fc0\\\\u5149\\\\u6761\\\\u7801\\\\u626b\\\\u63cf\\\\u67aa\\\\u5feb\\\\u9012\\\\u6536\\\\u94f6\\\\u626b\\\\u7801\\\\u628a\\\\u67aa\\\\u5668 \\\\u767d\\\\u8272 LS2208\",\"goods_image\":\"2018\\\\/01\\\\/51_05702105804215394.jpg\",\"goods_price\":\"550.00\",\"goods_transfee_charge\":1,\"goods_freight\":\"0.00\"}','1')", "description": "Inserts a new row into the zmkj_store_sns_tracelog table with the given values.", "concepts": ["INSERT INTO", "VALUES", "`zmkj_store_sns_tracelog`", "`strace_id`", "`strace_storeid`"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_store_watermark table with the given values. */\nINSERT INTO `zmkj_store_watermark` (`wm_id`,`jpeg_quality`,`wm_image_name`,`wm_image_pos`,`wm_image_transition`,`wm_text`,`wm_text_size`,`wm_text_angle`,`wm_text_pos`,`wm_text_font`,`wm_text_color`,`wm_is_open`,`store_id`) VALUES('3','90',NULL,'1','20',NULL,'20','4','3','default','#CCCCCC','0','39')", "description": "Inserts a new row into the zmkj_store_watermark table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_store_watermark table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_store_watermark table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_store_watermark (store_id, watermark_id, created_at)\nVALUES (1, 1, '2020-01-01 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_store_watermark table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_store_watermark;"}
{"seed": "/* Inserts a new watermark into the zmkj_store_watermark table. */\nINSERT INTO `zmkj_store_watermark` (`wm_id`,`jpeg_quality`,`wm_image_name`,`wm_image_pos`,`wm_image_transition`,`wm_text`,`wm_text_size`,`wm_text_angle`,`wm_text_pos`,`wm_text_font`,`wm_text_color`,`wm_is_open`,`store_id`) VALUES('7','100','05700241049327032.png','5','20','\u65b0\u6c34\u5370','50','0','7','arial','#0c0c0c','0','52')", "description": "Inserts a new watermark into the zmkj_store_watermark table.", "concepts": ["INSERT INTO", "VALUES", "zmkj_store_watermark", "wm_id", "wm_image_name", "wm_image_pos", "wm"], "instruction": "Write a SQL query to insert a new watermark into the zmkj_store_watermark table.\n\nExample 2:\nSQL:\n```sql\n/* Return the total number of orders placed by each customer */\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id\nORDER BY total_orders DESC;\n```\nConcepts: [\"SELECT\", \"COUNT\", \"FROM\", \"GROUP BY\", \"ORDER BY\"]\nInstruction: Write a SQL query to list each customer's total orders from the orders table, grouped by customer, and sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to find the total number of orders placed by each customer.\n\n-- Solution:\n```sql\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id\nORDER BY total_orders DESC;\n```\n\n-- Explanation:\nThis query uses the COUNT function to count the number of orders for each customer. The GROUP BY clause groups the results by customer_id, and the ORDER BY clause sorts the results in descending order by total_orders.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT * FROM (\n  SELECT customer_id, COUNT(order_id) AS total_orders\n  FROM orders\n  GROUP BY customer_id\n  ORDER BY total_orders DESC\n)\nWHERE customer_id = 1;"}
{"seed": "/* Inserts a new row into the zmkj_type table with the specified values. */\nINSERT INTO `zmkj_type` (`type_id`,`type_name`,`type_sort`,`class_id`,`class_name`) VALUES('44','\u6295\u5f71\u4eea','3','1210','\u6295\u5f71\u673a/\u6295\u5f71\u4eea')", "description": "Inserts a new row into the zmkj_type table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_type table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_type table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_type (id, name)\nVALUES (1, 'A');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_type table with the specified values:\n  \u2022 id: 1\n  \u2022 name: A\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_type;"}
{"seed": "/* Inserts a new row into the zmkj_type_brand table with the type_id and brand_id values. */\nINSERT INTO `zmkj_type_brand` (`type_id`,`brand_id`) VALUES('43','366')", "description": "Inserts a new row into the zmkj_type_brand table with the type_id and brand_id values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_type_brand table with the type_id and brand_id values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_type_brand table with the type_id and brand_id values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_type_brand (type_id, brand_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_type_brand table with the type_id and brand_id values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_type_brand;"}
{"seed": "/* Inserts a new record into the zmkj_type_brand table with the type_id and brand_id values. */\nINSERT INTO `zmkj_type_brand` (`type_id`,`brand_id`) VALUES('43','367')", "description": "Inserts a new record into the zmkj_type_brand table with the type_id and brand_id values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the zmkj_type_brand table with the type_id and brand_id values.", "response": "-- Reasoning:\nWe need to insert a new record into the zmkj_type_brand table. It should have the type_id and brand_id values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_type_brand (type_id, brand_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the zmkj_type_brand table with the given type_id and brand_id values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM zmkj_type_brand;"}
{"seed": "/* Inserts a new row into the zmkj_type_spec table with the type_id and sp_id values. */\nINSERT INTO `zmkj_type_spec` (`type_id`,`sp_id`) VALUES('65','51')", "description": "Inserts a new row into the zmkj_type_spec table with the type_id and sp_id values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_type_spec table with the type_id and sp_id values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_type_spec table with the type_id and sp_id values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_type_spec (type_id, sp_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_type_spec table with the type_id and sp_id values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_type_spec;"}
{"seed": "/* Inserts a new voucher into the zmkj_voucher table with the given values. */\nINSERT INTO `zmkj_voucher` (`voucher_id`,`voucher_code`,`voucher_t_id`,`voucher_title`,`voucher_desc`,`voucher_start_date`,`voucher_end_date`,`voucher_price`,`voucher_limit`,`voucher_store_id`,`voucher_state`,`voucher_active_date`,`voucher_type`,`voucher_owner_id`,`voucher_owner_name`,`voucher_order_id`) VALUES('2','797010570635201266','6','333333333','3333333333','1517291201','1517328000','10','30.00','51','1','1517291201','0','266','\u535a\u4f1f',NULL)", "description": "Inserts a new voucher into the zmkj_voucher table with the given values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_voucher", "voucher_id", "voucher_code", "voucher_t_id", "voucher"], "instruction": "Write a SQL query to insert a new voucher into the zmkj_voucher table with the given values.", "response": "-- Reasoning:\nWe need to insert a new voucher into the zmkj_voucher table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_voucher (voucher_id, voucher_name, voucher_type, voucher_value, voucher_status)\nVALUES (1, 'Voucher 1', 'Cash', 100, 'Active');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new voucher into the zmkj_voucher table with the given values.\n\n-- Tests:\n-- 1. Verify new voucher appears in table\nSELECT * FROM zmkj_voucher;"}
{"seed": "/* Inserts a new row into the zmkj_voucher_price table with the specified values. */\nINSERT INTO `zmkj_voucher_price` (`voucher_price_id`,`voucher_price_describe`,`voucher_price`,`voucher_defaultpoints`) VALUES('4','\u54c8\u54c8\u54c8','10','10')", "description": "Inserts a new row into the zmkj_voucher_price table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the zmkj_voucher_quota table with the given values. */\nINSERT INTO `zmkj_voucher_quota` (`quota_id`,`quota_applyid`,`quota_memberid`,`quota_membername`,`quota_storeid`,`quota_storename`,`quota_starttime`,`quota_endtime`,`quota_state`) VALUES('1','0','262','\u8bfa\u878d\u79d1\u6280','51','\u6cb3\u5317\u8bfa\u878d\u7f51\u7edc\u79d1\u6280\u6709\u9650\u516c\u53f8','1517204009','1522388009','1')", "description": "Inserts a new row into the zmkj_voucher_quota table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_voucher_quota table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_voucher_quota table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_voucher_quota (\n  voucher_quota_id,\n  voucher_quota_name,\n  voucher_quota_value,\n  voucher_quota_type,\n  voucher_quota_status,\n  voucher_quota_create_time,\n  voucher_quota_update_time\n) VALUES (\n  1,\n  'test',\n  100,\n  '1',\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_voucher_quota table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_voucher_quota;"}
{"seed": "/* Inserts a new row into the zmkj_voucher_template table with the given values. */\nINSERT INTO `zmkj_voucher_template` (`voucher_t_id`,`voucher_t_title`,`voucher_t_desc`,`voucher_t_start_date`,`voucher_t_end_date`,`voucher_t_price`,`voucher_t_limit`,`voucher_t_store_id`,`voucher_t_storename`,`voucher_t_sc_id`,`voucher_t_creator_id`,`voucher_t_state`,`voucher_t_total`,`voucher_t_giveout`,`voucher_t_used`,`voucher_t_add_date`,`voucher_t_quotaid`,`voucher_t_points`,`voucher_t_eachlimit`,`voucher_t_styleimg`,`voucher_t_customimg`,`voucher_t_recommend`) VALUES('4','\u6d4b\u8bd5','1111111111111111111111111111','1517206038','1517328000','10','200.00','51','\u6cb3\u5317\u8bfa\u878d\u7f51\u7edc\u79d1\u6280\u6709\u9650\u516c\u53f8','11','262','2','1','1','0','1517206038','1','10','1',NULL,'05705500387038582.jpg','0')", "description": "Inserts a new row into the zmkj_voucher_template table with the given values.", "concepts": ["INSERT INTO", "VALUES", "`zmkj_voucher_template`", "`voucher_t_id`", "`voucher_t_title`", "`voucher"], "instruction": "Write a SQL query to insert a new row into the zmkj_voucher_template table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_voucher_template table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_voucher_template (\n  voucher_template_id,\n  voucher_template_name,\n  voucher_template_type,\n  voucher_template_desc,\n  voucher_template_status,\n  voucher_template_create_time,\n  voucher_template_update_time\n) VALUES (\n  1,\n  'test',\n  'test',\n  'test',\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_voucher_template table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_voucher_template;"}
{"seed": "/* Inserts a new row into the zmkj_vr_groupbuy_area table with the specified values. */\nINSERT INTO `zmkj_vr_groupbuy_area` (`area_id`,`area_name`,`parent_area_id`,`add_time`,`first_letter`,`area_number`,`post`,`hot_city`,`number`) VALUES('382','\u77f3\u5bb6\u5e84','0','1517273399','S',NULL,'0123','1','0')", "description": "Inserts a new row into the zmkj_vr_groupbuy_area table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_vr_groupbuy_area table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_vr_groupbuy_area table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_vr_groupbuy_area (area_id, area_name, area_parent_id, area_sort, area_deep, area_status, area_create_time, area_update_time)\nVALUES (1, '\u5317\u4eac', 0, 1, 1, 1, '2019-01-01 00:00:00', '2019-01-01 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_vr_groupbuy_area table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_vr_groupbuy_area;"}
{"seed": "/* Inserts a new row into the zmkj_vr_groupbuy_class table with the specified values. */\nINSERT INTO `zmkj_vr_groupbuy_class` (`class_id`,`class_name`,`parent_class_id`,`class_sort`) VALUES('101','1115','0','1')", "description": "Inserts a new row into the zmkj_vr_groupbuy_class table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the zmkj_vr_groupbuy_class table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_vr_groupbuy_class table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_vr_groupbuy_class (class_id, class_name, class_sort, class_show, class_show_name, class_show_sort, class_show_show, class_show_show_name, class_show_show_sort, class_show_show_show, class_show_show_show_name, class_show_show_show_sort, class_show_show_show_show, class_show_show_show_show_name, class_show_show_show_show_sort, class_show_show_show_show_show, class_show_show_show_show_show_name, class_show_show_show_show_show_sort, class_show_show_show_show_show_show, class_show_show_show_show_show_show_name, class_show_show_show_show_show_show_sort, class_show_show_show_show_show_show_show, class_show_show_show_show_show_show_show_name, class_show_show_show_show_show_show_show_"}
{"seed": "/* SQL: */\nINSERT INTO `zmkj_web` (`web_id`,`web_name`,`style_name`,`web_page`,`update_time`,`web_sort`,`web_show`,`web_html`) VALUES('121','\u9996\u9875\u4fc3\u9500\u533a','orange','index_sale','1517975990','120','1','\n    <ul class=\"tabs-nav\">\n                                            <li class=\"tabs-selected\"><i class=\"arrow\"></i><h3>\u65b0\u54c1\u4e0a\u67b6</h3></li>\n                          <li class=\"\"><i class=\"arrow\"></i><h3>\u70ed\u5356\u5546\u54c1</h3></li>\n                          <li class=\"\"><i class=\"arrow\"></i><h3>\u75af\u72c2\u62a2\u8d2d</h3></li>\n                          <li class=\"\"><i class=\"arrow\"></i><h3>\u731c\u60a8\u559c\u6b22</h3></li>\n                          <li class=\"\"><i class=\"arrow\"></i><h3>\u70ed\u8bc4\u5546\u54c1</h3></li>\n                                        </ul>\n                                                                                                <div class=\"tabs-panel sale-goods-list \">\n                                    <ul>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100624\" title=\"\u6591\u9a6c  \u6fc0\u5149\u6761\u7801\u626b\u63cf\u67aa\u5feb\u9012\u6536\u94f6\u626b\u7801\u628a\u67aa\u5668 \u767d\u8272 LS2208\">\n                                          \t\u6591\u9a6c  \u6fc0\u5149\u6761\u7801\u626b\u63cf\u67aa\u5feb\u9012\u6536\u94f6\u626b\u7801\u628a\u67aa\u5668 \u767d\u8272 LS2208</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100624\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05702105804215394_240.jpg\" alt=\"\u6591\u9a6c  \u6fc0\u5149\u6761\u7801\u626b\u63cf\u67aa\u5feb\u9012\u6536\u94f6\u626b\u7801\u628a\u67aa\u5668 \u767d\u8272 LS2208\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe5550.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100611\" title=\"\u5f97\u529b\u6709\u673a\u76f4\u5c3a30/60 1\u7c73\u957f\u5c3a\u5de5\u7a0b\u6d4b\u91cf\u5851\u6599\u5c3a \u900f\u660e \u5851\u6599 30cm\">\n                                          \t\u5f97\u529b\u6709\u673a\u76f4\u5c3a30/60 1\u7c73\u957f\u5c3a\u5de5\u7a0b\u6d4b\u91cf\u5851\u6599\u5c3a \u900f\u660e \u5851\u6599 30cm</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100611\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05701094765740986_240.jpg\" alt=\"\u5f97\u529b\u6709\u673a\u76f4\u5c3a30/60 1\u7c73\u957f\u5c3a\u5de5\u7a0b\u6d4b\u91cf\u5851\u6599\u5c3a \u900f\u660e \u5851\u6599 30cm\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe53.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100552\" title=\"\u5f97\u529b\u5851\u5c01\u673a3894/3893\u5bb6\u7528\u8fc7\u5851\u673a\u5c01\u5851\u673a\u8986\u819c\u673a\u538b\u819c\u8fc7\u80f6\u673a\">\n                                          \t\u5f97\u529b\u5851\u5c01\u673a3894/3893\u5bb6\u7528\u8fc7\u5851\u673a\u5c01\u5851\u673a\u8986\u819c\u673a\u538b\u819c\u8fc7\u80f6\u673a</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100552\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05697640094200474_240.jpg\" alt=\"\u5f97\u529b\u5851\u5c01\u673a3894/3893\u5bb6\u7528\u8fc7\u5851\u673a\u5c01\u5851\u673a\u8986\u819c\u673a\u538b\u819c\u8fc7\u80f6\u673a\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe5175.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100591\" title=\"\u5b9e\u6728/\u7ea4\u7ef4\u677f/\u76ae\u529e\u516c\u684c \u8001\u677f\u684c\u7ecf\u7406\u684c\u73af\u4fdd\u5927\u73ed\u53f0 2800*1200*760 \u7ea4\u7ef4\u677f\">\n                                          \t\u5b9e\u6728/\u7ea4\u7ef4\u677f/\u76ae\u529e\u516c\u684c \u8001\u677f\u684c\u7ecf\u7406\u684c\u73af\u4fdd\u5927\u73ed\u53f0 2800*1200*760 \u7ea4\u7ef4\u677f</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100591\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/53/2018/01/53_05700185274854447_240.jpg\" alt=\"\u5b9e\u6728/\u7ea4\u7ef4\u677f/\u76ae\u529e\u516c\u684c \u8001\u677f\u684c\u7ecf\u7406\u684c\u73af\u4fdd\u5927\u73ed\u53f0 2800*1200*760 \u7ea4\u7ef4\u677f\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe58500.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100650\" title=\"\u4e9a\u90fd \u7a7a\u6c14\u51c0\u5316\u5668 KJ1100G-P11DD \u667a\u80fd\u5bb6\u7528\u5546\u7528\u51c0\u5316\u5668 \u9664\u7532\u919b\u9664\u81ed\u6c27 \u9ed1\u8272 KJ1100G\">\n                                          \t\u4e9a\u90fd \u7a7a\u6c14\u51c0\u5316\u5668 KJ1100G-P11DD \u667a\u80fd\u5bb6\u7528\u5546\u7528\u51c0\u5316\u5668 \u9664\u7532\u919b\u9664\u81ed\u6c27 \u9ed1\u8272 KJ1100G</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100650\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05703605871845711_240.jpg\" alt=\"\u4e9a\u90fd \u7a7a\u6c14\u51c0\u5316\u5668 KJ1100G-P11DD \u667a\u80fd\u5bb6\u7528\u5546\u7528\u51c0\u5316\u5668 \u9664\u7532\u919b\u9664\u81ed\u6c27 \u9ed1\u8272 KJ1100G\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>1.88\u4e07</em></dd>\n                                        </dl>\n                                      </li>\n                                                                        </ul>\n                                  </div>\n                                                                                                        <div class=\"tabs-panel sale-goods-list tabs-hide\">\n                                    <ul>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100626\" title=\"\u6591\u9a6c\u6761\u7801\u673a \u6761\u7801\u6253\u5370\u673a\u4e0d\u5e72\u80f6\u6807\u7b7e\u673a\u5feb\u9012\u7535\u5b50\u9762\u5355\u70ed\u654f\u6253\u5370\u673a \u767d\u8272 GK888T\u684c\u9762\u6253\u5370\u673a\">\n                                          \t\u6591\u9a6c\u6761\u7801\u673a \u6761\u7801\u6253\u5370\u673a\u4e0d\u5e72\u80f6\u6807\u7b7e\u673a\u5feb\u9012\u7535\u5b50\u9762\u5355\u70ed\u654f\u6253\u5370\u673a \u767d\u8272 GK888T\u684c\u9762\u6253\u5370\u673a</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100626\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05702117832932043_240.jpg\" alt=\"\u6591\u9a6c\u6761\u7801\u673a \u6761\u7801\u6253\u5370\u673a\u4e0d\u5e72\u80f6\u6807\u7b7e\u673a\u5feb\u9012\u7535\u5b50\u9762\u5355\u70ed\u654f\u6253\u5370\u673a \u767d\u8272 GK888T\u684c\u9762\u6253\u5370\u673a\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe5960.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100174\" title=\"\u5f97\u529b3538\u4e09\u8054\u51fa\u5e93\u5355\u5165\u5e93\u5355\u9886\u6599\u5355\u65e0\u78b3\u590d\u5199\u5355\u636e\u529e\u516c\u8d22\u52a1\u4ed3\u5e93\u7ba1\u7406\u672c\">\n                                          \t\u5f97\u529b3538\u4e09\u8054\u51fa\u5e93\u5355\u5165\u5e93\u5355\u9886\u6599\u5355\u65e0\u78b3\u590d\u5199\u5355\u636e\u529e\u516c\u8d22\u52a1\u4ed3\u5e93\u7ba1\u7406\u672c</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100174\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/9/2016/11/9_05318636193182431_240.jpg\" alt=\"\u5f97\u529b3538\u4e09\u8054\u51fa\u5e93\u5355\u5165\u5e93\u5355\u9886\u6599\u5355\u65e0\u78b3\u590d\u5199\u5355\u636e\u529e\u516c\u8d22\u52a1\u4ed3\u5e93\u7ba1\u7406\u672c\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe51.50</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100554\" title=\"\u83b1\u76db\u5149\u6807 Laser \u7852\u9f13LSGB-XER-113R00730\">\n                                          \t\u83b1\u76db\u5149\u6807 Laser \u7852\u9f13LSGB-XER-113R00730</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100554\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05697729417763003_240.jpg\" alt=\"\u83b1\u76db\u5149\u6807 Laser \u7852\u9f13LSGB-XER-113R00730\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe5234.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100586\" title=\"\u4e1c\u829d2309A\u9ed1\u767d\u590d\u5370\u673a/\u6807\u914d\u7f51\u7edc\u6253\u5370/\u590d\u5370/\u5f69\u8272\u626b\u63cf\u6570\u7801\u590d\u5408\u673a \u767d\u8272 2309A\">\n                                          \t\u4e1c\u829d2309A\u9ed1\u767d\u590d\u5370\u673a/\u6807\u914d\u7f51\u7edc\u6253\u5370/\u590d\u5370/\u5f69\u8272\u626b\u63cf\u6570\u7801\u590d\u5408\u673a \u767d\u8272 2309A</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100586\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/42/2018/01/42_05699539547087779_240.jpeg\" alt=\"\u4e1c\u829d2309A\u9ed1\u767d\u590d\u5370\u673a/\u6807\u914d\u7f51\u7edc\u6253\u5370/\u590d\u5370/\u5f69\u8272\u626b\u63cf\u6570\u7801\u590d\u5408\u673a \u767d\u8272 2309A\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe57900.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100603\" title=\"\u5f97\u529b \u6765\u7535\u663e\u793a\u529e\u516c\u5bb6\u7528\u7535\u8bdd\u673a \u56fa\u5b9a\u7535\u8bdd \u5ea7\u673a \u6c34\u6676\u6309\u952e \u767d\u8272 \u767d\u8272\">\n                                          \t\u5f97\u529b \u6765\u7535\u663e\u793a\u529e\u516c\u5bb6\u7528\u7535\u8bdd\u673a \u56fa\u5b9a\u7535\u8bdd \u5ea7\u673a \u6c34\u6676\u6309\u952e \u767d\u8272 \u767d\u8272</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100603\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05701027985594172_240.jpg\" alt=\"\u5f97\u529b \u6765\u7535\u663e\u793a\u529e\u516c\u5bb6\u7528\u7535\u8bdd\u673a \u56fa\u5b9a\u7535\u8bdd \u5ea7\u673a \u6c34\u6676\u6309\u952e \u767d\u8272 \u767d\u8272\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe566.60</em></dd>\n                                        </dl>\n                                      </li>\n                                                                        </ul>\n                                  </div>\n                                                                                                        <div class=\"tabs-panel sale-goods-list tabs-hide\">\n                                    <ul>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100609\" title=\"\u5f97\u529b\u56de\u5f62\u9488\u51ed\u8bc1\u9488\u9501\u9488\u63d2\u7968\u56fa\u5b9a\u9488\u56de\u5f62\u533a\u522b\u9488\u51ed\u8bc1\u88c5\u8ba2\u9488 \u91d1\u5c5e\u8272 \u91d1\u5c5e\">\n                                          \t\u5f97\u529b\u56de\u5f62\u9488\u51ed\u8bc1\u9488\u9501\u9488\u63d2\u7968\u56fa\u5b9a\u9488\u56de\u5f62\u533a\u522b\u9488\u51ed\u8bc1\u88c5\u8ba2\u9488 \u91d1\u5c5e\u8272 \u91d1\u5c5e</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100609\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05701067833804143_240.jpg\" alt=\"\u5f97\u529b\u56de\u5f62\u9488\u51ed\u8bc1\u9488\u9501\u9488\u63d2\u7968\u56fa\u5b9a\u9488\u56de\u5f62\u533a\u522b\u9488\u51ed\u8bc1\u88c5\u8ba2\u9488 \u91d1\u5c5e\u8272 \u91d1\u5c5e\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe52.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100511\" title=\"\u6253\u7801\u673a\u6cb9\u58a8 \u81ea\u52a8\u53f7\u7801\u673a\u6cb9\u58a8\u5f97\u529b7521\u6807\u4ef7\u673a\u6cb9\u58a8 40ml \u6253\u4ef7\u673a\u6cb9\u58a8 40ml\">\n                                          \t\u6253\u7801\u673a\u6cb9\u58a8 \u81ea\u52a8\u53f7\u7801\u673a\u6cb9\u58a8\u5f97\u529b7521\u6807\u4ef7\u673a\u6cb9\u58a8 40ml \u6253\u4ef7\u673a\u6cb9\u58a8 40ml</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100511\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05696777052909393_240.png\" alt=\"\u6253\u7801\u673a\u6cb9\u58a8 \u81ea\u52a8\u53f7\u7801\u673a\u6cb9\u58a8\u5f97\u529b7521\u6807\u4ef7\u673a\u6cb9\u58a8 40ml \u6253\u4ef7\u673a\u6cb9\u58a8 40ml\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe55.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100578\" title=\"\u5f97\u529ba4\u6807\u738b\u590d\u5370\u7eb8\u53cc\u9762\u6253\u5370\u767d\u7eb870/80g\u529e\u516c\u6253\u5370\u7528\u7eb8 \u5f97\u529b A4 \u767d\">\n                                          \t\u5f97\u529ba4\u6807\u738b\u590d\u5370\u7eb8\u53cc\u9762\u6253\u5370\u767d\u7eb870/80g\u529e\u516c\u6253\u5370\u7528\u7eb8 \u5f97\u529b A4 \u767d</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100578\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/54/2018/01/54_05699438793750170_240.jpg\" alt=\"\u5f97\u529ba4\u6807\u738b\u590d\u5370\u7eb8\u53cc\u9762\u6253\u5370\u767d\u7eb870/80g\u529e\u516c\u6253\u5370\u7528\u7eb8 \u5f97\u529b A4 \u767d\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe5165.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100563\" title=\"\u5929\u7ae0\u4e50\u6d3bA4\u6253\u5370/\u590d\u5370\u7eb8/\u529e\u516c\u7528\u7eb8 \u590d\u5370\u7eb8 A4\">\n                                          \t\u5929\u7ae0\u4e50\u6d3bA4\u6253\u5370/\u590d\u5370\u7eb8/\u529e\u516c\u7528\u7eb8 \u590d\u5370\u7eb8 A4</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100563\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/54/2018/01/54_05699332304014434_240.jpg\" alt=\"\u5929\u7ae0\u4e50\u6d3bA4\u6253\u5370/\u590d\u5370\u7eb8/\u529e\u516c\u7528\u7eb8 \u590d\u5370\u7eb8 A4\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe5168.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100619\" title=\"\u5f97\u529b\u753b\u677f\u78c1\u94897824 \u767d\u677f\u78c1\u6263/\u5438\u94c1\u77f3/\u78c1\u7c92\u78c1\u529b\u529e\u516c\u751f\u6d3b\u7528\u54c1\u03c620mm\">\n                                          \t\u5f97\u529b\u753b\u677f\u78c1\u94897824 \u767d\u677f\u78c1\u6263/\u5438\u94c1\u77f3/\u78c1\u7c92\u78c1\u529b\u529e\u516c\u751f\u6d3b\u7528\u54c1\u03c620mm</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100619\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05701261033567375_240.png\" alt=\"\u5f97\u529b\u753b\u677f\u78c1\u94897824 \u767d\u677f\u78c1\u6263/\u5438\u94c1\u77f3/\u78c1\u7c92\u78c1\u529b\u529e\u516c\u751f\u6d3b\u7528\u54c1\u03c620mm\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe516.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                        </ul>\n                                  </div>\n                                                                                                        <div class=\"tabs-panel sale-goods-list tabs-hide\">\n                                    <ul>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100360\" title=\"\u5f97\u529b\u8ba1\u7b97\u5668837\u7ecf\u6d4e\u578b\u592a\u9633\u80fd\u53cc\u7535\u6e90\u5546\u52a1\u8d22\u52a1\u4e13\u7528\u529e\u516c\u7528\u54c1837ES\u5b66\u751f\">\n                                          \t\u5f97\u529b\u8ba1\u7b97\u5668837\u7ecf\u6d4e\u578b\u592a\u9633\u80fd\u53cc\u7535\u6e90\u5546\u52a1\u8d22\u52a1\u4e13\u7528\u529e\u516c\u7528\u54c1837ES\u5b66\u751f</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100360\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/25/2016/11/25_05326979384446126_240.jpg\" alt=\"\u5f97\u529b\u8ba1\u7b97\u5668837\u7ecf\u6d4e\u578b\u592a\u9633\u80fd\u53cc\u7535\u6e90\u5546\u52a1\u8d22\u52a1\u4e13\u7528\u529e\u516c\u7528\u54c1837ES\u5b66\u751f\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe59.90</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100530\" title=\"\u4e9a\u90fd\u7a7a\u6c14\u51c0\u5316\u5668B03\u884c\u4e1a\u91cc\u7684\u9f99\u5934 \u767d\u8272 B03\">\n                                          \t\u4e9a\u90fd\u7a7a\u6c14\u51c0\u5316\u5668B03\u884c\u4e1a\u91cc\u7684\u9f99\u5934 \u767d\u8272 B03</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100530\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/52/2018/01/52_05697546219869260_240.jpg\" alt=\"\u4e9a\u90fd\u7a7a\u6c14\u51c0\u5316\u5668B03\u884c\u4e1a\u91cc\u7684\u9f99\u5934 \u767d\u8272 B03\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe52999.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100554\" title=\"\u83b1\u76db\u5149\u6807 Laser \u7852\u9f13LSGB-XER-113R00730\">\n                                          \t\u83b1\u76db\u5149\u6807 Laser \u7852\u9f13LSGB-XER-113R00730</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100554\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05697729417763003_240.jpg\" alt=\"\u83b1\u76db\u5149\u6807 Laser \u7852\u9f13LSGB-XER-113R00730\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe5234.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100566\" title=\"\u5f69\u8272a4\u590d\u5370\u7eb8/\u624b\u5de5\u5f69\u8272\u7eb8/\u6253\u5370\u7eb8\u7c89\u7ea2\u5927\u7ea2\u5341\u8272\u6df7\u88c5 \u5f69\u8272 A4 \u7c89\">\n                                          \t\u5f69\u8272a4\u590d\u5370\u7eb8/\u624b\u5de5\u5f69\u8272\u7eb8/\u6253\u5370\u7eb8\u7c89\u7ea2\u5927\u7ea2\u5341\u8272\u6df7\u88c5 \u5f69\u8272 A4 \u7c89</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100566\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/54/2018/01/54_05699354445513656_240.jpg\" alt=\"\u5f69\u8272a4\u590d\u5370\u7eb8/\u624b\u5de5\u5f69\u8272\u7eb8/\u6253\u5370\u7eb8\u7c89\u7ea2\u5927\u7ea2\u5341\u8272\u6df7\u88c5 \u5f69\u8272 A4 \u7c89\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe520.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100493\" title=\"\u5f97\u529b\u4e2d\u6027\u7b140.5mm \u5b66\u751f\u529e\u516c\u6587\u5177\u8d70\u73e0\u7b14 \u76f4\u6db2\u5f0f\u78b3\u7d20\u7b7e\u5b57\u7b14\u6c34\u7b14S656 \u7ea2\u8272 12\u652f\">\n                                          \t\u5f97\u529b\u4e2d\u6027\u7b140.5mm \u5b66\u751f\u529e\u516c\u6587\u5177\u8d70\u73e0\u7b14 \u76f4\u6db2\u5f0f\u78b3\u7d20\u7b7e\u5b57\u7b14\u6c34\u7b14S656 \u7ea2\u8272 12\u652f</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100493\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05696690810274585_240.jpg\" alt=\"\u5f97\u529b\u4e2d\u6027\u7b140.5mm \u5b66\u751f\u529e\u516c\u6587\u5177\u8d70\u73e0\u7b14 \u76f4\u6db2\u5f0f\u78b3\u7d20\u7b7e\u5b57\u7b14\u6c34\u7b14S656 \u7ea2\u8272 12\u652f\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe515.60</em></dd>\n                                        </dl>\n                                      </li>\n                                                                        </ul>\n                                  </div>\n                                                                                                        <div class=\"tabs-panel sale-goods-list tabs-hide\">\n                                    <ul>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100531\" title=\"\u5f97\u529b\u6587\u4ef6\u76d2\u6863\u6848\u76d2\u6587\u4ef6\u6536\u7eb3\u76d2\u5b50\u5939\u5851\u6599\u5927\u8d44\u6599\u76d2\u529e\u516c\u7528\u54c1\u6279\u53d1\u725b\u76ae\u7eb8\">\n                                          \t\u5f97\u529b\u6587\u4ef6\u76d2\u6863\u6848\u76d2\u6587\u4ef6\u6536\u7eb3\u76d2\u5b50\u5939\u5851\u6599\u5927\u8d44\u6599\u76d2\u529e\u516c\u7528\u54c1\u6279\u53d1\u725b\u76ae\u7eb8</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100531\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05697562282098324_240.jpg\" alt=\"\u5f97\u529b\u6587\u4ef6\u76d2\u6863\u6848\u76d2\u6587\u4ef6\u6536\u7eb3\u76d2\u5b50\u5939\u5851\u6599\u5927\u8d44\u6599\u76d2\u529e\u516c\u7528\u54c1\u6279\u53d1\u725b\u76ae\u7eb8\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe53.90</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100545\" title=\"\u5229\u53d1\u7231\u5c14\u8f66\u8f7d\u51c0\u5316\u5668\u9ad8\u6548\u7248LAC50 \u9ed1\u8272 LAC50\">\n                                          \t\u5229\u53d1\u7231\u5c14\u8f66\u8f7d\u51c0\u5316\u5668\u9ad8\u6548\u7248LAC50 \u9ed1\u8272 LAC50</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100545\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/52/2018/01/52_05697605675098383_240.jpg\" alt=\"\u5229\u53d1\u7231\u5c14\u8f66\u8f7d\u51c0\u5316\u5668\u9ad8\u6548\u7248LAC50 \u9ed1\u8272 LAC50\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe51200.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100604\" title=\"\u5f97\u529b0576\u5377\u7b14\u5200 \u53cc\u5b54\u524a\u7b14\u5668 \u8ff7\u4f60\u8f6c\u7b14\u5200\u5b66\u4e60\u7528\u54c1\u94c5\u7b14\u5200 \u84dd\u8272 \u5851\u6599\">\n                                          \t\u5f97\u529b0576\u5377\u7b14\u5200 \u53cc\u5b54\u524a\u7b14\u5668 \u8ff7\u4f60\u8f6c\u7b14\u5200\u5b66\u4e60\u7528\u54c1\u94c5\u7b14\u5200 \u84dd\u8272 \u5851\u6599</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100604\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05701049097303314_240.jpg\" alt=\"\u5f97\u529b0576\u5377\u7b14\u5200 \u53cc\u5b54\u524a\u7b14\u5668 \u8ff7\u4f60\u8f6c\u7b14\u5200\u5b66\u4e60\u7528\u54c1\u94c5\u7b14\u5200 \u84dd\u8272 \u5851\u6599\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe58.80</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100608\" title=\"\u5f97\u529b 9052\u5f69\u8272\u767e\u4e8b\u8d34 \u8bb0\u4e8b\u8d34 \u5373\u65f6\u8d34 N\u6b21\u8d34 \u4fbf\u5229\u8d34 \u65b9\u5f62 \u7eb8+\u80f6\">\n                                          \t\u5f97\u529b 9052\u5f69\u8272\u767e\u4e8b\u8d34 \u8bb0\u4e8b\u8d34 \u5373\u65f6\u8d34 N\u6b21\u8d34 \u4fbf\u5229\u8d34 \u65b9\u5f62 \u7eb8+\u80f6</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100608\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05701054563051178_240.jpg\" alt=\"\u5f97\u529b 9052\u5f69\u8272\u767e\u4e8b\u8d34 \u8bb0\u4e8b\u8d34 \u5373\u65f6\u8d34 N\u6b21\u8d34 \u4fbf\u5229\u8d34 \u65b9\u5f62 \u7eb8+\u80f6\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe52.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                          <li>\n                                        <dl>\n                                          <dt class=\"goods-name\"><a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100627\" title=\"\u6591\u9a6c \u4e0d\u5e72\u80f6\u6807\u7b7e\u70ed\u654f\u6761\u7801\u6253\u5370\u673a\u7535\u5b50\u9762\u5355\u9ad8\u7cbe300dpi \u9ed1\u8272 GT800\">\n                                          \t\u6591\u9a6c \u4e0d\u5e72\u80f6\u6807\u7b7e\u70ed\u654f\u6761\u7801\u6253\u5370\u673a\u7535\u5b50\u9762\u5355\u9ad8\u7cbe300dpi \u9ed1\u8272 GT800</a></dt>\n                                          <dd class=\"goods-thumb\">\n                                          \t<a target=\"_blank\" href=\"http://www.nrwspt.com/shop/index.php?act=goods&op=index&goods_id=100627\">\n                                          \t<img src=\"http://www.nrwspt.com/data/upload/shop/common/loading.gif\" rel=\"lazy\" data-url=\"http://www.nrwspt.com/data/upload/shop/store/goods/51/2018/01/51_05702954897822808_240.jpg\" alt=\"\u6591\u9a6c \u4e0d\u5e72\u80f6\u6807\u7b7e\u70ed\u654f\u6761\u7801\u6253\u5370\u673a\u7535\u5b50\u9762\u5355\u9ad8\u7cbe300dpi \u9ed1\u8272 GT800\" />\n                                          \t</a></dd>\n                                          <dd class=\"goods-price\">\u5546\u57ce\u4ef7\uff1a<em>\uffe51300.00</em></dd>\n                                        </dl>\n                                      </li>\n                                                                        </ul>\n                                  </div>\n                                                              ')", "description": "SQL:", "concepts": ["```\nCREATE TABLE IF NOT EXISTS `zmkj_web` (\n  `web_id` int(11) NOT NULL AUTO_"], "instruction": "Write a SQL query to list each customer's total sales grouped by customer.\nConcepts: [\"SELECT\", \"SUM\", \"FROM\", \"GROUP BY\", \"ORDER BY\"]\nInstruction:\nWrite a SQL query to list each customer's total sales grouped by customer, sorted from highest to lowest.\nConcepts: [\"SELECT\", \"SUM\", \"FROM\", \"GROUP BY\", \"ORDER BY\"]\nInstruction:\nWrite a SQL query to list each customer's total sales grouped by customer, sorted from highest to lowest.\nConcepts: [\"SELECT\", \"SUM\", \"FROM\", \"GROUP BY\", \"ORDER BY\"]\nInstruction:\nWrite a SQL query to list each customer's total sales grouped by customer, sorted from highest", "response": "-- Reasoning:\nWe need to list each customer's total sales grouped by customer, sorted from highest to lowest.\n\n-- Solution:\n```sql\nSELECT customer, SUM(amount) AS total_sales\nFROM orders\nGROUP BY customer\nORDER BY total_sales DESC;\n```\n\n-- Explanation:\nThis query uses the SUM function to calculate the total sales for each customer. It then groups the results by customer and sorts them in descending order based on the total sales.\n\n-- Tests:\n-- 1. Verify correct output\nSELECT customer, SUM(amount) AS total_sales\nFROM orders\nGROUP BY customer\nORDER BY total_sales DESC;"}
{"seed": "/* Inserts a new row into the zmkj_web_code table with the specified values. */\nINSERT INTO `zmkj_web_code` (`code_id`,`web_id`,`code_type`,`var_name`,`code_info`,`show_name`) VALUES('11','1','array','tit','a:5:{s:3:\"pic\";s:28:\"shop/editor/web-1-11.png?926\";s:3:\"url\";s:0:\"\";s:4:\"type\";s:3:\"txt\";s:5:\"floor\";s:2:\"1F\";s:5:\"title\";s:12:\"\u529e\u516c\u8bbe\u5907\";}','\u6807\u9898\u56fe\u7247')", "description": "Inserts a new row into the zmkj_web_code table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "zmkj_web_code", "code_id", "web_id", "code_type", "var_name", "code"], "instruction": "Write a SQL query to insert a new row into the zmkj_web_code table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the zmkj_web_code table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO zmkj_web_code (id, name, code)\nVALUES (1, '', '123456789');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the zmkj_web_code table with the specified values:\n  \u2022 id: 1\n  \u2022 name: \n  \u2022 code: 123456789\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM zmkj_web_code;"}
{"seed": "/* Inserts a new row into the zmkj_web_code table with the given values. */\nINSERT INTO `zmkj_web_code` (`code_id`,`web_id`,`code_type`,`var_name`,`code_info`,`show_name`) VALUES('12','1','array','category_list','a:1:{s:11:\"goods_class\";a:8:{i:265;a:2:{s:5:\"gc_id\";s:3:\"265\";s:7:\"gc_name\";s:9:\"\u590d\u5370\u673a\";}i:266;a:2:{s:5:\"gc_id\";s:3:\"266\";s:7:\"gc_name\";s:9:\"\u6253\u5370\u673a\";}i:268;a:2:{s:5:\"gc_id\";s:3:\"268\";s:7:\"gc_name\";s:9:\"\u4e00\u4f53\u673a\";}i:270;a:2:{s:5:\"gc_id\";s:3:\"270\";s:7:\"gc_name\";s:9:\"\u6295\u5f71\u4eea\";}i:273;a:2:{s:5:\"gc_id\";s:3:\"273\";s:7:\"gc_name\";s:12:\"\u521b\u610f\u914d\u4ef6\";}i:1125;a:2:{s:5:\"gc_id\";s:4:\"1125\";s:7:\"gc_name\";s:12:\"\u529e\u516c\u8bbe\u5907\";}i:1060;a:2:{s:5:\"gc_id\";s:4:\"1060\";s:7:\"gc_name\";s:15:\"\u7a7a\u6c14\u51c0\u5316\u5668\";}i:1061;a:2:{s:5:\"gc_id\";s:4:\"1061\";s:7:\"gc_name\";s:9:\"\u51c0\u6c34\u673a\";}}}','\u63a8\u8350\u5206\u7c7b')", "description": "Inserts a new row into the zmkj_web_code table with the given values.", "concepts": ["INSERT INTO", "VALUES", "a:1:{s:11:\"goods_class\";a:8:{i:265;a:"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new record into the zmkj_web_code table with the specified values. */\nINSERT INTO `zmkj_web_code` (`code_id`,`web_id`,`code_type`,`var_name`,`code_info`,`show_name`) VALUES('18','1','array','adv','a:1:{i:2;a:4:{s:6:\"pic_id\";s:1:\"2\";s:8:\"pic_name\";s:21:\"\u4e9a\u90fd\u7a7a\u6c14\u51c0\u5316\u5668\";s:7:\"pic_url\";s:77:\"http://www.nrwspt.com/shop/index.php?act=search&amp;op=index&amp;cate_id=1720\";s:7:\"pic_img\";s:30:\"shop/editor/web-1-18-2.jpg?850\";}}','\u5e7f\u544a\u56fe\u7247')", "description": "Inserts a new record into the zmkj_web_code table with the specified values.", "concepts": ["INSERT INTO", "VALUES", "a:1:{i:2;a:4:{s:6:\"pic_id\";s:1:\"2"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the dept2 table with the given values. */\nINSERT INTO dept2(DCODE, DNAME, PDEPT, AREA)\nVALUES(9000,'temp_1',1006,'temp_area')", "description": "Inserts a new row into the dept2 table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the dept2 table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the dept2 table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO dept2 (dept_id, name)\nVALUES (10, 'Sales');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the dept2 table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM dept2;"}
{"seed": "/* Inserts a new department with code 9003, name temp_3, and parent department 1006 into the dept2 table. */\nINSERT INTO dept2(DCODE, DNAME, PDEPT)\nVALUES(9003,'temp_3',1006)", "description": "Inserts a new department with code 9003, name temp_3, and parent department 1006 into the dept2 table.", "concepts": ["INSERT INTO", "VALUES", "dept2", "DCODE", "DNAME", "PDEPT"], "instruction": "Write a SQL query to insert a new department with code 9003, name temp_3, and parent department 1006 into the dept2 table.", "response": "-- Reasoning:\nWe need to insert a new department into the dept2 table. It should have a code of 9003, a name of temp_3, and a parent department of 1006.\n\n-- Solution:\n```sql\nINSERT INTO dept2 (code, name, parent_code)\nVALUES (9003, 'temp_3', 1006);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the dept2 table with the given values.\n\n-- Tests:\n-- 1. Verify new department appears\nSELECT * FROM dept2;"}
{"seed": "/* Inserts a new row into the professor table with the given values. */\nINSERT INTO professor(PROFNO, NAME, ID, POSITION, PAY, HIREDATE)\nVALUES(5001, 'James Bond','Love me','a full professor', 500, '2014-10-23')", "description": "Inserts a new row into the professor table with the given values.", "concepts": ["INSERT INTO", "VALUES", "PROFNO", "NAME", "ID", "POSITION", "PAY", "HIREDATE"], "instruction": "Write a SQL query to insert a new row into the professor table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the professor table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO professor (name, dept_name)\nVALUES ('Watson', 'CS');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the professor table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM professor;"}
{"seed": "/* Creates a table named t_minus with two columns: no1 (number) and no2 (number with 3 digits). */\nCREATE TABLE t_minus(\n\tno1 NUMBER,\n\tno2 NUMBER(3)", "description": "Creates a table named t_minus with two columns: no1 (number) and no2 (number with 3 digits).", "concepts": ["CREATE TABLE", "NUMBER", "NUMBER(3)"], "instruction": "Write a SQL query to create a table named t_minus with two columns: no1 (number) and no2 (number with 3 digits).", "response": "-- Reasoning:\nWe need a new table named t_minus. It should have two columns:\n  \u2022 no1: integer\n  \u2022 no2: integer with 3 digits\n\n-- Solution:\n```sql\nCREATE TABLE t_minus (\n  no1 INT,\n  no2 INT(3)\n);\n```\n\n-- Explanation:\nThis statement defines the t_minus table with two columns:\n  \u2022 no1: integer\n  \u2022 no2: integer with 3 digits\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('t_minus');"}
{"seed": "/* Inserts a row into the t_minus table with the values 1, 1, and 1. */\nINSERT INTO t_minus\nVALUES(1,1,1)", "description": "Inserts a row into the t_minus table with the values 1, 1, and 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the t_minus table with the values 1, 1, and 1.", "response": "-- Reasoning:\nWe need to insert a row into the t_minus table with the values 1, 1, and 1.\n\n-- Solution:\n```sql\nINSERT INTO t_minus (id, a, b)\nVALUES (1, 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a row into the t_minus table with the values 1, 1, and 1.\n\n-- Tests:\n-- 1. Verify row is inserted\nSELECT * FROM t_minus;"}
{"seed": "/* Inserts a row into the t_minus table with three values: 1.1, 1.1, and 1.1. */\nINSERT INTO t_minus\nVALUES(1.1,1.1,1.1)", "description": "Inserts a row into the t_minus table with three values: 1.1, 1.1, and 1.1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a row into the t_minus table with three values: 1.1, 1.1, and 1.1.", "response": "-- Reasoning:\nWe need to insert a row into the t_minus table with three values: 1.1, 1.1, and 1.1.\n\n-- Solution:\n```sql\nINSERT INTO t_minus (x, y, z)\nVALUES (1.1, 1.1, 1.1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a row into the t_minus table with three values: 1.1, 1.1, and 1.1.\n\n-- Tests:\n-- 1. Verify row exists\nSELECT * FROM t_minus;"}
{"seed": "/* Inserts a row into the t_minus table with three values: -1.1, -1.1, and -1.1. */\nINSERT INTO t_minus\nVALUES(-1.1,-1.1,-1.1)", "description": "Inserts a row into the t_minus table with three values: -1.1, -1.1, and -1.1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a table named professor3 as a copy of the professor table, but without any data. */\nCREATE\nTABLE professor3\nAS\nSELECT * FROM professor\nWHERE 1=2", "description": "Creates a table named professor3 as a copy of the professor table, but without any data.", "concepts": ["CREATE TABLE", "AS", "SELECT", "WHERE"], "instruction": "Write a SQL query to create a table named professor3 as a copy of the professor table, but without any data.", "response": "-- Reasoning:\nWe need to create a new table named professor3 that is a copy of the professor table. It should have the same schema, but no data.\n\n-- Solution:\n```sql\nCREATE TABLE professor3 AS\n  SELECT * FROM professor;\n```\n\n-- Explanation:\nThis statement creates a new table named professor3 as a copy of the professor table. It uses the SELECT statement to select all columns from the professor table and copies them into the new table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('professor3');"}
{"seed": "/* Counts the number of rows in the professor3 table. */\nSELECT COUNT(*) FROM professor3", "description": "Counts the number of rows in the professor3 table.", "concepts": ["COUNT", "SELECT", "FROM"], "instruction": "Write a SQL query to count the number of rows in the professor3 table.", "response": "-- Reasoning:\nWe need to count the number of rows in the professor3 table.\n\n-- Solution:\n```sql\nSELECT COUNT(*) FROM professor3;\n```\n\n-- Explanation:\nThis query counts the number of rows in the professor3 table.\n\n-- Tests:\n-- 1. Verify count is correct\nSELECT COUNT(*) FROM professor3;"}
{"seed": "/* Inserts all rows from the professor table into the professor3 table. */\nINSERT INTO professor3\nSELECT * FROM professor", "description": "Inserts all rows from the professor table into the professor3 table.", "concepts": ["INSERT INTO", "SELECT", "FROM"], "instruction": "Write a SQL query to insert all rows from the professor table into the professor3 table.", "response": "-- Reasoning:\nWe need to copy all rows from the professor table into the professor3 table.\n\n-- Solution:\n```sql\nINSERT INTO professor3\n  SELECT * FROM professor;\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the professor table into the professor3 table.\n\n-- Tests:\n-- 1. Verify professor3 has all rows from professor\nSELECT * FROM professor3;"}
{"seed": "/* Inserts all rows from the prof table into the prof_3 and prof_4 tables. */\nINSERT ALL\nWHEN profno BETWEEN 1000 AND 1999 THEN\n\tINTO prof_3 VALUES(profno, name)\nWHEN profno BETWEEN 2000 AND 2999 THEN\n\tINTO prof_4 VALUES(profno, name)", "description": "Inserts all rows from the prof table into the prof_3 and prof_4 tables.", "concepts": ["INSERT ALL", "INTO", "VALUES", "WHEN", "THEN", "BETWEEN", "AND"], "instruction": "Write a SQL query to insert all rows from the prof table into the prof_3 and prof_4 tables.", "response": "-- Reasoning:\nWe need to copy all rows from the prof table into the prof_3 and prof_4 tables.\n\n-- Solution:\n```sql\nINSERT INTO prof_3 SELECT * FROM prof;\nINSERT INTO prof_4 SELECT * FROM prof;\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the prof table into the prof_3 and prof_4 tables.\n\n-- Tests:\n-- 1. Verify new rows appear in both tables\nSELECT * FROM prof_3;\nSELECT * FROM prof_4;"}
{"seed": "/* Inserts the values of profno and name into the prof_3 and prof_4 tables. */\nINSERT ALL\nINTO prof_3 VALUES(profno, name)\nINTO prof_4 VALUES(profno, name)", "description": "Inserts the values of profno and name into the prof_3 and prof_4 tables.", "concepts": ["INSERT ALL", "INTO", "VALUES"], "instruction": "Write a SQL query to insert the values of profno and name into the prof_3 and prof_4 tables.", "response": "-- Reasoning:\nWe need to insert the values of profno and name into the prof_3 and prof_4 tables.\n\n-- Solution:\n```sql\nINSERT INTO prof_3 (profno, name)\n  SELECT profno, name\n  FROM prof_2;\n\nINSERT INTO prof_4 (profno, name)\n  SELECT profno, name\n  FROM prof_2;\n```\n\n-- Explanation:\nThis INSERT statement inserts the values of profno and name into the prof_3 and prof_4 tables.\n\n-- Tests:\n-- 1. Verify new values appear in both tables\nSELECT * FROM prof_3;\n\nSELECT * FROM prof_4;"}
{"seed": "/* Updates the pay of all professors with the same position as Sharon Stone to be 15% higher than their current pay, but only if their pay is less than $250. */\nUPDATE professor\nSET pay = pay*1.15\nWHERE position = (\n\tSELECT position\n\tFROM professor\n\tWHERE name = 'Sharon Stone'\n)\nAND pay < 250", "description": "Updates the pay of all professors with the same position as Sharon Stone to be 15% higher than their current pay, but only if their pay is less than $250.", "concepts": ["UPDATE", "SET", "WHERE", "SELECT", "FROM", "AS", "AND", "OR", "NOT", "IN", "BETWEEN", "LIKE", "IS", "NULL", "DISTINCT"], "instruction": "Write a SQL query to update the pay of all professors with the same position as Sharon Stone to be 15% higher than their current pay, but only if their pay is less than $250.", "response": "-- Reasoning:\nWe need to update the pay of all professors with the same position as Sharon Stone to be 15% higher than their current pay, but only if their pay is less than $250.\n\n-- Solution:\n```sql\nUPDATE professors\nSET pay = pay * 1.15\nWHERE position = (\n  SELECT position\n  FROM professors\n  WHERE name = ''\n)\nAND pay < 250;\n```\n\n-- Explanation:\nThis UPDATE statement updates the pay of all professors with the same position as Sharon Stone to be 15% higher than their current pay, but only if their pay is less than $250.\n\n-- Tests:\n-- 1. Verify pay is updated\nSELECT * FROM professors;"}
{"seed": "/* Merges the charge01 table into the ch_total table. The ON clause specifies the join condition. The WHEN MATCHED clause specifies the update action. The WHEN NOT MATCHED clause specifies the insert action. */\nMERGE INTO ch_total t1\nUSING charge01 t2\nON (t1.u_date = t2.u_date)\nWHEN MATCHED THEN\n\tUPDATE SET t1.cust_no = t2.cust_no\nWHEN NOT MATCHED THEN\n\tINSERT VALUES(t2.u_date, t2.cust_no, t2.u_time, t2.change\n)", "description": "Merges the charge01 table into the ch_total table. The ON clause specifies the join condition. The WHEN MATCHED clause specifies the update action. The WHEN NOT MATCHED clause specifies the insert action.", "concepts": ["MERGE INTO", "USING", "ON", "UPDATE SET", "INSERT VALUES"], "instruction": "Write a SQL query to merge the charge01 table into the ch_total table. The ON clause specifies the join condition. The WHEN MATCHED clause specifies the update action. The WHEN NOT MATCHED clause specifies the insert action.", "response": "-- Reasoning:\nWe need to merge the charge01 table into the ch_total table. The ON clause specifies the join condition. The WHEN MATCHED clause specifies the update action. The WHEN NOT MATCHED clause specifies the insert action.\n\n-- Solution:\n```sql\nINSERT INTO ch_total\nSELECT *\nFROM charge01\nON CONFLICT (id) DO UPDATE SET\n  amount = charge01.amount,\n  date = charge01.date,\n  description = charge01.description,\n  type = charge01.type;\n```\n\n-- Explanation:\nThis statement inserts all rows from the charge01 table into the ch_total table. The ON CONFLICT clause specifies the join condition. The DO UPDATE clause specifies the update action. The DO NOTHING clause specifies the insert action.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('ch_total');"}
{"seed": "/* Updates the salaries of all employees in the DALLAS department by 10%. */\nUPDATE emp t1\nSET sal = sal*1.10\nWHERE EXISTS(\n\tSELECT *\n\tFROM dept t2\n\tWHERE t2.loc = 'DALLAS'\n\tAND t1.deptno = t2.deptno\n)", "description": "Updates the salaries of all employees in the DALLAS department by 10%.", "concepts": ["UPDATE", "EXISTS", "SET", "WHERE", "AND", "DALLAS", "deptno", "sal", "1.10"], "instruction": "Write a SQL query to update the salaries of all employees in the DALLAS department by 10%.", "response": "-- Reasoning:\nWe need to update the salaries of all employees in the DALLAS department by 10%.\n\n-- Solution:\n```sql\nUPDATE employees\nSET salary = salary * 1.1\nWHERE department = 'DALLAS';\n```\n\n-- Explanation:\nThis UPDATE statement updates the salary of all employees in the DALLAS department by 10%.\n\n-- Tests:\n-- 1. Verify salaries are updated\nSELECT * FROM employees WHERE department = 'DALLAS';"}
{"seed": "/* Creates a table named reorg in the scott schema with two columns: no (number) and name (varchar). */\nCREATE TABLE scott.reorg(\n\tno NUMBER,\n\tname VARCHAR2(20 BYTE)", "description": "Creates a table named reorg in the scott schema with two columns: no (number) and name (varchar).", "concepts": ["CREATE TABLE", "NUMBER", "VARCHAR2"], "instruction": "Write a SQL query to create a table named reorg in the scott schema with two columns: no (number) and name (varchar).", "response": "-- Reasoning:\nWe need to create a new table named reorg in the scott schema. It should have two columns:\n  \u2022 no: integer\n  \u2022 name: varchar\n\n-- Solution:\n```sql\nCREATE TABLE reorg (\n  no INT,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement creates the reorg table with two columns:\n  \u2022 no: integer\n  \u2022 name: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('reorg');"}
{"seed": "/* Selects the MB column from the dba_segments table, which is the size of the REORG segment in the SCOTT schema. */\nSELECT bytes/(1024*1024) \"MB\"\nFROM dba_segments\nWHERE owner = 'SCOTT'\nAND segment_name = 'REORG'", "description": "Selects the MB column from the dba_segments table, which is the size of the REORG segment in the SCOTT schema.", "concepts": ["SELECT", "FROM", "WHERE", "AND", "OR", "NOT", "IN", "LIKE", "BETWEEN", "EXISTS", "IS", "NULL", "NOT NULL", "DISTINCT", "ALL"], "instruction": "Write a SQL query to select the MB column from the dba_segments table, which is the size of the REORG segment in the SCOTT schema.", "response": "-- Reasoning:\nWe need to select the MB column from the dba_segments table, which is the size of the REORG segment in the SCOTT schema.\n\n-- Solution:\n```sql\nSELECT MB\nFROM dba_segments\nWHERE owner = 'SCOTT'\nAND segment_name = 'REORG';\n```\n\n-- Explanation:\nThis query selects the MB column from the dba_segments table, which is the size of the REORG segment in the SCOTT schema.\n\n-- Tests:\n-- 1. Verify the size of the REORG segment in the SCOTT schema\nSELECT MB\nFROM dba_segments\nWHERE owner = 'SCOTT'\nAND segment_name = 'REORG';"}
{"seed": "/* Analyzes the table scott.reorg and computes statistics. */\nANALYZE TABLE scott.reorg COMPUTE STATISTICS", "description": "Analyzes the table scott.reorg and computes statistics.", "concepts": ["ANALYZE TABLE", "COMPUTE STATISTICS"], "instruction": "Write a SQL query to analyze the table scott.reorg and compute statistics.", "response": "-- Reasoning:\nWe need to analyze the table scott.reorg and compute statistics.\n\n-- Solution:\n```sql\nSELECT * FROM scott.reorg;\n```\n\n-- Explanation:\nThis query returns all rows and columns from the scott.reorg table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('scott.reorg');"}
{"seed": "/* Selects the table_name, num_rows, and blocks of all tables owned by SCOTT with the name REORG. */\nSELECT table_name,\n\tnum_rows,\n\tblocks\nFROM dba_tables\nWHERE owner = 'SCOTT'\nAND table_name = 'REORG'", "description": "Selects the table_name, num_rows, and blocks of all tables owned by SCOTT with the name REORG.", "concepts": ["SELECT", "FROM", "WHERE", "AND", "OR", "NOT", "IN", "LIKE", "BETWEEN", "EXISTS", "ALL", "ANY", "SOME", "TABLE", "VIEW"], "instruction": "Write a SQL query to select the table_name, num_rows, and blocks of all tables owned by SCOTT with the name REORG.", "response": "-- Reasoning:\nWe need to select the table_name, num_rows, and blocks of all tables owned by SCOTT with the name REORG.\n\n-- Solution:\n```sql\nSELECT table_name, num_rows, blocks\nFROM sqlite_master\nWHERE type = 'table' AND name = 'REORG' AND owner = 'SCOTT';\n```\n\n-- Explanation:\nThis query selects the table_name, num_rows, and blocks of all tables owned by SCOTT with the name REORG.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('REORG');"}
{"seed": "/* Deletes all rows from the scott.reorg table. */\nDELETE\nFROM scott.reorg", "description": "Deletes all rows from the scott.reorg table.", "concepts": ["DELETE", "FROM"], "instruction": "Write a SQL query to delete all rows from the scott.reorg table.", "response": "-- Reasoning:\nWe need to delete all rows from the scott.reorg table.\n\n-- Solution:\n```sql\nDELETE FROM scott.reorg;\n```\n\n-- Explanation:\nThis DELETE statement deletes all rows from the scott.reorg table.\n\n-- Tests:\n-- 1. Verify table is empty\nSELECT * FROM scott.reorg;"}
{"seed": "/* Counts the number of rows in the scott.reorg table. */\nSELECT COUNT(*) FROM scott.reorg", "description": "Counts the number of rows in the scott.reorg table.", "concepts": ["COUNT", "FROM", "scott.reorg"], "instruction": "Write a SQL query to count the number of rows in the scott.reorg table.", "response": "-- Reasoning:\nWe need to count the number of rows in the scott.reorg table.\n\n-- Solution:\n```sql\nSELECT COUNT(*) FROM scott.reorg;\n```\n\n-- Explanation:\nThis query counts the number of rows in the scott.reorg table.\n\n-- Tests:\n-- 1. Verify count is correct\nSELECT COUNT(*) FROM scott.reorg;"}
{"seed": "/* Counts the number of distinct blocks used by the reorg table. */\nSELECT COUNT(DISTINCT DBMS_ROWID.ROWID_BLOCK_NUMBER(rowid)\n\t|| DBMS_ROWID.ROWID_RELATIVE_FNO(rowid)) \"REAL_USED\"\nFROM scott.reorg", "description": "Counts the number of distinct blocks used by the reorg table.", "concepts": ["COUNT", "DISTINCT", "DBMS_ROWID", "ROWID_BLOCK_NUMBER", "ROWID_RELATIVE_FNO"], "instruction": "Write a SQL query to count the number of distinct blocks used by the reorg table.", "response": "-- Reasoning:\nWe need to count the number of distinct blocks used by the reorg table.\n\n-- Solution:\n```sql\nSELECT COUNT(DISTINCT block_id)\nFROM reorg;\n```\n\n-- Explanation:\nThis query counts the number of distinct block_id values in the reorg table.\n\n-- Tests:\n-- 1. Verify the count is correct\nSELECT COUNT(DISTINCT block_id)\nFROM reorg;"}
{"seed": "/* Selects the table_name and tablespace_name of all tables owned by SCOTT with the name REORG. */\nSELECT table_name,\n\ttablespace_name\nFROM dba_tables\nWHERE owner = 'SCOTT'\nAND table_name = 'REORG'", "description": "Selects the table_name and tablespace_name of all tables owned by SCOTT with the name REORG.", "concepts": ["SELECT", "FROM", "WHERE", "AND", "OR", "NOT", "IN", "LIKE", "BETWEEN", "EXISTS", "ALL", "ANY", "SOME", "TABLE", "TABLE"], "instruction": "Write a SQL query to list the table_name and tablespace_name of all tables owned by SCOTT with the name REORG.", "response": "-- Reasoning:\nWe need to list the table_name and tablespace_name of all tables owned by SCOTT with the name REORG.\n\n-- Solution:\n```sql\nSELECT table_name, tablespace_name\nFROM user_tables\nWHERE table_name = 'REORG'\nAND owner = 'SCOTT';\n```\n\n-- Explanation:\nThis query selects the table_name and tablespace_name columns from the user_tables table, filtering by the table_name column and the owner column.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user_tables');"}
{"seed": "/* Moves the scott.reorg table to the tablespace named reorg. */\nALTER TABLE scott.reorg MOVE TABLESPACE", "description": "Moves the scott.reorg table to the tablespace named reorg.", "concepts": ["ALTER TABLE", "MOVE TABLESPACE"], "instruction": "Write a SQL query to move the scott.reorg table to the tablespace named reorg.", "response": "-- Reasoning:\nWe need to move the scott.reorg table to the tablespace named reorg.\n\n-- Solution:\n```sql\nALTER TABLE scott.reorg\n  RENAME TO reorg;\n```\n\n-- Explanation:\nThis statement renames the scott.reorg table to reorg.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('reorg');"}
{"seed": "/* Creates a table named user with five columns: id (integer), first (text), last (text), username (text), password (text), and description (text). */\nCREATE TABLE user (\n\tid INT,\n\tfirst TEXT,\n\tlast TEXT,\n\tusername TEXT,\n\tpassword TEXT,\n\tdescription TEXT\n\t)", "description": "Creates a table named user with five columns: id (integer), first (text), last (text), username (text), password (text), and description (text).", "concepts": ["CREATE TABLE", "INT", "TEXT", "TEXT", "TEXT", "TEXT", "TEXT"], "instruction": "Write a SQL query to create a table named user with five columns: id (integer), first (text), last (text), username (text), password (text), and description (text).", "response": "-- Reasoning:\nWe need a new table named user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user (\n  id INTEGER PRIMARY KEY,\n  first TEXT,\n  last TEXT,\n  username TEXT,\n  password TEXT,\n  description TEXT\n);\n```\n\n-- Explanation:\nThis statement defines the user table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 first: variable\u2010length string up to 255 characters\n  \u2022 last: variable\u2010length string up to 255 characters\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user');"}
{"seed": "/* Selects the cd_vendedor, nm_fantasia_vendedor, dt_acesso_repnet_vendedor, and nm_logotipo_vendedor of all active and repnet vendedors from the Vendedor table. */\nselect cd_vendedor,\n       nm_fantasia_vendedor,\n       dt_acesso_repnet_vendedor,\n       nm_logotipo_vendedor\nfrom       \n       Vendedor\nwhere\n       ic_ativo = 'A'   and\n       ic_repnet_vendedor = 'S'", "description": "Selects the cd_vendedor, nm_fantasia_vendedor, dt_acesso_repnet_vendedor, and nm_logotipo_vendedor of all active and repnet vendedors from the Vendedor table.", "concepts": ["SELECT", "FROM", "WHERE", "AND", "VENDEDOR", "IC_ATIVO", "IC_REPNET_VENDEDOR"], "instruction": "Write a SQL query to list the cd_vendedor, nm_fantasia_vendedor, dt_acesso_repnet_vendedor, and nm_logotipo_vendedor of all active and repnet vendedors from the Vendedor table.", "response": "-- Reasoning:\nWe need to list the cd_vendedor, nm_fantasia_vendedor, dt_acesso_repnet_vendedor, and nm_logotipo_vendedor of all active and repnet vendedors from the Vendedor table.\n\n-- Solution:\n```sql\nSELECT\n  cd_vendedor,\n  nm_fantasia_vendedor,\n  dt_acesso_repnet_vendedor,\n  nm_logotipo_vendedor\nFROM\n  Vendedor\nWHERE\n  cd_situacao_vendedor = 'A'\n  AND dt_acesso_repnet_vendedor IS NOT NULL;\n```\n\n-- Explanation:\nThis query selects the cd_vendedor, nm_fantasia_vendedor, dt_acesso_repnet_vendedor, and nm_logotipo_vendedor columns from the Vendedor table.\n\n-- Tests:\n-- 1. Verify correct columns are selected\nPRAGMA table_info('Vendedor');\n\n-- 2. Verify correct rows are selected\nSELECT\n  cd_vendedor,\n  nm_fantasia_vendedor,\n  dt_acesso_repnet_vendedor,\n  nm_logotipo_vendedor\nFROM"}
{"seed": "/* Selects the empno, ename, job, and sal columns from the dept table where the sal column is greater than or equal to 1500. The results are sorted by job and then by sal in descending order. */\nselect empno, ename, job, sal\nfrom dept\nwhere sal >= 1500\norder by job, sal desc", "description": "Selects the empno, ename, job, and sal columns from the dept table where the sal column is greater than or equal to 1500. The results are sorted by job and then by sal in descending order.", "concepts": ["select", "from", "where", "order by", "desc"], "instruction": "Write a SQL query to select the empno, ename, job, and sal columns from the dept table where the sal column is greater than or equal to 1500. The results are sorted by job and then by sal in descending order.", "response": "-- Reasoning:\nWe need to select the empno, ename, job, and sal columns from the dept table. The results should be sorted by job and then by sal in descending order.\n\n-- Solution:\n```sql\nSELECT empno, ename, job, sal\nFROM dept\nWHERE sal >= 1500\nORDER BY job, sal DESC;\n```\n\n-- Explanation:\nThis query selects the empno, ename, job, and sal columns from the dept table. The WHERE clause filters the results to only include rows where the sal column is greater than or equal to 1500. The ORDER BY clause sorts the results by job in ascending order and then by sal in descending order.\n\n-- Tests:\n-- 1. Verify results are sorted by job and then by sal in descending order\nSELECT job, sal\nFROM dept\nWHERE sal >= 1500\nORDER BY job, sal DESC;"}
{"seed": "/* This query joins the employees and departments tables using the department_id column. It then selects the last_name and department_name columns from the employees and departments tables, respectively. */\nselect ename\nfrom emp\n\n-- 3-16\nselect empno, ename, job, sal\nfrom emp\nwhere sal >= 1500\norder by job, sal desc\n\n-- 3-21\nselect empno, ename, job, sal\nfrom dept\nwhere sal >= 1500\norder by job, sal desc\n\n--3-25\nselect empno, ename, job, sal\nfrom emp\nwhere sal >= 1500\norder by job, sal desc\n\n\n-- 3-31\nselect empno, ename, job, sal\nfrom emp\nwhere sal >= 1500\norder by job, sal desc\n\n-- 3-48\nselect e.last_name, d.department_name\nfrom hr.employees e, hr.departments department_name\nwhere e.department_id = d.department_id", "description": "This query joins the employees and departments tables using the department_id column. It then selects the last_name and department_name columns from the employees and departments tables, respectively.", "concepts": ["SELECT", "FROM", "WHERE", "ORDER BY", "DESC", "INT", "VARCHAR", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to list the last name and department name of all employees who work in the same department as employee number 100.", "response": "-- Reasoning:\nWe need to find the last name and department name of all employees who work in the same department as employee number 100.\n\n-- Solution:\n```sql\nSELECT e.last_name, d.name\nFROM employees e\nJOIN departments d ON e.department_id = d.department_id\nWHERE e.department_id = (\n  SELECT department_id\n  FROM employees\n  WHERE employee_id = 100\n);\n```\n\n-- Explanation:\nThis query uses a subquery to find the department_id of employee 100. Then it uses a JOIN to find the last name and department name of all employees who work in the same department as employee 100.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT last_name, name\nFROM employees e\nJOIN departments d ON e.department_id = d.department_id\nWHERE e.department_id = (\n  SELECT department_id\n  FROM employees\n  WHERE employee_id = 100\n);"}
{"seed": "/* Creates a table named category with three columns: id (integer primary key), name (varchar) and active (boolean). */\nCREATE TABLE `category` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named category with three columns: id (integer primary key), name (varchar) and active (boolean).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "ENGINE", "CHARSET", "COLLATE", "DEFAULT", "NOT NULL", "INT", "VARCHAR", "BOOLEAN"], "instruction": "Write a SQL query to create a table named category with three columns: id (integer primary key), name (varchar) and active (boolean).", "response": "-- Reasoning:\nWe need a new table named category. It should have an integer primary key so that each category has a unique identifier, a name column to store the category\u2019s name as text, and an active column to indicate whether the category is active or not.\n\n-- Solution:\n```sql\nCREATE TABLE category (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  active BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the category table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 active: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('category');"}
{"seed": "/* Drops the table named donation if it exists. */\nDROP TABLE IF EXISTS `donation`", "description": "Drops the table named donation if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named donation if it exists.", "response": "-- Reasoning:\nWe need to delete the table named donation if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS donation;\n```\n\n-- Explanation:\nThis statement deletes the table named donation if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('donation');"}
{"seed": "/* Creates a table named donation with 10 columns: id (integer primary key), city (varchar), pick_up_comment (varchar), pick_up_date (date), pick_up_time (time), quantity (integer), street (varchar), zip_code (varchar), institution_id (integer), user_id (integer). */\nCREATE TABLE `donation` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `city` varchar(255) DEFAULT NULL,\n  `pick_up_comment` varchar(255) DEFAULT NULL,\n  `pick_up_date` date DEFAULT NULL,\n  `pick_up_time` time DEFAULT NULL,\n  `quantity` int NOT NULL,\n  `street` varchar(255) DEFAULT NULL,\n  `zip_code` varchar(255) DEFAULT NULL,\n  `institution_id` int DEFAULT NULL,\n  `user_id` int DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FKqiaintp9rxqwmmpwj3y5dcwd1` (`institution_id`),\n  KEY `FK2rx4oikd7rs8ddja8k9xc25my` (`user_id`)\n) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named donation with 10 columns: id (integer primary key), city (varchar), pick_up_comment (varchar), pick_up_date (date), pick_up_time (time), quantity (integer), street (varchar), zip_code (varchar), institution_id (integer), user_id (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named donation with 10 columns: id (integer primary key), city (varchar), pick_up_comment (varchar), pick_up_date (date), pick_up_time (time), quantity (integer), street (varchar), zip_code (varchar), institution_id (integer), user_id (integer).", "response": "-- Reasoning:\nWe need a new table named donation. It should have an integer primary key so that each donation has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE donation (\n  id INT PRIMARY KEY,\n  city VARCHAR(255),\n  pick_up_comment VARCHAR(255),\n  pick_up_date DATE,\n  pick_up_time TIME,\n  quantity INT,\n  street VARCHAR(255),\n  zip_code VARCHAR(255),\n  institution_id INT,\n  user_id INT\n);\n```\n\n-- Explanation:\nThis statement defines the donation table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 city: variable\u2010length string up to 255 characters\n  \u2022 pick_up_comment: variable\u2010length string up to 255 characters\n  \u2022 pick_up_date: date\n  \u2022 pick_up_time: time\n  \u2022 quantity: integer\n  \u2022 street: variable\u2010length string up to 255 characters\n  \u2022 zip_code: variable\u2010length string up to 255 characters\n  \u2022 institution_id: integer\n  \u2022 user_id: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct"}
{"seed": "/* Inserts four rows into the donation table. */\nINSERT INTO `donation` VALUES (1,'Pozna\u0144','we\u017acie','2021-03-18','13:13:00',4,'Cwiartki','55666',2,1),(2,'Pozna\u0144','hh','2021-03-18','15:18:00',5,'Szara','61-806',3,1),(3,'Warszawa','tak','2021-03-18','16:56:00',6,'ggg','66666',4,32),(4,'Warszawa','ds','2021-03-18','17:11:00',1,'ggg','66666',4,32)", "description": "Inserts four rows into the donation table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert four rows into the donation table.", "response": "-- Reasoning:\nWe need to insert four rows into the donation table.\n\n-- Solution:\n```sql\nINSERT INTO donation (donor_id, amount, donation_date)\nVALUES (1, 100.00, '2018-01-01'),\n       (2, 200.00, '2018-02-02'),\n       (3, 300.00, '2018-03-03'),\n       (4, 400.00, '2018-04-04');\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the donation table.\n\n-- Tests:\n-- 1. Verify the rows were inserted\nSELECT * FROM donation;"}
{"seed": "/* Drops the table donation_categories if it exists. */\nDROP TABLE IF EXISTS `donation_categories`", "description": "Drops the table donation_categories if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the donation_categories table if it exists.", "response": "-- Reasoning:\nWe need to drop the donation_categories table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS donation_categories;\n```\n\n-- Explanation:\nThis DROP statement removes the donation_categories table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('donation_categories');"}
{"seed": "/* Creates a table named donation_categories with two columns: donation_id (integer) and categories_id (integer). */\nCREATE TABLE `donation_categories` (\n  `donation_id` int NOT NULL,\n  `categories_id` int NOT NULL,\n  KEY `FKbuylq65emfd9ybcas2ni6iciq` (`categories_id`),\n  KEY `FKeg2047ecjdbxcjlekg2pmhcmw` (`donation_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named donation_categories with two columns: donation_id (integer) and categories_id (integer).", "concepts": ["CREATE TABLE", "KEY", "FOREIGN KEY", "INT", "DEFAULT", "CHARSET", "COLLATE", "ENGINE"], "instruction": "Write a SQL query to create a table named donation_categories with two columns: donation_id (integer) and categories_id (integer).", "response": "-- Reasoning:\nWe need a new table named donation_categories. It should have two columns:\n  \u2022 donation_id: integer, a foreign key to the donations table\n  \u2022 categories_id: integer, a foreign key to the categories table\n\n-- Solution:\n```sql\nCREATE TABLE donation_categories (\n  donation_id INT,\n  categories_id INT,\n  FOREIGN KEY (donation_id) REFERENCES donations(donation_id),\n  FOREIGN KEY (categories_id) REFERENCES categories(categories_id)\n);\n```\n\n-- Explanation:\nThis statement defines the donation_categories table with two columns:\n  \u2022 donation_id: integer, a foreign key to the donations table\n  \u2022 categories_id: integer, a foreign key to the categories table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('donation_categories');"}
{"seed": "/* Inserts four rows into the donation_categories table. The first column is the category_id and the second column is the donation_id. */\nINSERT INTO `donation_categories` VALUES (2,2),(3,2),(3,3),(4,2)", "description": "Inserts four rows into the donation_categories table. The first column is the category_id and the second column is the donation_id.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert four rows into the donation_categories table. The first column is the category_id and the second column is the donation_id.", "response": "-- Reasoning:\nWe need to insert four rows into the donation_categories table. Each row should have a category_id and a donation_id.\n\n-- Solution:\n```sql\nINSERT INTO donation_categories (category_id, donation_id)\nVALUES (1, 1), (2, 2), (3, 3), (4, 4);\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the donation_categories table. Each row has a category_id and a donation_id.\n\n-- Tests:\n-- 1. Verify the rows were inserted\nSELECT * FROM donation_categories;"}
{"seed": "/* Drops the table named institution if it exists. */\nDROP TABLE IF EXISTS `institution`", "description": "Drops the table named institution if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named institution if it exists.", "response": "-- Reasoning:\nWe need to drop the institution table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS institution;\n```\n\n-- Explanation:\nThis statement drops the institution table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('institution');"}
{"seed": "/* Creates a table named institution with three columns: id (integer primary key), name (varchar) and description (varchar). */\nCREATE TABLE `institution` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `description` varchar(255) DEFAULT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named institution with three columns: id (integer primary key), name (varchar) and description (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named institution with three columns: id (integer primary key), name (varchar) and description (varchar).", "response": "-- Reasoning:\nWe need a new table named institution. It should have an integer primary key so that each institution has a unique identifier, and two varchar columns to store the institution\u2019s name and description.\n\n-- Solution:\n```sql\nCREATE TABLE institution (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the institution table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('institution');"}
{"seed": "/* Inserts five rows into the institution table. */\nINSERT INTO `institution` VALUES (7,'Fundacja dla g\u0142odnych','G\u0142odni'),(2,'Dla biednych ludzi','Bieda'),(3,'Dla g\u0142odnych i spragnionych','\u017bywno\u015b\u0107'),(4,'Dla bardziej biednych','Bieda 2'),(5,'Dla bezdomnych','Bezdomni')", "description": "Inserts five rows into the institution table.", "concepts": ["INSERT INTO", "VALUES", "institution", "Fundacja dla g\u0142odnych", "G\u0142odni", "Dla biednych ludzi", "B"], "instruction": "Write a SQL query to insert five rows into the institution table.", "response": "-- Reasoning:\nWe need to insert five rows into the institution table.\n\n-- Solution:\n```sql\nINSERT INTO institution (name, address, city, state, zip)\nVALUES\n  ('University of California, Berkeley', '1000 Haste St.', 'Berkeley', 'CA', '94720'),\n  ('Stanford University', '380 Serra Mall', 'Stanford', 'CA', '94305'),\n  ('University of California, Davis', '1000 Haste St.', 'Davis', 'CA', '95616'),\n  ('University of California, Irvine', '1000 Haste St.', 'Irvine', 'CA', '92697'),\n  ('University of California, Los Angeles', '1000 Haste St.', 'Los Angeles', 'CA', '90095');\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the institution table.\n\n-- Tests:\n-- 1. Verify five rows were inserted\nSELECT * FROM institution;"}
{"seed": "/* Drops the table named role if it exists. */\nDROP TABLE IF EXISTS `role`", "description": "Drops the table named role if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named role if it exists.", "response": "-- Reasoning:\nWe need to delete the table named role if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS role;\n```\n\n-- Explanation:\nThis statement deletes the table named role if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('role');"}
{"seed": "/* Creates a table named role with two columns: id (integer primary key) and name (varchar). */\nCREATE TABLE `role` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named role with two columns: id (integer primary key) and name (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named role with two columns: id (integer primary key) and name (varchar).", "response": "-- Reasoning:\nWe need a new table named role. It should have an integer primary key so that each role has a unique identifier, and a name column to store the role\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE role (\n  id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the role table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('role');"}
{"seed": "/* Inserts two rows into the role table with the id and role values. */\nINSERT INTO `role` VALUES (1,'ROLE_USER'),(2,'ROLE_ADMIN')", "description": "Inserts two rows into the role table with the id and role values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert two rows into the role table with the id and role values.", "response": "-- Reasoning:\nWe need to insert two rows into the role table. The first row should have id 1 and role 'admin', and the second row should have id 2 and role 'user'.\n\n-- Solution:\n```sql\nINSERT INTO role (id, role) VALUES (1, 'admin');\nINSERT INTO role (id, role) VALUES (2, 'user');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the role table:\n  \u2022 id: 1, role: 'admin'\n  \u2022 id: 2, role: 'user'\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM role;"}
{"seed": "/* Creates a table named user with 10 columns: id (integer primary key), enabled (integer), password (varchar), username (varchar), email (varchar), name (varchar), surname (varchar), email_change_date (datetime), email_change_key (varchar). */\nCREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `enabled` int NOT NULL,\n  `password` varchar(255) DEFAULT NULL,\n  `username` varchar(60) NOT NULL,\n  `email` varchar(60) NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `surname` varchar(255) DEFAULT NULL,\n  `email_change_date` datetime DEFAULT NULL,\n  `email_change_key` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `UK_sb8bbouer5wak8vyiiy4pf2bx` (`username`)\n) ENGINE=MyISAM AUTO_INCREMENT=33 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named user with 10 columns: id (integer primary key), enabled (integer), password (varchar), username (varchar), email (varchar), name (varchar), surname (varchar), email_change_date (datetime), email_change_key (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "ENGINE", "MyISAM", "DEFAULT CHARSET", "COLLATE", "NOT NULL", "NULL", "DEFAULT"], "instruction": "Write a SQL query to create a table named user with 10 columns: id (integer primary key), enabled (integer), password (varchar), username (varchar), email (varchar), name (varchar), surname (varchar), email_change_date (datetime), email_change_key (varchar).", "response": "-- Reasoning:\nWe need a new table named user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user (\n  id INT PRIMARY KEY,\n  enabled INT,\n  password VARCHAR(255),\n  username VARCHAR(255),\n  email VARCHAR(255),\n  name VARCHAR(255),\n  surname VARCHAR(255),\n  email_change_date DATETIME,\n  email_change_key VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the user table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 enabled: integer\n  \u2022 password: \n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 surname: variable\u2010length string up to 255 characters\n  \u2022 email_change_date: datetime\n  \u2022 email_change_key: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user');"}
{"seed": "/* Inserts a new user with id 1, name user1, password , email email@gmail.com, first name Andzrej, last name Pyrka, and active 1. */\nINSERT INTO `user` VALUES (1,1,'$2a$10$9kkyG68/61OL5qzYxraW0uOO20HqNik4ZCkuRnujcbIprgQBamxw6','user1','email@gmail.com','Andzrej','Pyrka',NULL,NULL),(32,1,'$2a$10$xYFyryEz.nip/B4SJPNsbeH4S6gq0OSRx/mrSJtW7oL4oqmv1oBdO','admin','email@gmail.com','Admin','Admi\u0144ski',NULL,'')", "description": "Inserts a new user with id 1, name user1, password , email email@gmail.com, first name Andzrej, last name Pyrka, and active 1.", "concepts": ["INSERT INTO", "VALUES", "user", "email", "first name", "last name", "active"], "instruction": "Write a SQL query to insert a new user with id 1, name user1, password , email email@gmail.com, first name Andzrej, last name Pyrka, and active 1.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, email, first_name, last_name, active)\nVALUES (1, 'user1', 'password', '', 'Andzrej', 'Pyrka', 1);\n```\n\n-- Explanation:\nThis statement inserts a new user into the users table with the following values:\n  \u2022 id: 1\n  \u2022 name: user1\n  \u2022 password: \n  \u2022 email: \n  \u2022 first_name: Andzrej\n  \u2022 last_name: Pyrka\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Drops the table named user_role if it exists. */\nDROP TABLE IF EXISTS `user_role`", "description": "Drops the table named user_role if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named user_role if it exists.", "response": "-- Reasoning:\nWe need to delete the table named user_role if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS user_role;\n```\n\n-- Explanation:\nThis statement deletes the user_role table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('user_role');"}
{"seed": "/* Creates a table named user_role with two columns: user_id (integer) and role_id (integer). The table has a primary key on the columns user_id and role_id, and a foreign key constraint on the role_id column. */\nCREATE TABLE `user_role` (\n  `user_id` int NOT NULL,\n  `role_id` int NOT NULL,\n  PRIMARY KEY (`user_id`,`role_id`),\n  KEY `FKa68196081fvovjhkek5m97n3y` (`role_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "description": "Creates a table named user_role with two columns: user_id (integer) and role_id (integer). The table has a primary key on the columns user_id and role_id, and a foreign key constraint on the role_id column.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "COLLATE", "NOT", "NULL", "INT", "PRIMARY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named user_role with two columns: user_id (integer) and role_id (integer). The table has a primary key on the columns user_id and role_id, and a foreign key constraint on the role_id column.", "response": "-- Reasoning:\nWe need a new table named user_role. It should have two columns:\n  \u2022 user_id: integer, primary key\n  \u2022 role_id: integer, foreign key\n\n-- Solution:\n```sql\nCREATE TABLE user_role (\n  user_id INT PRIMARY KEY,\n  role_id INT,\n  FOREIGN KEY (role_id) REFERENCES role(role_id)\n);\n```\n\n-- Explanation:\nThis statement defines the user_role table with two columns:\n  \u2022 user_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 role_id: integer, foreign key to the role table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user_role');"}
{"seed": "/* Inserts two rows into the user_role table. The first row has id 1 and role_id 1, and the second row has id 32 and role_id 2. */\nINSERT INTO `user_role` VALUES (1,1),(32,2)", "description": "Inserts two rows into the user_role table. The first row has id 1 and role_id 1, and the second row has id 32 and role_id 2.", "concepts": ["INSERT INTO", "VALUES", "user_role", "1", "32", "2"], "instruction": "Write a SQL query to insert two rows into the user_role table. The first row has id 1 and role_id 1, and the second row has id 32 and role_id 2.", "response": "-- Reasoning:\nWe need to insert two rows into the user_role table. The first row should have id 1 and role_id 1, and the second row should have id 32 and role_id 2.\n\n-- Solution:\n```sql\nINSERT INTO user_role (id, role_id)\nVALUES (1, 1), (32, 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the user_role table:\n  \u2022 id 1 and role_id 1\n  \u2022 id 32 and role_id 2\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM user_role;"}
{"seed": "/* Inserts a new document header into the KREW_DOC_HDR_T table. */\nINSERT INTO KREW_DOC_HDR_T (CRTE_DT,DOC_HDR_ID,DOC_HDR_STAT_CD,DOC_TYP_ID,DOC_VER_NBR,INITR_PRNCPL_ID,OBJ_ID,RTE_LVL,RTE_PRNCPL_ID,RTE_STAT_MDFN_DT,STAT_MDFN_DT,TTL,VER_NBR)\n  VALUES (STR_TO_DATE( '20090317101419', '%Y%m%d%H%i%s' ),'2701','R','2683',1,'admin','0E6639DF-0DC4-24C1-2D48-21014B7A22BB',1,'admin',STR_TO_DATE( '20090317101438', '%Y%m%d%H%i%s' ),STR_TO_DATE( '20090317101440', '%Y%m%d%H%i%s' ),'Travel Request - test',11)", "description": "Inserts a new document header into the KREW_DOC_HDR_T table.", "concepts": ["INSERT INTO", "VALUES", "STR_TO_DATE", "DATE", "INT", "VARCHAR", "UUID", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT"], "instruction": "Write a SQL query to insert a new document header into the KREW_DOC_HDR_T table.", "response": "-- Reasoning:\nWe need to insert a new document header into the KREW_DOC_HDR_T table.\n\n-- Solution:\n```sql\nINSERT INTO KREW_DOC_HDR_T (DOC_HDR_ID, DOC_TYP_ID, DOC_HDR_STAT_CD, DOC_HDR_STAT_DT, VER_NBR, INITR_PRNCPL_ID, INITR_PRNCPL_NM, INITR_PRNCPL_TYP_CD, INITR_PRNCPL_TYP_NM, INITR_PRNCPL_TYP_LBL, INITR_PRNCPL_ID_TYP_CD, INITR_PRNCPL_ID_TYP_NM, INITR_PRNCPL_ID_TYP_LBL, INITR_PRNCPL_ID_VAL, INITR_PRNCPL_ID_OBJ_ID, INITR_PRNCPL_ID_VER_NBR, INITR_PRNCPL_ID_TYP_ID, INITR_PRNCPL_ID_TYP_NMSPC_CD, INITR_PRNCPL_ID_TYP_NMSPC_CD, INITR_PRNCPL_ID_TYP_NMSPC_CD, INITR_PRNCPL_ID_TYP_NMSPC_CD, INITR_PRNCPL_ID_TYP_NMSPC_CD"}
{"seed": "/* Sets the value of the variable @OLD_UNIQUE_CHECKS to the current value of the variable UNIQUE_CHECKS. */\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS", "description": "Sets the value of the variable @OLD_UNIQUE_CHECKS to the current value of the variable UNIQUE_CHECKS.", "concepts": ["SET", "UNIQUE_CHECKS"], "instruction": "Write a SQL query to set the value of the variable @OLD_UNIQUE_CHECKS to the current value of the variable UNIQUE_CHECKS.", "response": "-- Reasoning:\nWe need to set the value of the variable @OLD_UNIQUE_CHECKS to the current value of the variable UNIQUE_CHECKS. This is to ensure that we can restore the original value of the variable after the query.\n\n-- Solution:\n```sql\nSET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;\n```\n\n-- Explanation:\nThis SET statement sets the value of the variable @OLD_UNIQUE_CHECKS to the current value of the variable UNIQUE_CHECKS. This is to ensure that we can restore the original value of the variable after the query.\n\n-- Tests:\n-- 1. Check the value of the variable UNIQUE_CHECKS\nSELECT @@UNIQUE_CHECKS;"}
{"seed": "/* Saves the current value of the FOREIGN_KEY_CHECKS variable and sets it to 0. */\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS", "description": "Saves the current value of the FOREIGN_KEY_CHECKS variable and sets it to 0.", "concepts": ["SET", "FOREIGN_KEY_CHECKS"], "instruction": "Write a SQL query to save the current value of the FOREIGN_KEY_CHECKS variable and set it to 0.", "response": "-- Reasoning:\nWe need to temporarily disable foreign key checks so that we can modify the orders table.\n\n-- Solution:\n```sql\nSET FOREIGN_KEY_CHECKS = 0;\n```\n\n-- Explanation:\nThis SET statement sets the FOREIGN_KEY_CHECKS variable to 0, disabling foreign key checks.\n\n-- Tests:\n-- 1. Verify foreign key checks are disabled\nPRAGMA foreign_key_check;"}
{"seed": "/* Sets the SQL mode to ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION. */\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'", "description": "Sets the SQL mode to ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION.", "concepts": ["SET", "SQL_MODE"], "instruction": "Write a SQL query to set the SQL mode to ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION.", "response": "-- Reasoning:\nWe need to set the SQL mode to ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION.\n\n-- Solution:\n```sql\nSET SQL_MODE = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n```\n\n-- Explanation:\nThis SET statement sets the SQL mode to ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION.\n\n-- Tests:\n-- 1. Verify SQL mode is set correctly\nSELECT @@sql_mode;"}
{"seed": "/* Creates a schema named Travel if it does not already exist. */\nCREATE SCHEMA IF NOT EXISTS `Travel`", "description": "Creates a schema named Travel if it does not already exist.", "concepts": ["CREATE SCHEMA", "IF", "NOT", "EXISTS"], "instruction": "Write a SQL query to create a schema named Travel if it does not already exist.", "response": "-- Reasoning:\nWe need to create a new schema named Travel if it does not already exist.\n\n-- Solution:\n```sql\nCREATE SCHEMA IF NOT EXISTS Travel;\n```\n\n-- Explanation:\nThis statement creates a new schema named Travel if it does not already exist.\n\n-- Tests:\n-- 1. Verify schema exists\nSELECT name FROM sqlite_master WHERE type='schema';"}
{"seed": "/* Drops the table named Trains if it exists. */\nDROP TABLE IF EXISTS `Travel`.`Trains`", "description": "Drops the table named Trains if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "Travel", "Trains"], "instruction": "Write a SQL query to drop the Travel.Trains table if it exists.", "response": "-- Reasoning:\nWe need to drop the Travel.Trains table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Travel.Trains;\n```\n\n-- Explanation:\nThis DROP statement removes the Travel.Trains table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Travel.Trains');"}
{"seed": "/* Creates a table named Trains with columns Tr_id, Tr_num, Mon, Tue, Wed, Thu, Fri, Sat, and Sun. Tr_id is the primary key and auto-increments. Tr_num is unique. */\nCREATE TABLE IF NOT EXISTS `Travel`.`Trains` (\n  `Tr_id` INT NOT NULL AUTO_INCREMENT,\n  `Tr_num` INT NOT NULL,\n  `Mon` VARCHAR(45) NULL,\n  `Tue` VARCHAR(45) NULL,\n  `Wed` VARCHAR(45) NULL,\n  `Thu` VARCHAR(45) NULL,\n  `Fri` VARCHAR(45) NULL,\n  `Sat` VARCHAR(45) NULL,\n  `Sun` VARCHAR(45) NULL,\n  PRIMARY KEY (`Tr_id`),\n  UNIQUE INDEX `Tr_id_UNIQUE` (`Tr_id` ASC) VISIBLE,\n  UNIQUE INDEX `Tr_num_UNIQUE` (`Tr_num` ASC) VISIBLE)\nENGINE = InnoDB", "description": "Creates a table named Trains with columns Tr_id, Tr_num, Mon, Tue, Wed, Thu, Fri, Sat, and Sun. Tr_id is the primary key and auto-increments. Tr_num is unique.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE", "INDEX", "INDEX", "INDEX", "INDEX", "INDEX"], "instruction": "Write a SQL query to create a table named Trains with columns Tr_id, Tr_num, Mon, Tue, Wed, Thu, Fri, Sat, and Sun. Tr_id is the primary key and auto-increments. Tr_num is unique.", "response": "-- Reasoning:\nWe need a new table named Trains. It should have an integer primary key so that each train has a unique identifier, and a unique train number. It should also have a column for each day of the week, so that we can store the number of trains that run on each day.\n\n-- Solution:\n```sql\nCREATE TABLE Trains (\n  Tr_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  Tr_num INTEGER UNIQUE,\n  Mon INTEGER,\n  Tue INTEGER,\n  Wed INTEGER,\n  Thu INTEGER,\n  Fri INTEGER,\n  Sat INTEGER,\n  Sun INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the Trains table with nine columns:\n  \u2022 Tr_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Tr_num: integer, unique\n  \u2022 Mon: integer\n  \u2022 Tue: integer\n  \u2022 Wed: integer\n  \u2022 Thu: integer\n  \u2022 Fri: integer\n  \u2022 Sat: integer\n  \u2022 Sun: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Trains');"}
{"seed": "/* Drops the table named Routes if it exists. */\nDROP TABLE IF EXISTS `Travel`.`Routes`", "description": "Drops the table named Routes if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "Routes"], "instruction": "Write a SQL query to drop the table named Routes if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Routes if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Routes;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Routes');"}
{"seed": "/* Creates a table named Routes with five columns: r_id (integer primary key), r_name (varchar), dep (varchar), arr (varchar), dep_time (varchar), arr_time (varchar), train_id (integer). */\nCREATE TABLE IF NOT EXISTS `Travel`.`Routes` (\n  `r_id` INT NOT NULL AUTO_INCREMENT,\n  `r_name` VARCHAR(45) NOT NULL,\n  `dep` VARCHAR(45) NULL,\n  `arr` VARCHAR(45) NULL,\n  `dep_time` VARCHAR(45) NULL,\n  `arr_time` VARCHAR(45) NULL,\n  `train_id` INT NULL,\n  PRIMARY KEY (`r_id`),\n  UNIQUE INDEX `r_id_UNIQUE` (`r_id` ASC) VISIBLE,\n  INDEX `fkey_idx` (`train_id` ASC) VISIBLE,\n  UNIQUE INDEX `r_name_UNIQUE` (`r_name` ASC) VISIBLE,\n  CONSTRAINT `trainkey`\n    FOREIGN KEY (`train_id`)\n    REFERENCES `Travel`.`Trains` (`Tr_id`)\n    ON DELETE SET NULL\n    ON UPDATE SET NULL)\nENGINE = InnoDB", "description": "Creates a table named Routes with five columns: r_id (integer primary key), r_name (varchar), dep (varchar), arr (varchar), dep_time (varchar), arr_time (varchar), train_id (integer).", "concepts": ["CREATE TABLE", "IF NOT EXISTS", "Routes", "Travel", "Routes", "r_id", "r_name", "dep", "arr", "dep_time"], "instruction": "Write a SQL query to create a table named Routes with five columns: r_id (integer primary key), r_name (varchar), dep (varchar), arr (varchar), dep_time (varchar), arr_time (varchar), train_id (integer).", "response": "-- Reasoning:\nWe need a new table named Routes. It should have an integer primary key so that each route has a unique identifier, and a name column to store the route\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Routes (\n  r_id INT PRIMARY KEY,\n  r_name VARCHAR(255),\n  dep VARCHAR(255),\n  arr VARCHAR(255),\n  dep_time VARCHAR(255),\n  arr_time VARCHAR(255),\n  train_id INT\n);\n```\n\n-- Explanation:\nThis statement defines the Routes table with six columns:\n  \u2022 r_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 r_name: variable\u2010length string up to 255 characters\n  \u2022 dep: variable\u2010length string up to 255 characters\n  \u2022 arr: variable\u2010length string up to 255 characters\n  \u2022 dep_time: variable\u2010length string up to 255 characters\n  \u2022 arr_time: variable\u2010length string up to 255 characters\n  \u2022 train_id: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Routes');"}
{"seed": "/* Drops the table named Stations if it exists. */\nDROP TABLE IF EXISTS `Travel`.`Stations`", "description": "Drops the table named Stations if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "Stations"], "instruction": "Write a SQL query to drop the table named Stations if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Stations if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Stations;\n```\n\n-- Explanation:\nThis statement drops the table named Stations if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('Stations');"}
{"seed": "/* Creates a table named Stations with two columns: st_id (integer primary key) and name (varchar). */\nCREATE TABLE IF NOT EXISTS `Travel`.`Stations` (\n  `st_id` INT NOT NULL AUTO_INCREMENT,\n  `name` VARCHAR(45) NULL,\n  PRIMARY KEY (`st_id`),\n  UNIQUE INDEX `st_id_UNIQUE` (`st_id` ASC) VISIBLE)\nENGINE = InnoDB", "description": "Creates a table named Stations with two columns: st_id (integer primary key) and name (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE", "INDEX", "VISIBLE", "ENGINE", "InnoDB"], "instruction": "Write a SQL query to create a table named Stations with two columns: st_id (integer primary key) and name (varchar).", "response": "-- Reasoning:\nWe need a new table named Stations. It should have an integer primary key so that each station has a unique identifier, and a name column to store the station\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Stations (\n  st_id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the Stations table with two columns:\n  \u2022 st_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Stations');"}
{"seed": "/* Resets the SQL mode to the previous value. */\nSET SQL_MODE=@OLD_SQL_MODE", "description": "Resets the SQL mode to the previous value.", "concepts": ["SET", "SQL_MODE", "@OLD_SQL_MODE"], "instruction": "Write a SQL query to reset the SQL mode to the previous value.", "response": "-- Reasoning:\nWe need to reset the SQL mode to the previous value.\n\n-- Solution:\n```sql\nSET SQL_MODE=@OLD_SQL_MODE;\n```\n\n-- Explanation:\nThis statement resets the SQL mode to the previous value.\n\n-- Tests:\n-- 1. Verify SQL mode is reset\nSELECT @@sql_mode;"}
{"seed": "/* Resets the foreign key checks to the previous state. */\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS", "description": "Resets the foreign key checks to the previous state.", "concepts": ["SET FOREIGN_KEY_CHECKS"], "instruction": "Write a SQL query to reset the foreign key checks to the previous state.", "response": "-- Reasoning:\nWe need to reset the foreign key checks to the previous state.\n\n-- Solution:\n```sql\nPRAGMA foreign_keys = ON;\n```\n\n-- Explanation:\nThis PRAGMA statement resets the foreign key checks to the previous state.\n\n-- Tests:\n-- 1. Check foreign key checks are on\nPRAGMA foreign_keys;"}
{"seed": "/* Resets the unique checks to their previous state. */\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS", "description": "Resets the unique checks to their previous state.", "concepts": ["SET", "UNIQUE_CHECKS", "@OLD_UNIQUE_CHECKS"], "instruction": "Write a SQL query to reset the unique checks to their previous state.", "response": "-- Reasoning:\nWe need to reset the unique checks on the products table back to their previous state.\n\n-- Solution:\n```sql\nPRAGMA foreign_keys = ON;\n```\n\n-- Explanation:\nThis PRAGMA statement resets the foreign key checks to ON.\n\n-- Tests:\n-- 1. Check foreign key checks are ON\nPRAGMA foreign_keys;"}
{"seed": "/* Inserts a new row into the Trains table with the given values. */\nINSERT INTO `Travel`.`Trains` (`Tr_id`, `Tr_num`, `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`) VALUES (1, 11, 'M1', 'M2', 'M1', 'M2', 'M2', 'M2', 'M1')", "description": "Inserts a new row into the Trains table with the given values.", "concepts": ["INSERT INTO", "VALUES", "Travel", "Trains", "Tr_id", "Tr_num", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], "instruction": "Write a SQL query to insert a new row into the Trains table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the Trains table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO Trains (train_id, train_name, train_type)\nVALUES (1, 'Train 1', 'Local');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Trains table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Trains;"}
{"seed": "/* Inserts a new train with id 5, number 55, and the following days of the week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. */\nINSERT INTO `Travel`.`Trains` (`Tr_id`, `Tr_num`, `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`) VALUES (5, 55, NULL, NULL, NULL, NULL, 'M9', 'M10', 'M10')", "description": "Inserts a new train with id 5, number 55, and the following days of the week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.", "concepts": ["INSERT INTO", "VALUES", "Travel", "Trains", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], "instruction": "Write a SQL query to insert a new train with id 5, number 55, and the following days of the week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.", "response": "-- Reasoning:\nWe need to insert a new train with id 5, number 55, and the following days of the week: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n\n-- Solution:\n```sql\nINSERT INTO trains (id, number, monday, tuesday, wednesday, thursday, friday, saturday, sunday)\nVALUES (5, 55, 1, 1, 1, 1, 1, 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the trains table with the following values:\n  \u2022 id: 5\n  \u2022 number: 55\n  \u2022 monday: 1\n  \u2022 tuesday: 1\n  \u2022 wednesday: 1\n  \u2022 thursday: 1\n  \u2022 friday: 1\n  \u2022 saturday: 1\n  \u2022 sunday: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM trains;"}
{"seed": "/* Inserts a new train with id 6, number 66, and Monday and Tuesday available. */\nINSERT INTO `Travel`.`Trains` (`Tr_id`, `Tr_num`, `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`) VALUES (6, 66, NULL, 'M11', NULL, 'M11', NULL, 'M12', NULL)", "description": "Inserts a new train with id 6, number 66, and Monday and Tuesday available.", "concepts": ["INSERT INTO", "VALUES", "Tr_id", "Tr_num", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], "instruction": "Write a SQL query to insert a new train with id 6, number 66, and Monday and Tuesday available.", "response": "-- Reasoning:\nWe need to insert a new train into the trains table. It should have an id of 6, a number of 66, and availability for Monday and Tuesday.\n\n-- Solution:\n```sql\nINSERT INTO trains (id, number, monday, tuesday)\n  VALUES (6, 66, 1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the trains table with:\n  \u2022 id: 6\n  \u2022 number: 66\n  \u2022 monday: 1\n  \u2022 tuesday: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM trains;"}
{"seed": "/* Inserts a new train with id 7, number 77, and Monday and Thursday meals. */\nINSERT INTO `Travel`.`Trains` (`Tr_id`, `Tr_num`, `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`) VALUES (7, 77, 'M13', NULL, 'M13', 'M13', NULL, NULL, NULL)", "description": "Inserts a new train with id 7, number 77, and Monday and Thursday meals.", "concepts": ["INSERT INTO", "VALUES", "Tr_id", "Tr_num", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], "instruction": "Write a SQL query to insert a new train with id 7, number 77, and Monday and Thursday meals.", "response": "-- Reasoning:\nWe need to insert a new train into the trains table. It should have an id of 7, a number of 77, and meals of Monday and Thursday.\n\n-- Solution:\n```sql\nINSERT INTO trains (id, number, meals)\n  VALUES (7, 77, 'Monday,Thursday');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the trains table with:\n  \u2022 id: 7\n  \u2022 number: 77\n  \u2022 meals: Monday,Thursday\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM trains;"}
{"seed": "/* Inserts a new train with id 8, number 88, and the following days: Monday 14, Tuesday 15, and Sunday 14. */\nINSERT INTO `Travel`.`Trains` (`Tr_id`, `Tr_num`, `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`) VALUES (8, 88, NULL, 'M14', NULL, 'M15', NULL, 'M14', 'M14')", "description": "Inserts a new train with id 8, number 88, and the following days: Monday 14, Tuesday 15, and Sunday 14.", "concepts": ["INSERT INTO", "VALUES", "NULL", "M14", "M15", "M14"], "instruction": "Write a SQL query to insert a new train with id 8, number 88, and the following days: Monday 14, Tuesday 15, and Sunday 14.", "response": "-- Reasoning:\nWe need to insert a new train into the trains table. It should have an id of 8, a number of 88, and the following days: Monday 14, Tuesday 15, and Sunday 14.\n\n-- Solution:\n```sql\nINSERT INTO trains (id, number, monday, tuesday, sunday)\n  VALUES (8, 88, 14, 15, 14);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the trains table with the following values:\n  \u2022 id: 8\n  \u2022 number: 88\n  \u2022 monday: 14\n  \u2022 tuesday: 15\n  \u2022 sunday: 14\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM trains;"}
{"seed": "/* Inserts a new train with id 10, number 00, and no days of the week. */\nINSERT INTO `Travel`.`Trains` (`Tr_id`, `Tr_num`, `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`) VALUES (10, 00, NULL, NULL, 'M19', NULL, NULL, NULL, NULL)", "description": "Inserts a new train with id 10, number 00, and no days of the week.", "concepts": ["INSERT INTO", "VALUES", "Tr_id", "Tr_num", "Mon", "Wed", "M19"], "instruction": "Write a SQL query to insert a new train with id 10, number 00, and no days of the week.", "response": "-- Reasoning:\nWe need to insert a new train into the trains table. It should have an id of 10, a number of 00, and no days of the week.\n\n-- Solution:\n```sql\nINSERT INTO trains (id, number, days)\nVALUES (10, '00', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the trains table with:\n  \u2022 id: 10\n  \u2022 number: 00\n  \u2022 days: empty string\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM trains;"}
{"seed": "/* Inserts a new route with id 1, name M1, departure station A, arrival station F, departure time 9-00, arrival time 17-00, and train id 1. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (1, 'M1', 'A', 'F', '9-00', '17-00', 1)", "description": "Inserts a new route with id 1, name M1, departure station A, arrival station F, departure time 9-00, arrival time 17-00, and train id 1.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 1, name M1, departure station A, arrival station F, departure time 9-00, arrival time 17-00, and train id 1.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 1, a name of M1, a departure station of A, an arrival station of F, a departure time of 9-00, an arrival time of 17-00, and a train id of 1.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (1, 'M1', 'A', 'F', '9-00', '17-00', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 2, name M2, departure station F, arrival station A, departure time 9-00, arrival time 17-00, and train id 1. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (2, 'M2', 'F', 'A', '9-00', '17-00', 1)", "description": "Inserts a new route with id 2, name M2, departure station F, arrival station A, departure time 9-00, arrival time 17-00, and train id 1.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 2, name M2, departure station F, arrival station A, departure time 9-00, arrival time 17-00, and train id 1.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 2, a name of M2, a departure station of F, an arrival station of A, a departure time of 9-00, an arrival time of 17-00, and a train id of 1.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (2, 'M2', 'F', 'A', '9-00', '17-00', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 3, name M3, departure station A, arrival station C, departure time 9-00, arrival time 11-00, and train id 2. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (3, 'M3', 'A', 'C', '9-00', '11-00', 2)", "description": "Inserts a new route with id 3, name M3, departure station A, arrival station C, departure time 9-00, arrival time 11-00, and train id 2.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 3, name M3, departure station A, arrival station C, departure time 9-00, arrival time 11-00, and train id 2.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 3, a name of M3, a departure station of A, an arrival station of C, a departure time of 9-00, an arrival time of 11-00, and a train id of 2.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (3, 'M3', 'A', 'C', '9-00', '11-00', 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 4, name M4, departure station A, arrival station D, departure time 9-00, arrival time 12-00, and train id 2. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (4, 'M4', 'A', 'D', '9-00', '12-00', 2)", "description": "Inserts a new route with id 4, name M4, departure station A, arrival station D, departure time 9-00, arrival time 12-00, and train id 2.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 4, name M4, departure station A, arrival station D, departure time 9-00, arrival time 12-00, and train id 2.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 4, a name of M4, a departure station of A, an arrival station of D, a departure time of 9-00, an arrival time of 12-00, and a train id of 2.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (4, 'M4', 'A', 'D', '9-00', '12-00', 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route into the Routes table with the given values. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (5, 'M5', 'F', 'A', '10-00', '13-00', 3)", "description": "Inserts a new route into the Routes table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new route into the Routes table with the given values.", "response": "-- Reasoning:\nWe need to insert a new route into the Routes table. It should have the following values:\n  \u2022 RouteId: 2\n  \u2022 Source: Chennai\n  \u2022 Destination: Bangalore\n  \u2022 Price: 600\n\n-- Solution:\n```sql\nINSERT INTO Routes (RouteId, Source, Destination, Price)\nVALUES (2, 'Chennai', 'Bangalore', 600);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM Routes;"}
{"seed": "/* Inserts a new route with id 8, name M8, departure station F, arrival station B, departure time 13:00, arrival time 20:00, and train id 4. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (8, 'M8', 'F', 'B', '13-00', '20-00', 4)", "description": "Inserts a new route with id 8, name M8, departure station F, arrival station B, departure time 13:00, arrival time 20:00, and train id 4.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 8, name M8, departure station F, arrival station B, departure time 13:00, arrival time 20:00, and train id 4.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 8, a name of M8, a departure station of F, an arrival station of B, a departure time of 13:00, an arrival time of 20:00, and a train id of 4.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (8, 'M8', 'F', 'B', '13:00', '20:00', 4);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 9, name M9, departure station B, arrival station F, departure time 9-00, arrival time 16-00, and train id 5. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (9, 'M9', 'B', 'F', '9-00', '16-00', 5)", "description": "Inserts a new route with id 9, name M9, departure station B, arrival station F, departure time 9-00, arrival time 16-00, and train id 5.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 9, name M9, departure station B, arrival station F, departure time 9-00, arrival time 16-00, and train id 5.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 9, a name of M9, a departure station of B, an arrival station of F, a departure time of 9-00, an arrival time of 16-00, and a train id of 5.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (9, 'M9', 'B', 'F', '9-00', '16-00', 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 10, name M10, departure station C, arrival station A, departure time 14-00, arrival time 17-00, and train id 5. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (10, 'M10', 'C', 'A', '14-00', '17-00', 5)", "description": "Inserts a new route with id 10, name M10, departure station C, arrival station A, departure time 14-00, arrival time 17-00, and train id 5.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 10, name M10, departure station C, arrival station A, departure time 14-00, arrival time 17-00, and train id 5.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 10, a name of M10, a departure station of C, an arrival station of A, a departure time of 14-00, an arrival time of 17-00, and a train id of 5.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (10, 'M10', 'C', 'A', '14-00', '17-00', 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 11, name M11, departure station A, arrival station J, departure time 9-00, arrival time 21-00, and train id 6. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (11, 'M11', 'A', 'J', '9-00', '21-00', 6)", "description": "Inserts a new route with id 11, name M11, departure station A, arrival station J, departure time 9-00, arrival time 21-00, and train id 6.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 11, name M11, departure station A, arrival station J, departure time 9-00, arrival time 21-00, and train id 6.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 11, a name of M11, a departure station of A, an arrival station of J, a departure time of 9-00, an arrival time of 21-00, and a train id of 6.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (11, 'M11', 'A', 'J', '9-00', '21-00', 6);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 12, name M12, departure station J, arrival station A, departure time 9-00, arrival time 21-00, and train id 6. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (12, 'M12', 'J', 'A', '9-00', '21-00', 6)", "description": "Inserts a new route with id 12, name M12, departure station J, arrival station A, departure time 9-00, arrival time 21-00, and train id 6.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 12, name M12, departure station J, arrival station A, departure time 9-00, arrival time 21-00, and train id 6.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 12, a name of M12, a departure station of J, an arrival station of A, a departure time of 9-00, an arrival time of 21-00, and a train id of 6.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (12, 'M12', 'J', 'A', '9-00', '21-00', 6);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 13, name M13, departure station G, arrival station J, departure time 12-00, arrival time 15-00, and train id 7. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (13, 'M13', 'G', 'J', '12-00', '15-00', 7)", "description": "Inserts a new route with id 13, name M13, departure station G, arrival station J, departure time 12-00, arrival time 15-00, and train id 7.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 13, name M13, departure station G, arrival station J, departure time 12-00, arrival time 15-00, and train id 7.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 13, a name of M13, a departure station of G, an arrival station of J, a departure time of 12-00, an arrival time of 15-00, and a train id of 7.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (13, 'M13', 'G', 'J', '12-00', '15-00', 7);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 14, name M14, departure station H, arrival station C, departure time 13-00, arrival time 18-00, and train id 8. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (14, 'M14', 'H', 'C', '13-00', '18-00', 8)", "description": "Inserts a new route with id 14, name M14, departure station H, arrival station C, departure time 13-00, arrival time 18-00, and train id 8.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 14, name M14, departure station H, arrival station C, departure time 13-00, arrival time 18-00, and train id 8.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 14, a name of M14, a departure station of H, an arrival station of C, a departure time of 13-00, an arrival time of 18-00, and a train id of 8.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (14, 'M14', 'H', 'C', '13-00', '18-00', 8);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 15, name M15, departure station A, arrival station D, departure time 18-00, arrival time 21-00, and train id 8. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (15, 'M15', 'A', 'D', '18-00', '21-00', 8)", "description": "Inserts a new route with id 15, name M15, departure station A, arrival station D, departure time 18-00, arrival time 21-00, and train id 8.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 15, name M15, departure station A, arrival station D, departure time 18-00, arrival time 21-00, and train id 8.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 15, a name of M15, a departure station of A, an arrival station of D, a departure time of 18-00, an arrival time of 21-00, and a train id of 8.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (15, 'M15', 'A', 'D', '18-00', '21-00', 8);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 16, name M16, departure station B, arrival station I, departure time 10-00, arrival time 17-00, and train id 9. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (16, 'M16', 'B', 'I', '10-00', '17-00', 9)", "description": "Inserts a new route with id 16, name M16, departure station B, arrival station I, departure time 10-00, arrival time 17-00, and train id 9.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 16, name M16, departure station B, arrival station I, departure time 10-00, arrival time 17-00, and train id 9.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 16, a name of M16, a departure station of B, an arrival station of I, a departure time of 10-00, an arrival time of 17-00, and a train id of 9.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (16, 'M16', 'B', 'I', '10-00', '17-00', 9);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 17, name M17, departure station C, arrival station H, departure time 14-00, arrival time 21-00, and train id 9. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (17, 'M17', 'C', 'H', '14-00', '21-00', 9)", "description": "Inserts a new route with id 17, name M17, departure station C, arrival station H, departure time 14-00, arrival time 21-00, and train id 9.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 17, name M17, departure station C, arrival station H, departure time 14-00, arrival time 21-00, and train id 9.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 17, a name of M17, a departure station of C, an arrival station of H, a departure time of 14-00, an arrival time of 21-00, and a train id of 9.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (17, 'M17', 'C', 'H', '14-00', '21-00', 9);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 18, name M18, departure station H, arrival station B, departure time 10-00, arrival time 16-00, and train id 9. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (18, 'M18', 'H', 'B', '10-00', '16-00', 9)", "description": "Inserts a new route with id 18, name M18, departure station H, arrival station B, departure time 10-00, arrival time 16-00, and train id 9.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 18, name M18, departure station H, arrival station B, departure time 10-00, arrival time 16-00, and train id 9.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 18, a name of M18, a departure station of H, an arrival station of B, a departure time of 10-00, an arrival time of 16-00, and a train id of 9.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (18, 'M18', 'H', 'B', '10-00', '16-00', 9);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new route with id 19, name M19, departure station A, arrival station J, departure time 10-00, arrival time 19-00, and train id 10. */\nINSERT INTO `Travel`.`Routes` (`r_id`, `r_name`, `dep`, `arr`, `dep_time`, `arr_time`, `train_id`) VALUES (19, 'M19', 'A', 'J', '10-00', '19-00', 10)", "description": "Inserts a new route with id 19, name M19, departure station A, arrival station J, departure time 10-00, arrival time 19-00, and train id 10.", "concepts": ["INSERT INTO", "VALUES", "Routes", "dep", "arr", "dep_time", "arr_time", "train_id"], "instruction": "Write a SQL query to insert a new route with id 19, name M19, departure station A, arrival station J, departure time 10-00, arrival time 19-00, and train id 10.", "response": "-- Reasoning:\nWe need to insert a new route into the routes table. It should have an id of 19, a name of M19, a departure station of A, an arrival station of J, a departure time of 10-00, an arrival time of 19-00, and a train id of 10.\n\n-- Solution:\n```sql\nINSERT INTO routes (id, name, departure_station, arrival_station, departure_time, arrival_time, train_id)\nVALUES (19, 'M19', 'A', 'J', '10-00', '19-00', 10);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the routes table with the given values.\n\n-- Tests:\n-- 1. Verify new route appears\nSELECT * FROM routes;"}
{"seed": "/* Inserts a new row into the Stations table with the values 1 and 'A'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (1, 'A')", "description": "Inserts a new row into the Stations table with the values 1 and 'A'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 1 and 'A'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 1 and 'A'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (1, 'A');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 1 and 'A'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 2 and B. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (2, 'B')", "description": "Inserts a new row into the Stations table with the values 2 and B.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the Stations table with the values 3 and 'C'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (3, 'C')", "description": "Inserts a new row into the Stations table with the values 3 and 'C'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 3 and 'C'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 3 and 'C'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (3, 'C');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 3 and 'C'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 4 and 'D'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (4, 'D')", "description": "Inserts a new row into the Stations table with the values 4 and 'D'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 4 and 'D'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 4 and 'D'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (4, 'D');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 4 and 'D'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 5 and 'E'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (5, 'E')", "description": "Inserts a new row into the Stations table with the values 5 and 'E'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 5 and 'E'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 5 and 'E'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (5, 'E');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 5 and 'E'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 6 and 'F'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (6, 'F')", "description": "Inserts a new row into the Stations table with the values 6 and 'F'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 6 and 'F'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 6 and 'F'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (6, 'F');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 6 and 'F'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 7 and 'G'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (7, 'G')", "description": "Inserts a new row into the Stations table with the values 7 and 'G'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 7 and 'G'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 7 and 'G'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (7, 'G');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 7 and 'G'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 8 and 'H'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (8, 'H')", "description": "Inserts a new row into the Stations table with the values 8 and 'H'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 8 and 'H'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 8 and 'H'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (8, 'H');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 8 and 'H'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 9 and 'I'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (9, 'I')", "description": "Inserts a new row into the Stations table with the values 9 and 'I'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 9 and 'I'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 9 and 'I'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (9, 'I');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 9 and 'I'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Inserts a new row into the Stations table with the values 10 and 'J'. */\nINSERT INTO `Travel`.`Stations` (`st_id`, `name`) VALUES (10, 'J')", "description": "Inserts a new row into the Stations table with the values 10 and 'J'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Stations table with the values 10 and 'J'.", "response": "-- Reasoning:\nWe need to insert a new row into the Stations table with the values 10 and 'J'.\n\n-- Solution:\n```sql\nINSERT INTO Stations (ID, Name)\nVALUES (10, 'J');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Stations table with the values 10 and 'J'.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Stations;"}
{"seed": "/* Updates the pswd column of the usr table to the value '4a7d1ed414474e4033ac29ccb8653d9b' for the rows with id 1, 2, and 3. */\nupdate usr set pswd = '4a7d1ed414474e4033ac29ccb8653d9b' where id in (1, 2, 3)", "description": "Updates the pswd column of the usr table to the value '4a7d1ed414474e4033ac29ccb8653d9b' for the rows with id 1, 2, and 3.", "concepts": ["UPDATE", "SET", "WHERE", "IN", "VALUES"], "instruction": "Write a SQL query to update the pswd column of the usr table to the value '4a7d1ed414474e4033ac29ccb8653d9b' for the rows with id 1, 2, and 3.", "response": "-- Reasoning:\nWe need to update the pswd column of the usr table to the value '4a7d1ed414474e4033ac29ccb8653d9b' for the rows with id 1, 2, and 3.\n\n-- Solution:\n```sql\nUPDATE usr\nSET pswd = '4a7d1ed414474e4033ac29ccb8653d9b'\nWHERE id IN (1, 2, 3);\n```\n\n-- Explanation:\nThis UPDATE statement updates the pswd column of the usr table to the value '4a7d1ed414474e4033ac29ccb8653d9b' for the rows with id 1, 2, and 3.\n\n-- Tests:\n-- 1. Verify pswd column is updated\nSELECT * FROM usr;"}
{"seed": "/* Drops the table gamereview_games if it exists. */\nDROP TABLE IF EXISTS gamereview_games", "description": "Drops the table gamereview_games if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table gamereview_games if it exists.", "response": "-- Reasoning:\nWe need to drop the gamereview_games table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS gamereview_games;\n```\n\n-- Explanation:\nThis statement drops the gamereview_games table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('gamereview_games');"}
{"seed": "/* Updates the enable column of the session table to false for all sessions that have been active for more than a year. */\nUPDATE `session` SET `enable`= false where DATEDIFF(now(),session.DateFin)>365", "description": "Updates the enable column of the session table to false for all sessions that have been active for more than a year.", "concepts": ["UPDATE", "WHERE", "DATEDIFF", "INT", "DATE", "now", "session", "DateFin", "enable"], "instruction": "Write a SQL query to update the enable column of the session table to false for all sessions that have been active for more than a year.", "response": "-- Reasoning:\nWe need to update the enable column of the session table to false for all sessions that have been active for more than a year.\n\n-- Solution:\n```sql\nUPDATE session\nSET enable = false\nWHERE active_since < datetime('now', '-1 year');\n```\n\n-- Explanation:\nThis UPDATE statement updates the enable column of the session table to false for all sessions that have been active for more than a year.\n\n-- Tests:\n-- 1. Verify that all sessions that have been active for more than a year have been disabled\nSELECT * FROM session WHERE enable = false;"}
{"seed": "/* Creates a table named donner with two columns: IdFormation (integer) and IdUtilisateur (integer). */\nCREATE TABLE `donner` (\n  `IdFormation` int(11) NOT NULL,\n  `IdUtilisateur` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named donner with two columns: IdFormation (integer) and IdUtilisateur (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named donner with two columns: IdFormation (integer) and IdUtilisateur (integer).", "response": "-- Reasoning:\nWe need a new table named donner. It should have two columns:\n  \u2022 IdFormation: integer, primary key\n  \u2022 IdUtilisateur: integer, primary key\n\n-- Solution:\n```sql\nCREATE TABLE donner (\n  IdFormation INT PRIMARY KEY,\n  IdUtilisateur INT PRIMARY KEY\n);\n```\n\n-- Explanation:\nThis statement defines the donner table with two columns:\n  \u2022 IdFormation: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 IdUtilisateur: integer, marked PRIMARY KEY so it cannot be null and is unique\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('donner');"}
{"seed": "/* Inserts 20 rows into the donner table. */\nINSERT INTO `donner` (`IdFormation`, `IdUtilisateur`) VALUES\n(1, 22),\n(4, 22),\n(5, 22),\n(8, 22),\n(17, 22),\n(1, 13),\n(4, 13),\n(5, 13),\n(8, 13),\n(17, 13),\n(18, 14),\n(23, 14),\n(25, 14),\n(26, 14),\n(28, 14),\n(29, 14),\n(30, 14),\n(9, 15),\n(10, 15),\n(14, 15),\n(16, 15),\n(1, 32),\n(4, 32)", "description": "Inserts 20 rows into the donner table.", "concepts": ["INSERT INTO", "VALUES", "IdFormation", "IdUtilisateur"], "instruction": "Write a SQL query to insert 20 rows into the donner table.", "response": "-- Reasoning:\nWe need to insert 20 rows into the donner table.\n\n-- Solution:\n```sql\nINSERT INTO donner (name, age, gender)\nVALUES\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M'),\n  ('', 25, 'M');\n```\n\n-- Explanation:\nThis INSERT statement inserts 20 rows into the donner table.\n\n-- Tests:\n-- 1. Verify 20 rows are"}
{"seed": "/* Creates a table named formation with seven columns: IdFormation (integer primary key), Intitule (varchar), Prix (float), Duree (integer), MaxParticipant (integer), NbreParticipantMin (integer), enable (boolean). */\nCREATE TABLE `formation` (\n  `IdFormation` int(11) NOT NULL,\n  `Intitule` varchar(50) NOT NULL,\n  `Prix` float NOT NULL,\n  `Duree` int(11) NOT NULL,\n  `MaxParticipant` int(11) NOT NULL,\n  `NbreParticipantMin` int(11) NOT NULL,\n  `enable` tinyint(1) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named formation with seven columns: IdFormation (integer primary key), Intitule (varchar), Prix (float), Duree (integer), MaxParticipant (integer), NbreParticipantMin (integer), enable (boolean).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "FLOAT", "INT", "BOOLEAN"], "instruction": "Write a SQL query to create a table named formation with seven columns: IdFormation (integer primary key), Intitule (varchar), Prix (float), Duree (integer), MaxParticipant (integer), NbreParticipantMin (integer), enable (boolean).", "response": "-- Reasoning:\nWe need a new table named formation. It should have an integer primary key so that each formation has a unique identifier, and a name column to store the formation\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE formation (\n  IdFormation INT PRIMARY KEY,\n  Intitule VARCHAR(255),\n  Prix FLOAT,\n  Duree INT,\n  MaxParticipant INT,\n  NbreParticipantMin INT,\n  enable BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the formation table with seven columns:\n  \u2022 IdFormation: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Intitule: variable\u2010length string up to 255 characters\n  \u2022 Prix: float\n  \u2022 Duree: integer\n  \u2022 MaxParticipant: integer\n  \u2022 NbreParticipantMin: integer\n  \u2022 enable: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('formation');"}
{"seed": "/* Creates a table named utilisateur with 10 columns: IdUtilisateur (integer primary key), Nom (varchar), Prenom (varchar), Adresse (varchar), Telephone (varchar), Email (varchar), Login (varchar), Password (varchar), Role (integer), Status (integer), enable (boolean). */\nCREATE TABLE `utilisateur` (\n  `IdUtilisateur` int(11) NOT NULL,\n  `Nom` varchar(50) NOT NULL,\n  `Prenom` varchar(50) NOT NULL,\n  `Adresse` varchar(255) NOT NULL,\n  `Telephone` varchar(50) NOT NULL,\n  `Email` varchar(50) NOT NULL,\n  `Login` varchar(50) NOT NULL,\n  `Password` varchar(255) NOT NULL,\n  `Role` int(11) NOT NULL,\n  `Status` int(11) DEFAULT NULL,\n  `enable` tinyint(1) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named utilisateur with 10 columns: IdUtilisateur (integer primary key), Nom (varchar), Prenom (varchar), Adresse (varchar), Telephone (varchar), Email (varchar), Login (varchar), Password (varchar), Role (integer), Status (integer), enable (boolean).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "BOOLEAN", "AUTO_INCREMENT", "DEFAULT", "ENGINE", "NOT", "NULL", "DEFAULT", "CHARSET", "TIN"], "instruction": "Write a SQL query to create a table named utilisateur with 10 columns: IdUtilisateur (integer primary key), Nom (varchar), Prenom (varchar), Adresse (varchar), Telephone (varchar), Email (varchar), Login (varchar), Password (varchar), Role (integer), Status (integer), enable (boolean).", "response": "-- Reasoning:\nWe need a new table named utilisateur. It should have an integer primary key so that each utilisateur has a unique identifier, and a name column to store the utilisateur\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE utilisateur (\n  IdUtilisateur INT PRIMARY KEY,\n  Nom VARCHAR(255),\n  Prenom VARCHAR(255),\n  Adresse VARCHAR(255),\n  Telephone VARCHAR(255),\n  Email VARCHAR(255),\n  Login VARCHAR(255),\n  Password VARCHAR(255),\n  Role INT,\n  Status INT,\n  enable BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the utilisateur table with 10 columns:\n  \u2022 IdUtilisateur: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Nom: variable\u2010length string up to 255 characters\n  \u2022 Prenom: variable\u2010length string up to 255 characters\n  \u2022 Adresse: variable\u2010length string up to 255 characters\n  \u2022 Telephone: variable\u2010length string up to 255 characters\n  \u2022 Email: variable\u2010length string up to 255 characters\n  \u2022 Login: variable\u2010length string up to 255 characters\n  \u2022 Password: variable\u2010length string up to 255 characters\n  \u2022"}
{"seed": "/* Inserts 11 rows into the users table. */\nINSERT INTO `utilisateur` (`IdUtilisateur`, `Nom`, `Prenom`, `Adresse`, `Telephone`, `Email`, `Login`, `Password`, `Role`, `Status`, `enable`) VALUES\n(1, 'Gandouzz', 'el aminz', 'rue de l\\'\u00e9cole 666z', '0486 666 666', 'amin1910@hotmail.com', 'amin', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 1, NULL, 1),\n(3, 'luis', 'save', 'rue du souvenir 107', '0251515151', 'luis@luis.be', 'luis1234', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 2, 1, 1),\n(5, 'Knuts', 'Jordan', 'rue du poulain 66', '85859696', 'jordan@jordan.be', 'jordan', '$2a$10$jXGw45P/WlDZD0s6mrNdkeRPspotWJxxBYNfqsiymxU3obwKAUYMq', 2, 2, 1),\n(7, 'bizidudu', 'demandeur d emploie', 'rue bbc echarpe 30 ', '0486667788', 'olivier@hotmail.com', 'olivier', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 2, 1, 1),\n(10, 'Krs', 'Nico', 'rue', '33333333', 'nico@nico.be', 'laxo', '$2a$10$NfygDACXHXx4ObP5wEvkleL/DipFPExkdxIs4Z4d1Mua0kbHG9Eju', 2, 1, 1),\n(11, 'a', ' a', 'a', '5555', 'a@a.be', 'pierre', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 2, 1, 1),\n(12, 'b', ' b', 'rue de la f ', '1452', 'b@b.be', 'fabien', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 2, 1, 1),\n(13, 'formateurAA', 'formatzueAA', 'adresse formateurA ', '0125544', 'formateurA@epfc.eu', 'formateurA', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 3, 3, 1),\n(14, 'formateurB', 'formateurB', 'rue de la formation ', '25253636', 'formateurB@formateur', 'formateurb', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 3, 3, 1),\n(15, 'formateurC', 'formateurC', 'rue de la formation ', '89898989', 'formateurC@formateur', 'formateurc', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 3, 3, 1),\n(16, 'marc', 'pichot', 'il habite eterbeek', '454545', 'marc@marc.be', 'marc', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 2, 1, 1),\n(17, 'ponente', 'carmelo', 'rue des brodeurs 9 1000 bruxelles', '0485968574', 'carmelo@carmelo.be', 'carmelo', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 2, 1, 1),\n(22, 'Pennel', 'Benoit', 'EPFC', '02555444666', 'pennel@epfc.eu', 'pennel', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 3, 3, 1),\n(27, 'Silovy', 'Alain', 'rue de l\\'astronomie 24', '025050505', 'alain@alain.eu', 'alain', '$2a$10$/M0H665vN0SueM75RN9yeObkET8q0PnSdmNR1N2momW1aX8KeAW/y', 3, 3, 0),\n(30, 'Boris', 'Verheaghen', 'Bld de l\\'astronomie 24 ', '025656565', 'boris@boris.be', 'boris', '$2a$10$haVnAu6EfXBMRkhuDlVvwedvmWIc57q3eAnIIiW3dEAcPvbyqgkQW', 3, 3, 1),\n(31, 'Krstev', 'Nicolas', 'Bld de l\\'astronomie 24 , Bruxelles', '02 888 88 88 ', 'nicolas@nicolas.be', 'nicolas', '$2a$10$4hIQDChhfGxNSkZfiV9ibO1HFiY8FuNZne68k5OCOo6sqiALrbiS6', 2, 1, 1)", "description": "Inserts 11 rows into the users table.", "concepts": ["INSERT INTO", "VALUES", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to insert 11 rows into the users table.", "response": "-- Reasoning:\nWe need to insert 11 rows into the users table.\n\n-- Solution:\n```sql\nINSERT INTO users (name, email, phone)\nVALUES\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890'),\n  ('', '', '1234567890');\n```\n\n-- Explanation:\nThis INSERT statement inserts 11 rows into the users table.\n\n-- Tests:\n-- 1. Verify 11 rows are inserted\nSELECT * FROM users;"}
{"seed": "/* Creates a database named University if it does not already exist. */\nCREATE DATABASE IF NOT EXISTS University", "description": "Creates a database named University if it does not already exist.", "concepts": ["CREATE DATABASE", "IF", "EXISTS"], "instruction": "Write a SQL query to create a database named University if it does not already exist.", "response": "-- Reasoning:\nWe need to create a database named University if it does not already exist.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS University;\n```\n\n-- Explanation:\nThis statement creates a database named University if it does not already exist.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named Student with five columns: ID (integer primary key), RegNo (integer unique), Name (varchar), Section (varchar), Contact (varchar), Address (varchar). */\nCREATE TABLE IF NOT EXISTS Student (\n\t\tID INT auto_increment primary key,\n        RegNo INT unique,\n        Name VARCHAR(100),\n        Section VARCHAR(5),\n        Contact VARCHAR(20),\n        Address VARCHAR(20)\n        )", "description": "Creates a table named Student with five columns: ID (integer primary key), RegNo (integer unique), Name (varchar), Section (varchar), Contact (varchar), Address (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "INT", "auto_increment", "primary", "key", "unique", "VARCHAR", "auto_increment", "primary", "key"], "instruction": "Write a SQL query to create a table named Student with five columns: ID (integer primary key), RegNo (integer unique), Name (varchar), Section (varchar), Contact (varchar), Address (varchar).", "response": "-- Reasoning:\nWe need a new table named Student. It should have an integer primary key so that each student has a unique identifier, and a name column to store the student\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Student (\n  ID INTEGER PRIMARY KEY,\n  RegNo INTEGER UNIQUE,\n  Name VARCHAR(255),\n  Section VARCHAR(255),\n  Contact VARCHAR(255),\n  Address VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the Student table with five columns:\n  \u2022 ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RegNo: integer, marked UNIQUE so it cannot be null and is unique\n  \u2022 Name: variable\u2010length string up to 255 characters\n  \u2022 Section: variable\u2010length string up to 255 characters\n  \u2022 Contact: variable\u2010length string up to 255 characters\n  \u2022 Address: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Student');"}
{"seed": "/* Inserts five rows into the Student table. */\nINSERT INTO Student (RegNo, Name, Section, Contact, Address) VALUES \n\t\t(11, \"name1\", \"a\", \"12345\", \"Behind market\"),\n        (12, \"name2\", \"b\", \"23456\", \"Beside market\"),\n        (13, \"name3\", \"a\", \"34567\", \"Left of market\"),\n        (14, \"name4\", \"c\", \"45678\", \"Right of market\"),\n        (15, \"name5\", \"a\", \"56789\", \"Top of market\")", "description": "Inserts five rows into the Student table.", "concepts": ["INSERT INTO", "VALUES", "Student", "RegNo", "Name", "Section", "Contact", "Address"], "instruction": "Write a SQL query to insert five rows into the Student table.", "response": "-- Reasoning:\nWe need to insert five rows into the Student table.\n\n-- Solution:\n```sql\nINSERT INTO Student (id, name) VALUES (1, 'John'), (2, 'Amy'), (3, 'Bob'), (4, 'George'), (5, 'Mary');\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the Student table.\n\n-- Tests:\n-- 1. Verify five rows are inserted\nSELECT * FROM Student;"}
{"seed": "/* Adds a column named GPA to the list table. */\nALTER TABLE list\n   ADD COLUMN (GPA FLOAT", "description": "Adds a column named GPA to the list table.", "concepts": ["ALTER TABLE", "ADD COLUMN", "FLOAT"], "instruction": "Write a SQL query to add a column named GPA to the list table.", "response": "-- Reasoning:\nWe need to add a new column to the list table named GPA. It should be a float and allow NULLs.\n\n-- Solution:\n```sql\nALTER TABLE list\n  ADD COLUMN GPA FLOAT;\n```\n\n-- Explanation:\nThis ALTER statement updates the list table schema by adding:\n  \u2022 GPA: a float column that allows NULLs\n\n-- Tests:\n-- 1. Check new column appears and allows nulls\nPRAGMA table_info('list');"}
{"seed": "/* Deletes all rows from the list table where the Grade column is less than 5. */\nDELETE FROM list\n   WHERE Grade < 5", "description": "Deletes all rows from the list table where the Grade column is less than 5.", "concepts": ["DELETE FROM", "WHERE", "Grade", "<"], "instruction": "Write a SQL query to delete all rows from the list table where the Grade column is less than 5.", "response": "-- Reasoning:\nWe need to delete all rows from the list table where the Grade column is less than 5.\n\n-- Solution:\n```sql\nDELETE FROM list\nWHERE Grade < 5;\n```\n\n-- Explanation:\nThis DELETE statement deletes all rows from the list table where the Grade column is less than 5.\n\n-- Tests:\n-- 1. Verify that all rows with Grade < 5 are deleted\nSELECT * FROM list;"}
{"seed": "/* Inserts a new teacher into the teachers table with the given values. */\nINSERT INTO teachers(LastName, FirstName, Classroom)\n   VALUES ('AP-MAWR', 'GAWAIN', 120)", "description": "Inserts a new teacher into the teachers table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new teacher into the teachers table with the given values.", "response": "-- Reasoning:\nWe need to insert a new teacher into the teachers table. The teacher should have the given values:\n  \u2022 teacher_id: 100\n  \u2022 name: \n  \u2022 department: English\n\n-- Solution:\n```sql\nINSERT INTO teachers (teacher_id, name, department)\nVALUES (100, '', 'English');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the teachers table with the given values:\n  \u2022 teacher_id: 100\n  \u2022 name: \n  \u2022 department: English\n\n-- Tests:\n-- 1. Verify new teacher appears in table\nSELECT * FROM teachers;"}
{"seed": "/* Updates the Classroom column of the list table to 120 for the row where LastName is FLACHS and FirstName is JEFFREY. */\nUPDATE list\n   SET Classroom = 120\n   WHERE LastName ='FLACHS' AND FirstName = 'JEFFREY'", "description": "Updates the Classroom column of the list table to 120 for the row where LastName is FLACHS and FirstName is JEFFREY.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "OR", "NOT", "IN", "LIKE", "BETWEEN", "IS", "NULL", "AS", "DISTINCT", "ASC", "DESC"], "instruction": "Write a SQL query to update the Classroom column of the list table to 120 for the row where LastName is FLACHS and FirstName is JEFFREY.", "response": "-- Reasoning:\nWe need to update the Classroom column of the list table to 120 for the row where LastName is FLACHS and FirstName is JEFFREY.\n\n-- Solution:\n```sql\nUPDATE list\n  SET Classroom = 120\n  WHERE LastName = 'FLACHS' AND FirstName = 'JEFFREY';\n```\n\n-- Explanation:\nThis UPDATE statement updates the Classroom column of the list table to 120 for the row where LastName is FLACHS and FirstName is JEFFREY.\n\n-- Tests:\n-- 1. Verify the update was successful\nSELECT * FROM list;"}
{"seed": "/* Updates the Classroom column of the list table to 120 for all rows where the LastName is 'HUANG' and the FirstName is 'TAWANNA'. */\nUPDATE list\n   SET Classroom = 120\n   WHERE LastName ='HUANG' AND FirstName = 'TAWANNA'", "description": "Updates the Classroom column of the list table to 120 for all rows where the LastName is 'HUANG' and the FirstName is 'TAWANNA'.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "OR", "NOT", "IN", "BETWEEN", "LIKE", "IS", "NULL", "AS", "DISTINCT", "ASC", "DESC"], "instruction": "Write a SQL query to update the Classroom column of the list table to 120 for all rows where the LastName is 'HUANG' and the FirstName is 'TAWANNA'.", "response": "-- Reasoning:\nWe need to update the Classroom column of the list table to 120 for all rows where the LastName is 'HUANG' and the FirstName is 'TAWANNA'.\n\n-- Solution:\n```sql\nUPDATE list\n  SET Classroom = 120\n  WHERE LastName = 'HUANG' AND FirstName = 'TAWANNA';\n```\n\n-- Explanation:\nThis UPDATE statement updates the Classroom column of the list table to 120 for all rows where the LastName is 'HUANG' and the FirstName is 'TAWANNA'.\n\n-- Tests:\n-- 1. Verify the Classroom column is updated\nSELECT * FROM list;"}
{"seed": "/* Updates the Classroom column of the list table to 120 for all rows where the LastName is GRUNIN and the FirstName is EMILE. */\nUPDATE list\n   SET Classroom = 120\n   WHERE LastName ='GRUNIN' AND FirstName = 'EMILE'", "description": "Updates the Classroom column of the list table to 120 for all rows where the LastName is GRUNIN and the FirstName is EMILE.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "OR", "NOT", "IN", "LIKE", "BETWEEN", "IS", "NULL", "AS", "DISTINCT", "ASC", "DESC"], "instruction": "Write a SQL query to update the Classroom column of the list table to 120 for all rows where the LastName is GRUNIN and the FirstName is EMILE.", "response": "-- Reasoning:\nWe need to update the Classroom column of the list table to 120 for all rows where the LastName is GRUNIN and the FirstName is EMILE.\n\n-- Solution:\n```sql\nUPDATE list\n  SET Classroom = 120\n  WHERE LastName = 'GRUNIN' AND FirstName = 'EMILE';\n```\n\n-- Explanation:\nThis UPDATE statement updates the Classroom column of the list table to 120 for all rows where the LastName is GRUNIN and the FirstName is EMILE.\n\n-- Tests:\n-- 1. Verify the update\nSELECT * FROM list;"}
{"seed": "/* Updates the GPA of all students with a grade of 6 to 3.25. */\nUPDATE list\n   SET GPA = 3.25\n   WHERE Grade = 6", "description": "Updates the GPA of all students with a grade of 6 to 3.25.", "concepts": ["UPDATE", "SET", "WHERE"], "instruction": "Write a SQL query to update the GPA of all students with a grade of 6 to 3.25.", "response": "-- Reasoning:\nWe need to update the GPA of all students with a grade of 6 to 3.25.\n\n-- Solution:\n```sql\nUPDATE students\n  SET gpa = 3.25\n  WHERE grade = 6;\n```\n\n-- Explanation:\nThis UPDATE statement updates the GPA of all students with a grade of 6 to 3.25.\n\n-- Tests:\n-- 1. Verify GPA is updated\nSELECT * FROM students;"}
{"seed": "/* Updates the GPA of all students in classroom 109 with a grade of 5 to 2.9. */\nUPDATE list\n   SET GPA = 2.9\n   WHERE Grade = 5 AND Classroom = 109", "description": "Updates the GPA of all students in classroom 109 with a grade of 5 to 2.9.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "Grade", "Classroom"], "instruction": "Write a SQL query to update the GPA of all students in classroom 109 with a grade of 5 to 2.9.", "response": "-- Reasoning:\nWe need to update the GPA of all students in classroom 109 with a grade of 5 to 2.9.\n\n-- Solution:\n```sql\nUPDATE students\nSET gpa = 2.9\nWHERE classroom = 109 AND grade = 5;\n```\n\n-- Explanation:\nThis UPDATE statement updates the GPA of all students in classroom 109 with a grade of 5 to 2.9.\n\n-- Tests:\n-- 1. Verify GPA is updated\nSELECT * FROM students WHERE classroom = 109 AND grade = 5;"}
{"seed": "/* Updates the GPA of all students in classroom 120 with a grade of 5 to 3.5. */\nUPDATE list\n   SET GPA = 3.5\n   WHERE Grade = 5 AND Classroom = 120", "description": "Updates the GPA of all students in classroom 120 with a grade of 5 to 3.5.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "Grade", "Classroom"], "instruction": "Write a SQL query to update the GPA of all students in classroom 120 with a grade of 5 to 3.5.", "response": "-- Reasoning:\nWe need to update the GPA of all students in classroom 120 with a grade of 5 to 3.5.\n\n-- Solution:\n```sql\nUPDATE students\nSET gpa = 3.5\nWHERE classroom = 120 AND grade = 5;\n```\n\n-- Explanation:\nThis UPDATE statement updates the GPA of all students in classroom 120 with a grade of 5 to 3.5.\n\n-- Tests:\n-- 1. Verify GPA is updated\nSELECT * FROM students WHERE classroom = 120 AND grade = 5;"}
{"seed": "/* Updates the GPA of the student with the last name MACIAG and first name CHET to 4.0. */\nUPDATE list\n   SET GPA = 4.0\n   WHERE LastName = 'MACIAG' AND FirstName = 'CHET'", "description": "Updates the GPA of the student with the last name MACIAG and first name CHET to 4.0.", "concepts": ["UPDATE", "SET", "WHERE"], "instruction": "Write a SQL query to update the GPA of the student with the last name MACIAG and first name CHET to 4.0.", "response": "-- Reasoning:\nWe need to update the GPA of the student with the last name MACIAG and first name CHET to 4.0.\n\n-- Solution:\n```sql\nUPDATE students\n  SET gpa = 4.0\n  WHERE last_name = 'MACIAG' AND first_name = 'CHET';\n```\n\n-- Explanation:\nThis UPDATE statement updates the GPA of the student with the last name MACIAG and first name CHET to 4.0.\n\n-- Tests:\n-- 1. Verify GPA is updated\nSELECT * FROM students WHERE last_name = 'MACIAG' AND first_name = 'CHET';"}
{"seed": "/* Updates the GPA of all students named  by adding 0.3 to their GPA. */\nUPDATE list\n   SET GPA = GPA + 0.3\n   WHERE LastName = 'GERSTEIN' AND FirstName = 'AL'", "description": "Updates the GPA of all students named  by adding 0.3 to their GPA.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "OR", "NOT", "LIKE", "IN", "BETWEEN", "IS", "NULL", "DISTINCT", "GROUP BY", "ORDER BY"], "instruction": "Write a SQL query to update the GPA of all students named  by adding 0.3 to their GPA.", "response": "-- Reasoning:\nWe need to update the GPA of all students named  by adding 0.3 to their GPA.\n\n-- Solution:\n```sql\nUPDATE students\n  SET gpa = gpa + 0.3\n  WHERE name = '';\n```\n\n-- Explanation:\nThis UPDATE statement updates the GPA of all students named  by adding 0.3 to their current GPA.\n\n-- Tests:\n-- 1. Verify GPA is updated\nSELECT * FROM students WHERE name = '';"}
{"seed": "/* Updates the GPA of all students with the last name Huang and first name Tawanna by multiplying their GPA by 1.1. */\nUPDATE list\n   SET GPA = GPA * 1.1\n   WHERE LastName = 'HUANG' AND FirstName = 'TAWANNA'", "description": "Updates the GPA of all students with the last name Huang and first name Tawanna by multiplying their GPA by 1.1.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "OR", "NOT", "LIKE", "IN", "BETWEEN", "EXISTS", "CASE", "CAST", "COALESCE", "CO"], "instruction": "Write a SQL query to update the GPA of all students with the last name Huang and first name Tawanna by multiplying their GPA by 1.1.", "response": "-- Reasoning:\nWe need to update the GPA of all students with the last name Huang and first name Tawanna by multiplying their GPA by 1.1.\n\n-- Solution:\n```sql\nUPDATE students\n  SET gpa = gpa * 1.1\n  WHERE last_name = 'Huang' AND first_name = 'Tawanna';\n```\n\n-- Explanation:\nThis UPDATE statement updates the GPA of all students with the last name Huang and first name Tawanna by multiplying their GPA by 1.1.\n\n-- Tests:\n-- 1. Verify GPA is updated\nSELECT * FROM students WHERE last_name = 'Huang' AND first_name = 'Tawanna';"}
{"seed": "/* Updates the GPA of all students named  to be 10% higher. */\nUPDATE list\n   SET GPA = GPA * 1.1\n   WHERE LastName = 'JAGNEUX' AND FirstName = 'ELVIRA'", "description": "Updates the GPA of all students named  to be 10% higher.", "concepts": ["UPDATE", "SET", "WHERE", "AND", "1.1"], "instruction": "Write a SQL query to update the GPA of all students named  to be 10% higher.", "response": "-- Reasoning:\nWe need to update the GPA of all students named  to be 10% higher.\n\n-- Solution:\n```sql\nUPDATE students\n  SET gpa = gpa * 1.1\n  WHERE name = '';\n```\n\n-- Explanation:\nThis UPDATE statement updates the GPA of all students named  to be 10% higher.\n\n-- Tests:\n-- 1. Verify GPA is updated\nSELECT * FROM students WHERE name = '';"}
{"seed": "/* Selects all columns from the list table and orders the results by GPA, Grade, and LastName. */\nSELECT * FROM list\nORDER BY GPA, Grade, LastName", "description": "Selects all columns from the list table and orders the results by GPA, Grade, and LastName.", "concepts": ["SELECT", "ORDER BY", "GPA", "Grade", "LastName"], "instruction": "Write a SQL query to select all columns from the list table and order the results by GPA, Grade, and LastName.", "response": "-- Reasoning:\nWe need to select all columns from the list table and order the results by GPA, Grade, and LastName.\n\n-- Solution:\n```sql\nSELECT * FROM list ORDER BY GPA, Grade, LastName;\n```\n\n-- Explanation:\nThis query selects all columns from the list table and orders the results by GPA, Grade, and LastName.\n\n-- Tests:\n-- 1. Verify results are ordered by GPA, Grade, and LastName\nSELECT * FROM list ORDER BY GPA, Grade, LastName;"}
{"seed": "/* Selects all columns from the teachers table. */\nSELECT *\nFROM teachers", "description": "Selects all columns from the teachers table.", "concepts": ["SELECT", "FROM", "*"], "instruction": "Write a SQL query to select all columns from the teachers table.", "response": "-- Reasoning:\nWe need to select all columns from the teachers table.\n\n-- Solution:\n```sql\nSELECT * FROM teachers;\n```\n\n-- Explanation:\nThis query selects all columns from the teachers table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM teachers;"}
{"seed": "/* Creates a user named user_0d_1 with the password  on the localhost. */\nCREATE USER IF NOT EXISTS 'user_0d_1'@'localhost' IDENTIFIED BY", "description": "Creates a user named user_0d_1 with the password  on the localhost.", "concepts": ["CREATE USER", "IF NOT EXISTS", "IDENTIFIED BY"], "instruction": "Write a SQL query to create a user named user_0d_1 with the password on the localhost.", "response": "-- Reasoning:\nWe need to create a new user named user_0d_1 with the password on the localhost.\n\n-- Solution:\n```sql\nCREATE USER user_0d_1 WITH PASSWORD 'on';\n```\n\n-- Explanation:\nThis statement creates a new user named user_0d_1 with the password on the localhost.\n\n-- Tests:\n-- 1. Verify user exists\nSELECT * FROM pg_user WHERE usename = 'user_0d_1';"}
{"seed": "/* Creates a user named user_0d_2 with the password  on the localhost server. */\nCREATE USER IF NOT EXISTS 'user_0d_2'@'localhost' IDENTIFIED BY", "description": "Creates a user named user_0d_2 with the password  on the localhost server.", "concepts": ["CREATE USER", "IF NOT EXISTS", "IDENTIFIED BY"], "instruction": "Write a SQL query to create a user named user_0d_2 with the password on the localhost server.", "response": "-- Reasoning:\nWe need to create a new user named user_0d_2 with the password on the localhost server.\n\n-- Solution:\n```sql\nCREATE USER user_0d_2 WITH PASSWORD 'on';\n```\n\n-- Explanation:\nThis statement creates a new user named user_0d_2 with the password on the localhost server.\n\n-- Tests:\n-- 1. Verify user exists\nSELECT * FROM pg_user WHERE usename = 'user_0d_2';"}
{"seed": "/* Inserts four rows into the burgers table. Each row has a burger_name and devoured column. */\nINSERT  burgers\n(burger_name, devoured)\nvalues (\"Lemon Burger\", false),\n          (\"Fakin' Bacon Burger\", false),\n          (\"Missing Chicken Burger\", false),\n          (\"Teriyaki Tofu Burger\", false)", "description": "Inserts four rows into the burgers table. Each row has a burger_name and devoured column.", "concepts": ["INSERT INTO", "VALUES", "burgers", "burger_name", "devoured"], "instruction": "Write a SQL query to insert four rows into the burgers table. Each row has a burger_name and devoured column.", "response": "-- Reasoning:\nWe need to insert four rows into the burgers table. Each row should have a burger_name and devoured column.\n\n-- Solution:\n```sql\nINSERT INTO burgers (burger_name, devoured)\nVALUES ('Cheeseburger', false),\n       ('Bacon Burger', false),\n       ('Veggie Burger', false),\n       ('Double Cheeseburger', false);\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the burgers table:\n  \u2022 Cheeseburger: false\n  \u2022 Bacon Burger: false\n  \u2022 Veggie Burger: false\n  \u2022 Double Cheeseburger: false\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM burgers;"}
{"seed": "/* Creates a table named MEMBER if it does not already exist. The table has three columns: id (bigint auto_increment), name (varchar), and password (varchar). The id column is the primary key and is automatically incremented. The name column is unique and cannot be null. */\ncreate table if not exists MEMBER\n(\n    id\n    bigint\n    auto_increment\n    not\n    null,\n    name\n    varchar\n(\n    255\n) not null unique,\n    password varchar\n(\n    255\n) not null,\n    primary key\n(\n    id\n)\n    )", "description": "Creates a table named MEMBER if it does not already exist. The table has three columns: id (bigint auto_increment), name (varchar), and password (varchar). The id column is the primary key and is automatically incremented. The name column is unique and cannot be null.", "concepts": ["CREATE TABLE", "IF", "EXISTS", "BIGINT", "AUTO_INCREMENT", "NOT", "NULL", "VARCHAR", "PRIMARY KEY", "UNIQUE", "NOT", "NULL", "VARCHAR"], "instruction": "Write a SQL query to create a table named MEMBER if it does not already exist. The table has three columns: id (bigint auto_increment), name (varchar), and password (varchar). The id column is the primary key and is automatically incremented. The name column is unique and cannot be null.", "response": "-- Reasoning:\nWe need a new table named MEMBER. It should have an integer primary key so that each member has a unique identifier, a name column to store the member\u2019s name as text, and a password column to store the member\u2019s password as text.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS MEMBER (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255) UNIQUE NOT NULL,\n  password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the MEMBER table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters, marked UNIQUE so it cannot be null and is unique\n  \u2022 password: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MEMBER');"}
{"seed": "/* Creates a table named ROOM if it does not already exist. The table has two columns: id (bigint auto_increment not null) and name (varchar(255)). The id column is the primary key. */\ncreate table if not exists ROOM\n(\n    id\n    bigint\n    auto_increment\n    not\n    null,\n    name\n    varchar\n(\n    255\n),\n    primary key\n(\n    id\n)\n    )", "description": "Creates a table named ROOM if it does not already exist. The table has two columns: id (bigint auto_increment not null) and name (varchar(255)). The id column is the primary key.", "concepts": ["create table", "if not exists", "bigint", "auto_increment", "not", "null", "primary key"], "instruction": "Write a SQL query to create a table named ROOM if it does not already exist. The table has two columns: id (bigint auto_increment not null) and name (varchar(255)). The id column is the primary key.", "response": "-- Reasoning:\nWe need a new table named ROOM. It should have an integer primary key so that each room has a unique identifier, and a name column to store the room\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS ROOM (\n  id BIGINT AUTO_INCREMENT NOT NULL,\n  name VARCHAR(255),\n  PRIMARY KEY (id)\n);\n```\n\n-- Explanation:\nThis statement defines the ROOM table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('ROOM');"}
{"seed": "/* Creates a table named PARTICIPANTS with four columns: id (bigint auto_increment primary key), member_id (bigint not null), room_id (bigint not null), and foreign keys for member_id and room_id. */\ncreate table if not exists PARTICIPANTS\n(\n    id\n    bigint\n    auto_increment\n    not\n    null,\n    member_id\n    bigint\n    not\n    null,\n    room_id\n    bigint\n    not\n    null,\n    primary\n    key\n(\n    id\n),\n    foreign key\n(\n    member_id\n) references MEMBER\n(\n    id\n),\n    foreign key\n(\n    room_id\n) references ROOM\n(\n    id\n)\n    )", "description": "Creates a table named PARTICIPANTS with four columns: id (bigint auto_increment primary key), member_id (bigint not null), room_id (bigint not null), and foreign keys for member_id and room_id.", "concepts": ["CREATE TABLE", "BIGINT", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "IF NOT EXISTS", "NOT NULL", "BIGINT", "BIGINT", "BIGINT"], "instruction": "Write a SQL query to create a table named PARTICIPANTS with four columns: id (bigint auto_increment primary key), member_id (bigint not null), room_id (bigint not null), and foreign keys for member_id and room_id.", "response": "-- Reasoning:\nWe need a new table named participants. It should have an integer primary key so that each participant has a unique identifier, and two foreign keys to reference the members and rooms tables.\n\n-- Solution:\n```sql\nCREATE TABLE participants (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,\n  member_id BIGINT NOT NULL,\n  room_id BIGINT NOT NULL,\n  FOREIGN KEY (member_id) REFERENCES members(id),\n  FOREIGN KEY (room_id) REFERENCES rooms(id)\n);\n```\n\n-- Explanation:\nThis statement defines the participants table with four columns:\n  \u2022 id: integer, auto\u2010incrementing primary key\n  \u2022 member_id: integer, foreign key to members table\n  \u2022 room_id: integer, foreign key to rooms table\n  \u2022 foreign keys: member_id and room_id reference the members and rooms tables, respectively\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('participants');"}
{"seed": "/* Creates a table named MESSAGE with five columns: id (bigint auto_increment primary key), sender_id (bigint not null), room_id (bigint not null), contents (varchar(255)), and send_time (timestamp). The table has two foreign keys: sender_id references MEMBER(id) and room_id references ROOM(id). */\ncreate table if not exists MESSAGE\n(\n    id\n    bigint\n    auto_increment\n    not\n    null,\n    sender_id\n    bigint\n    not\n    null,\n    room_id\n    bigint\n    not\n    null,\n    contents\n    varchar\n(\n    255\n),\n    send_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    primary key\n(\n    id\n),\n    foreign key\n(\n    sender_id\n) references MEMBER\n(\n    id\n),\n    foreign key\n(\n    room_id\n) references ROOM\n(\n    id\n)\n    )", "description": "Creates a table named MESSAGE with five columns: id (bigint auto_increment primary key), sender_id (bigint not null), room_id (bigint not null), contents (varchar(255)), and send_time (timestamp). The table has two foreign keys: sender_id references MEMBER(id) and room_id references ROOM(id).", "concepts": ["CREATE TABLE", "BIGINT", "AUTO_INCREMENT", "NOT", "NULL", "TIMESTAMP", "DEFAULT", "CURRENT_TIMESTAMP", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "VARCHAR"], "instruction": "Write a SQL query to create a table named MESSAGE with five columns: id (bigint auto_increment primary key), sender_id (bigint not null), room_id (bigint not null), contents (varchar(255)), and send_time (timestamp). The table has two foreign keys: sender_id references MEMBER(id) and room_id references ROOM(id).", "response": "-- Reasoning:\nWe need a new table named MESSAGE. It should have an integer primary key so that each message has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE MESSAGE (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,\n  sender_id BIGINT NOT NULL,\n  room_id BIGINT NOT NULL,\n  contents VARCHAR(255),\n  send_time TIMESTAMP,\n  FOREIGN KEY (sender_id) REFERENCES MEMBER(id),\n  FOREIGN KEY (room_id) REFERENCES ROOM(id)\n);\n```\n\n-- Explanation:\nThis statement defines the MESSAGE table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 sender_id: integer, not null, references MEMBER(id)\n  \u2022 room_id: integer, not null, references ROOM(id)\n  \u2022 contents: variable\u2010length string up to 255 characters\n  \u2022 send_time: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MESSAGE');"}
{"seed": "/* Changes the password of the user root@localhost to the password specified. */\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY", "description": "Changes the password of the user root@localhost to the password specified.", "concepts": ["ALTER USER", "IDENTIFIED WITH", "BY"], "instruction": "Write a SQL query to change the password of the user root@localhost to the password specified.", "response": "-- Reasoning:\nWe need to change the password of the root user. We can do this by using the ALTER USER statement.\n\n-- Solution:\n```sql\nALTER USER root@localhost IDENTIFIED BY 'password';\n```\n\n-- Explanation:\nThis statement changes the password of the root user to the specified password.\n\n-- Tests:\n-- 1. Check password is changed\nSELECT user, authentication_string FROM mysql.user;"}
{"seed": "/* Creates a table named products with five columns: item_id (integer primary key), product_name (varchar), price (decimal), stock (integer), and a primary key on the item_id column. */\nCREATE TABLE products (\n    item_id INTEGER NOT NULL AUTO_INCREMENT,\n    product_name VARCHAR(100) NOT NULL,\n    price DECIMAL(10,2) NOT NULL,\n    stock INTEGER NOT NULL,\n    PRIMARY KEY(item_id)\n)", "description": "Creates a table named products with five columns: item_id (integer primary key), product_name (varchar), price (decimal), stock (integer), and a primary key on the item_id column.", "concepts": ["CREATE TABLE", "INTEGER", "AUTO_INCREMENT", "PRIMARY KEY", "DECIMAL", "NOT NULL", "VARCHAR", "STOCK"], "instruction": "Write a SQL query to create a table named products with five columns: item_id (integer primary key), product_name (varchar), price (decimal), stock (integer), and a primary key on the item_id column.", "response": "-- Reasoning:\nWe need a new table named products. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE products (\n  item_id INT PRIMARY KEY,\n  product_name VARCHAR(255),\n  price DECIMAL,\n  stock INT,\n  PRIMARY KEY (item_id)\n);\n```\n\n-- Explanation:\nThis statement defines the products table with five columns:\n  \u2022 item_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 product_name: variable\u2010length string up to 255 characters\n  \u2022 price: decimal\n  \u2022 stock: integer\n  \u2022 PRIMARY KEY (item_id): a composite primary key on the item_id column\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('products');"}
{"seed": "/* Selects all columns from the products table. */\nSELECT * FROM products", "description": "Selects all columns from the products table.", "concepts": ["SELECT", "FROM", "*"], "instruction": "Write a SQL query to select all columns from the products table.", "response": "-- Reasoning:\nWe need to select all columns from the products table.\n\n-- Solution:\n```sql\nSELECT * FROM products;\n```\n\n-- Explanation:\nThis query selects all columns from the products table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM products;"}
{"seed": "/* Creates a database named springboot if it does not already exist. */\nCREATE DATABASE /*!32312 IF NOT EXISTS*/`springboot`", "description": "Creates a database named springboot if it does not already exist.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named springboot if it does not already exist.", "response": "-- Reasoning:\nWe need to create a database named springboot if it does not already exist.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS springboot;\n```\n\n-- Explanation:\nThis statement creates a database named springboot if it does not already exist.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Drops the table named t_course if it exists. */\nDROP TABLE IF EXISTS `t_course`", "description": "Drops the table named t_course if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_course if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_course if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_course;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_course');"}
{"seed": "/* Creates a table named t_course with three columns: id (integer primary key), name (varchar) and description (varchar). */\nCREATE TABLE `t_course` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(50) NOT NULL,\r\n  `description` varchar(56) DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8", "description": "Creates a table named t_course with three columns: id (integer primary key), name (varchar) and description (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "ENGINE", "NOT", "NULL", "DEFAULT", "CHARSET", "INT", "INCREMENT"], "instruction": "Write a SQL query to create a table named t_course with three columns: id (integer primary key), name (varchar) and description (varchar).", "response": "-- Reasoning:\nWe need a new table named t_course. It should have an integer primary key so that each course has a unique identifier, and two varchar columns to store the course\u2019s name and description.\n\n-- Solution:\n```sql\nCREATE TABLE t_course (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_course table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('t_course');"}
{"seed": "/* Inserts three rows into the t_course table. */\ninsert  into `t_course`(`id`,`name`,`description`) values (1,'\u7ebf\u6027\u4ee3\u6570','\u6570\u5b66'),(2,'\u51e0\u4f55','\u6570\u5b66'),(3,'\u8ba1\u7b97\u673a\u57fa\u7840','\u8ba1\u7b97\u673a')", "description": "Inserts three rows into the t_course table.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert three rows into the t_course table.", "response": "-- Reasoning:\nWe need to insert three rows into the t_course table.\n\n-- Solution:\n```sql\nINSERT INTO t_course (course_id, course_name)\nVALUES (1, 'Math'), (2, 'English'), (3, 'History');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the t_course table:\n  \u2022 course_id: 1, 2, 3\n  \u2022 course_name: 'Math', 'English', 'History'\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM t_course;"}
{"seed": "/* Drops the table t_course_major if it exists. */\nDROP TABLE IF EXISTS `t_course_major`", "description": "Drops the table t_course_major if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table t_course_major if it exists.", "response": "-- Reasoning:\nWe need to drop the table t_course_major if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_course_major;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_course_major');"}
{"seed": "/* Creates a table named t_course_major with three columns: id (integer primary key), major_id (integer), and course_id (integer). It also creates two foreign key constraints: major_id references t_major(id) and course_id references t_course(id). */\nCREATE TABLE `t_course_major` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `major_id` int(11) DEFAULT NULL,\r\n  `course_id` int(11) DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  KEY `major_id` (`major_id`),\r\n  KEY `course_id` (`course_id`),\r\n  CONSTRAINT `t_course_major_ibfk_1` FOREIGN KEY (`major_id`) REFERENCES `t_major` (`id`),\r\n  CONSTRAINT `t_course_major_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `t_course` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8", "description": "Creates a table named t_course_major with three columns: id (integer primary key), major_id (integer), and course_id (integer). It also creates two foreign key constraints: major_id references t_major(id) and course_id references t_course(id).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "AUTO_INCREMENT", "DEFAULT", "CHARSET", "ENGINE", "KEY", "CONSTRAINT", "REFERENCES", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named t_course_major with three columns: id (integer primary key), major_id (integer), and course_id (integer). It also creates two foreign key constraints: major_id references t_major(id) and course_id references t_course(id).", "response": "-- Reasoning:\nWe need a new table named t_course_major with three columns:\n  \u2022 id: integer primary key\n  \u2022 major_id: integer\n  \u2022 course_id: integer\n\nIt also creates two foreign key constraints:\n  \u2022 major_id references t_major(id)\n  \u2022 course_id references t_course(id)\n\n-- Solution:\n```sql\nCREATE TABLE t_course_major (\n  id INTEGER PRIMARY KEY,\n  major_id INTEGER,\n  course_id INTEGER,\n  FOREIGN KEY (major_id) REFERENCES t_major(id),\n  FOREIGN KEY (course_id) REFERENCES t_course(id)\n);\n```\n\n-- Explanation:\nThis statement creates the t_course_major table with three columns:\n  \u2022 id: integer primary key\n  \u2022 major_id: integer\n  \u2022 course_id: integer\n\nIt also creates two foreign key constraints:\n  \u2022 major_id references t_major(id)\n  \u2022 course_id references t_course(id)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('t_course_major');"}
{"seed": "/* Inserts three rows into the t_course_major table. */\ninsert  into `t_course_major`(`id`,`major_id`,`course_id`) values (1,1,3),(2,1,1),(3,2,1)", "description": "Inserts three rows into the t_course_major table.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert three rows into the t_course_major table.", "response": "-- Reasoning:\nWe need to insert three rows into the t_course_major table.\n\n-- Solution:\n```sql\nINSERT INTO t_course_major (course_id, major_id) VALUES (1, 1), (2, 2), (3, 3);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the t_course_major table.\n\n-- Tests:\n-- 1. Verify the rows are inserted\nSELECT * FROM t_course_major;"}
{"seed": "/* Drops the table named t_major if it exists. */\nDROP TABLE IF EXISTS `t_major`", "description": "Drops the table named t_major if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_major if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_major if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_major;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_major');"}
{"seed": "/* Creates a table named t_major with three columns: id (integer primary key), name (varchar), and description (varchar). */\nCREATE TABLE `t_major` (\r\n  `id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(50) NOT NULL,\r\n  `description` varchar(56) DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8", "description": "Creates a table named t_major with three columns: id (integer primary key), name (varchar), and description (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "ENGINE", "NOT", "NULL", "DEFAULT", "CHARSET", "INT", "INCREMENT"], "instruction": "Write a SQL query to create a table named t_major with three columns: id (integer primary key), name (varchar), and description (varchar).", "response": "-- Reasoning:\nWe need a new table named t_major. It should have an integer primary key so that each major has a unique identifier, and two varchar columns to store the major\u2019s name and description.\n\n-- Solution:\n```sql\nCREATE TABLE t_major (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_major table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('t_major');"}
{"seed": "/* Inserts two rows into the t_major table. */\ninsert  into `t_major`(`id`,`name`,`description`) values (1,'\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f','hot'),(2,'\u6e05\u6d01\u80fd\u6e90','low')", "description": "Inserts two rows into the t_major table.", "concepts": ["INSERT INTO", "VALUES", "t_major", "id", "name", "description"], "instruction": "Write a SQL query to insert two rows into the t_major table.\n\nExample 2:\nSQL:\n```sql\n/* Return the number of customers in each country */\nSELECT country, COUNT(*) AS number_of_customers\nFROM customers\nGROUP BY country;\n```\nConcepts: [\"SELECT\", \"COUNT\", \"FROM\", \"GROUP BY\"]\nInstruction: Write a SQL query to return the number of customers in each country.", "response": "-- Reasoning:\nWe need to count the number of customers in each country.\n\n-- Solution:\n```sql\nSELECT country, COUNT(*) AS number_of_customers\nFROM customers\nGROUP BY country;\n```\n\n-- Explanation:\nThis query uses the COUNT aggregate function to count the number of customers in each country.\n\n-- Tests:\n-- 1. Verify the number of customers in each country\nSELECT country, COUNT(*) AS number_of_customers\nFROM customers\nGROUP BY country;"}
{"seed": "/* Drops the table named t_student if it exists. */\nDROP TABLE IF EXISTS `t_student`", "description": "Drops the table named t_student if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_student if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_student if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_student;\n```\n\n-- Explanation:\nThis statement drops the table named t_student if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('t_student');"}
{"seed": "/* Creates a table named t_student with five columns: id (integer primary key), student_no (integer), name (varchar), major_id (integer), and course_id (integer). The major_id and course_id columns are foreign keys that reference the id column of the t_major and t_course tables, respectively. */\nCREATE TABLE `t_student` (\r\n  `id` int(8) NOT NULL AUTO_INCREMENT,\r\n  `student_no` int(8) DEFAULT NULL,\r\n  `name` varchar(50) DEFAULT NULL,\r\n  `major_id` int(8) DEFAULT NULL,\r\n  `course_id` int(8) DEFAULT NULL,\r\n  PRIMARY KEY (`id`),\r\n  KEY `major_id` (`major_id`),\r\n  KEY `course_id` (`course_id`),\r\n  CONSTRAINT `t_student_ibfk_1` FOREIGN KEY (`major_id`) REFERENCES `t_major` (`id`),\r\n  CONSTRAINT `t_student_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `t_course` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8", "description": "Creates a table named t_student with five columns: id (integer primary key), student_no (integer), name (varchar), major_id (integer), and course_id (integer). The major_id and course_id columns are foreign keys that reference the id column of the t_major and t_course tables, respectively.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "AUTO_INCREMENT", "DEFAULT", "VARCHAR", "INT", "KEY", "CONSTRAINT", "REFERENCES", "ENGINE"], "instruction": "Write a SQL query to create a table named t_student with five columns: id (integer primary key), student_no (integer), name (varchar), major_id (integer), and course_id (integer). The major_id and course_id columns are foreign keys that reference the id column of the t_major and t_course tables, respectively.", "response": "-- Reasoning:\nWe need a new table named t_student. It should have an integer primary key so that each student has a unique identifier, and a name column to store the student\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_student (\n  id INT PRIMARY KEY,\n  student_no INT,\n  name VARCHAR(255),\n  major_id INT,\n  course_id INT,\n  FOREIGN KEY (major_id) REFERENCES t_major(id),\n  FOREIGN KEY (course_id) REFERENCES t_course(id)\n);\n```\n\n-- Explanation:\nThis statement defines the t_student table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 student_no: integer\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 major_id: integer, foreign key to t_major.id\n  \u2022 course_id: integer, foreign key to t_course.id\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('t_student');"}
{"seed": "/* Inserts a new row into the t_student table with the given values. */\ninsert  into `t_student`(`id`,`student_no`,`name`,`major_id`,`course_id`) values (1,10001,'tom',1,2)", "description": "Inserts a new row into the t_student table with the given values.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert a new row into the t_student table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_student table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_student (id, name, age)\nVALUES (1, 'John', 18);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_student table with the given values:\n  \u2022 id: 1\n  \u2022 name: John\n  \u2022 age: 18\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_student;"}
{"seed": "/* Creates a table named t_user with three columns: id (integer primary key), username (varchar) and password (varchar). */\nCREATE TABLE `t_user` (\r\n  `id` int(8) NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(50) DEFAULT NULL,\r\n  `password` varchar(50) DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8", "description": "Creates a table named t_user with three columns: id (integer primary key), username (varchar) and password (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named t_user with three columns: id (integer primary key), username (varchar) and password (varchar).", "response": "-- Reasoning:\nWe need a new table named t_user. It should have an integer primary key so that each user has a unique identifier, and two varchar columns to store the username and password.\n\n-- Solution:\n```sql\nCREATE TABLE t_user (\n  id INTEGER PRIMARY KEY,\n  username VARCHAR(255),\n  password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_user table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('t_user');"}
{"seed": "/* Inserts two rows into the t_user table. */\ninsert  into `t_user`(`id`,`username`,`password`) values (1,'tom','123456'),(3,'jack','123456')", "description": "Inserts two rows into the t_user table.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert two rows into the t_user table.", "response": "-- Reasoning:\nWe need to insert two rows into the t_user table.\n\n-- Solution:\n```sql\nINSERT INTO t_user (id, name) VALUES (1, 'John'), (2, 'Jane');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the t_user table:\n  \u2022 id: 1, name: John\n  \u2022 id: 2, name: Jane\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM t_user;"}
{"seed": "/* Creates a database named djangodb. */\nCREATE DATABASE djangodb", "description": "Creates a database named djangodb.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named djangodb.", "response": "-- Reasoning:\nWe need to create a new database named djangodb.\n\n-- Solution:\n```sql\nCREATE DATABASE djangodb;\n```\n\n-- Explanation:\nThis statement creates a new database named djangodb.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a user named djangouser with the password djangopassword. */\nCREATE USER djangouser WITH PASSWORD 'djangopassword'", "description": "Creates a user named djangouser with the password djangopassword.", "concepts": ["CREATE USER", "PASSWORD"], "instruction": "Write a SQL query to create a user named djangouser with the password djangopassword.", "response": "-- Reasoning:\nWe need to create a new user named djangouser with the password djangopassword.\n\n-- Solution:\n```sql\nCREATE USER djangouser WITH PASSWORD '';\n```\n\n-- Explanation:\nThis statement creates a new user named djangouser with the password djangopassword.\n\n-- Tests:\n-- 1. Verify user exists\nSELECT * FROM pg_user WHERE usename = 'djangouser';"}
{"seed": "/* Changes the client_encoding of the djangouser role to utf8. */\nALTER ROLE djangouser SET client_encoding TO 'utf8'", "description": "Changes the client_encoding of the djangouser role to utf8.", "concepts": ["ALTER ROLE", "SET", "TO"], "instruction": "Write a SQL query to change the client_encoding of the djangouser role to utf8.", "response": "-- Reasoning:\nWe need to change the client_encoding of the djangouser role to utf8.\n\n-- Solution:\n```sql\nALTER ROLE djangouser SET client_encoding TO 'utf8';\n```\n\n-- Explanation:\nThis ALTER statement changes the client_encoding of the djangouser role to utf8.\n\n-- Tests:\n-- 1. Check new encoding\nSELECT current_setting('client_encoding');"}
{"seed": "/* Sets the default transaction isolation level for the djangouser role to 'read committed'. */\nALTER ROLE djangouser SET default_transaction_isolation TO 'read committed'", "description": "Sets the default transaction isolation level for the djangouser role to 'read committed'.", "concepts": ["ALTER ROLE", "SET", "TO"], "instruction": "Write a SQL query to set the default transaction isolation level for the djangouser role to 'read committed'.", "response": "-- Reasoning:\nWe need to set the default transaction isolation level for the djangouser role to 'read committed'. This means that all transactions will be read committed by default.\n\n-- Solution:\n```sql\nALTER ROLE djangouser SET TRANSACTION ISOLATION LEVEL 'read committed';\n```\n\n-- Explanation:\nThis ALTER ROLE statement sets the default transaction isolation level for the djangouser role to 'read committed'.\n\n-- Tests:\n-- 1. Verify the default transaction isolation level is set to 'read committed'\nSELECT current_setting('transaction_isolation');"}
{"seed": "/* Sets the timezone of the djangouser role to UTC. */\nALTER ROLE djangouser SET timezone TO 'UTC'", "description": "Sets the timezone of the djangouser role to UTC.", "concepts": ["ALTER ROLE", "SET", "TO"], "instruction": "Write a SQL query to set the timezone of the djangouser role to UTC.", "response": "-- Reasoning:\nWe need to change the timezone of the djangouser role to UTC.\n\n-- Solution:\n```sql\nALTER ROLE djangouser SET TIME ZONE 'UTC';\n```\n\n-- Explanation:\nThis ALTER statement updates the djangouser role to use UTC as the timezone.\n\n-- Tests:\n-- 1. Verify timezone is UTC\nSELECT current_setting('TIMEZONE');"}
{"seed": "/* Selects the first_name, salary, commission_pct, and salary*commission_pct of all employees with a salary between 13000 and 15000. */\nselect first_name,\r\n       salary,\r\n       commission_pct,\r\n       salary*commission_pct\r\nfrom employees\r\nwhere salary between 13000 and 15000", "description": "Selects the first_name, salary, commission_pct, and salary*commission_pct of all employees with a salary between 13000 and 15000.", "concepts": ["select", "first_name", "salary", "commission_pct", "salary*commission_pct", "employees", "between", "13000"], "instruction": "Write a SQL query to list the first_name, salary, commission_pct, and salary*commission_pct of all employees with a salary between 13000 and 15000.", "response": "-- Reasoning:\nWe need to list the first_name, salary, commission_pct, and salary*commission_pct of all employees with a salary between 13000 and 15000.\n\n-- Solution:\n```sql\nSELECT first_name, salary, commission_pct, salary*commission_pct\nFROM employees\nWHERE salary BETWEEN 13000 AND 15000;\n```\n\n-- Explanation:\nThis query selects the first_name, salary, commission_pct, and salary*commission_pct columns from the employees table. It filters the results to only include employees with a salary between 13000 and 15000.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT first_name, salary, commission_pct, salary*commission_pct\nFROM employees\nWHERE salary BETWEEN 13000 AND 15000;"}
{"seed": "/* Selects the first_name, salary, and commission_pct columns from the employees table where the commission_pct column is not null. */\nselect first_name,\r\n       salary,\r\n       commission_pct\r\nfrom employees\r\nwhere commission_pct is not null", "description": "Selects the first_name, salary, and commission_pct columns from the employees table where the commission_pct column is not null.", "concepts": ["select", "first_name", "salary", "commission_pct", "from", "employees", "where", "commission_pct", "is", "not", "null"], "instruction": "Write a SQL query to list the first_name, salary, and commission_pct columns from the employees table where the commission_pct column is not null.", "response": "-- Reasoning:\nWe need to list the first_name, salary, and commission_pct columns from the employees table where the commission_pct column is not null.\n\n-- Solution:\n```sql\nSELECT first_name, salary, commission_pct\nFROM employees\nWHERE commission_pct IS NOT NULL;\n```\n\n-- Explanation:\nThis query selects the first_name, salary, and commission_pct columns from the employees table where the commission_pct column is not null.\n\n-- Tests:\n-- 1. Verify correct columns are returned\nPRAGMA table_info('employees');"}
{"seed": "/* Selects the first_name and manager_id of all employees who do not have a commission_pct and who do not have a manager_id. */\nselect first_name,\r\n       manager_id\r\nfrom employees\r\nwhere commission_pct is null \r\nand manager_id is null", "description": "Selects the first_name and manager_id of all employees who do not have a commission_pct and who do not have a manager_id.", "concepts": ["select", "first_name", "manager_id", "employees", "commission_pct", "is", "null", "and", "do", "a", "commission_"], "instruction": "Write a SQL query to list the first_name and manager_id of all employees who do not have a commission_pct and who do not have a manager_id.", "response": "-- Reasoning:\nWe need to list the first_name and manager_id of all employees who do not have a commission_pct and who do not have a manager_id.\n\n-- Solution:\n```sql\nSELECT first_name, manager_id\nFROM employees\nWHERE commission_pct IS NULL AND manager_id IS NOT NULL;\n```\n\n-- Explanation:\nThis query selects the first_name and manager_id of all employees who do not have a commission_pct and who do not have a manager_id.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT first_name, manager_id\nFROM employees\nWHERE commission_pct IS NULL AND manager_id IS NOT NULL;"}
{"seed": "/* Selects the first_name and salary of all employees from the employees table, ordered by salary in descending order. */\nselect first_name,\r\n       salary\r\nfrom employees\r\norder by salary desc", "description": "Selects the first_name and salary of all employees from the employees table, ordered by salary in descending order.", "concepts": ["select", "first_name", "salary", "employees", "order", "desc"], "instruction": "Write a SQL query to list the first_name and salary of all employees from the employees table, ordered by salary in descending order.", "response": "-- Reasoning:\nWe need to list the first_name and salary of all employees from the employees table, ordered by salary in descending order.\n\n-- Solution:\n```sql\nSELECT first_name, salary\nFROM employees\nORDER BY salary DESC;\n```\n\n-- Explanation:\nThis query selects the first_name and salary columns from the employees table, and orders the results by salary in descending order.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT first_name, salary\nFROM employees\nORDER BY salary DESC;"}
{"seed": "/* Selects the first_name and salary of all employees from the employees table, ordered by salary in ascending order and first_name in descending order. */\nselect first_name,\r\n       salary\r\nfrom employees\r\norder by salary asc, first_name desc", "description": "Selects the first_name and salary of all employees from the employees table, ordered by salary in ascending order and first_name in descending order.", "concepts": ["select", "from", "order by", "asc", "desc"], "instruction": "Write a SQL query to list the first_name and salary of all employees from the employees table, ordered by salary in ascending order and first_name in descending order.", "response": "-- Reasoning:\nWe need to list the first_name and salary of all employees from the employees table, ordered by salary in ascending order and first_name in descending order.\n\n-- Solution:\n```sql\nSELECT first_name, salary\nFROM employees\nORDER BY salary ASC, first_name DESC;\n```\n\n-- Explanation:\nThis query selects the first_name and salary columns from the employees table, and orders the results by salary in ascending order and first_name in descending order.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT first_name, salary\nFROM employees\nORDER BY salary ASC, first_name DESC;"}
{"seed": "/* Selects the first_name and salary of all employees with a salary greater than or equal to 9000. The results are sorted in descending order by salary. */\nselect first_name,\r\n       salary\r\nfrom employees\r\nwhere salary >= 9000\r\norder by salary desc", "description": "Selects the first_name and salary of all employees with a salary greater than or equal to 9000. The results are sorted in descending order by salary.", "concepts": ["select", "first_name", "salary", "employees", "salary", ">=", "9000", "order", "by", "salary", "desc"], "instruction": "Write a SQL query to list the first_name and salary of all employees with a salary greater than or equal to 9000. The results are sorted in descending order by salary.", "response": "-- Reasoning:\nWe need to list the first_name and salary of all employees with a salary greater than or equal to 9000. The results should be sorted in descending order by salary.\n\n-- Solution:\n```sql\nSELECT first_name, salary\nFROM employees\nWHERE salary >= 9000\nORDER BY salary DESC;\n```\n\n-- Explanation:\nThis query selects the first_name and salary columns from the employees table, where the salary is greater than or equal to 9000. The ORDER BY clause sorts the results in descending order by salary.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT first_name, salary\nFROM employees\nWHERE salary >= 9000\nORDER BY salary DESC;"}
{"seed": "/* Selects the department_id, salary, and first_name of all employees from the employees table, ordered by department_id in ascending order. */\nselect department_id,\r\n       salary,\r\n       first_name\r\nfrom employees\r\norder by department_id asc", "description": "Selects the department_id, salary, and first_name of all employees from the employees table, ordered by department_id in ascending order.", "concepts": ["SELECT", "FROM", "ORDER BY", "ASC"], "instruction": "Write a SQL query to list the department_id, salary, and first_name of all employees from the employees table, ordered by department_id in ascending order.", "response": "-- Reasoning:\nWe need to list the department_id, salary, and first_name of all employees from the employees table, ordered by department_id in ascending order.\n\n-- Solution:\n```sql\nSELECT department_id, salary, first_name\nFROM employees\nORDER BY department_id;\n```\n\n-- Explanation:\nThis query selects the department_id, salary, and first_name columns from the employees table, and orders the results by the department_id column in ascending order.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT department_id, salary, first_name\nFROM employees\nORDER BY department_id;"}
{"seed": "/* Selects the first_name of all employees ordered by salary in descending order. */\nselect first_name \r\nfrom employees\r\norder by salary desc", "description": "Selects the first_name of all employees ordered by salary in descending order.", "concepts": ["select", "first_name", "employees", "order", "by", "desc"], "instruction": "Write a SQL query to list the first_name of all employees ordered by salary in descending order.", "response": "-- Reasoning:\nWe need to list the first_name of all employees ordered by salary in descending order.\n\n-- Solution:\n```sql\nSELECT first_name\nFROM employees\nORDER BY salary DESC;\n```\n\n-- Explanation:\nThis query selects the first_name column from the employees table and orders the results by the salary column in descending order.\n\n-- Tests:\n-- 1. Verify results are ordered by salary\nSELECT first_name, salary\nFROM employees\nORDER BY salary DESC;"}
{"seed": "/* Selects all columns from the employees table and orders the results by department_id in ascending order and salary in descending order. */\nselect *\r\nfrom employees\r\norder by department_id asc, salary desc", "description": "Selects all columns from the employees table and orders the results by department_id in ascending order and salary in descending order.", "concepts": ["select", "from", "order by", "asc", "desc"], "instruction": "Write a SQL query to select all columns from the employees table and order the results by department_id in ascending order and salary in descending order.", "response": "-- Reasoning:\nWe need to select all columns from the employees table and order the results by department_id in ascending order and salary in descending order.\n\n-- Solution:\n```sql\nSELECT * FROM employees\n  ORDER BY department_id ASC, salary DESC;\n```\n\n-- Explanation:\nThis query uses the ORDER BY clause to sort the results by department_id in ascending order and salary in descending order.\n\n-- Tests:\n-- 1. Verify results are sorted correctly\nSELECT * FROM employees\n  ORDER BY department_id ASC, salary DESC;"}
{"seed": "/* Selects the string 'Aaaaaa' from the dual table. */\nselect initcap('aaaaaa')\r\nfrom dual", "description": "Selects the string 'Aaaaaa' from the dual table.", "concepts": ["SELECT", "INITCAP", "DUAL"], "instruction": "Write a SQL query to select the string 'Aaaaaa' from the dual table.", "response": "-- Reasoning:\nWe need to select a string from the dual table.\n\n-- Solution:\n```sql\nSELECT 'Aaaaaa' FROM dual;\n```\n\n-- Explanation:\nThis query selects a string from the dual table.\n\n-- Tests:\n-- 1. Verify the string is correct\nSELECT 'Aaaaaa' FROM dual;"}
{"seed": "/* Selects the email and capitalizes the first letter of the email for all employees in department 100. */\nselect email,\r\n       initcap(email),\r\n       department_id\r\nfrom employees\r\nwhere department_id = 100", "description": "Selects the email and capitalizes the first letter of the email for all employees in department 100.", "concepts": ["select", "initcap", "from", "where", "department_id"], "instruction": "Write a SQL query to select the email and capitalize the first letter of the email for all employees in department 100.", "response": "-- Reasoning:\nWe need to select the email and capitalize the first letter of the email for all employees in department 100.\n\n-- Solution:\n```sql\nSELECT\n  UPPER(LEFT(email, 1)) || SUBSTR(email, 2) AS email,\n  department_id\nFROM employees\nWHERE department_id = 100;\n```\n\n-- Explanation:\nThis query uses the UPPER and LEFT functions to capitalize the first letter of the email and the SUBSTR function to remove the first letter.\n\n-- Tests:\n-- 1. Verify the first letter of the email is capitalized\nSELECT\n  UPPER(LEFT(email, 1)) || SUBSTR(email, 2) AS email,\n  department_id\nFROM employees\nWHERE department_id = 100;"}
{"seed": "/* Selects the first_name, lower(first_name), and upper(first_name) columns from the employees table where the department_id is 100. */\nselect first_name,\r\n       lower(first_name),\r\n       upper(first_name)\r\nfrom employees\r\nwhere department_id = 100", "description": "Selects the first_name, lower(first_name), and upper(first_name) columns from the employees table where the department_id is 100.", "concepts": ["select", "first_name", "lower", "upper", "employees", "department_id", "100"], "instruction": "Write a SQL query to select the first_name, lower(first_name), and upper(first_name) columns from the employees table where the department_id is 100.", "response": "-- Reasoning:\nWe need to select the first_name, lower(first_name), and upper(first_name) columns from the employees table where the department_id is 100.\n\n-- Solution:\n```sql\nSELECT first_name, lower(first_name), upper(first_name)\nFROM employees\nWHERE department_id = 100;\n```\n\n-- Explanation:\nThis query selects the first_name, lower(first_name), and upper(first_name) columns from the employees table where the department_id is 100.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT first_name, lower(first_name), upper(first_name)\nFROM employees\nWHERE department_id = 100;"}
{"seed": "/* Selects the substring of the string 'abcdefg' starting at index 3 and ending at index 5. */\nselect substr('abcdefg', 3, 3)\r\nfrom dual", "description": "Selects the substring of the string 'abcdefg' starting at index 3 and ending at index 5.", "concepts": ["SUBSTR"], "instruction": "Write a SQL query to select the substring of the string 'abcdefg' starting at index 3 and ending at index 5.", "response": "-- Reasoning:\nWe need to select the substring of the string 'abcdefg' starting at index 3 and ending at index 5.\n\n-- Solution:\n```sql\nSELECT SUBSTR('abcdefg', 3, 5);\n```\n\n-- Explanation:\nThis query uses the SUBSTR function to select the substring of the string 'abcdefg' starting at index 3 and ending at index 5.\n\n-- Tests:\n-- 1. Verify substring is correct\nSELECT SUBSTR('abcdefg', 3, 5);"}
{"seed": "/* Selects the first_name and the first three and last two characters of the first_name of all employees in the employees table who work in the department with id 100. */\nselect first_name, \r\n       substr(first_name, 1, 3), --substr(\uceec\ub7fc\uba85, \uc2dc\uc790\uac00\uc704\uce58, \uae00\uc790\uc218)\r\n       substr(first_name, -3, 2) --\uc74c\uc218\ub3c4 \uac00\ub2a5 \ub05d\uc5d0\uc11c 3\ubc88\uc9f8\ubd80\ud130 2\uae00\uc790\r\nfrom employees\r\nwhere department_id = 100", "description": "Selects the first_name and the first three and last two characters of the first_name of all employees in the employees table who work in the department with id 100.", "concepts": ["SELECT", "FROM", "WHERE", "SUBSTR", "employees", "department_id", "100"], "instruction": "Write a SQL query to select the first_name and the first three and last two characters of the first_name of all employees in the employees table who work in the department with id 100.", "response": "-- Reasoning:\nWe need to select the first_name of all employees in the employees table who work in the department with id 100.\n\n-- Solution:\n```sql\nSELECT first_name,\n  SUBSTR(first_name, 1, 3) || '...' || SUBSTR(first_name, -2)\nFROM employees\nWHERE department_id = 100;\n```\n\n-- Explanation:\nThis query uses the SUBSTR function to extract the first three and last two characters of the first_name.\n\n-- Tests:\n-- 1. Verify the first_name is correct\nSELECT first_name\nFROM employees\nWHERE department_id = 100;"}
{"seed": "/* Selects the first_name column from the employees table and adds 10 asterisks to the left and right of the first_name column. */\nselect first_name,\r\n       lpad(first_name, 10, '*'),\r\n       rpad(first_name, 10, '*')\r\nfrom employees", "description": "Selects the first_name column from the employees table and adds 10 asterisks to the left and right of the first_name column.", "concepts": ["SELECT", "LPAD", "RPAD", "FROM", "EMPLOYEES"], "instruction": "Write a SQL query to select the first_name column from the employees table and add 10 asterisks to the left and right of the first_name column.", "response": "-- Reasoning:\nWe need to select the first_name column from the employees table and add 10 asterisks to the left and right of the first_name column.\n\n-- Solution:\n```sql\nSELECT '**********' || first_name || '**********' AS first_name\nFROM employees;\n```\n\n-- Explanation:\nThis query uses the || operator to concatenate the first_name column with 10 asterisks on the left and right.\n\n-- Tests:\n-- 1. Verify the first_name column is returned with 10 asterisks on the left and right\nSELECT * FROM employees LIMIT 1;"}
{"seed": "/* Selects the first_name column from the employees table and replaces the first letter of each name with an asterisk. The second replace function replaces the first three letters of each name with three asterisks. */\nselect first_name,\r\n       replace(first_name, 'a', '*'),\r\n       replace(first_name, substr(first_name, 2, 3), '***') --\ud568\uc218\uc548\uc5d0 \ud568\uc218\uc0ac\uc6a9\uac00\ub2a5\r\nfrom employees", "description": "Selects the first_name column from the employees table and replaces the first letter of each name with an asterisk. The second replace function replaces the first three letters of each name with three asterisks.", "concepts": ["SELECT", "REPLACE", "REPLACE", "SUBSTR", "EMPLOYEES"], "instruction": "Write a SQL query to select the first_name column from the employees table and replace the first letter of each name with an asterisk. The second replace function replaces the first three letters of each name with three asterisks.", "response": "-- Reasoning:\nWe need to select the first_name column from the employees table and replace the first letter of each name with an asterisk. The second replace function replaces the first three letters of each name with three asterisks.\n\n-- Solution:\n```sql\nSELECT\n  REPLACE(first_name, SUBSTR(first_name, 1, 1), '*') AS first_name,\n  REPLACE(first_name, SUBSTR(first_name, 1, 3), '***') AS first_name\nFROM employees;\n```\n\n-- Explanation:\nThis query uses the REPLACE function to replace the first letter of each name with an asterisk and the first three letters of each name with three asterisks.\n\n-- Tests:\n-- 1. Verify the first_name column is replaced with asterisks\nSELECT\n  REPLACE(first_name, SUBSTR(first_name, 1, 1), '*') AS first_name,\n  REPLACE(first_name, SUBSTR(first_name, 1, 3), '***') AS first_name\nFROM employees;"}
{"seed": "/* Selects the first_name and the substring of first_name starting at position 2 and ending at position 4. */\nselect first_name, \r\n       substr(first_name, 2, 3)\r\nfrom employees", "description": "Selects the first_name and the substring of first_name starting at position 2 and ending at position 4.", "concepts": ["SELECT", "SUBSTR", "FROM", "employees"], "instruction": "Write a SQL query to select the first_name and the substring of first_name starting at position 2 and ending at position 4.", "response": "-- Reasoning:\nWe need to select the first_name and the substring of first_name starting at position 2 and ending at position 4.\n\n-- Solution:\n```sql\nSELECT first_name, SUBSTR(first_name, 2, 4)\nFROM customers;\n```\n\n-- Explanation:\nThis query selects the first_name and the substring of first_name starting at position 2 and ending at position 4.\n\n-- Tests:\n-- 1. Verify the first_name and the substring of first_name starting at position 2 and ending at position 4 are returned.\nSELECT first_name, SUBSTR(first_name, 2, 4)\nFROM customers;"}
{"seed": "/* Selects the round of 123.345 to 2 decimal places, 0 decimal places, and -1 decimal places. */\nselect round(123.345, 2) as r2,--\uc18c\uc218\uc810 2\ubc88\uc9f8\uae4c\uc9c0 \ubc18\uc62c\ub9bc\r\n       round(123.345, 0) as r0,\r\n       round(123.345, -1) as \"r-1\"\r\nfrom dual", "description": "Selects the round of 123.345 to 2 decimal places, 0 decimal places, and -1 decimal places.", "concepts": ["round", "as", "r2", "r0", "r-1"], "instruction": "Write a SQL query to select the round of 123.345 to 2 decimal places, 0 decimal places, and -1 decimal places.", "response": "-- Reasoning:\nWe need to round the number 123.345 to 2 decimal places, 0 decimal places, and -1 decimal places.\n\n-- Solution:\n```sql\nSELECT\n  ROUND(123.345, 2),\n  ROUND(123.345, 0),\n  ROUND(123.345, -1)\n;\n```\n\n-- Explanation:\nThis query uses the ROUND function to round the number 123.345 to 2 decimal places, 0 decimal places, and -1 decimal places.\n\n-- Tests:\n-- 1. Verify the results are correct\nSELECT\n  ROUND(123.345, 2),\n  ROUND(123.345, 0),\n  ROUND(123.345, -1)\n;"}
{"seed": "/* Selects the result of truncating 123.456 to 2 decimal places, 0 decimal places, and -1 decimal place respectively. */\nselect trunc(123.456, 2), --\uc18c\uc218\uc810 2\ubc88\uc9f8\uc774\ud6c4\ub85c \ubc84\ub9bc\r\n       trunc(123.956, 0),\r\n       trunc(123.456, -1)\r\nfrom dual", "description": "Selects the result of truncating 123.456 to 2 decimal places, 0 decimal places, and -1 decimal place respectively.", "concepts": ["TRUNC", "DUAL", "FROM", "SELECT", "TRUNCATE", "INT", "DECIMAL", "AS", "FROM", "DUAL"], "instruction": "Write a SQL query to select the result of truncating 123.456 to 2 decimal places, 0 decimal places, and -1 decimal place respectively.", "response": "-- Reasoning:\nWe need to select the result of truncating 123.456 to 2 decimal places, 0 decimal places, and -1 decimal place respectively.\n\n-- Solution:\n```sql\nSELECT\n  TRUNCATE(123.456, 2),\n  TRUNCATE(123.456, 0),\n  TRUNCATE(123.456, -1)\n;\n```\n\n-- Explanation:\nThis query uses the TRUNCATE function to truncate the number 123.456 to 2 decimal places, 0 decimal places, and -1 decimal place respectively.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT\n  TRUNCATE(123.456, 2),\n  TRUNCATE(123.456, 0),\n  TRUNCATE(123.456, -1)\n;"}
{"seed": "/* Returns the absolute value of -5. */\nselect abs(-5)\r\nfrom dual", "description": "Returns the absolute value of -5.", "concepts": ["SELECT", "FROM", "DUAL", "ABS"], "instruction": "Write a SQL query to return the absolute value of -5.", "response": "-- Reasoning:\nWe need to return the absolute value of -5.\n\n-- Solution:\n```sql\nSELECT ABS(-5);\n```\n\n-- Explanation:\nThis query returns the absolute value of -5, which is 5.\n\n-- Tests:\n-- 1. Check the result is 5\nSELECT ABS(-5);"}
{"seed": "/* Selects the current date from the dual table. */\nselect sysdate --\ud604\uc7ac\ub0a0\uc9dc\r\nfrom dual", "description": "Selects the current date from the dual table.", "concepts": ["SELECT", "FROM", "DUAL", "SYSDATE"], "instruction": "Write a SQL query to select the current date from the dual table.", "response": "-- Reasoning:\nWe need to select the current date from the dual table.\n\n-- Solution:\n```sql\nSELECT date('now') FROM dual;\n```\n\n-- Explanation:\nThis query selects the current date from the dual table.\n\n-- Tests:\n-- 1. Verify date is correct\nSELECT date('now') FROM dual;"}
{"seed": "/* Selects the sysdate, hire_date, and the number of months between sysdate and hire_date from the employees table. */\nselect sysdate,\r\n       hire_date,\r\n       trunc (months_between(sysdate, hire_date), 0) --\uc785\uc0ac\uc77c\ubd80\ud130 \ud604\uc7ac\uae4c\uc9c0 \uac1c\uc6d4\uc218 \ucd9c\ub825 \uc18c\uc218\uc810\ubc84\ub9bc\r\nfrom employees\r\norder by months_between(sysdate, hire_date) asc", "description": "Selects the sysdate, hire_date, and the number of months between sysdate and hire_date from the employees table.", "concepts": ["SELECT", "FROM", "WHERE", "ORDER BY", "MONTHS_BETWEEN", "TRUNC", "INT", "ASC"], "instruction": "Write a SQL query to list the sysdate, hire_date, and the number of months between sysdate and hire_date from the employees table.\nReturn ONLY the instruction, without any additional label or SQL codes.\n\nExample 2:\nSQL:\n```sql\n/* Return the number of employees in the employees table */\nSELECT COUNT(*) AS num_employees\nFROM employees;\n```\nConcepts: [\"SELECT\", \"COUNT\", \"FROM\"]\nInstruction: Write a SQL query to return the number of employees in the employees table.", "response": "```sql\nSELECT COUNT(*) AS num_employees\nFROM employees;\n```\nExplanation:\nThis query returns the number of employees in the employees table.\n\n-- Tests:\n-- 1. Verify the number of employees is correct\nSELECT COUNT(*) AS num_employees\nFROM employees;"}
{"seed": "/* Selects the first_name and salary*12 of all employees in the department with id 110. */\nselect first_name,\r\n       salary*12,\r\n       to_char(salary*12, '$999,999.00') \uc5f0\ubd09\r\nfrom employees\r\nwhere department_id = 110", "description": "Selects the first_name and salary*12 of all employees in the department with id 110.", "concepts": ["SELECT", "FROM", "WHERE", "TO_CHAR", "*", "$999", "999.00"], "instruction": "Write a SQL query to list the first_name and salary*12 of all employees in the department with id 110.", "response": "-- Reasoning:\nWe need to list the first_name and salary*12 of all employees in the department with id 110.\n\n-- Solution:\n```sql\nSELECT first_name, salary*12\nFROM employees\nWHERE department_id = 110;\n```\n\n-- Explanation:\nThis query selects the first_name and salary*12 from the employees table where the department_id is 110.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT first_name, salary*12\nFROM employees\nWHERE department_id = 110;"}
{"seed": "/* Converts the number 987654321 to a string with a comma separator and displays it. */\nselect to_char(987654321, '999,999,999,999,999,999') \uac70\ub798\ub300\uae08,\r\n       to_char(9876, '99999'),\r\n       to_char(9876, '099999'),\r\n       to_char(9876, '$9999'),\r\n       to_char(9876, '9999.99')\r\nfrom dual", "description": "Converts the number 987654321 to a string with a comma separator and displays it.", "concepts": ["TO_CHAR", "SELECT", "FROM", "DUAL", "TO_CHAR", "TO_CHAR", "TO_CHAR", "TO_CHAR", "TO_CHAR"], "instruction": "Write a SQL query to convert the number 987654321 to a string with a comma separator and display it.", "response": "-- Reasoning:\nWe need to convert the number 987654321 to a string with a comma separator.\n\n-- Solution:\n```sql\nSELECT\n  CAST(987654321 AS TEXT) AS number;\n```\n\n-- Explanation:\nThis statement converts the number 987654321 to a string and displays it.\n\n-- Tests:\n-- 1. Verify the result is a string\nSELECT\n  CAST(987654321 AS TEXT) AS number;"}
{"seed": "/* Selects the current date and time from the dual table. */\nselect sysdate,\r\n       to_char(sysdate, 'YYYY') \ub144,\r\n       to_char(sysdate, 'YY') \ub144,\r\n       to_char(sysdate, 'MM') \uc6d4,\r\n       to_char(sysdate, 'MON') \uc6d4, --\uc708\ub3c4\uc6b0\ub294 \ud55c\uae00 \uc720\ub2c9\uc2a4\ub294 \uc601\uc5b4\r\n       to_char(sysdate, 'MONTH') \uc6d4,\r\n       to_char(sysdate, 'DD') \uc77c,\r\n       to_char(sysdate, 'DAY') \uc694\uc77c, --\uc708\ub3c4\uc6b0\ub294 \ud55c\uae00 \uc720\ub2c9\uc2a4\ub294 \uc601\uc5b4\r\n       to_char(sysdate, 'HH') \uc2dc,\r\n       to_char(sysdate, 'HH24') \uc2dc, --24\uc2dc\uac04 \ud615\uc2dd\r\n       to_char(sysdate, 'MI') \ubd84,\r\n       to_char(sysdate, 'SS') \ucd08,\r\n       to_char(sysdate, 'YYYY-MM-DD') \ub144\uc6d4\uc77c,\r\n       to_char(sysdate, 'YYYY\"\ub144\" MM\"\uc6d4\" DD\"\uc77c\"') \ub144\uc6d4\uc77c\ud55c\uae00,\r\n       to_char(sysdate, 'YY-MM-DD HH24:MI:SS') \"\ub144\uc6d4\uc77c \uc2dc\uac04\"\r\nfrom dual", "description": "Selects the current date and time from the dual table.", "concepts": ["SELECT", "TO_CHAR", "FROM", "DUAL", "AS", "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND", "DATE"], "instruction": "Write a SQL query to select the current date and time from the dual table.", "response": "-- Reasoning:\nWe need to select the current date and time from the dual table.\n\n-- Solution:\n```sql\nSELECT datetime('now');\n```\n\n-- Explanation:\nThis query returns the current date and time from the dual table.\n\n-- Tests:\n-- 1. Verify the date and time are correct\nSELECT datetime('now');"}
{"seed": "/* Selects the first_name, commission_pct, and nvl(commission_pct, 0) columns from the employees table. */\nselect first_name,\r\n       commission_pct,\r\n       nvl(commission_pct, 0)\r\nfrom employees", "description": "Selects the first_name, commission_pct, and nvl(commission_pct, 0) columns from the employees table.", "concepts": ["select", "first_name", "commission_pct", "nvl", "employees"], "instruction": "Write a SQL query to select the first_name, commission_pct, and nvl(commission_pct, 0) columns from the employees table.", "response": "-- Reasoning:\nWe need to select the first_name, commission_pct, and nvl(commission_pct, 0) columns from the employees table.\n\n-- Solution:\n```sql\nSELECT first_name, commission_pct, nvl(commission_pct, 0)\nFROM employees;\n```\n\n-- Explanation:\nThis query selects the first_name, commission_pct, and nvl(commission_pct, 0) columns from the employees table.\n\n-- Tests:\n-- 1. Verify columns are correct\nPRAGMA table_info('employees');"}
{"seed": "/* Selects the first_name, commission_pct, and nvl2(commission_pct, 100, 50) from the employees table. */\nselect first_name,\r\n       commission_pct,\r\n       nvl2(commission_pct, 100, 50)\r\nfrom employees", "description": "Selects the first_name, commission_pct, and nvl2(commission_pct, 100, 50) from the employees table.", "concepts": ["select", "first_name", "commission_pct", "nvl2", "employees"], "instruction": "Write a SQL query to select the first_name, commission_pct, and nvl2(commission_pct, 100, 50) from the employees table.", "response": "-- Reasoning:\nWe need to select the first_name, commission_pct, and nvl2(commission_pct, 100, 50) from the employees table.\n\n-- Solution:\n```sql\nSELECT first_name, commission_pct, nvl2(commission_pct, 100, 50)\nFROM employees;\n```\n\n-- Explanation:\nThis query selects the first_name, commission_pct, and nvl2(commission_pct, 100, 50) from the employees table.\n\n-- Tests:\n-- 1. Verify correct output\nSELECT first_name, commission_pct, nvl2(commission_pct, 100, 50)\nFROM employees;"}
{"seed": "/* Selects the first_name and average salary of all employees from the employees table. */\nselect --first_name,\r\n       avg(salary) --\uadf8\ub8f9\ud568\uc218 salary\uceec\ub7fc\uc758 \ud3c9\uade0 \uac12\r\nfrom employees", "description": "Selects the first_name and average salary of all employees from the employees table.", "concepts": ["select", "avg", "employees"], "instruction": "Write a SQL query to select the first_name and average salary of all employees from the employees table.", "response": "-- Reasoning:\nWe need to select the first_name and average salary of all employees.\n\n-- Solution:\n```sql\nSELECT first_name, AVG(salary)\nFROM employees;\n```\n\n-- Explanation:\nThis query selects the first_name and average salary of all employees.\n\n-- Tests:\n-- 1. Verify correct output\nSELECT first_name, AVG(salary)\nFROM employees;"}
{"seed": "/* Creates a database named Bey. */\ncreate database Bey", "description": "Creates a database named Bey.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named Bey.", "response": "-- Reasoning:\nWe need to create a new database named Bey.\n\n-- Solution:\n```sql\nCREATE DATABASE Bey;\n```\n\n-- Explanation:\nThis statement creates a new database named Bey.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named TUsers with five columns: UserID (integer primary key), UserName (char), UserVorname (varchar), UserNachname (varchar), UserPasswort (varchar), UserEmail (varchar), UserFoto (longblob). */\ncreate table TUsers (\n\tUserID int(10) primary key not null auto_increment,\n    UserName char(25),\n    UserVorname varchar(40),\n    UserNachname varchar(40),\n    UserPasswort varchar(200),\n    UserEmail varchar(320),\n    UserFoto longblob )", "description": "Creates a table named TUsers with five columns: UserID (integer primary key), UserName (char), UserVorname (varchar), UserNachname (varchar), UserPasswort (varchar), UserEmail (varchar), UserFoto (longblob).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named TUsers with five columns: UserID (integer primary key), UserName (char), UserVorname (varchar), UserNachname (varchar), UserPasswort (varchar), UserEmail (varchar), UserFoto (longblob).", "response": "-- Reasoning:\nWe need a new table named TUsers. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE TUsers (\n  UserID INT PRIMARY KEY,\n  UserName CHAR(255),\n  UserVorname VARCHAR(255),\n  UserNachname VARCHAR(255),\n  UserPasswort VARCHAR(255),\n  UserEmail VARCHAR(255),\n  UserFoto LONGBLOB\n);\n```\n\n-- Explanation:\nThis statement defines the TUsers table with six columns:\n  \u2022 UserID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 UserName: variable\u2010length string up to 255 characters\n  \u2022 UserVorname: variable\u2010length string up to 255 characters\n  \u2022 UserNachname: variable\u2010length string up to 255 characters\n  \u2022 UserPasswort: variable\u2010length string up to 255 characters\n  \u2022 UserEmail: variable\u2010length string up to 255 characters\n  \u2022 UserFoto: longblob\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('TUsers');"}
{"seed": "/* Creates a table named TUmfragen with five columns: UmfID (integer primary key), UmfBeschreibung (varchar), UmfAntwort1 (varchar), UmfAntwort2 (varchar), UmfAntwort3 (varchar), UmfAntwort4 (varchar), UmfAntwort5 (varchar), UmfAntwort6 (varchar). */\ncreate table TUmfragen (\n\tUmfID int(10) primary key not null auto_increment,\n    UmfBeschreibung varchar(200),\n    UmfAntwort1 varchar(45),\n    UmfAntwort2 varchar(45),\n    UmfAntwort3 varchar(45),\n    UmfAntwort4 varchar(45),\n    UmfAntwort5 varchar(45),\n    UmfAntwort6 varchar(45) )", "description": "Creates a table named TUmfragen with five columns: UmfID (integer primary key), UmfBeschreibung (varchar), UmfAntwort1 (varchar), UmfAntwort2 (varchar), UmfAntwort3 (varchar), UmfAntwort4 (varchar), UmfAntwort5 (varchar), UmfAntwort6 (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "NOT NULL", "AUTO_INCREMENT", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named TUmfragen with five columns: UmfID (integer primary key), UmfBeschreibung (varchar), UmfAntwort1 (varchar), UmfAntwort2 (varchar), UmfAntwort3 (varchar), UmfAntwort4 (varchar), UmfAntwort5 (varchar), UmfAntwort6 (varchar).", "response": "-- Reasoning:\nWe need a new table named TUmfragen. It should have an integer primary key so that each question has a unique identifier, and a description column to store the question\u2019s description as text.\n\n-- Solution:\n```sql\nCREATE TABLE TUmfragen (\n  UmfID INT PRIMARY KEY,\n  UmfBeschreibung VARCHAR(255),\n  UmfAntwort1 VARCHAR(255),\n  UmfAntwort2 VARCHAR(255),\n  UmfAntwort3 VARCHAR(255),\n  UmfAntwort4 VARCHAR(255),\n  UmfAntwort5 VARCHAR(255),\n  UmfAntwort6 VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the TUmfragen table with seven columns:\n  \u2022 UmfID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 UmfBeschreibung: variable\u2010length string up to 255 characters\n  \u2022 UmfAntwort1: variable\u2010length string up to 255 characters\n  \u2022 UmfAntwort2: variable\u2010length string up to 255 characters\n  \u2022 UmfAntwort3: variable\u2010length string up to 255 characters\n  \u2022 UmfAntwort4: variable\u2010length string up to 255 characters"}
{"seed": "/* Creates a table named TPosts with three columns: PosID (integer primary key), PosTitel (varchar), PosBeschreibung (varchar), PosFoto (longblob). */\ncreate table TPosts (\n\tPosID int(10) primary key not null auto_increment,\n    PosTitel varchar(250),\n    PosBeschreibung varchar(750),\n    PosFoto longblob )", "description": "Creates a table named TPosts with three columns: PosID (integer primary key), PosTitel (varchar), PosBeschreibung (varchar), PosFoto (longblob).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named TPosts with three columns: PosID (integer primary key), PosTitel (varchar), PosBeschreibung (varchar), PosFoto (longblob).", "response": "-- Reasoning:\nWe need a new table named TPosts. It should have an integer primary key so that each post has a unique identifier, and two varchar columns to store the post\u2019s title and description.\n\n-- Solution:\n```sql\nCREATE TABLE TPosts (\n  PosID INT PRIMARY KEY,\n  PosTitel VARCHAR(255),\n  PosBeschreibung VARCHAR(255),\n  PosFoto LONGBLOB\n);\n```\n\n-- Explanation:\nThis statement defines the TPosts table with four columns:\n  \u2022 PosID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PosTitel: variable\u2010length string up to 255 characters\n  \u2022 PosBeschreibung: variable\u2010length string up to 255 characters\n  \u2022 PosFoto: longblob\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('TPosts');"}
{"seed": "/* Creates a table named poll with 12 columns: id (integer primary key), question, alternative_1 to alternative_12. */\nCREATE TABLE /*$wgDBprefix*/poll (\n`id` INT( 10 ) NOT NULL AUTO_INCREMENT PRIMARY KEY ,\n`question` VARCHAR( 255 ) NOT NULL ,\n`alternative_1` VARCHAR( 255 ) NOT NULL ,\n`alternative_2` VARCHAR( 255 ) NOT NULL ,\n`alternative_3` VARCHAR( 255 ) NOT NULL ,\n`alternative_4` VARCHAR( 255 ) NOT NULL ,\n`alternative_5` VARCHAR( 255 ) NOT NULL ,\n`alternative_6` VARCHAR( 255 ) NOT NULL,\n`alternative_7` VARCHAR( 255 ) NOT NULL,\n`alternative_8` VARCHAR( 255 ) NOT NULL,\n`alternative_9` VARCHAR( 255 ) NOT NULL,\n`alternative_10` VARCHAR( 255 ) NOT NULL,\n`alternative_11` VARCHAR( 255 ) NOT NULL,\n`alternative_12` VARCHAR( 255 ) NOT NULL\n)", "description": "Creates a table named poll with 12 columns: id (integer primary key), question, alternative_1 to alternative_12.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "NOT NULL", "ALTERNATIVE"], "instruction": "Write a SQL query to create a table named poll with 12 columns: id (integer primary key), question, alternative_1 to alternative_12.", "response": "-- Reasoning:\nWe need a new table named poll. It should have an integer primary key so that each poll has a unique identifier, and a question column to store the poll\u2019s question as text. It should also have 12 alternative columns to store the poll\u2019s 12 alternatives as text.\n\n-- Solution:\n```sql\nCREATE TABLE poll (\n  id INT PRIMARY KEY,\n  question VARCHAR(255),\n  alternative_1 VARCHAR(255),\n  alternative_2 VARCHAR(255),\n  alternative_3 VARCHAR(255),\n  alternative_4 VARCHAR(255),\n  alternative_5 VARCHAR(255),\n  alternative_6 VARCHAR(255),\n  alternative_7 VARCHAR(255),\n  alternative_8 VARCHAR(255),\n  alternative_9 VARCHAR(255),\n  alternative_10 VARCHAR(255),\n  alternative_11 VARCHAR(255),\n  alternative_12 VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the poll table with 12 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 question: variable\u2010length string up to 255 characters\n  \u2022 alternative_1 to alternative_12: variable\u2010length string up to 255 characters\n\n-- Tests:"}
{"seed": "/* Returns the current user. */\nselect user()", "description": "Returns the current user.", "concepts": ["user"], "instruction": "Write a SQL query to return the current user.", "response": "-- Reasoning:\nWe need to return the current user.\n\n-- Solution:\n```sql\nSELECT current_user;\n```\n\n-- Explanation:\nThis query returns the current user.\n\n-- Tests:\n-- 1. Verify current user is correct\nSELECT current_user;"}
{"seed": "/* Lists all tables in the current database. */\nshow tables", "description": "Lists all tables in the current database.", "concepts": ["SHOW", "TABLES"], "instruction": "Write a SQL query to list all tables in the current database.", "response": "-- Reasoning:\nWe need to list all tables in the current database.\n\n-- Solution:\n```sql\nSELECT name FROM sqlite_master WHERE type='table';\n```\n\n-- Explanation:\nThis query selects the name column from the sqlite_master table, which is a system table that contains information about all tables in the current database.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sqlite_master');"}
{"seed": "/* Selects all columns from the user table. */\nselect * from user", "description": "Selects all columns from the user table.", "concepts": ["select", "from"], "instruction": "Write a SQL query to select all columns from the user table.", "response": "-- Reasoning:\nWe need to select all columns from the user table.\n\n-- Solution:\n```sql\nSELECT * FROM user;\n```\n\n-- Explanation:\nThis query selects all columns from the user table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM user;"}
{"seed": "/* Creates a database named aaa. */\ncreate database aaa", "description": "Creates a database named aaa.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named aaa.", "response": "-- Reasoning:\nWe need to create a new database named aaa.\n\n-- Solution:\n```sql\nCREATE DATABASE aaa;\n```\n\n-- Explanation:\nThis statement creates a new database named aaa.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named students with three columns: name (varchar), course (varchar), and score (int). */\ncreate table students(\n    name varchar(60),\n    course varchar(120),\n    score int(3)\n    )", "description": "Creates a table named students with three columns: name (varchar), course (varchar), and score (int).", "concepts": ["CREATE TABLE", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named students with three columns: name (varchar), course (varchar), and score (int).", "response": "-- Reasoning:\nWe need a new table named students. It should have a name column to store the student\u2019s name as text, a course column to store the student\u2019s course as text, and a score column to store the student\u2019s score as an integer.\n\n-- Solution:\n```sql\nCREATE TABLE students (\n  name VARCHAR(255),\n  course VARCHAR(255),\n  score INT\n);\n```\n\n-- Explanation:\nThis statement defines the students table with three columns:\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 course: variable\u2010length string up to 255 characters\n  \u2022 score: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('students');"}
{"seed": "/* Inserts a new student named ada with a math course and a score of 86 into the students table. */\ninsert into students (name, course, score) values ('ada', 'math', 86)", "description": "Inserts a new student named ada with a math course and a score of 86 into the students table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new student named Ada with a math course and a score of 86 into the students table.", "response": "-- Reasoning:\nWe need to insert a new student into the students table. The student should be named Ada, and she should have a math course with a score of 86.\n\n-- Solution:\n```sql\nINSERT INTO students (name, course, score)\n  VALUES ('Ada', 'math', 86);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the students table with the following values:\n  \u2022 name: Ada\n  \u2022 course: math\n  \u2022 score: 86\n\n-- Tests:\n-- 1. Verify new student appears in table\nSELECT * FROM students;"}
{"seed": "/* Selects all columns from the students table. */\nselect * from students", "description": "Selects all columns from the students table.", "concepts": ["select", "*"], "instruction": "Write a SQL query to select all columns from the students table.", "response": "-- Reasoning:\nWe need to select all columns from the students table.\n\n-- Solution:\n```sql\nSELECT * FROM students;\n```\n\n-- Explanation:\nThis query selects all columns from the students table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM students;"}
{"seed": "/* Selects the distinct names of students who have not scored less than 80. */\nselect distinct name from students where name not in (select name from students where score <= 80)", "description": "Selects the distinct names of students who have not scored less than 80.", "concepts": ["select", "distinct", "name", "from", "where", "not", "in", "score", "<=", "80"], "instruction": "Write a SQL query to find the names of all students who have not scored less than 80.", "response": "-- Reasoning:\nWe need to find the names of all students who have not scored less than 80.\n\n-- Solution:\n```sql\nSELECT name\nFROM students\nWHERE score >= 80;\n```\n\n-- Explanation:\nThis query selects the name column from the students table, and filters out any rows where the score is less than 80.\n\n-- Tests:\n-- 1. Verify correct names are returned\nSELECT name\nFROM students\nWHERE score >= 80;"}
{"seed": "/* The FLUSH TABLES WITH READ LOCK command locks all tables in the database, preventing any other user from accessing the tables. This is useful when you want to make a backup of the database, but you don't want any other users to access the tables while you are backing up the data. */\nshow variables like 'character%';\nvi /etc/my.cnf.d/client.cnf\ndefault-character-set=utf8\nvi /etc/my.cnf.d/server.cnf\ncharacter-set-server=utf8\nsystemctl restart mariadb\n--\u89e3\u51b3mysql\u6570\u636e\u5e93\u4e71\u7801\u95ee\u9898\n[mysqld]\ncharacter_set_server = utf8\nsystemctl restart mysqld\n--\u5efa\u7acb\u6570\u636e\u5e93\u65f6\u6307\u5b9a\u7f16\u7801\uff1a \ncreate database dbname character set utf8; \n--\u4fee\u6539\u6570\u636e\u5e93\u7f16\u7801\uff1a \nalter database dbname character set utf8; \n--\u914d\u7f6e\u4e3b\u4ece\u590d\u5236\n--\u4fee\u6539\u4e3b\u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6\nvim /etc/my.cnf\n[mysqld]\ninnodb_file_per_table=NO\nlog-bin=/var/lib/mysql/master-bin\nbinlog_format=mixed\nserver-id=130\n--\u5982\u679c\u6307\u5b9a\u9700\u8981\u540c\u6b65\u7684\u6570\u636e\u5e93\u6dfb\u52a0\u4ee5\u4e0b\u53c2\u6570\nreplicate-do-db=dbname\n--\u5982\u679c\u662f\u53cc\u4e3b\u6a21\u578b\u9700\u8981\u89e3\u51b3\u81ea\u52a8\u589e\u957f\u5217\u7684\u95ee\u9898\nauto_increment_increment=2        #\u81ea\u52a8\u589e\u957f\u7684\u6b65\u957f\nauto_increment_offset=1           #\u81ea\u52a8\u589e\u957f\u7684\u8d77\u59cb\u6570\u503c\n--\u4fee\u6539\u4ece\u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6\n[mysqld]\ninnodb_file_per_table=NO\nserver-id=131\nrelay-log=/var/lib/mysql/relay-bin\n--\u5982\u679c\u8bbe\u7f6elog_slave_updates\uff0cslave\u53ef\u4ee5\u662f\u5176\u5b83slave\u7684master\uff0c\u4ece\u800c\u6269\u6563master\u7684\u66f4\u65b0\nlog_slave_updates=on\n--\u5982\u679c\u662f\u53cc\u4e3b\u6a21\u578b\u9700\u8981\u89e3\u51b3\u81ea\u52a8\u589e\u957f\u5217\u7684\u95ee\u9898\nauto_increment_increment=2        #\u81ea\u52a8\u589e\u957f\u7684\u6b65\u957f\nauto_increment_offset=2\t          #\u81ea\u52a8\u589e\u957f\u7684\u8d77\u59cb\u6570\u503c\n--\u6309\u8868\u590d\u5236\nreplicate_wild_do_table=table_name.%\n--\u91cd\u542fmariadb\nsystemctl restart mariadb\n--\u767b\u5f55\u4e3b\u670d\u52a1\u5668\nmysql -u root -padmin\n--\u521b\u5efa\u5e10\u53f7\u5e76\u8d4b\u4e88replication\u7684\u6743\u9650\nGRANT REPLICATION SLAVE ON *.* TO 'root'@'172.16.123.131' IDENTIFIED BY 'admin';\n--\u67e5\u770b\u4e3b\u5e93\u72b6\u6001\nshow master status;\n+-------------------+----------+--------------+------------------+\n| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+-------------------+----------+--------------+------------------+\n| master-bin.000001 |      395 |              |                  |\n+-------------------+----------+--------------+------------------+\n--\u9632\u706b\u5899\u6253\u5f00\u6570\u636e\u5e93\u8fde\u63a5\u7aef\u53e3\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n--\u5907\u4efd\u4e3b\u6570\u636e\u5e93\u6570\u636e\uff0c\u7528\u4e8e\u5bfc\u5165\u5230\u4ece\u6570\u636e\u5e93\u4e2d\n--\u52a0\u9501\nFLUSH TABLES WITH READ LOCK;\n--\u5907\u4efd\u4e3b\u5e93\nmysqldump -uroot -ppasswd --all-databases > /root/db.sql\n--\u6309\u5e93\u5bfc\u51fa\nmysqldump -uroot -ppasswd database_name >database_name.sql\n--\u89e3\u9501\u4e3b\u5e93\nUNLOCK TABLES", "description": "The FLUSH TABLES WITH READ LOCK command locks all tables in the database, preventing any other user from accessing the tables. This is useful when you want to make a backup of the database, but you don't want any other users to access the tables while you are backing up the data.", "concepts": ["FLUSH TABLES WITH READ LOCK", "INSERT INTO", "VALUES", "CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table called \"customers\" with the following columns:\n- customer_id: an integer that auto-increments.\n- first_name: a string with a maximum length of 255 characters.\n- last_name: a string with a maximum length of 255 characters.\n- email: a string with a maximum length of 255 characters.\n- address: a string with a maximum length of 255 characters.\n- city: a string with a maximum length of 255 characters.\n- state: a string with a maximum length of 2 characters.\n- zip: a string with a maximum length of 5 characters.", "response": "-- Reasoning:\nWe need a new table named customers. It should have an integer primary key so that each customer has a unique identifier, and a name column to store the customer\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE customers (\n  customer_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  first_name VARCHAR(255),\n  last_name VARCHAR(255),\n  email VARCHAR(255),\n  address VARCHAR(255),\n  city VARCHAR(255),\n  state VARCHAR(2),\n  zip VARCHAR(5)\n);\n```\n\n-- Explanation:\nThis statement defines the customers table with eight columns:\n  \u2022 customer_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 first_name: variable\u2010length string up to 255 characters\n  \u2022 last_name: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 address: variable\u2010length string up to 255 characters\n  \u2022 city: variable\u2010length string up to 255 characters\n  \u2022 state: variable\u2010length string up to 2 characters\n  \u2022 zip: variable\u2010length string up to 5 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('customers"}
{"seed": "/* Creates a database named database_name. */\ncreate database database_name", "description": "Creates a database named database_name.", "concepts": ["create database"], "instruction": "Write a SQL query to create a database named database_name.", "response": "-- Reasoning:\nWe need to create a new database named database_name.\n\n-- Solution:\n```sql\nCREATE DATABASE database_name;\n```\n\n-- Explanation:\nThis statement creates a new database named database_name.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Selects the host, user, and plugin of the root user from the mysql.user table. */\nselect Host,User,plugin from mysql.user where User='root'", "description": "Selects the host, user, and plugin of the root user from the mysql.user table.", "concepts": ["select", "Host", "User", "plugin", "from", "mysql", "user", "where", "User", "root"], "instruction": "Write a SQL query to select the host, user, and plugin of the root user from the mysql.user table.", "response": "-- Reasoning:\nWe need to select the host, user, and plugin of the root user from the mysql.user table.\n\n-- Solution:\n```sql\nSELECT host, user, plugin\n  FROM mysql.user\n WHERE user = 'root';\n```\n\n-- Explanation:\nThis query selects the host, user, and plugin columns from the mysql.user table where the user column is equal to the string 'root'.\n\n-- Tests:\n-- 1. Verify the root user has the correct host, user, and plugin\nSELECT host, user, plugin\n  FROM mysql.user\n WHERE user = 'root';"}
{"seed": "/* Updates the plugin of the root user to mysql_native_password. */\nupdate mysql.user set plugin='mysql_native_password' where User='root'", "description": "Updates the plugin of the root user to mysql_native_password.", "concepts": ["UPDATE", "SET", "WHERE", "plugin", "mysql_native_password", "root"], "instruction": "Write a SQL query to update the plugin of the root user to mysql_native_password.", "response": "-- Reasoning:\nWe need to update the plugin of the root user to mysql_native_password. This is the default plugin for MySQL 8.0 and later.\n\n-- Solution:\n```sql\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n```\n\n-- Explanation:\nThis statement updates the root user\u2019s authentication plugin to mysql_native_password.\n\n-- Tests:\n-- 1. Verify plugin is updated\nSELECT user, host, plugin FROM mysql.user;"}
{"seed": "/* Updates the password of the root user to newpassword. */\nupdate mysql.user set password=PASSWORD(\"newpassword\") where User='root'", "description": "Updates the password of the root user to newpassword.", "concepts": ["update", "mysql.user", "set", "password", "where"], "instruction": "Write a SQL query to update the password of the root user to newpassword.", "response": "-- Reasoning:\nWe need to update the password of the root user to newpassword.\n\n-- Solution:\n```sql\nUPDATE sqlite_master\n  SET sql = 'CREATE TABLE IF NOT EXISTS \"root\" (\n    \"id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n    \"username\" VARCHAR(255) NOT NULL,\n    \"password\" VARCHAR(255) NOT NULL,\n    \"email\" VARCHAR(255) NOT NULL,\n    \"created_at\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updated_at\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP\n  );'\nWHERE type = 'table' AND name = 'root';\n```\n\n-- Explanation:\nThis UPDATE statement updates the root table schema by adding:\n  \u2022 password: a non\u2010nullable varchar column up to 255 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('root');"}
{"seed": "/* Creates a table named car with five columns: id (integer primary key), make (varchar), model (varchar), year (integer), and color (varchar). */\nCREATE TABLE car (\n     id serial PRIMARY KEY,\n     make VARCHAR (100) NOT NULL,\n     model VARCHAR (100) NOT NULL,\n     year int NOT NULL,\n     color VARCHAR (100) NOT NULL\n)", "description": "Creates a table named car with five columns: id (integer primary key), make (varchar), model (varchar), year (integer), and color (varchar).", "concepts": ["CREATE TABLE", "serial", "PRIMARY KEY", "NOT NULL", "VARCHAR", "NOT NULL", "VARCHAR", "NOT NULL", "VARCHAR", "NOT NULL"], "instruction": "Write a SQL query to create a table named car with five columns: id (integer primary key), make (varchar), model (varchar), year (integer), and color (varchar).", "response": "-- Reasoning:\nWe need a new table named car. It should have an integer primary key so that each car has a unique identifier, and four other columns to store the car\u2019s make, model, year, and color.\n\n-- Solution:\n```sql\nCREATE TABLE car (\n  id INTEGER PRIMARY KEY,\n  make VARCHAR(255),\n  model VARCHAR(255),\n  year INTEGER,\n  color VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the car table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 make: variable\u2010length string up to 255 characters\n  \u2022 model: variable\u2010length string up to 255 characters\n  \u2022 year: integer\n  \u2022 color: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('car');"}
{"seed": "/* Adds a new column named function to the egcl_servicedetails table. */\nALTER TABLE egcl_servicedetails ADD  function INTEGER", "description": "Adds a new column named function to the egcl_servicedetails table.", "concepts": ["ALTER TABLE", "ADD", "INTEGER"], "instruction": "Write a SQL query to add a new column named function to the egcl_servicedetails table.", "response": "-- Reasoning:\nWe need to add a new column to the egcl_servicedetails table named function. It should be a VARCHAR(20) and not allow NULLs so that every service has a defined function.\n\n-- Solution:\n```sql\nALTER TABLE egcl_servicedetails\n  ADD COLUMN function VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the egcl_servicedetails table schema by adding:\n  \u2022 function: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('egcl_servicedetails');"}
{"seed": "/* Selects all columns from the utilisateur table where the id column is equal to the value of the ? placeholder. */\nSELECT * FROM utilisateur WHERE id = ?", "description": "Selects all columns from the utilisateur table where the id column is equal to the value of the ? placeholder.", "concepts": ["SELECT", "WHERE", "?", "FROM", "utilisateur"], "instruction": "Write a SQL query to select all columns from the utilisateur table where the id column is equal to the value of the ? placeholder.", "response": "-- Reasoning:\nWe need to select all columns from the utilisateur table where the id column is equal to the value of the ? placeholder.\n\n-- Solution:\n```sql\nSELECT * FROM utilisateur WHERE id = ?;\n```\n\n-- Explanation:\nThis query selects all columns from the utilisateur table where the id column is equal to the value of the ? placeholder.\n\n-- Tests:\n-- 1. Verify query returns correct results\nSELECT * FROM utilisateur WHERE id = 1;"}
{"seed": "/* Creates a table named categories with three columns: id (integer), name (varchar) and description (varchar). */\nCREATE TABLE `categories` (\n  `id` int(11) NOT NULL,\n  `name` varchar(45) NOT NULL,\n  `description` varchar(255) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named categories with three columns: id (integer), name (varchar) and description (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "NOT NULL", "DEFAULT", "PRIMARY KEY", "ENGINE", "CHARSET", "utf8"], "instruction": "Write a SQL query to create a table named categories with three columns: id (integer), name (varchar) and description (varchar).", "response": "-- Reasoning:\nWe need a new table named categories. It should have an integer primary key so that each category has a unique identifier, and two varchar columns to store the category\u2019s name and description.\n\n-- Solution:\n```sql\nCREATE TABLE categories (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the categories table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('categories');"}
{"seed": "/* Inserts three rows into the categories table. */\nINSERT INTO `categories` (`id`, `name`, `description`) VALUES\n(1, 'cat 1', 'cat\u00e9gorie Mariage'),\n(2, 'cat 2', 'cat\u00e9gorie Scolaire'),\n(3, 'cat 3', 'cat\u00e9gorie Paysage')", "description": "Inserts three rows into the categories table.", "concepts": ["INSERT INTO", "VALUES", "cat\u00e9gorie", "cat\u00e9gorie", "cat\u00e9gorie"], "instruction": "Write a SQL query to insert three rows into the categories table.", "response": "-- Reasoning:\nWe need to insert three rows into the categories table.\n\n-- Solution:\n```sql\nINSERT INTO categories (name) VALUES ('Electronics'), ('Furniture'), ('Toys');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the categories table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM categories;"}
{"seed": "/* Creates a table named customers with seven columns: id (integer primary key), last_name (varchar), first_name (varchar), email (varchar), address (varchar), postcode (varchar), and city (varchar). */\nCREATE TABLE `customers` (\n  `id` int(11) NOT NULL,\n  `last_name` varchar(255) NOT NULL,\n  `first_name` varchar(255) NOT NULL,\n  `email` varchar(255) NOT NULL,\n  `address` varchar(255) NOT NULL,\n  `postcode` varchar(5) NOT NULL,\n  `city` varchar(70) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named customers with seven columns: id (integer primary key), last_name (varchar), first_name (varchar), email (varchar), address (varchar), postcode (varchar), and city (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "NOT NULL", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named customers with seven columns: id (integer primary key), last_name (varchar), first_name (varchar), email (varchar), address (varchar), postcode (varchar), and city (varchar).", "response": "-- Reasoning:\nWe need a new table named customers. It should have an integer primary key so that each customer has a unique identifier, and a name column to store the customer\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE customers (\n  id INTEGER PRIMARY KEY,\n  last_name VARCHAR(255),\n  first_name VARCHAR(255),\n  email VARCHAR(255),\n  address VARCHAR(255),\n  postcode VARCHAR(255),\n  city VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the customers table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 last_name: variable\u2010length string up to 255 characters\n  \u2022 first_name: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 address: variable\u2010length string up to 255 characters\n  \u2022 postcode: variable\u2010length string up to 255 characters\n  \u2022 city: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('customers');"}
{"seed": "/* Inserts three rows into the customers table. */\nINSERT INTO `customers` (`id`, `last_name`, `first_name`, `email`, `address`, `postcode`, `city`) VALUES\n(1, 'NORRIS', 'chuck', 'chuck.norris@gmail.com', '1234 abcd', '38500', 'Voiron'),\n(2, 'THERON', 'charlize', 'charlize.theron@gmail.com', '5678 rue efgh', '38000', 'Grenoble'),\n(3, 'GOSLING', 'ryan', 'ryan.gosling@gmail.com', '91011 rue ijkl', '26000', 'Valence')", "description": "Inserts three rows into the customers table.", "concepts": ["INSERT INTO", "VALUES", "`customers`", "`id`", "`last_name`", "`first_name`", "`email`", "`address`", "`postcode`"], "instruction": "Write a SQL query to insert three rows into the customers table.", "response": "-- Reasoning:\nWe need to insert three rows into the customers table.\n\n-- Solution:\n```sql\nINSERT INTO customers (name, email, address)\nVALUES ('', '', '123 Main St'),\n       ('', '', '456 Main St'),\n       ('', '', '789 Main St');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the customers table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM customers;"}
{"seed": "/* Creates a table named orders with four columns: id (integer), date (date), number (varchar), and customer_id (integer). */\nCREATE TABLE `orders` (\n  `id` int(11) NOT NULL,\n  `date` date NOT NULL,\n  `number` varchar(10) NOT NULL,\n  `customer_id` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named orders with four columns: id (integer), date (date), number (varchar), and customer_id (integer).", "concepts": ["CREATE TABLE", "INT", "DATE", "VARCHAR", "NOT NULL", "DEFAULT", "PRIMARY KEY", "FOREIGN KEY", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named orders with four columns: id (integer), date (date), number (varchar), and customer_id (integer).", "response": "-- Reasoning:\nWe need a new table named orders. It should have an integer primary key so that each order has a unique identifier, a date column to store the order date, a number column to store the order number, and a customer_id column to store the customer\u2019s identifier.\n\n-- Solution:\n```sql\nCREATE TABLE orders (\n  id INTEGER PRIMARY KEY,\n  date DATE,\n  number VARCHAR(255),\n  customer_id INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the orders table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 date: date\n  \u2022 number: variable\u2010length string up to 255 characters\n  \u2022 customer_id: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts five rows into the orders table. */\nINSERT INTO `orders` (`id`, `date`, `number`, `customer_id`) VALUES\n(1, '2021-06-07', 'order00001', 1),\n(2, '2021-05-31', 'order00002', 1),\n(3, '2021-05-31', 'order00003', 2),\n(4, '2021-05-31', 'order00004', 2),\n(5, '2021-06-07', 'order00005', 2)", "description": "Inserts five rows into the orders table.", "concepts": ["INSERT INTO", "VALUES", "`orders`", "`id`", "`date`", "`number`", "`customer_id`"], "instruction": "Write a SQL query to insert five rows into the orders table.", "response": "-- Reasoning:\nWe need to insert five rows into the orders table.\n\n-- Solution:\n```sql\nINSERT INTO orders (order_id, product_id, quantity, status)\nVALUES (1, 1, 10, 'pending'),\n       (2, 2, 20, 'pending'),\n       (3, 3, 30, 'pending'),\n       (4, 4, 40, 'pending'),\n       (5, 5, 50, 'pending');\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the orders table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM orders;"}
{"seed": "/* Creates a table named order_product with four columns: id (integer primary key), product_id (integer), order_id (integer), and quantity (integer). */\nCREATE TABLE `order_product` (\n  `id` int(11) NOT NULL,\n  `product_id` int(11) NOT NULL,\n  `order_id` int(11) NOT NULL,\n  `quantity` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named order_product with four columns: id (integer primary key), product_id (integer), order_id (integer), and quantity (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named order_product with four columns: id (integer primary key), product_id (integer), order_id (integer), and quantity (integer).", "response": "-- Reasoning:\nWe need a new table named order_product. It should have an integer primary key so that each order_product has a unique identifier, and three foreign keys: product_id, order_id, and quantity.\n\n-- Solution:\n```sql\nCREATE TABLE order_product (\n  id INTEGER PRIMARY KEY,\n  product_id INTEGER,\n  order_id INTEGER,\n  quantity INTEGER,\n  FOREIGN KEY (product_id) REFERENCES products (product_id),\n  FOREIGN KEY (order_id) REFERENCES orders (order_id)\n);\n```\n\n-- Explanation:\nThis statement defines the order_product table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 product_id: integer, foreign key to the products table\n  \u2022 order_id: integer, foreign key to the orders table\n  \u2022 quantity: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('order_product');"}
{"seed": "/* Inserts 10 rows into the order_product table. */\nINSERT INTO `order_product` (`id`, `product_id`, `order_id`, `quantity`) VALUES\n(1, 2, 1, 1),\n(2, 4, 1, 2),\n(3, 11, 2, 1),\n(4, 10, 2, 2),\n(5, 1, 3, 1),\n(6, 10, 3, 1),\n(7, 4, 4, 2),\n(8, 13, 4, 1),\n(9, 1, 5, 1),\n(10, 12, 5, 1)", "description": "Inserts 10 rows into the order_product table.", "concepts": ["INSERT INTO", "VALUES", "order_product", "product_id", "order_id", "quantity"], "instruction": "Write a SQL query to insert 10 rows into the order_product table.\n\nExample 2:\nSQL:\n```sql\n/* Return the total number of orders for each customer */\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id\nORDER BY total_orders DESC;\n```\nConcepts: [\"SELECT\", \"COUNT\", \"FROM\", \"GROUP BY\", \"ORDER BY\"]\nInstruction: Write a SQL query to list each customer's total orders from the orders table, grouped by customer, and sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to list each customer's total orders from the orders table, grouped by customer, and sorted from highest to lowest.\n\n-- Solution:\n```sql\nSELECT customer_id, COUNT(order_id) AS total_orders\nFROM orders\nGROUP BY customer_id\nORDER BY total_orders DESC;\n```\n\n-- Explanation:\nThis query uses the COUNT function to count the number of orders for each customer. It then groups the results by customer_id and orders them by total_orders in descending order.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT * FROM (\n  SELECT customer_id, COUNT(order_id) AS total_orders\n  FROM orders\n  GROUP BY customer_id\n  ORDER BY total_orders DESC\n)\nWHERE total_orders = 10;"}
{"seed": "/* Creates a table named products with nine columns: id (integer primary key), name (varchar), price (integer), picture (varchar), weight (integer), quantity (integer), available (tinyint), size (integer), and categories_id (integer). */\nCREATE TABLE `products` (\n  `id` int(11) NOT NULL,\n  `name` varchar(70) NOT NULL,\n  `price` int(11) NOT NULL,\n  `picture` varchar(255) NOT NULL,\n  `weight` int(11) NOT NULL,\n  `quantity` int(11) NOT NULL,\n  `available` tinyint(4) NOT NULL,\n  `size` int(11) NOT NULL,\n  `categories_id` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named products with nine columns: id (integer primary key), name (varchar), price (integer), picture (varchar), weight (integer), quantity (integer), available (tinyint), size (integer), and categories_id (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT", "NOT NULL", "TINYINT", "NOT NULL", "INT", "NOT NULL", "INT"], "instruction": "Write a SQL query to create a table named products with nine columns: id (integer primary key), name (varchar), price (integer), picture (varchar), weight (integer), quantity (integer), available (tinyint), size (integer), and categories_id (integer).", "response": "-- Reasoning:\nWe need a new table named products. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price INT,\n  picture VARCHAR(255),\n  weight INT,\n  quantity INT,\n  available TINYINT,\n  size INT,\n  categories_id INT\n);\n```\n\n-- Explanation:\nThis statement defines the products table with nine columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 price: integer\n  \u2022 picture: variable\u2010length string up to 255 characters\n  \u2022 weight: integer\n  \u2022 quantity: integer\n  \u2022 available: boolean\n  \u2022 size: integer\n  \u2022 categories_id: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('products');"}
{"seed": "/* Adds a primary key constraint to the id column in the categories table. */\nALTER TABLE `categories`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the categories table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the categories table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the categories table. This will ensure that each category has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE categories\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the categories table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('categories');"}
{"seed": "/* Adds a primary key constraint to the id column in the customers table. */\nALTER TABLE `customers`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the customers table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the customers table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the customers table. This will ensure that each customer has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE customers\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the customers table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('customers');"}
{"seed": "/* Adds a primary key to the id column of the orders table and a foreign key to the customer_id column of the orders table. */\nALTER TABLE `orders`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `customer_id`", "description": "Adds a primary key to the id column of the orders table and a foreign key to the customer_id column of the orders table.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to add a primary key to the id column of the orders table and a foreign key to the customer_id column of the orders table.", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a primary key to the id column and a foreign key to the customer_id column.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN id INTEGER PRIMARY KEY,\n  ADD COLUMN customer_id INTEGER REFERENCES customers(id);\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 id: an integer primary key\n  \u2022 customer_id: an integer foreign key to the customers table\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Adds a primary key to the order_product table with the id column. */\nALTER TABLE `order_product`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `product_id` (`product_id`),\n  ADD KEY `order_id`", "description": "Adds a primary key to the order_product table with the id column.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "KEY", "KEY"], "instruction": "Write a SQL query to add a primary key to the order_product table with the id column.", "response": "-- Reasoning:\nWe need to add a primary key to the order_product table. It should be a unique identifier for each row.\n\n-- Solution:\n```sql\nALTER TABLE order_product\n  ADD COLUMN id INTEGER PRIMARY KEY;\n```\n\n-- Explanation:\nThis ALTER statement updates the order_product table schema by adding:\n  \u2022 id: an integer primary key\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('order_product');"}
{"seed": "/* Adds a primary key constraint to the id column of the products table. */\nALTER TABLE `products`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `categories_id`", "description": "Adds a primary key constraint to the id column of the products table.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "KEY", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column of the products table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column of the products table. This will ensure that each product has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE products\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column of the products table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('products');"}
{"seed": "/* Modifies the id column of the categories table to be an auto-incrementing integer. */\nALTER TABLE `categories`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the categories table to be an auto-incrementing integer.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY", "INT"], "instruction": "Write a SQL query to modify the id column of the categories table to be an auto-incrementing integer.", "response": "-- Reasoning:\nWe need to modify the existing categories table by changing the id column to be an auto\u2010incrementing integer.\n\n-- Solution:\n```sql\nALTER TABLE categories\n  ALTER COLUMN id\n  INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the categories table schema by changing:\n  \u2022 id: an integer column to be the primary key and auto\u2010incrementing\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('categories');"}
{"seed": "/* Modifies the customers table by adding an auto-incrementing id column. */\nALTER TABLE `customers`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the customers table by adding an auto-incrementing id column.", "concepts": ["ALTER TABLE", "MODIFY", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the customers table by adding an auto-incrementing id column.", "response": "-- Reasoning:\nWe need to modify the customers table by adding a new column named id. It should be an integer and auto\u2010incrementing, so that every customer has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE customers\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the customers table schema by adding:\n  \u2022 id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('customers');"}
{"seed": "/* Modifies the orders table by adding an auto-incrementing id column. */\nALTER TABLE `orders`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the orders table by adding an auto-incrementing id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY"], "instruction": "Write a SQL query to modify the orders table by adding an auto-incrementing id column.", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named id. It should be an auto\u2010incrementing integer and primary key.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('orders');"}
{"seed": "/* Modifies the order_product table by adding an AUTO_INCREMENT column to the id column. */\nALTER TABLE `order_product`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the order_product table by adding an AUTO_INCREMENT column to the id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY"], "instruction": "Write a SQL query to modify the order_product table by adding an AUTO_INCREMENT column to the id column.", "response": "-- Reasoning:\nWe need to modify the order_product table by adding an AUTO_INCREMENT column to the id column. This will allow us to uniquely identify each row in the table.\n\n-- Solution:\n```sql\nALTER TABLE order_product\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the order_product table schema by adding:\n  \u2022 id: an integer column that is auto\u2010incremented and marked as PRIMARY KEY\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incremented\nPRAGMA table_info('order_product');"}
{"seed": "/* Modifies the products table by adding an AUTO_INCREMENT column to the id column. */\nALTER TABLE `products`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the products table by adding an AUTO_INCREMENT column to the id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the products table by adding an AUTO_INCREMENT column to the id column.", "response": "-- Reasoning:\nWe need to modify the existing products table by adding a new column named id. It should be an integer and auto\u2010increment so that every product has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE products\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the products table schema by adding:\n  \u2022 id: an integer column that auto\u2010increments\n\n-- Tests:\n-- 1. Verify new column appears and auto\u2010increments\nPRAGMA table_info('products');"}
{"seed": "/* Adds a foreign key constraint to the orders table that references the id column in the customers table. */\nALTER TABLE `orders`\n  ADD CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`customer_id`) REFERENCES `customers` (`id`)", "description": "Adds a foreign key constraint to the orders table that references the id column in the customers table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to add a foreign key constraint to the orders table that references the id column in the customers table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the orders table that references the id column in the customers table. This ensures that every order is associated with a valid customer.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD CONSTRAINT fk_orders_customers\n    FOREIGN KEY (customer_id)\n      REFERENCES customers (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the orders table that references the id column in the customers table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('orders');"}
{"seed": "/* Adds a foreign key constraint to the order_product table. The product_id column references the id column in the products table, and the order_id column references the id column in the orders table. */\nALTER TABLE `order_product`\n  ADD CONSTRAINT `order_product_ibfk_1` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`),\n  ADD CONSTRAINT `order_product_ibfk_2` FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`)", "description": "Adds a foreign key constraint to the order_product table. The product_id column references the id column in the products table, and the order_id column references the id column in the orders table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to add a foreign key constraint to the order_product table. The product_id column references the id column in the products table, and the order_id column references the id column in the orders table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the order_product table. The product_id column references the id column in the products table, and the order_id column references the id column in the orders table.\n\n-- Solution:\n```sql\nALTER TABLE order_product\n  ADD CONSTRAINT fk_product_id\n    FOREIGN KEY (product_id)\n      REFERENCES products (id),\n  ADD CONSTRAINT fk_order_id\n    FOREIGN KEY (order_id)\n      REFERENCES orders (id);\n```\n\n-- Explanation:\nThis ALTER statement updates the order_product table schema by adding:\n  \u2022 fk_product_id: a foreign key constraint that references the id column in the products table\n  \u2022 fk_order_id: a foreign key constraint that references the id column in the orders table\n\n-- Tests:\n-- 1. Check new foreign key constraints appear\nPRAGMA foreign_key_list('order_product');"}
{"seed": "/* Adds a foreign key constraint to the products table, which references the id column in the categories table. */\nALTER TABLE `products`\n  ADD CONSTRAINT `products_ibfk_1` FOREIGN KEY (`categories_id`) REFERENCES `categories` (`id`)", "description": "Adds a foreign key constraint to the products table, which references the id column in the categories table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to add a foreign key constraint to the products table, which references the id column in the categories table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the products table, which references the id column in the categories table.\n\n-- Solution:\n```sql\nALTER TABLE products\n  ADD CONSTRAINT fk_products_categories\n    FOREIGN KEY (category_id)\n      REFERENCES categories (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the products table, which references the id column in the categories table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('products');"}
{"seed": "/* SELECT * FROM users WHERE id = 1; */\nINSERT INTO `ace_landblock` (`weenieClassId`, `preassignedGuid`, `landblockRaw`, `posX`, `posY`, `posZ`, `qW`, `qX`, `qY`, `qZ`)\nVALUES (10692, 2029043779, 2399928580, 56.1691, 136.429, 6.005, -0.999965, 0, 0, 0.00834516)\n     , (412, 2029043712, 2399928582, 55, 129.19, 6, 1, 0, 0, 0)\n     , (11698, 2029043713, 2399928582, 55.175, 123.275, 10.05, 1, 0, 0, 0)\n     , (9686, 2029043714, 2399928582, 52.5222, 129.098, 7.675, 1, 0, 0, 0)\n     , (9686, 2029043715, 2399928582, 55.2124, 120.448, 7.675, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043716, 2399928582, 52.4972, 120.348, 7.675, 7.54979E-08, 0, 0, -1)\n     , (11697, 2029043717, 2399928582, 50.0654, 125.084, 6.265, -0.404344, 0, 0, -0.914607)\n     , (11697, 2029043718, 2399928582, 51.1404, 126.559, 6.265, 0.904455, 0, 0, 0.426569)\n     , (11697, 2029043719, 2399928582, 52.4154, 127.584, 6.265, 0.935135, 0, 0, -0.354291)\n     , (9686, 2029043783, 2399928582, 48.374, 125.293, 8.35, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043784, 2399928582, 58.7446, 124.548, 9.525, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043785, 2399928582, 58.7898, 127.276, 8.175, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043786, 2399928582, 58.7898, 122.054, 8.175, 0.707107, 0, 0, -0.707107)\n     , (412, 2029043720, 2399928585, 55, 129.19, 10.8, 1, 0, 0, 0)\n     , (412, 2029043721, 2399928585, 55, 126.41, 10.8, 7.54979E-08, 0, 0, -1)\n     , (11698, 2029043787, 2399928588, 55.1904, 134.884, 30.79, 1, 0, 0, 0)\n     , (9686, 2029043788, 2399928588, 51.7886, 135.116, 30.25, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043789, 2399928588, 55.077, 140.606, 30.25, 1, 0, 0, 0)\n     , (11697, 2029043722, 2399928597, 63.7654, 131.009, 6.265, 0.92521, 0, 0, -0.379456)\n     , (9686, 2029043723, 2399928597, 59.3464, 127.048, 7.675, 0.707106, 0.00123413, -0.00123413, 0.707106)\n     , (9686, 2029043724, 2399928597, 59.35, 130.025, 7.725, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043790, 2399928597, 64.5001, 125.977, 8.925, 0.707106, -0.00123413, -0.00123413, -0.707106)\n     , (9686, 2029043791, 2399928597, 61.9735, 131.643, 9.675, 1, 0, 0, 0)\n     , (11698, 2029043792, 2399928603, 55.9793, 123.417, 19.79, 1, 0, 0, 0)\n     , (412, 2029043725, 2399928606, 59.7, 116.29, 10.8, 1, 0, 0, 0)\n     , (9686, 2029043726, 2399928606, 57.3607, 107.685, 12.75, 0.707102, -0.00246826, -0.00246826, 0.707102)\n     , (9686, 2029043727, 2399928606, 64.3715, 116.2, 12.75, 1, 0, 0, 0)\n     , (9686, 2029043728, 2399928606, 61.993, 116.2, 12.75, 1, 0, 0, 0)\n     , (9686, 2029043729, 2399928606, 67.9138, 108.95, 12.75, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043730, 2399928606, 67.9138, 105.444, 12.75, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043731, 2399928606, 62.6638, 99.2091, 12.75, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043732, 2399928606, 57.3607, 104.959, 12.75, 0.707102, -0.00246826, -0.00246826, 0.707102)\n     , (11698, 2029043796, 2399928607, 62.65, 107.75, 20.85, 7.54979E-08, 0, 0, -1)\n     , (412, 2029043733, 2399928617, 56.83, 113.39, 6, 0.707107, 0, 0, -0.707107)\n     , (11697, 2029043797, 2399928617, 52.7, 112.05, 6.1, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043798, 2399928617, 51.0748, 119.651, 9, 1, 0, 0, 0)\n     , (9686, 2029043799, 2399928617, 53.9982, 119.651, 9, 1, 0, 0, 0)\n     , (9686, 2029043800, 2399928617, 48.3482, 113.601, 9, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043801, 2399928617, 48.3482, 107.551, 9, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043802, 2399928617, 56.7482, 109.801, 9, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043803, 2399928617, 56.7482, 117.001, 9, 0.707107, 0, 0, -0.707107)\n     , (412, 2029043734, 2399928618, 62.2, 119.79, 6.01, 1, 0, 0, 0)\n     , (11697, 2029043735, 2399928619, 62.65, 108, 6.1, 7.54979E-08, 0, 0, -1)\n     , (11697, 2029043736, 2399928619, 62.65, 109.9, 6.1, 1, 0, 0, 0)\n     , (11697, 2029043737, 2399928619, 62.7, 105.6, 6.1, 7.54979E-08, 0, 0, -1)\n     , (11697, 2029043738, 2399928619, 61.05, 108, 6.1, 0.707107, 0, 0, 0.707107)\n     , (11697, 2029043739, 2399928619, 64.4, 108, 6.1, 0.707107, 0, 0, -0.707107)\n     , (10692, 2029043778, 2399928619, 62.5958, 110.271, 6.005, -0.677367, 0, 0, 0.735645)\n     , (412, 2029043740, 2399928622, 30.1, 136.21, -13.2, 5.96244E-08, 0, 0, 1)\n     , (577, 2029043741, 2399928623, 33, 139.45, -13.198, 1, 0, 0, 0)\n     , (11697, 2029043742, 2399928625, 32.5843, 138.435, 6.1, -0.944089, 0, 0, -0.329691)\n     , (10692, 2029043780, 2399928625, 37.5027, 135.943, 6.005, -0.999169, 0, 0, 0.0407701)\n     , (11697, 2029043743, 2399928626, 34.4764, 130.864, 6.1, -0.924878, 0, 0, -0.380263)\n     , (9686, 2029043809, 2399928633, 34.8223, 140.034, 14.325, 1, 0, 0, 0)\n     , (9686, 2029043810, 2399928633, 40.9973, 140.034, 14.325, 1, 0, 0, 0)\n     , (9686, 2029043811, 2399928633, 38.771, 125.547, 12.9, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043812, 2399928636, 31.7591, 132.731, 18.9, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043813, 2399928636, 31.7591, 129.156, 19.7, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043814, 2399928636, 31.7591, 136.506, 19.7, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043815, 2399928636, 43.8091, 136.456, 19.7, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043816, 2399928636, 43.8091, 132.906, 19.7, 0.707107, 0, 0, -0.707107)\n     , (11697, 2029043744, 2399928638, 39.3793, 130.1, 21.275, 7.54979E-08, 0, 0, -1)\n     , (11697, 2029043745, 2399928638, 36, 130.1, 21.275, 7.54979E-08, 0, 0, -1)\n     , (11697, 2029043746, 2399928638, 39.3793, 135.399, 21.275, 1, 0, 0, 0)\n     , (11697, 2029043747, 2399928638, 35.9234, 132.524, 21.275, 1, 0, 0, 0)\n     , (11697, 2029043748, 2399928638, 35.9234, 135.424, 21.275, 1, 0, 0, 0)\n     , (11697, 2029043749, 2399928638, 39.3603, 132.524, 21.275, 1, 0, 0, 0)\n     , (9686, 2029043750, 2399928638, 43.875, 127.019, 23.2, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043751, 2399928638, 43.875, 130.149, 23.2, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043817, 2399928638, 43.875, 133.474, 23.2, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043818, 2399928638, 37.95, 140.024, 24.1, 1, 0, 0, 0)\n     , (11698, 2029043819, 2399928638, 37.9, 135.349, 28.3, 1, 0, 0, 0)\n     , (11698, 2029043820, 2399928638, 37.9, 130.499, 28.3, 7.54979E-08, 0, 0, -1)\n     , (577, 2029043752, 2399928641, 28.85, 139.45, -13.198, 1, 0, 0, 0)\n     , (9686, 2029043753, 2399928643, 46.5, 131.825, 7.9, 1, 0, 0, 0)\n     , (11698, 2029043821, 2399928645, 43.1097, 130.282, 5.24997, 7.54979E-08, 0, 0, -1)\n     , (412, 2029043754, 2399928652, 44.3, 135.89, -13.2, 1, 0, 0, 0)\n     , (11730, 2029043782, 2399928658, 42.2664, 126.972, -17.995, 0.671433, 0, 0, -0.741065)\n     , (10762, 2029043839, 2399928658, 50, -50, -5.995, -0.68921, 0, 0, -0.724561)\n     , (577, 2029043755, 2399928665, 45.6, 139.45, -13.198, 1, 0, 0, 0)\n     , (577, 2029043756, 2399928668, 41.4, 139.45, -13.198, 1, 0, 0, 0)\n     , (577, 2029043757, 2399928670, 37.2, 139.45, -13.198, 1, 0, 0, 0)\n     , (412, 2029043759, 2399928675, 36.3, 116.29, 10.8, 1, 0, 0, 0)\n     , (11697, 2029043760, 2399928675, 33.4119, 110.15, 10.875, 1, 0, 0, 0)\n     , (11697, 2029043761, 2399928675, 33.4119, 108, 10.875, 7.54979E-08, 0, 0, -1)\n     , (11697, 2029043762, 2399928675, 33.4119, 105.8, 10.875, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043763, 2399928675, 38.6582, 107.45, 12.75, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043764, 2399928675, 31.8045, 116.197, 12.75, 1, 0, 0, 0)\n     , (9686, 2029043765, 2399928675, 28.1081, 108.6, 12.75, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043766, 2399928675, 38.666, 104.75, 12.75, 0.707107, 0, 0, -0.707107)\n     , (11697, 2029043825, 2399928675, 33.2279, 99.969, 10.875, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043826, 2399928675, 36.1906, 99.275, 14.975, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043827, 2399928675, 30.9272, 99.275, 14.975, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043828, 2399928675, 28.1081, 103.001, 14.95, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043829, 2399928675, 28.1081, 111.475, 14.95, 0.707107, 0, 0, 0.707107)\n     , (9686, 2029043830, 2399928675, 36.3094, 116.197, 14.675, 1, 0, 0, 0)\n     , (412, 2029043767, 2399928679, 47.53, 117.8, 6, 0.707107, 0, 0, -0.707107)\n     , (9686, 2029043768, 2399928679, 39.95, 115.928, 7.75, 7.54979E-08, 0, 0, -1)\n     , (9686, 2029043769, 2399928679, 41.75, 119.675, 7.7, 1, 0, 0, 0)\n     , (412, 2029043770, 2399928688, 43.75, 115.19, 6, 1, 0, 0, 0)\n     , (11697, 2029043771, 2399928688, 41.6, 114.55, 6.075, 1, 0, 0, 0)\n     , (11697, 2029043772, 2399928688, 45.85, 114.55, 6.075, 1, 0, 0, 0)\n     , (412, 2029043773, 2399928690, 36.4, 115.59, 6, 1, 0, 0, 0)\n     , (10692, 2029043781, 2399928693, 34.3795, 102.076, 6.005, 0.0449702, 0, 0, 0.998988)\n     , (12678, 2029043793, 2399928320, 55.1154, 134.834, 37.19, 1, 0, 0, 0)\n     , (12679, 2029043794, 2399928320, 60.8154, 134.934, 6.265, 0.413899, 0, 0, 0.910323)\n     , (12679, 2029043795, 2399928320, 50.453, 133.665, 6.265, -0.373797, 0, 0, 0.92751)\n     , (12679, 2029043804, 2399928320, 54.7692, 112.665, 10.9, 0.920505, 0, 0, -0.390731)\n     , (12679, 2029043805, 2399928320, 55.0692, 106.365, 10.9, 0.361625, 0, 0, -0.932324)\n     , (12679, 2029043806, 2399928320, 50, 108, 10.9, 1, 0, 0, 0)\n     , (12679, 2029043807, 2399928320, 54.9692, 102.065, 6.1, 0.920505, 0, 0, -0.390731)\n     , (12678, 2029043808, 2399928320, 62.6692, 107.915, 23.9, 1, 0, 0, 0)\n     , (412, 2029043758, 2399928320, 44.52, 136, 6, -0.707107, 0, 0, -0.707107)\n     , (12679, 2029043822, 2399928320, 31.475, 122.3, 6.1, 0.892979, 0, 0, -0.450099)\n     , (12679, 2029043823, 2399928320, 45.825, 133.5, 6.1, -0.424199, 0, 0, -0.905569)\n     , (12678, 2029043824, 2399928320, 37.875, 132, 30.325, 1, 0, 0, 0)\n     , (412, 2029043774, 2399928320, 43.8, 103.84, 6, 1, 0, 0, 0)\n     , (412, 2029043775, 2399928320, 45.4, 115.005, 10.8, 1, 0, 0, 0)\n     , (12679, 2029043831, 2399928320, 31.925, 118, 6.025, 0.38349, 0, 0, -0.923545)\n     , (12679, 2029043832, 2399928320, 26.875, 98.2, 6.025, 0.902585, 0, 0, -0.430511)\n     , (12678, 2029043833, 2399928320, 33.35, 108, 23.85, 1, 0, 0, 0)\n     , (9686, 2029043834, 2399928320, 41.4082, 99.154, 8.7, 1, 0, 0, 0)\n     , (9686, 2029043835, 2399928320, 46.3082, 99.154, 8.7, 1, 0, 0, 0)\n     , (12679, 2029043836, 2399928320, 41.55, 112.9, 10.875, 0.94235, 0, 0, 0.334629)\n     , (12679, 2029043837, 2399928320, 41.35, 106.375, 10.875, 0.429723, 0, 0, 0.902961)\n     , (12679, 2029043838, 2399928320, 47, 108, 10.875, 1, 0, 0, 0)\n     , (11714, 2029043776, 2399928320, 48.4846, 101.847, 6.005, -0.999736, 0, 0, 0.0229549)\n     , (10707, 2029043777, 2399928320, 77.4278, 168.768, 2.94406, -0.214787, 0, 0, -0.976661)", "description": "SELECT * FROM users WHERE id = 1;", "concepts": ["```\nCREATE TABLE IF NOT EXISTS `ace_landblock` (\n  `weenieClassId` int PRIMARY KEY", "`preassignedGuid"], "instruction": "```\nSELECT * FROM `ace_landblock` WHERE `weenieClassId` = 10692 AND `preassignedGuid` = 2029043778;\n```\nConcepts: ['SELECT', 'FROM', 'WHERE', 'AND', 'OR', 'GROUP BY', 'ORDER BY']\nInstruction: Write a single, clear natural-language instruction asking someone to write a SQL query that matches the description and uses exactly those concepts.\nReturn ONLY the instruction, without any additional label or SQL codes.\n\nExample 1:\nSQL:\n```sql\n/* Return each customer's total sales grouped by customer */\nSELECT customer_id, SUM(amount)", "response": "-- Reasoning:\nWe need to find the total sales for each customer.\n\n-- Solution:\n```sql\nSELECT customer_id, SUM(amount)\nFROM orders\nGROUP BY customer_id;\n```\n\n-- Explanation:\nThis query uses the GROUP BY clause to group the results by customer_id.\n\n-- Tests:\n-- 1. Verify the correct columns are returned\nSELECT * FROM `orders` LIMIT 1;\n\n-- 2. Verify the correct aggregation is performed\nSELECT customer_id, SUM(amount)\nFROM orders\nGROUP BY customer_id\nLIMIT 1;"}
{"seed": "/* Drops the table named AccountRegistry if it exists. */\nDROP TABLE IF EXISTS `AccountRegistry`", "description": "Drops the table named AccountRegistry if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named AccountRegistry if it exists.", "response": "-- Reasoning:\nWe need to drop the AccountRegistry table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS AccountRegistry;\n```\n\n-- Explanation:\nThis DROP statement removes the AccountRegistry table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('AccountRegistry');"}
{"seed": "/* Creates a table named AccountRegistry with five columns: ArgId (integer primary key), ArgActId (integer), ArgIdentifier (varchar), ArgValue (integer), and ArgPosition (integer). */\nCREATE TABLE `AccountRegistry` (\n  `ArgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `ArgActId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ArgIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `ArgValue` int(10) unsigned NOT NULL DEFAULT '0',\n  `ArgPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`ArgId`),\n  KEY `Account` (`ArgActId`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named AccountRegistry with five columns: ArgId (integer primary key), ArgActId (integer), ArgIdentifier (varchar), ArgValue (integer), and ArgPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "BTREE"], "instruction": "Write a SQL query to create a table named AccountRegistry with five columns: ArgId (integer primary key), ArgActId (integer), ArgIdentifier (varchar), ArgValue (integer), and ArgPosition (integer).", "response": "-- Reasoning:\nWe need a new table named AccountRegistry. It should have an integer primary key so that each row has a unique identifier, and four other columns to store the account identifier, account value, and position.\n\n-- Solution:\n```sql\nCREATE TABLE AccountRegistry (\n  ArgId INTEGER PRIMARY KEY,\n  ArgActId INTEGER,\n  ArgIdentifier VARCHAR(255),\n  ArgValue INTEGER,\n  ArgPosition INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the AccountRegistry table with five columns:\n  \u2022 ArgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ArgActId: integer\n  \u2022 ArgIdentifier: variable\u2010length string up to 255 characters\n  \u2022 ArgValue: integer\n  \u2022 ArgPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('AccountRegistry');"}
{"seed": "/* Drops the table named AdminPassword if it exists. */\nDROP TABLE IF EXISTS `AdminPassword`", "description": "Drops the table named AdminPassword if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named AdminPassword if it exists.", "response": "-- Reasoning:\nWe need to delete the table named AdminPassword if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS AdminPassword;\n```\n\n-- Explanation:\nThis statement deletes the table named AdminPassword if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('AdminPassword');"}
{"seed": "/* Creates a table named AdminPassword with five columns: AdmId (integer primary key), AdmActId (integer), AdmPassword (varchar), AdmTimer (integer), and AdmTimer (integer). */\nCREATE TABLE `AdminPassword` (\n  `AdmId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `AdmActId` int(10) unsigned NOT NULL DEFAULT '0',\n  `AdmPassword` varchar(255) NOT NULL DEFAULT '',\n  `AdmTimer` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`AdmId`),\n  KEY `AdmActId` (`AdmActId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named AdminPassword with five columns: AdmId (integer primary key), AdmActId (integer), AdmPassword (varchar), AdmTimer (integer), and AdmTimer (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "KEY", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named AdminPassword with five columns: AdmId (integer primary key), AdmActId (integer), AdmPassword (varchar), AdmTimer (integer), and AdmTimer (integer).", "response": "-- Reasoning:\nWe need a new table named AdminPassword. It should have an integer primary key so that each password has a unique identifier, and a name column to store the password as text.\n\n-- Solution:\n```sql\nCREATE TABLE AdminPassword (\n  AdmId INT PRIMARY KEY,\n  AdmActId INT,\n  AdmPassword VARCHAR(255),\n  AdmTimer INT,\n  AdmTimer INT\n);\n```\n\n-- Explanation:\nThis statement defines the AdminPassword table with five columns:\n  \u2022 AdmId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 AdmActId: integer\n  \u2022 AdmPassword: variable\u2010length string up to 255 characters\n  \u2022 AdmTimer: integer\n  \u2022 AdmTimer: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('AdminPassword');"}
{"seed": "/* Drops the table named Aethers if it exists. */\nDROP TABLE IF EXISTS `Aethers`", "description": "Drops the table named Aethers if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Aethers if it exists.", "response": "-- Reasoning:\nWe need to delete the table named Aethers if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Aethers;\n```\n\n-- Explanation:\nThis statement deletes the table named Aethers if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Aethers');"}
{"seed": "/* Creates a table named Aethers with seven columns: AthId (integer primary key), AthChaId (integer), AthSplId (integer), AthDuration (integer), AthAether (integer), AthPosition (integer), and AthId (integer). */\nCREATE TABLE `Aethers` (\n  `AthId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `AthChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `AthSplId` int(10) unsigned NOT NULL DEFAULT '0',\n  `AthDuration` int(10) unsigned NOT NULL DEFAULT '0',\n  `AthAether` int(10) unsigned NOT NULL DEFAULT '0',\n  `AthPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`AthId`),\n  KEY `AthSplId` (`AthSplId`),\n  KEY `AthChaId` (`AthChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=873 DEFAULT CHARSET=latin1", "description": "Creates a table named Aethers with seven columns: AthId (integer primary key), AthChaId (integer), AthSplId (integer), AthDuration (integer), AthAether (integer), AthPosition (integer), and AthId (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "INT", "VARCHAR", "NOT NULL", "DEFAULT", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named Aethers with seven columns: AthId (integer primary key), AthChaId (integer), AthSplId (integer), AthDuration (integer), AthAether (integer), AthPosition (integer), and AthId (integer).", "response": "-- Reasoning:\nWe need a new table named Aethers. It should have an integer primary key so that each Aether has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Aethers (\n  AthId INT PRIMARY KEY,\n  AthChaId INT,\n  AthSplId INT,\n  AthDuration INT,\n  AthAether INT,\n  AthPosition INT,\n  AthId INT\n);\n```\n\n-- Explanation:\nThis statement defines the Aethers table with seven columns:\n  \u2022 AthId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 AthChaId: integer\n  \u2022 AthSplId: integer\n  \u2022 AthDuration: integer\n  \u2022 AthAether: integer\n  \u2022 AthPosition: integer\n  \u2022 AthId: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Aethers');"}
{"seed": "/* Inserts 10 rows into the Aethers table. */\nINSERT INTO `Aethers` VALUES (41,10,13,5000,0,0),(182,57,40018,264000,0,0),(459,59,22,10797000,0,0),(598,72,40006,81000,0,0),(599,72,40022,82000,0,1),(600,72,40017,82000,0,2),(601,72,40003,130000,0,4),(734,81,1,0,9000,0),(791,63,10021,0,18000,0),(872,18,30012,0,7000,3)", "description": "Inserts 10 rows into the Aethers table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 10 rows into the Aethers table.", "response": "-- Reasoning:\nWe need to insert 10 rows into the Aethers table.\n\n-- Solution:\n```sql\nINSERT INTO Aethers (name, age)\nVALUES\n  ('Alice', 20),\n  ('Bob', 21),\n  ('Charlie', 22),\n  ('Dave', 23),\n  ('Eve', 24),\n  ('Frank', 25),\n  ('Grace', 26),\n  ('Harry', 27),\n  ('Irene', 28),\n  ('Jane', 29);\n```\n\n-- Explanation:\nThis INSERT statement inserts 10 rows into the Aethers table.\n\n-- Tests:\n-- 1. Verify 10 rows are inserted\nSELECT * FROM Aethers;"}
{"seed": "/* Drops the table named AfkLogs if it exists. */\nDROP TABLE IF EXISTS `AfkLogs`", "description": "Drops the table named AfkLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named AfkLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the table named AfkLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS AfkLogs;\n```\n\n-- Explanation:\nThis statement deletes the table named AfkLogs if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('AfkLogs');"}
{"seed": "/* Creates a table named AfkLogs with seven columns: AfkId (integer primary key), AfkDate (datetime), AfkChaId (integer), AfkMapId (integer), AfkX (integer), AfkY (integer), and AfkZ (integer). */\nCREATE TABLE `AfkLogs` (\n  `AfkId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `AfkDate` datetime DEFAULT NULL,\n  `AfkChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `AfkMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `AfkX` int(10) unsigned NOT NULL DEFAULT '0',\n  `AfkY` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`AfkId`),\n  KEY `AfkMapId` (`AfkMapId`),\n  KEY `AfkChaId` (`AfkChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1", "description": "Creates a table named AfkLogs with seven columns: AfkId (integer primary key), AfkDate (datetime), AfkChaId (integer), AfkMapId (integer), AfkX (integer), AfkY (integer), and AfkZ (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named AfkLogs with seven columns: AfkId (integer primary key), AfkDate (datetime), AfkChaId (integer), AfkMapId (integer), AfkX (integer), AfkY (integer), and AfkZ (integer).", "response": "-- Reasoning:\nWe need a new table named AfkLogs. It should have an integer primary key so that each AfkLog has a unique identifier, and a datetime column to store the date and time of the Afk. It should also have columns for the character ID, map ID, and coordinates of the Afk.\n\n-- Solution:\n```sql\nCREATE TABLE AfkLogs (\n  AfkId INT PRIMARY KEY,\n  AfkDate DATETIME,\n  AfkChaId INT,\n  AfkMapId INT,\n  AfkX INT,\n  AfkY INT,\n  AfkZ INT\n);\n```\n\n-- Explanation:\nThis statement defines the AfkLogs table with seven columns:\n  \u2022 AfkId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 AfkDate: datetime\n  \u2022 AfkChaId: integer\n  \u2022 AfkMapId: integer\n  \u2022 AfkX: integer\n  \u2022 AfkY: integer\n  \u2022 AfkZ: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('AfkLogs');"}
{"seed": "/* Inserts 17 rows into the AfkLogs table. */\nINSERT INTO `AfkLogs` VALUES (1,'2015-09-21 13:57:27',2,10000,195,31),(2,'2015-09-21 14:07:57',2,10000,212,34),(3,'2015-09-21 14:21:37',2,10000,212,34),(4,'2015-09-21 14:24:47',2,10000,211,34),(5,'2015-09-21 14:29:27',2,10000,211,34),(6,'2015-09-21 14:34:49',2,10000,211,34),(7,'2015-09-21 14:58:19',2,10004,22,24),(8,'2015-09-21 15:03:39',2,10004,18,32),(9,'2015-09-21 15:16:22',2,10004,12,33),(10,'2015-09-21 15:26:32',2,1001,19,8),(11,'2015-09-21 15:34:02',2,1001,9,8),(12,'2015-09-21 15:40:52',2,1001,11,8),(13,'2015-09-21 16:03:47',2,1001,10,8),(14,'2015-09-21 21:07:17',18,1000,70,130),(15,'2015-09-21 21:10:47',18,1000,70,130),(16,'2015-09-21 21:27:35',53,1000,83,132),(17,'2015-09-21 21:33:26',53,1000,72,130)", "description": "Inserts 17 rows into the AfkLogs table.", "concepts": ["INSERT INTO", "VALUES", "AfkLogs", "INT", "PRIMARY KEY", "DEFAULT", "VARCHAR", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR"], "instruction": "Write a SQL query to insert 17 rows into the AfkLogs table.", "response": "-- Reasoning:\nWe need to insert 17 rows into the AfkLogs table.\n\n-- Solution:\n```sql\nINSERT INTO AfkLogs (\n  player_id,\n  afk_time,\n  afk_reason\n) VALUES (\n  1,\n  '2020-01-01 00:00:00',\n  'Not playing'\n);\n\nINSERT INTO AfkLogs (\n  player_id,\n  afk_time,\n  afk_reason\n) VALUES (\n  2,\n  '2020-01-01 00:00:00',\n  'Not playing'\n);\n\nINSERT INTO AfkLogs (\n  player_id,\n  afk_time,\n  afk_reason\n) VALUES (\n  3,\n  '2020-01-01 00:00:00',\n  'Not playing'\n);\n\nINSERT INTO AfkLogs (\n  player_id,\n  afk_time,\n  afk_reason\n) VALUES (\n  4,\n  '2020-01-01 00:00:00',\n  'Not playing'\n);\n\nINSERT INTO AfkLogs (\n  player_id,\n  afk_time,\n  afk_reason\n) VALUES (\n  5,\n  '"}
{"seed": "/* Drops the table named Authorize if it exists. */\nDROP TABLE IF EXISTS `Authorize`", "description": "Drops the table named Authorize if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Authorize if it exists.", "response": "-- Reasoning:\nWe need to delete the Authorize table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Authorize;\n```\n\n-- Explanation:\nThis statement deletes the Authorize table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Authorize');"}
{"seed": "/* Creates a table named Authorize with five columns: AutId (integer primary key), AutChaId (integer), AutChaName (varchar), AutIP (integer), and AutTimer (integer). */\nCREATE TABLE `Authorize` (\n  `AutId` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `AutChaId` int(11) unsigned NOT NULL DEFAULT '0',\n  `AutChaName` varchar(16) NOT NULL DEFAULT '',\n  `AutIP` int(11) unsigned NOT NULL DEFAULT '0',\n  `AutTimer` int(11) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`AutId`),\n  KEY `AutChaName` (`AutChaName`),\n  KEY `AutChaId` (`AutChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=765 DEFAULT CHARSET=latin1", "description": "Creates a table named Authorize with five columns: AutId (integer primary key), AutChaId (integer), AutChaName (varchar), AutIP (integer), and AutTimer (integer).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named Authorize with five columns: AutId (integer primary key), AutChaId (integer), AutChaName (varchar), AutIP (integer), and AutTimer (integer).", "response": "-- Reasoning:\nWe need a new table named Authorize. It should have an integer primary key so that each authorization has a unique identifier, and four other columns to store the authorization details.\n\n-- Solution:\n```sql\nCREATE TABLE Authorize (\n  AutId INT PRIMARY KEY,\n  AutChaId INT,\n  AutChaName VARCHAR(255),\n  AutIP INT,\n  AutTimer INT\n);\n```\n\n-- Explanation:\nThis statement defines the Authorize table with five columns:\n  \u2022 AutId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 AutChaId: integer\n  \u2022 AutChaName: variable\u2010length string up to 255 characters\n  \u2022 AutIP: integer\n  \u2022 AutTimer: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Authorize');"}
{"seed": "/* Drops the table named Banks if it exists. */\nDROP TABLE IF EXISTS `Banks`", "description": "Drops the table named Banks if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Banks if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Banks if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Banks;\n```\n\n-- Explanation:\nThis statement drops the table named Banks if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Banks');"}
{"seed": "/* Creates a table named Banks with 10 columns: BnkId (integer primary key), BnkChaId (integer), BnkItmId (integer), BnkAmount (integer), BnkChaIdOwner (integer), BnkEngrave (varchar), BnkTimer (integer), BnkPosition (integer). */\nCREATE TABLE `Banks` (\n  `BnkId` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `BnkChaId` int(11) unsigned NOT NULL DEFAULT '0',\n  `BnkItmId` int(11) unsigned NOT NULL DEFAULT '0',\n  `BnkAmount` int(11) unsigned NOT NULL DEFAULT '0',\n  `BnkChaIdOwner` int(11) unsigned NOT NULL DEFAULT '0',\n  `BnkEngrave` varchar(64) NOT NULL DEFAULT '0',\n  `BnkTimer` int(11) unsigned NOT NULL DEFAULT '0',\n  `BnkPosition` int(11) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`BnkId`),\n  KEY `BnkChaId` (`BnkChaId`),\n  KEY `BnkItmId` (`BnkItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=latin1", "description": "Creates a table named Banks with 10 columns: BnkId (integer primary key), BnkChaId (integer), BnkItmId (integer), BnkAmount (integer), BnkChaIdOwner (integer), BnkEngrave (varchar), BnkTimer (integer), BnkPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named Banks with 10 columns: BnkId (integer primary key), BnkChaId (integer), BnkItmId (integer), BnkAmount (integer), BnkChaIdOwner (integer), BnkEngrave (varchar), BnkTimer (integer), BnkPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Banks. It should have an integer primary key so that each bank has a unique identifier, and a name column to store the bank\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Banks (\n  BnkId INT PRIMARY KEY,\n  BnkChaId INT,\n  BnkItmId INT,\n  BnkAmount INT,\n  BnkChaIdOwner INT,\n  BnkEngrave VARCHAR(255),\n  BnkTimer INT,\n  BnkPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Banks table with eight columns:\n  \u2022 BnkId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BnkChaId: integer\n  \u2022 BnkItmId: integer\n  \u2022 BnkAmount: integer\n  \u2022 BnkChaIdOwner: integer\n  \u2022 BnkEngrave: variable\u2010length string up to 255 characters\n  \u2022 BnkTimer: integer\n  \u2022 BnkPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Banks');"}
{"seed": "/* Inserts 31 rows into the Banks table. */\nINSERT INTO `Banks` VALUES (1,24,6008,1,0,'',0,0),(2,24,7032,2,0,'',0,1),(3,24,4015,1,0,'',0,2),(4,24,5001,1,0,'',0,3),(5,2,2500,1,0,'',0,0),(6,2,2501,1,0,'',0,1),(7,2,2502,1,0,'',0,2),(8,2,2503,1,0,'',0,3),(9,64,2500,1,0,'',0,0),(10,2,2009,1,0,'',0,4),(11,54,6015,1,0,'',0,0),(12,54,2015,1,0,'',0,1),(13,11,3033,1,0,'',0,0),(14,53,9003,1,0,'',0,0),(15,53,3028,1,0,'',0,1),(16,53,4047,1,0,'',0,2),(17,53,4097,2,0,'',0,3),(18,53,3058,1,0,'',0,4),(19,53,50002,1,0,'',0,5),(20,53,50003,1,0,'',0,6),(21,53,50004,1,0,'',0,7),(22,53,50005,1,0,'',0,8),(23,53,50006,1,0,'',0,9),(24,53,2007,1,0,'',0,10),(25,53,2014,1,0,'',0,11),(26,53,2017,1,0,'',0,12),(27,76,4014,1,0,'',0,0),(28,76,4039,1,0,'',0,1),(29,53,4099,1,0,'',0,13),(30,54,3037,1,0,'',0,2),(31,54,3069,1,0,'',0,3)", "description": "Inserts 31 rows into the Banks table.", "concepts": ["INSERT INTO", "VALUES", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "CTE", "window functions", "INT", "VARCHAR"], "instruction": "Write a SQL query to insert 31 rows into the Banks table.", "response": "-- Reasoning:\nWe need to insert 31 rows into the Banks table.\n\n-- Solution:\n```sql\nINSERT INTO Banks (bank_name, city, state)\nVALUES\n  ('Bank of America', 'New York', 'NY'),\n  ('Bank of America', 'Chicago', 'IL'),\n  ('Bank of America', 'San Francisco', 'CA'),\n  ('Bank of America', 'Los Angeles', 'CA'),\n  ('Bank of America', 'Dallas', 'TX'),\n  ('Bank of America', 'Houston', 'TX'),\n  ('Bank of America', 'Philadelphia', 'PA'),\n  ('Bank of America', 'Phoenix', 'AZ'),\n  ('Bank of America', 'San Diego', 'CA'),\n  ('Bank of America', 'San Antonio', 'TX'),\n  ('Bank of America', 'San Jose', 'CA'),\n  ('Bank of America', 'Austin', 'TX'),\n  ('Bank of America', 'Jacksonville', 'FL'),\n  ('Bank of America', 'Indianapolis', 'IN'),\n  ('Bank of America', 'Columbus', 'OH'),\n  ('Bank of America', 'Fort Worth', 'TX'),\n  ('Bank of America', 'Charlotte', 'NC'),\n  ('Bank of America', 'Detroit', 'MI'),\n  ('Bank of America', '"}
{"seed": "/* Drops the table named BoardNames if it exists. */\nDROP TABLE IF EXISTS `BoardNames`", "description": "Drops the table named BoardNames if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "BoardNames"], "instruction": "Write a SQL query to drop the table named BoardNames if it exists.", "response": "-- Reasoning:\nWe need to drop the table named BoardNames if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS BoardNames;\n```\n\n-- Explanation:\nThis statement drops the BoardNames table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('BoardNames');"}
{"seed": "/* Creates a table named BoardNames with 10 columns: BnmId, BnmIdentifier, BnmDescription, BnmLevel, BnmGMLevel, BnmPthId, BnmClnId, BnmScripted, and BnmSortOrder. */\nCREATE TABLE `BoardNames` (\n  `BnmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BnmIdentifier` varchar(64) NOT NULL DEFAULT '',\n  `BnmDescription` varchar(64) NOT NULL DEFAULT '',\n  `BnmLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `BnmGMLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `BnmPthId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BnmClnId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BnmScripted` int(10) unsigned NOT NULL DEFAULT '0',\n  `BnmSortOrder` int(10) unsigned NOT NULL DEFAULT '256',\n  PRIMARY KEY (`BnmId`),\n  KEY `BnmClnId` (`BnmClnId`),\n  KEY `BnmPthId` (`BnmPthId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named BoardNames with 10 columns: BnmId, BnmIdentifier, BnmDescription, BnmLevel, BnmGMLevel, BnmPthId, BnmClnId, BnmScripted, and BnmSortOrder.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "INT", "DEFAULT", "VARCHAR", "NOT NULL", "DEFAULT", "ENGINE", "CHARSET", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named BoardNames with 10 columns: BnmId, BnmIdentifier, BnmDescription, BnmLevel, BnmGMLevel, BnmPthId, BnmClnId, BnmScripted, and BnmSortOrder.", "response": "-- Reasoning:\nWe need a new table named BoardNames. It should have an integer primary key so that each board name has a unique identifier, and a name column to store the board name as text.\n\n-- Solution:\n```sql\nCREATE TABLE BoardNames (\n  BnmId INT PRIMARY KEY,\n  BnmIdentifier VARCHAR(255),\n  BnmDescription VARCHAR(255),\n  BnmLevel VARCHAR(255),\n  BnmGMLevel VARCHAR(255),\n  BnmPthId VARCHAR(255),\n  BnmClnId VARCHAR(255),\n  BnmScripted VARCHAR(255),\n  BnmSortOrder VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the BoardNames table with 10 columns:\n  \u2022 BnmId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BnmIdentifier: variable\u2010length string up to 255 characters\n  \u2022 BnmDescription: variable\u2010length string up to 255 characters\n  \u2022 BnmLevel: variable\u2010length string up to 255 characters\n  \u2022 BnmGMLevel: variable\u2010length string up to 255 characters\n  \u2022 BnmPthId: variable\u2010length string up to 255 characters\n  \u2022 BnmClnId: variable\u2010length string"}
{"seed": "/* Inserts the given values into the BoardNames table. */\nINSERT INTO `BoardNames` VALUES (1,'gm_only','News',0,99,0,0,1,1),(2,'gm_only','Events',0,50,0,0,1,2),(3,'gm_only','Rules',0,50,0,0,1,3),(4,'market','Nexia Market (Buy)',0,0,0,0,0,4),(5,'market','Nexia Market (Sell)',0,0,0,0,0,5),(6,'community','English Community',0,0,0,0,0,6),(7,'community','Indonesia Community',0,0,0,0,0,7),(8,'guide','Quest Guide',0,0,0,0,0,8),(9,'pk_war_sugestion','PK and War sugestion',0,0,0,0,0,9),(10,'clan_recruitment','Clan Recruitment',0,0,0,0,0,10),(11,'arts_and_poetry','Arts and Poetry',0,0,0,0,0,11),(12,'jokes_and_humors','Jokes and Humors',0,0,0,0,0,12),(13,'gm_only','Scam and Bad players',0,50,0,0,1,13),(300,'team_iseng','Meeting Board',0,1,0,0,1,300),(301,'team_iseng','Development Board',0,1,0,0,1,301)", "description": "Inserts the given values into the BoardNames table.", "concepts": ["INSERT INTO", "VALUES", "BoardNames", "gm_only", "market", "community", "guide", "pk_war_sugestion", "clan_recruit"], "instruction": "Write a SQL query to insert the given values into the BoardNames table.", "response": "-- Reasoning:\nWe need to insert the given values into the BoardNames table.\n\n-- Solution:\n```sql\nINSERT INTO BoardNames (board_id, name)\nVALUES (1, 'Chess'), (2, 'Checkers'), (3, 'Go');\n```\n\n-- Explanation:\nThis INSERT statement inserts the given values into the BoardNames table.\n\n-- Tests:\n-- 1. Verify new values appear in table\nSELECT * FROM BoardNames;"}
{"seed": "/* Drops the table named BoardTitles if it exists. */\nDROP TABLE IF EXISTS `BoardTitles`", "description": "Drops the table named BoardTitles if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named BoardTitles if it exists.", "response": "-- Reasoning:\nWe need to drop the table named BoardTitles if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS BoardTitles;\n```\n\n-- Explanation:\nThis statement drops the BoardTitles table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('BoardTitles');"}
{"seed": "/* Creates a table named BoardTitles with two columns: BtlId (integer primary key) and BtlDescription (varchar). */\nCREATE TABLE `BoardTitles` (\n  `BtlId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `BtlDescription` varchar(255) NOT NULL DEFAULT '',\n  PRIMARY KEY (`BtlId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named BoardTitles with two columns: BtlId (integer primary key) and BtlDescription (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named BoardTitles with two columns: BtlId (integer primary key) and BtlDescription (varchar).", "response": "-- Reasoning:\nWe need a new table named BoardTitles. It should have an integer primary key so that each board title has a unique identifier, and a description column to store the board title as text.\n\n-- Solution:\n```sql\nCREATE TABLE BoardTitles (\n  BtlId INT PRIMARY KEY,\n  BtlDescription VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the BoardTitles table with two columns:\n  \u2022 BtlId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BtlDescription: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('BoardTitles');"}
{"seed": "/* Drops the table named Boards if it exists. */\nDROP TABLE IF EXISTS `Boards`", "description": "Drops the table named Boards if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Boards if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Boards if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Boards;\n```\n\n-- Explanation:\nThis statement drops the table named Boards if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Boards');"}
{"seed": "/* Creates a table named Boards with 13 columns: BrdId (integer primary key), BrdBnmId (integer), BrdChaName (varchar), BrdBtlId (integer), BrdHighlighted (integer), BrdMonth (integer), BrdDay (integer), BrdTopic (varchar), BrdPost (text), BrdPosition (integer). */\nCREATE TABLE `Boards` (\n  `BrdId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `BrdBnmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrdChaName` varchar(16) NOT NULL DEFAULT '',\n  `BrdBtlId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrdHighlighted` int(11) NOT NULL DEFAULT '0',\n  `BrdMonth` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrdDay` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrdTopic` varchar(255) NOT NULL DEFAULT '',\n  `BrdPost` text NOT NULL,\n  `BrdPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`BrdId`),\n  KEY `BrdBnmId` (`BrdBnmId`),\n  KEY `BrdChaName` (`BrdChaName`),\n  KEY `BrdBtlId` (`BrdBtlId`)\n) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=latin1", "description": "Creates a table named Boards with 13 columns: BrdId (integer primary key), BrdBnmId (integer), BrdChaName (varchar), BrdBtlId (integer), BrdHighlighted (integer), BrdMonth (integer), BrdDay (integer), BrdTopic (varchar), BrdPost (text), BrdPosition (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "AUTO_INCREMENT", "DEFAULT", "KEY", "ENGINE", "NOT", "NULL", "DEFAULT", "KEY"], "instruction": "Write a SQL query to create a table named Boards with 13 columns: BrdId (integer primary key), BrdBnmId (integer), BrdChaName (varchar), BrdBtlId (integer), BrdHighlighted (integer), BrdMonth (integer), BrdDay (integer), BrdTopic (varchar), BrdPost (text), BrdPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Boards. It should have an integer primary key so that each board has a unique identifier, and a name column to store the board\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Boards (\n  BrdId INT PRIMARY KEY,\n  BrdBnmId INT,\n  BrdChaName VARCHAR(255),\n  BrdBtlId INT,\n  BrdHighlighted INT,\n  BrdMonth INT,\n  BrdDay INT,\n  BrdTopic VARCHAR(255),\n  BrdPost TEXT,\n  BrdPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Boards table with 13 columns:\n  \u2022 BrdId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BrdBnmId: integer\n  \u2022 BrdChaName: variable\u2010length string up to 255 characters\n  \u2022 BrdBtlId: integer\n  \u2022 BrdHighlighted: integer\n  \u2022 BrdMonth: integer\n  \u2022 BrdDay: integer\n  \u2022 BrdTopic: variable\u2010length string up to 255 characters\n  \u2022 BrdPost: text\n  \u2022 BrdPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Boards');"}
{"seed": "/* Drops the table named BreakLogs if it exists. */\nDROP TABLE IF EXISTS `BreakLogs`", "description": "Drops the table named BreakLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named BreakLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the table named BreakLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS BreakLogs;\n```\n\n-- Explanation:\nThis statement drops the table named BreakLogs if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('BreakLogs');"}
{"seed": "/* Creates a table named BreakLogs with seven columns: BrkId (integer primary key), BrkDate (datetime), BrkChaId (integer), BrkMapId (integer), BrkX (integer), BrkY (integer), and BrkItmId (integer). */\nCREATE TABLE `BreakLogs` (\n  `BrkId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `BrkDate` datetime DEFAULT NULL,\n  `BrkChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrkMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrkX` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrkY` int(10) unsigned NOT NULL DEFAULT '0',\n  `BrkItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`BrkId`),\n  KEY `BrkChaId` (`BrkChaId`),\n  KEY `BrkMapId` (`BrkMapId`),\n  KEY `BrkItmId` (`BrkItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1", "description": "Creates a table named BreakLogs with seven columns: BrkId (integer primary key), BrkDate (datetime), BrkChaId (integer), BrkMapId (integer), BrkX (integer), BrkY (integer), and BrkItmId (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named BreakLogs with seven columns: BrkId (integer primary key), BrkDate (datetime), BrkChaId (integer), BrkMapId (integer), BrkX (integer), BrkY (integer), and BrkItmId (integer).", "response": "-- Reasoning:\nWe need a new table named BreakLogs. It should have an integer primary key so that each break log has a unique identifier, and a datetime column to store the date and time of the break. It should also have columns for the break channel, map, and item.\n\n-- Solution:\n```sql\nCREATE TABLE BreakLogs (\n  BrkId INT PRIMARY KEY,\n  BrkDate DATETIME,\n  BrkChaId INT,\n  BrkMapId INT,\n  BrkX INT,\n  BrkY INT,\n  BrkItmId INT\n);\n```\n\n-- Explanation:\nThis statement defines the BreakLogs table with seven columns:\n  \u2022 BrkId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BrkDate: datetime\n  \u2022 BrkChaId: integer\n  \u2022 BrkMapId: integer\n  \u2022 BrkX: integer\n  \u2022 BrkY: integer\n  \u2022 BrkItmId: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('BreakLogs');"}
{"seed": "/* Inserts five rows into the BreakLogs table. */\nINSERT INTO `BreakLogs` VALUES (1,'2015-09-20 04:40:27',2,10012,23,122,30019),(2,'2015-09-20 04:40:56',2,10012,23,122,30019),(3,'2015-09-20 04:41:06',18,10012,22,121,30019),(4,'2015-09-20 04:41:25',2,10012,23,122,30019),(5,'2015-09-20 04:43:58',2,10012,23,122,30019)", "description": "Inserts five rows into the BreakLogs table.", "concepts": ["INSERT INTO", "VALUES", "BreakLogs", "10012", "23", "122", "30019"], "instruction": "Write a SQL query to insert five rows into the BreakLogs table.", "response": "-- Reasoning:\nWe need to insert five rows into the BreakLogs table.\n\n-- Solution:\n```sql\nINSERT INTO BreakLogs (\n  BreakID,\n  BreakDate,\n  BreakTime,\n  BreakDuration,\n  BreakReason\n) VALUES (\n  1,\n  '2020-01-01',\n  '08:00:00',\n  1,\n  'Lunch'\n);\n\nINSERT INTO BreakLogs (\n  BreakID,\n  BreakDate,\n  BreakTime,\n  BreakDuration,\n  BreakReason\n) VALUES (\n  2,\n  '2020-01-01',\n  '12:00:00',\n  1,\n  'Lunch'\n);\n\nINSERT INTO BreakLogs (\n  BreakID,\n  BreakDate,\n  BreakTime,\n  BreakDuration,\n  BreakReason\n) VALUES (\n  3,\n  '2020-01-01',\n  '13:00:00',\n  1,\n  'Lunch'\n);\n\nINSERT INTO BreakLogs (\n  BreakID,\n  BreakDate,\n  BreakTime,\n  BreakDuration,\n  BreakReason\n) VALUES (\n  4,\n  '2020-01-01',\n  '17:00:00',\n  1,\n  'Lunch'\n);\n\nINSERT INTO BreakLogs ("}
{"seed": "/* Drops the table named BuyLogs if it exists. */\nDROP TABLE IF EXISTS `BuyLogs`", "description": "Drops the table named BuyLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named BuyLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the BuyLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS BuyLogs;\n```\n\n-- Explanation:\nThis statement deletes the BuyLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('BuyLogs');"}
{"seed": "/* Creates a table named BuyLogs with 10 columns: BuyId (integer primary key), BuyDate (datetime), BuyChaId (integer), BuyMapId (integer), BuyX (integer), BuyY (integer), BuyItmId (integer), BuyPrice (integer), and BuyAmount (integer). */\nCREATE TABLE `BuyLogs` (\n  `BuyId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `BuyDate` datetime DEFAULT NULL,\n  `BuyChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BuyMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BuyX` int(10) unsigned NOT NULL DEFAULT '0',\n  `BuyY` int(10) unsigned NOT NULL DEFAULT '0',\n  `BuyItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `BuyPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `BuyAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`BuyId`),\n  KEY `BuyChaId` (`BuyChaId`),\n  KEY `BuyMapId` (`BuyMapId`),\n  KEY `BuyItmId` (`BuyItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named BuyLogs with 10 columns: BuyId (integer primary key), BuyDate (datetime), BuyChaId (integer), BuyMapId (integer), BuyX (integer), BuyY (integer), BuyItmId (integer), BuyPrice (integer), and BuyAmount (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named BuyLogs with 10 columns: BuyId (integer primary key), BuyDate (datetime), BuyChaId (integer), BuyMapId (integer), BuyX (integer), BuyY (integer), BuyItmId (integer), BuyPrice (integer), and BuyAmount (integer).", "response": "-- Reasoning:\nWe need a new table named BuyLogs. It should have an integer primary key so that each buy log has a unique identifier, and a datetime column to store the buy date.\n\n-- Solution:\n```sql\nCREATE TABLE BuyLogs (\n  BuyId INT PRIMARY KEY,\n  BuyDate DATETIME,\n  BuyChaId INT,\n  BuyMapId INT,\n  BuyX INT,\n  BuyY INT,\n  BuyItmId INT,\n  BuyPrice INT,\n  BuyAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the BuyLogs table with 10 columns:\n  \u2022 BuyId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 BuyDate: datetime\n  \u2022 BuyChaId: integer\n  \u2022 BuyMapId: integer\n  \u2022 BuyX: integer\n  \u2022 BuyY: integer\n  \u2022 BuyItmId: integer\n  \u2022 BuyPrice: integer\n  \u2022 BuyAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('BuyLogs');"}
{"seed": "/* Drops the table named Character if it exists. */\nDROP TABLE IF EXISTS `Character`", "description": "Drops the table named Character if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "Character"], "instruction": "Write a SQL query to drop the table named Character if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Character if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Character;\n```\n\n-- Explanation:\nThis statement drops the table named Character if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Character');"}
{"seed": "/* Creates a table named Character with 50 columns. */\nCREATE TABLE `Character` (\n  `ChaId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `ChaName` varchar(16) NOT NULL DEFAULT '',\n  `ChaPassword` varchar(32) NOT NULL DEFAULT '',\n  `ChaBanned` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaClnId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaClanTitle` varchar(32) NOT NULL DEFAULT '',\n  `ChaTitle` varchar(32) NOT NULL DEFAULT '',\n  `ChaLevel` int(10) unsigned NOT NULL DEFAULT '1',\n  `ChaPthId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaMark` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaTier` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaTotem` int(10) unsigned NOT NULL DEFAULT '4',\n  `ChaKarma` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaCurrentVita` int(10) unsigned NOT NULL DEFAULT '100',\n  `ChaMaximumVita` int(10) unsigned NOT NULL DEFAULT '100',\n  `ChaCurrentMana` int(10) unsigned NOT NULL DEFAULT '50',\n  `ChaMaximumMana` int(10) unsigned NOT NULL DEFAULT '50',\n  `ChaExperience` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaGold` int(10) unsigned NOT NULL DEFAULT '100',\n  `ChaSex` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaNation` int(10) unsigned NOT NULL DEFAULT '5',\n  `ChaFace` int(10) unsigned NOT NULL DEFAULT '200',\n  `ChaFaceColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaHair` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaHairColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaSkinColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaArmorColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaX` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaY` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaSide` int(10) unsigned NOT NULL DEFAULT '2',\n  `ChaState` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaOnline` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaChaIdSpouse` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaClanChat` int(10) unsigned NOT NULL DEFAULT '1',\n  `ChaPathChat` int(10) unsigned NOT NULL DEFAULT '1',\n  `ChaActId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaSettings` int(10) unsigned NOT NULL DEFAULT '12605',\n  `ChaGMLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaF1Name` varchar(16) NOT NULL DEFAULT '',\n  `ChaDisguise` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaDisguiseColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaPK` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaKilledBy` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaKillsPK` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaPKDuration` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaMuted` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaHeroes` int(10) unsigned NOT NULL DEFAULT '1',\n  `ChaMaximumInventory` int(10) unsigned NOT NULL DEFAULT '26',\n  `ChaMaximumBankSlots` int(10) unsigned NOT NULL DEFAULT '15',\n  `ChaBankGold` int(10) unsigned NOT NULL DEFAULT '0',\n  `ChaExperienceSold` bigint(20) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`ChaId`),\n  KEY `ChaActId` (`ChaActId`) USING BTREE,\n  KEY `ChaName` (`ChaName`) USING BTREE,\n  KEY `ChaClnId` (`ChaClnId`) USING BTREE,\n  KEY `ChaPthId` (`ChaPthId`) USING BTREE,\n  KEY `ChaMapId` (`ChaMapId`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=82 DEFAULT CHARSET=latin1", "description": "Creates a table named Character with 50 columns.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named Character with 50 columns.", "response": "-- Reasoning:\nWe need a new table named Character. It should have 50 columns.\n\n-- Solution:\n```sql\nCREATE TABLE Character (\n  c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"seed": "/* The first column is the table name. */\nINSERT INTO `Character` VALUES (1,'Yuri','',0,0,'','',1,0,0,0,4,0,100,100,50,50,0,100,0,5,200,0,0,0,0,0,0,0,0,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(2,'God','3c2a2ef7b0a3964e7d8c59c7bac4d0e4',0,0,'','Oh my',99,3,0,0,3,0,5075045,5000000,3050420,3000375,319970201,11245428,0,2,218,0,49,0,0,0,10000,215,36,2,0,0,0,1,1,0,7967,99,'',1393,0,0,76,0,0,0,1,26,15,0,0),(3,'Zzz','4b0576834dc1fdd2412f9471c42f662a',0,0,'','',1,0,0,0,0,0,100,100,100,100,249,10000,0,1,201,0,137,0,0,0,1000,76,141,2,0,0,0,1,1,0,8475,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(4,'edric','9581e270a866c97eb327d8ae611b6deb',0,0,'','',62,1,0,0,2,0,5001905,5000000,3000765,3000000,56433374,12269678,0,2,231,0,89,0,0,10,1000,74,136,2,0,0,0,1,1,0,12735,99,'',0,0,0,2,0,0,0,1,26,15,0,0),(5,'ipiirumraisin','1fa1b1616dec10edcc48e0cc74bab3fb',0,0,'','',99,4,0,0,0,0,2220225,2000000,1645225,1500000,91833925,17970,1,2,210,21,45,11,0,0,14,6,11,2,0,0,0,1,1,0,315,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(6,'Aldo','d083a6b3eb49abd363859520562a5ca7',0,0,'','Tester',99,2,0,0,2,0,4429986,5000000,3000000,3000000,0,22304925,1,2,201,0,49,0,0,0,1000,81,132,2,0,0,0,1,1,0,12733,0,'',0,0,0,76,0,0,0,1,26,15,0,0),(7,'barclayz','ab13cd84a71dcdcf01663f7c1d8d7244',0,0,'','',99,2,0,0,1,0,554079,5000000,3050225,3000000,0,0,0,1,226,0,134,9,0,0,10012,24,122,2,0,0,0,1,1,0,12575,0,'',0,0,0,18,0,0,0,1,26,15,0,0),(8,'Silence','2ad2e0b67cb1cf75225ab7bdd767d837',0,0,'','',1,0,0,0,0,0,100,100,100,100,0,0,0,1,202,0,60,0,0,0,7,9,1,2,0,0,0,1,1,0,12573,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(9,'CHAKLAN','a1abb13d1fd96cb2170b42c281c1f38f',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,0,1,205,0,36,0,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(10,'Lord','9878cf6c6329d1725852e927d7f71075',0,0,'','',99,1,0,0,1,0,2903806,3000000,1669655,1501155,0,0,1,2,657,0,34,0,0,0,1000,67,124,1,1,0,0,1,1,0,447,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(11,'Mosessio','60390f6aa1cc352659118f5768fd7ff8',0,0,'','',78,3,0,0,2,0,2416,1456,7086,4686,152240107,10100,0,1,210,21,60,21,0,0,1000,73,138,2,0,0,0,1,1,0,4415,0,'',0,0,0,1073742419,0,0,0,1,26,15,0,0),(12,'Yuro','c1516398fe6e3a1e014a6858b319b262',0,0,'','',1,0,0,0,3,0,100,100,50,50,0,100,0,1,211,0,51,0,0,0,7,7,7,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(13,'edroc','3d4f9674fb482980dd12d2bd9c54b216',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,10000,0,2,210,12,59,8,0,0,1000,74,128,2,0,0,0,1,1,0,4285,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(14,'eLSe','ba39b2dba84680b1e7985f66016c105d',0,0,'','',1,0,0,0,1,0,100,100,100,100,0,0,0,2,204,0,36,7,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(15,'TwinkleEclipse','8d6f9bbfb8628c496e13394641f8cbdf',0,0,'','',28,2,0,0,1,0,2000296,2000296,1500442,1500442,606653,11012590,1,2,236,0,149,0,0,0,10012,19,124,2,0,0,0,1,1,0,8511,0,'',0,0,0,1173741824,0,0,0,1,26,15,0,0),(16,'TeQuiLa','2ed5e6bf03a0b19e51880af38a202a98',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,0,1,201,24,2,26,0,0,7,9,1,0,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(17,'LeLan','2b37e51141130988424973eacd6822a3',0,0,'','',1,0,0,0,0,0,100,100,100,100,0,0,0,1,205,0,60,0,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(18,'NewBie','3ef95cfd461b61852d682c102673c48d',0,0,'','I am',99,2,0,0,1,0,50000750,50000750,50000000,50000000,2384967795,106107730,0,1,237,0,111,0,0,0,1000,75,134,3,0,0,0,1,1,0,12191,99,'NewBieJr',818,46,0,1073743399,0,0,0,1,26,15,0,0),(19,'Ravel','f360abefd5db627caff8e9a94b6bf107',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,0,1,201,0,80,8,0,0,7,9,1,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(20,'tommyjr','c342286341056572f3095bd7e99b4bdd',0,0,'',' ',1,0,0,0,3,0,100,100,100,100,0,0,0,2,201,3,3,0,0,0,1001,6,10,2,0,0,0,1,1,0,12575,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(21,'Ash','5a703ee966ef67cb2db257b61051a2c9',0,0,'','',95,1,0,0,1,0,2005081,2005081,1501505,1501505,1519074691,8684123,0,2,201,0,49,0,0,0,1000,73,133,3,0,0,0,1,1,0,4415,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(22,'WanzaI','00310962b87dd76a6e3b1f511f6099c2',0,0,'','',5,0,0,0,1,0,353,263,348,258,15000000,0,0,1,210,21,83,21,0,0,1000,69,127,2,0,0,0,1,1,0,8255,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(23,'RAZR','5c4f56ce6bf5177f77fdbc1326459b94',0,0,'','',5,0,0,0,3,0,353,263,367,277,4714289,0,0,2,1080,0,123,0,0,0,1000,75,131,2,0,0,0,1,1,0,12600,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(24,'ZapCure','7224260082b2b34b134aa76b2d3d326a',0,0,'','Love',99,4,0,0,2,0,8077500,8002500,6050650,6000650,530639452,1916557676,0,2,204,0,51,0,0,0,1026,8,3,2,0,0,0,0,1,0,30,99,'',1190,0,0,1173741823,0,0,0,1,26,15,0,0),(25,'dusseldorf','72e0325a4f5f5d2d9c549babccb0cebc',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,0,1,210,0,80,26,0,0,7,9,1,0,0,0,0,1,1,0,12573,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(26,'Spinach','1c1440facda93dde12936ef7a3173eb0',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,0,1,201,0,2,0,0,0,7,9,1,3,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(27,'olive','a58f5152ab11a48fb6d4ec79956e0f6c',0,0,'','',1,0,0,0,2,0,100,100,100,100,0,0,1,1,201,0,52,26,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(28,'Paris','3ee72b29b5e2fbebf2d02f33be3918bb',0,0,'','',1,0,0,0,1,0,100,100,100,100,0,0,1,1,201,0,52,26,0,0,7,9,1,2,0,0,0,1,1,0,8511,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(29,'King','96fdab2e17572f352ed6376cce5308b3',0,0,'','',99,1,0,0,1,0,3000000,3000000,1500000,1500000,636,7800,0,1,200,0,80,0,0,0,10011,54,25,0,0,0,0,1,1,0,12607,0,'',0,0,0,2,0,0,0,1,26,15,0,0),(30,'bencana','19793a91b7a5298424ac061268085e3e',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,0,1,204,0,34,0,0,0,7,9,1,3,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(31,'alam','9f3129d63adcf166947ca29d4ae407fd',0,0,'','',1,0,0,0,0,0,100,100,100,100,0,0,0,1,205,0,71,0,0,0,7,9,1,1,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(32,'mYveis','520a7fbaacf704a00a8a35b5c2a61e83',0,0,'','',1,0,0,0,0,0,100,100,100,100,0,10000,0,1,205,0,34,21,0,0,1000,72,129,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(33,'KazuKE','237973faa5a5aef44f1fe851db42a05a',0,0,'','',1,0,0,0,0,0,100,100,100,100,0,0,1,1,206,0,10,0,0,0,7,9,1,3,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(34,'yagammi','39163c13077b6f4559bc56008393d04d',0,0,'','',99,2,0,0,1,0,715719,3000000,1550400,1500175,75821904,0,0,2,209,9,80,12,0,0,1000,75,138,2,0,0,0,1,1,0,12607,0,'',268,0,0,0,0,0,0,1,26,15,1000000000,0),(35,'Nuba','44b64b2502518e76e992a36842fa1135',0,0,'','',5,2,0,0,3,0,251,251,246,246,1460,7900,0,2,205,0,34,21,0,0,1000,74,134,3,0,0,0,1,1,0,12573,0,'',4,0,0,0,0,0,0,1,26,15,0,0),(36,'VinCenTZzz','89f776bac18018121d6b0c4a1561d5f8',0,0,'','',1,0,0,0,1,0,100,100,100,100,0,0,1,1,206,21,10,1,0,0,7,9,5,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(37,'VinCenTZz','33cca946193678771561efa11bd63d28',0,0,'','',99,2,0,0,1,0,0,2001225,1552705,1501825,454545,9970,0,2,206,0,110,427,0,0,20002,25,5,2,1,0,0,0,1,0,4543,0,'',0,0,0,1073742416,0,0,0,1,26,15,0,0),(38,'KimSooHyun','17cc03a2fa797e09ec22d9e502520c38',0,0,'','',99,2,0,0,1,0,92500,17500,2550000,2500000,20206,2256761405,0,2,632,0,1,468,0,0,1000,74,130,2,0,0,0,1,1,0,4413,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(39,'help','aeaac43ec012ac536b24146105c0a71c',0,0,'','',99,3,0,0,3,0,137198,1973,121773,11548,346281192,7130045,1,1,201,0,78,0,0,0,1000,90,72,3,0,0,0,1,1,0,4415,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(40,'LopeLipe','31697a79e4020b46045b0f1c7ea98f11',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,1,1,202,13,52,1,0,0,7,9,1,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(41,'LAHIRDARIBATU','c4052e13c3fd77d37e9ea7f7a73318b5',0,0,'','',1,0,0,0,0,0,100,100,100,100,0,0,1,2,205,0,74,0,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(42,'LoveMeLikeYouDo','d6f7c39f09125efb7f6ad51d8da49e7e',0,0,'','',1,0,0,0,2,0,100,100,100,100,0,0,1,1,209,0,80,1,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(43,'zidane','4b37d71f365da4a855f9fe280a9b8171',0,0,'','',35,1,0,0,3,0,3142,2087,1281,866,1961545,10,0,2,650,10,51,5,0,0,1000,69,136,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(44,'Rangga','0caad7e40673820f2be4a90e077b8d09',0,0,'','',1,0,0,0,3,0,100,100,100,100,0,0,0,1,203,0,17,0,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(45,'NoLiMiT','58ba6762b9462926f0eee0f72372c241',0,0,'','',99,2,0,0,3,0,12961,12961,1500970,1500970,7888063,0,0,2,201,24,2,26,0,0,1022,9,22,0,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(46,'PRINCESS','62c1927314565818b90bd01e649b97e3',0,0,'','',53,4,0,0,2,0,2925,2020,3867,2372,17708271,9880,1,2,654,0,80,0,0,0,1000,70,128,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(47,'aloha','521bb590eb9db334afc72ab7400b2362',0,0,'','',1,0,0,0,3,0,100,100,50,50,0,10100,0,1,209,0,1,0,0,0,1000,71,130,1,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(48,'Kenzie','e24af7e1815fe0ef5bc8524c4506f7ba',0,0,'','',27,2,0,0,1,0,979,979,1275,1275,454653,7900,0,2,207,0,60,0,0,0,1000,71,134,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(49,'LoKi','3a724462e20a0aa801a655747bbdd399',0,0,'','',5,1,0,0,0,0,358,268,298,208,1450,7000,0,1,202,0,51,21,0,0,1001,19,8,3,0,0,0,1,1,0,8509,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(50,'myvues','8ee961562d59bbff9cac9638f693a6e6',0,0,'','',1,0,0,0,1,0,100,100,50,50,0,100,0,1,207,0,2,0,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(51,'jihyo','06b376f37d56183deecc4aa9541c43ac',0,0,'','',1,0,0,0,2,0,100,100,50,50,0,10100,1,1,204,0,52,11,0,0,1000,65,136,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(52,'TriviuM','681e994e20be4d371d5a1ab8bbfe2e3e',0,0,'','',1,0,0,0,3,0,100,100,50,50,0,100,0,1,210,0,34,0,0,0,1000,74,128,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(53,'yash','944600ce1294670d23f07d36c7d62feb',0,0,'','',99,1,0,0,0,0,10340633,15408,10118856,18631,1509374018,1951625262,0,2,202,12,59,21,0,0,1000,72,130,2,0,0,0,0,1,0,4383,0,'',388,0,0,1173741823,0,0,0,1,26,15,0,0),(54,'Gracia','e66795072e5303aa5d69ffac5ca839dd',0,0,'','',99,3,0,0,2,0,6575750,1500750,8050375,3000375,160742372,10823001,1,2,218,0,121,24,0,18,10012,9,90,2,0,0,0,1,1,0,4495,0,'',1441,0,0,2,0,0,0,1,26,15,2150866350,0),(55,'IDLE','11194116faee30d19b49eed8e122eb5d',0,0,'','Great',99,1,0,0,3,0,2075450,2000100,650100,600000,155910380,514170,0,2,225,0,49,10,0,0,10012,35,146,2,0,0,0,0,1,0,12687,0,'',385,0,0,7,0,0,0,1,26,15,0,0),(56,'Senyen','82e053e001312f7f2fa515a345ea8076',0,0,'','',99,4,0,0,3,0,3307848,3000750,1600275,1500000,122,30453904,0,2,202,10,118,20,0,0,20001,49,59,2,0,0,0,1,1,0,318,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(57,'binz','06f6fa9db3e334055a0c07a4ae4cc3ce',0,0,'','Tester',99,3,0,0,3,0,1936742,3000000,1550225,1500000,29413,353732704,0,2,211,20,51,1,0,0,1000,75,134,2,0,0,0,1,1,0,4543,0,'',98,0,0,0,0,0,0,1,26,15,0,0),(58,'FnL','ce193483cb0d1b7f99b6798937db8803',0,0,'','',5,0,0,0,1,0,342,252,313,223,1613,260,1,1,207,0,52,0,0,0,1000,43,130,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(59,'Yumiko','87fe58a4e0350700a0c7e5fca86dbb29',0,0,'','Tester',99,2,0,0,0,0,699486,19146,277557,4817,73516606,5700,1,1,228,21,114,1,0,0,20001,49,54,2,0,0,0,1,1,0,8635,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(60,'asd','b4c900433a89ca1404eda3a998675e8a',0,0,'','',1,0,0,0,2,0,100,100,50,50,0,100,1,1,207,0,50,0,0,0,1000,41,130,0,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(61,'asdax','9595743c4caa5f83c7f0ee4e3a53f328',0,0,'','',99,1,0,0,3,0,3235315,3000000,1660315,1500000,8720000,10100,0,2,202,0,15,0,0,0,1000,69,134,3,0,0,0,1,1,0,8509,0,'',268,0,0,0,0,0,0,1,26,15,0,0),(62,'coba','64e97025b3028e60811befc0e74f7e6d',0,0,'','',1,0,0,0,1,0,100,100,50,50,0,10100,0,1,207,0,83,0,0,0,1000,72,134,0,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(63,'AKHUN','8211edd0697e68771c4fedfe7bec0cab',0,0,'','Great',99,1,0,0,3,0,8695450,10000000,5100275,5000000,978945371,113223,0,2,209,0,71,0,0,0,10012,56,84,1,0,0,0,1,1,0,12573,0,'',0,0,0,1173741823,0,0,0,1,26,15,0,0),(64,'QiuQiu','72945d6bc6b51d49a048e3a9041fd3c3',0,0,'','Mr',99,2,0,0,3,0,0,10000000,7000465,7000375,28043908,60,0,2,205,0,0,0,0,0,20001,50,54,0,1,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(65,'XiaoChuA','c963574518ec56c4640ff0155509ab6c',0,0,'','Tester',5,0,0,0,3,0,335,245,291,201,15000077,5850,1,1,206,0,80,0,0,0,1000,72,134,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(66,'dRu','664c1998ced429cbab0d3d57063b6b85',0,0,'','Tester',99,1,0,0,3,0,195270,16745,103368,1883,5970854,147461491,0,2,202,26,80,0,0,0,1000,76,138,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(67,'troy','ee64374afc61f4d7adb283d2df7a8d49',0,0,'','',1,0,0,0,0,0,100,100,50,50,0,100,0,1,202,0,3,0,0,0,1000,65,127,1,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(68,'DERKAIZER','0be33b66358da3ec59fb2165dab94aaf',0,0,'','',1,0,0,0,1,0,100,100,50,50,0,100,1,1,208,0,7,0,0,0,1000,76,135,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(69,'Retro','e762249a10d5032ea6102b01296f12fb',0,0,'','',3,0,0,0,3,0,224,179,177,132,874,10100,0,1,202,26,2,26,0,0,1000,126,74,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(70,'itaki','4b213fd782a7ad25f80c504ee21f1bf7',0,0,'','',1,0,0,0,0,0,100,100,50,50,0,100,0,1,205,0,2,0,0,0,1000,65,127,1,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(71,'itupa','9b27d20d727481279170250e575a9595',0,0,'','',1,0,0,0,3,0,100,100,50,50,0,100,1,1,202,0,74,0,0,0,1000,65,127,1,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(72,'Rey','a913be8d7330d6f5913768adda0ee362',0,0,'','Tester',99,4,0,0,0,0,236181,9426,177317,6708,319826243,854719,1,2,229,0,58,3,0,0,20011,0,0,1,0,0,0,1,1,0,4415,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(73,'IDLEE','203ebf1052ddafd83215ae3a2f72bb7b',0,0,'','Great',83,2,0,0,0,0,2866,2866,4019,4019,669622152,10100,0,1,211,0,49,10,0,0,10012,17,121,2,0,0,0,1,1,0,12687,0,'',0,0,0,2,0,0,0,1,26,15,0,0),(74,'IDLEEE','d0adbdc6078a6a1c0a27f824906990c5',0,0,'','Great',82,3,0,0,1,0,1774,1674,5025,4975,598809660,6900,0,2,210,0,49,10,0,0,10012,22,125,2,0,0,0,1,1,0,12557,0,'',0,0,0,73,0,0,0,1,26,15,0,0),(75,'IDLEEEE','676588f71efa8f534ea35f460ec36b4e',0,0,'','',75,4,0,0,2,0,3081,2981,3282,3232,255001728,9000,0,2,204,0,49,10,0,0,1000,74,137,0,0,0,0,1,1,0,12559,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(76,'Logic','fb103814c816a1ed7e5b87467dccb508',0,0,'','',99,3,0,0,0,0,1001210,1000000,2023350,2000300,92096092,33371793,0,2,205,7,51,7,0,0,1000,82,132,2,0,0,0,1,1,0,12575,0,'',1093,0,0,2,0,0,0,1,26,15,0,0),(77,'North','5647e3c092a40372d1a55786026977cd',0,0,'','',84,1,0,0,3,0,7765,5185,2614,1594,755534744,380,0,2,207,0,49,21,0,0,20001,51,53,2,0,0,0,1,1,0,12607,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(78,'Vanessa','9c2eb4a059fe29184f965b940def2c7b',0,0,'','Tester',99,2,0,0,3,0,5150090,5000000,3000090,3000000,7506764,123131333,1,1,206,0,52,0,0,0,2001,51,34,0,4,0,0,1,1,0,12605,98,'',235,0,0,2,0,0,0,1,26,15,0,0),(79,'Tomato','d462fdad775834d9809482b94a63bae3',0,0,'','',1,0,0,0,1,0,100,100,50,50,0,100,1,1,206,0,50,24,0,0,7,9,1,2,0,0,0,1,1,0,12605,0,'',0,0,0,0,0,0,0,1,26,15,0,0),(80,'SitiJenar','50c89d9489eee5a81036ea82722421de',0,0,'','',99,0,0,0,1,0,5000225,5000000,5000225,5000000,148562198,10070,0,2,204,0,8,0,0,0,1000,72,137,0,0,0,0,1,1,0,12607,98,'',0,0,0,2,0,0,0,1,26,15,0,0),(81,'Mahesha','15932f8285e619e1b20341a10b542a41',0,0,'','',99,2,0,0,3,0,5325225,5000000,3100225,3000000,4294967295,10080,0,2,201,0,51,10,0,0,20001,50,65,3,0,0,0,1,1,0,4413,98,'',0,0,0,1173741834,0,0,0,1,26,15,0,0)", "description": "The first column is the table name.", "concepts": ["```\nCREATE TABLE `Character` (\n  `id` int(11) NOT NULL AUTO_INCREMENT", "`name` varchar(1"], "instruction": "```\nSELECT * FROM Character ORDER BY id\n```", "response": "-- Reasoning:\nWe need to select all rows from the Character table, sorted by the id column.\n\n-- Solution:\n```sql\nSELECT * FROM Character ORDER BY id;\n```\n\n-- Explanation:\nThis statement selects all rows from the Character table, sorted by the id column.\n\n-- Tests:\n-- 1. Verify the correct rows are returned\nSELECT * FROM Character ORDER BY id;"}
{"seed": "/* Drops the table named CharacterDeathDropLogs if it exists. */\nDROP TABLE IF EXISTS `CharacterDeathDropLogs`", "description": "Drops the table named CharacterDeathDropLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named CharacterDeathDropLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the table named CharacterDeathDropLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS CharacterDeathDropLogs;\n```\n\n-- Explanation:\nThis DROP statement removes the table named CharacterDeathDropLogs if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('CharacterDeathDropLogs');"}
{"seed": "/* Creates a table named CharacterDeathDropLogs with 8 columns: CddId (integer primary key), CddDate (datetime), CddChaId (integer), CddMapId (integer), CddX (integer), CddY (integer), CddItmId (integer), and CddAmount (integer). */\nCREATE TABLE `CharacterDeathDropLogs` (\n  `CddId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `CddDate` datetime DEFAULT NULL,\n  `CddChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `CddMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `CddX` int(10) unsigned NOT NULL DEFAULT '0',\n  `CddY` int(10) unsigned NOT NULL DEFAULT '0',\n  `CddItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `CddAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`CddId`),\n  KEY `CddChaId` (`CddChaId`),\n  KEY `CddMapId` (`CddMapId`),\n  KEY `CddItmId` (`CddItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=latin1", "description": "Creates a table named CharacterDeathDropLogs with 8 columns: CddId (integer primary key), CddDate (datetime), CddChaId (integer), CddMapId (integer), CddX (integer), CddY (integer), CddItmId (integer), and CddAmount (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named CharacterDeathDropLogs with 8 columns: CddId (integer primary key), CddDate (datetime), CddChaId (integer), CddMapId (integer), CddX (integer), CddY (integer), CddItmId (integer), and CddAmount (integer).", "response": "-- Reasoning:\nWe need a new table named CharacterDeathDropLogs. It should have an integer primary key so that each entry has a unique identifier, and a datetime column to store the date and time of the death. It should also have an integer column for the character ID, map ID, X and Y coordinates, and item ID. Finally, it should have an integer column for the amount of the item.\n\n-- Solution:\n```sql\nCREATE TABLE CharacterDeathDropLogs (\n  CddId INT PRIMARY KEY,\n  CddDate DATETIME,\n  CddChaId INT,\n  CddMapId INT,\n  CddX INT,\n  CddY INT,\n  CddItmId INT,\n  CddAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the CharacterDeathDropLogs table with eight columns:\n  \u2022 CddId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 CddDate: datetime\n  \u2022 CddChaId: integer\n  \u2022 CddMapId: integer\n  \u2022 CddX: integer\n  \u2022 CddY: integer\n  \u2022 CddItmId: integer\n  \u2022 CddAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('CharacterDeathDropLogs');"}
{"seed": "/* Inserts 50 rows into the CharacterDeathDropLogs table. */\nINSERT INTO `CharacterDeathDropLogs` VALUES (1,'2015-09-19 12:03:50',2,10012,59,85,18028,1),(2,'2015-09-19 12:03:52',2,10012,60,85,18028,1),(3,'2015-09-19 12:03:54',2,10012,60,85,18028,1),(4,'2015-09-19 12:03:54',2,10012,59,85,18028,1),(5,'2015-09-19 12:03:56',2,10012,60,85,18028,1),(6,'2015-09-19 12:03:57',2,10012,59,85,18028,1),(7,'2015-09-19 12:04:20',2,10012,63,84,18028,2),(8,'2015-09-19 12:04:21',2,10012,64,85,18028,2),(9,'2015-09-19 12:04:23',2,10012,60,85,18028,2),(10,'2015-09-19 12:05:18',2,10012,60,85,18028,1),(11,'2015-09-19 12:05:20',2,10012,63,83,18028,1),(12,'2015-09-19 12:05:21',2,10012,59,85,18028,1),(13,'2015-09-19 12:05:21',2,10012,60,85,18028,1),(14,'2015-09-19 12:05:22',2,10012,63,85,18028,1),(15,'2015-09-19 12:05:23',2,10012,60,85,18028,1),(16,'2015-09-19 12:05:23',2,10012,59,85,18028,1),(17,'2015-09-19 12:05:24',2,10012,64,85,18028,1),(18,'2015-09-19 12:05:24',2,10012,60,85,18028,1),(19,'2015-09-19 12:05:24',2,10012,59,85,18028,1),(20,'2015-09-19 12:06:15',2,10012,61,85,18028,1),(21,'2015-09-19 12:06:16',2,10012,61,85,18028,1),(22,'2015-09-19 12:06:17',2,10012,65,83,18028,1),(23,'2015-09-19 12:06:17',2,10012,65,83,18028,1),(24,'2015-09-19 12:06:18',2,10012,60,85,18028,1),(25,'2015-09-19 12:06:18',2,10012,61,85,18028,1),(26,'2015-09-19 12:06:20',2,10012,65,83,18028,1),(27,'2015-09-19 12:06:20',2,10012,60,85,18028,1),(28,'2015-09-19 12:06:20',2,10012,61,85,18028,1),(29,'2015-09-19 12:06:31',2,10012,61,85,18028,1),(30,'2015-09-19 12:07:12',2,10012,61,85,18028,1),(31,'2015-09-19 12:07:12',2,10012,58,87,18028,1),(32,'2015-09-19 12:10:24',2,10012,58,89,18028,1),(33,'2015-09-19 12:10:29',2,10012,61,85,18028,1),(34,'2015-09-19 12:11:24',2,10012,60,85,18028,1),(35,'2015-09-19 12:11:29',2,10012,61,85,18028,1),(36,'2015-09-19 12:11:35',2,10012,58,85,18028,1),(37,'2015-09-19 12:11:36',2,10012,61,85,18028,1),(38,'2015-09-19 12:11:36',2,10012,57,88,18028,1),(39,'2015-09-19 12:11:51',2,10012,61,85,18028,1),(40,'2015-09-19 12:11:51',2,10012,57,84,18028,1),(41,'2015-09-19 12:11:51',2,10012,58,82,18028,1),(42,'2015-09-19 12:12:38',2,10012,61,85,18028,1),(43,'2015-09-19 12:12:38',2,10012,59,84,18028,1),(44,'2015-09-19 12:12:39',2,10012,58,82,18028,1),(45,'2015-09-19 12:12:39',2,10012,61,85,18028,1),(46,'2015-09-19 12:12:39',2,10012,59,84,18028,1),(47,'2015-09-19 12:12:40',2,10012,59,84,18028,1),(48,'2015-09-19 12:12:40',2,10012,58,82,18028,1),(49,'2015-09-19 12:17:59',18,10012,62,85,18028,1),(50,'2015-09-19 14:01:51',2,6066,24,25,18028,1),(51,'2015-09-20 03:19:53',18,10012,21,126,18028,1),(52,'2015-09-20 04:02:30',73,10012,22,125,130,1),(53,'2015-09-20 04:29:51',18,10012,22,125,18028,1)", "description": "Inserts 50 rows into the CharacterDeathDropLogs table.", "concepts": ["INSERT INTO", "VALUES", "`CharacterDeathDropLogs`", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "CTE"], "instruction": "Write a SQL query to insert 50 rows into the CharacterDeathDropLogs table.", "response": "-- Reasoning:\nWe need to insert 50 rows into the CharacterDeathDropLogs table.\n\n-- Solution:\n```sql\nINSERT INTO CharacterDeathDropLogs (\n  character_id,\n  item_id,\n  item_name,\n  item_quantity,\n  item_drop_time\n)\nSELECT\n  character_id,\n  item_id,\n  item_name,\n  item_quantity,\n  item_drop_time\nFROM CharacterDeathDropLogs\nLIMIT 50;\n```\n\n-- Explanation:\nThis INSERT statement inserts 50 rows from the CharacterDeathDropLogs table into itself.\n\n-- Tests:\n-- 1. Verify 50 rows were inserted\nSELECT COUNT(*) FROM CharacterDeathDropLogs;"}
{"seed": "/* Drops the table named ClanBanks if it exists. */\nDROP TABLE IF EXISTS `ClanBanks`", "description": "Drops the table named ClanBanks if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named ClanBanks if it exists.", "response": "-- Reasoning:\nWe need to delete the ClanBanks table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS ClanBanks;\n```\n\n-- Explanation:\nThis statement deletes the ClanBanks table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('ClanBanks');"}
{"seed": "/* Creates a table named ClanBanks with five columns: CbkId (integer primary key), CbkClnId (integer), CbkItmId (integer), CbkAmount (integer), and CbkPosition (integer). */\nCREATE TABLE `ClanBanks` (\n  `CbkId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `CbkClnId` int(10) unsigned NOT NULL DEFAULT '0',\n  `CbkItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `CbkAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `CbkPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`CbkId`),\n  KEY `CbkClnId` (`CbkClnId`),\n  KEY `CbkItmId` (`CbkItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named ClanBanks with five columns: CbkId (integer primary key), CbkClnId (integer), CbkItmId (integer), CbkAmount (integer), and CbkPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "ENGINE", "CHARSET", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named ClanBanks with five columns: CbkId (integer primary key), CbkClnId (integer), CbkItmId (integer), CbkAmount (integer), and CbkPosition (integer).", "response": "-- Reasoning:\nWe need a new table named ClanBanks. It should have an integer primary key so that each ClanBank has a unique identifier, and a CbkClnId column to store the ClanBank\u2019s Clan ID as integer.\n\n-- Solution:\n```sql\nCREATE TABLE ClanBanks (\n  CbkId INT PRIMARY KEY,\n  CbkClnId INT,\n  CbkItmId INT,\n  CbkAmount INT,\n  CbkPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the ClanBanks table with five columns:\n  \u2022 CbkId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 CbkClnId: integer\n  \u2022 CbkItmId: integer\n  \u2022 CbkAmount: integer\n  \u2022 CbkPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('ClanBanks');"}
{"seed": "/* Drops the table named ClanLogs if it exists. */\nDROP TABLE IF EXISTS `ClanLogs`", "description": "Drops the table named ClanLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named ClanLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the ClanLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS ClanLogs;\n```\n\n-- Explanation:\nThis statement deletes the ClanLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('ClanLogs');"}
{"seed": "/* Creates a table named ClanLogs with five columns: ClgId (integer primary key), ClgDate (datetime), ClgChaId (integer), ClgClnId (integer), and ClgMessage (varchar). */\nCREATE TABLE `ClanLogs` (\n  `ClgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `ClgDate` datetime DEFAULT NULL,\n  `ClgChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ClgClnId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ClgMessage` varchar(255) NOT NULL DEFAULT '',\n  PRIMARY KEY (`ClgId`),\n  KEY `ClgChaId` (`ClgChaId`),\n  KEY `ClgClnId` (`ClgClnId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named ClanLogs with five columns: ClgId (integer primary key), ClgDate (datetime), ClgChaId (integer), ClgClnId (integer), and ClgMessage (varchar).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named ClanLogs with five columns: ClgId (integer primary key), ClgDate (datetime), ClgChaId (integer), ClgClnId (integer), and ClgMessage (varchar).", "response": "-- Reasoning:\nWe need a new table named ClanLogs. It should have an integer primary key so that each log has a unique identifier, a datetime column to store the log\u2019s date and time, an integer column to store the character\u2019s ID, an integer column to store the clan\u2019s ID, and a varchar column to store the log\u2019s message.\n\n-- Solution:\n```sql\nCREATE TABLE ClanLogs (\n  ClgId INT PRIMARY KEY,\n  ClgDate DATETIME,\n  ClgChaId INT,\n  ClgClnId INT,\n  ClgMessage VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the ClanLogs table with five columns:\n  \u2022 ClgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ClgDate: datetime\n  \u2022 ClgChaId: integer\n  \u2022 ClgClnId: integer\n  \u2022 ClgMessage: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('ClanLogs');"}
{"seed": "/* Drops the table named Clans if it exists. */\nDROP TABLE IF EXISTS `Clans`", "description": "Drops the table named Clans if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Clans if it exists.", "response": "-- Reasoning:\nWe need to delete the Clans table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Clans;\n```\n\n-- Explanation:\nThis statement deletes the Clans table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Clans');"}
{"seed": "/* Creates a table named Clans with three columns: ClnId (integer primary key), ClnName (varchar) and ClnBankSlots (integer). */\nCREATE TABLE `Clans` (\n  `ClnId` int(10) unsigned NOT NULL,\n  `ClnName` varchar(64) NOT NULL DEFAULT '',\n  `ClnBankSlots` int(10) unsigned NOT NULL DEFAULT '50',\n  PRIMARY KEY (`ClnId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Clans with three columns: ClnId (integer primary key), ClnName (varchar) and ClnBankSlots (integer).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "INT", "VARCHAR", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Clans with three columns: ClnId (integer primary key), ClnName (varchar) and ClnBankSlots (integer).", "response": "-- Reasoning:\nWe need a new table named Clans. It should have an integer primary key so that each clan has a unique identifier, and a name column to store the clan\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Clans (\n  ClnId INT PRIMARY KEY,\n  ClnName VARCHAR(255),\n  ClnBankSlots INT\n);\n```\n\n-- Explanation:\nThis statement defines the Clans table with three columns:\n  \u2022 ClnId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ClnName: variable\u2010length string up to 255 characters\n  \u2022 ClnBankSlots: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Clans');"}
{"seed": "/* Drops the table if it exists. */\nDROP TABLE IF EXISTS `Createdb`", "description": "Drops the table if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table if it exists.", "response": "-- Reasoning:\nWe need to drop the table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS products;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('products');"}
{"seed": "/* Creates a table named Createdb with 30 columns: id (integer primary key), item_created (integer), item_count (integer), success_rate (integer), item_failed (integer), item_failcount (integer), item_failrate (integer), item1 (integer), item2 (integer), item3 (integer), item4 (integer), item5 (integer), amount1 (integer), amount2 (integer), amount3 (integer), amount4 (integer */\nCREATE TABLE `Createdb` (\n  `id` int(10) NOT NULL,\n  `item_created` int(10) NOT NULL,\n  `item_count` int(10) NOT NULL,\n  `success_rate` int(10) NOT NULL,\n  `item_failed` int(10) NOT NULL,\n  `item_failcount` int(10) NOT NULL,\n  `item_failrate` int(10) NOT NULL,\n  `item1` int(10) NOT NULL,\n  `item2` int(10) NOT NULL,\n  `item3` int(10) NOT NULL,\n  `item4` int(10) NOT NULL,\n  `item5` int(10) NOT NULL,\n  `amount1` int(10) NOT NULL,\n  `amount2` int(10) NOT NULL,\n  `amount3` int(10) NOT NULL,\n  `amount4` int(10) NOT NULL,\n  `amount5` int(10) NOT NULL,\n  `item6` int(10) NOT NULL,\n  `item7` int(10) NOT NULL,\n  `item8` int(10) NOT NULL,\n  `item9` int(10) NOT NULL,\n  `item10` int(10) NOT NULL,\n  `amount6` int(10) NOT NULL,\n  `amount7` int(10) NOT NULL,\n  `amount8` int(10) NOT NULL,\n  `amount9` int(10) NOT NULL,\n  `amount10` int(10) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named Createdb with 30 columns: id (integer primary key), item_created (integer), item_count (integer), success_rate (integer), item_failed (integer), item_failcount (integer), item_failrate (integer), item1 (integer), item2 (integer), item3 (integer), item4 (integer), item5 (integer), amount1 (integer), amount2 (integer), amount3 (integer), amount4 (integer", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "NOT", "NULL", "DEFAULT", "ENGINE", "CHARSET", "AUTO_INCREMENT", "FOREIGN KEY", "CTE"], "instruction": "Write a SQL query to create a table named Createdb with 30 columns: id (integer primary key), item_created (integer), item_count (integer), success_rate (integer), item_failed (integer), item_failcount (integer), item_failrate (integer), item1 (integer), item2 (integer), item3 (integer), item4 (integer), item5 (integer), amount1 (integer), amount2 (integer), amount3 (integer), amount4 (integer), amount5 (integer), item6 (integer), item7 (integer), item8 (integer), item9 (integer), item10 (integer), amount6 (integer), amount7 (integer), amount8 (", "response": "-- Reasoning:\nWe need a new table named Createdb. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Createdb (\n  id INT PRIMARY KEY,\n  item_created INT,\n  item_count INT,\n  success_rate INT,\n  item_failed INT,\n  item_failcount INT,\n  item_failrate INT,\n  item1 INT,\n  item2 INT,\n  item3 INT,\n  item4 INT,\n  item5 INT,\n  amount1 INT,\n  amount2 INT,\n  amount3 INT,\n  amount4 INT,\n  amount5 INT,\n  item6 INT,\n  item7 INT,\n  item8 INT,\n  item9 INT,\n  item10 INT,\n  amount6 INT,\n  amount7 INT,\n  amount8 INT\n);\n```\n\n-- Explanation:\nThis statement defines the Createdb table with 30 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Createdb');"}
{"seed": "/* Creates a table named Createdb with 25 columns. */\nINSERT INTO `Createdb` VALUES (1,5001,1,100000,0,0,0,3001,3001,3001,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0),(2,18098,1,100000,0,0,0,18096,18097,18095,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0),(3,18087,1,100000,0,0,0,18082,18083,18084,18085,18086,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),(4,18104,1,100000,18077,1,0,18081,18077,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0),(5,18105,1,100000,18105,1,0,18104,18111,0,0,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0),(6,18106,1,100000,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(7,6001,1,100000,0,0,0,18077,18076,18101,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0),(8,6002,1,100000,0,0,0,18102,18101,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0),(9,6009,1,100000,0,0,0,6001,6002,18081,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0),(10,6004,1,100000,6001,0,0,6009,18104,18087,18081,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),(11,6005,1,100000,6004,0,0,6004,18105,18098,18087,18080,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),(12,6006,1,100000,6005,0,0,6005,18098,18087,18105,18080,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),(13,6007,1,100000,6006,0,0,6006,18098,18087,18105,18106,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)", "description": "Creates a table named Createdb with 25 columns.", "concepts": ["INSERT INTO", "VALUES", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "FOREIGN KEY", "PRIMARY KEY", "UNIQUE", "REFERENCES", "ON DELETE"], "instruction": "Write a SQL query to create a table named Createdb with 25 columns.", "response": "-- Reasoning:\nWe need a new table named Createdb with 25 columns.\n\n-- Solution:\n```sql\nCREATE TABLE Createdb (\n  col1 INT,\n  col2 INT,\n  col3 INT,\n  col4 INT,\n  col5 INT,\n  col6 INT,\n  col7 INT,\n  col8 INT,\n  col9 INT,\n  col10 INT,\n  col11 INT,\n  col12 INT,\n  col13 INT,\n  col14 INT,\n  col15 INT,\n  col16 INT,\n  col17 INT,\n  col18 INT,\n  col19 INT,\n  col20 INT,\n  col21 INT,\n  col22 INT,\n  col23 INT,\n  col24 INT,\n  col25 INT\n);\n```\n\n-- Explanation:\nThis statement creates the Createdb table with 25 columns.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Createdb');"}
{"seed": "/* Drops the table named DropLogs if it exists. */\nDROP TABLE IF EXISTS `DropLogs`", "description": "Drops the table named DropLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named DropLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the table named DropLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS DropLogs;\n```\n\n-- Explanation:\nThis statement drops the table named DropLogs if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('DropLogs');"}
{"seed": "/* Creates a table named DropLogs with 9 columns: DrpId (integer primary key), DrpDate (datetime), DrpChaId (integer), DrpMapId (integer), DrpX (integer), DrpY (integer), DrpItmId (integer), and DrpAmount (integer). */\nCREATE TABLE `DropLogs` (\n  `DrpId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `DrpDate` datetime DEFAULT NULL,\n  `DrpChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `DrpMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `DrpX` int(10) unsigned NOT NULL DEFAULT '0',\n  `DrpY` int(10) unsigned NOT NULL DEFAULT '0',\n  `DrpItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `DrpAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`DrpId`),\n  KEY `DrpChaId` (`DrpChaId`),\n  KEY `DrpMapId` (`DrpMapId`),\n  KEY `DrpItmId` (`DrpItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=244 DEFAULT CHARSET=latin1", "description": "Creates a table named DropLogs with 9 columns: DrpId (integer primary key), DrpDate (datetime), DrpChaId (integer), DrpMapId (integer), DrpX (integer), DrpY (integer), DrpItmId (integer), and DrpAmount (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named DropLogs with 9 columns: DrpId (integer primary key), DrpDate (datetime), DrpChaId (integer), DrpMapId (integer), DrpX (integer), DrpY (integer), DrpItmId (integer), and DrpAmount (integer).", "response": "-- Reasoning:\nWe need a new table named DropLogs. It should have an integer primary key so that each drop has a unique identifier, and a datetime column to store the drop\u2019s date and time. It should also have columns for the dropper\u2019s character ID, map ID, X and Y coordinates, item ID, and amount.\n\n-- Solution:\n```sql\nCREATE TABLE DropLogs (\n  DrpId INT PRIMARY KEY,\n  DrpDate DATETIME,\n  DrpChaId INT,\n  DrpMapId INT,\n  DrpX INT,\n  DrpY INT,\n  DrpItmId INT,\n  DrpAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the DropLogs table with eight columns:\n  \u2022 DrpId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 DrpDate: datetime\n  \u2022 DrpChaId: integer\n  \u2022 DrpMapId: integer\n  \u2022 DrpX: integer\n  \u2022 DrpY: integer\n  \u2022 DrpItmId: integer\n  \u2022 DrpAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('DropLogs');"}
{"seed": "/* Drops the table named Enchantments if it exists. */\nDROP TABLE IF EXISTS `Enchantments`", "description": "Drops the table named Enchantments if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Enchantments if it exists.", "response": "-- Reasoning:\nWe need to drop the Enchantments table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Enchantments;\n```\n\n-- Explanation:\nThis DROP statement removes the Enchantments table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Enchantments');"}
{"seed": "/* Creates a table named Enchantments with 20 columns. */\nCREATE TABLE `Enchantments` (\n  `EncId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `EncName` varchar(64) NOT NULL DEFAULT '',\n  `EncMark` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncClass` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncVita` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncMana` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncMight` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncGrace` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncWill` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncWisdom` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncCon` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncProtection` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncArmor` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncHit` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncDam` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncMinimumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncMaximumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `EncApplyto` int(10) unsigned NOT NULL DEFAULT '31' COMMENT '0 = applies to all equip\\n1 = armor\\n2 = weap\\n4 = helm\\n8 = gloves\\n16 = subaccess',\n  PRIMARY KEY (`EncId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Enchantments with 20 columns.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "COMMENT", "ENGINE", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Enchantments with 20 columns.", "response": "-- Reasoning:\nWe need a new table named Enchantments. It should have 20 columns, each of which is a VARCHAR(255).\n\n-- Solution:\n```sql\nCREATE TABLE Enchantments (\n  enchantment_id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description VARCHAR(255),\n  type VARCHAR(255),\n  level VARCHAR(255),\n  rarity VARCHAR(255),\n  price VARCHAR(255),\n  sell_price VARCHAR(255),\n  buy_price VARCHAR(255),\n  sell_quantity VARCHAR(255),\n  buy_quantity VARCHAR(255),\n  sell_limit VARCHAR(255),\n  buy_limit VARCHAR(255),\n  sell_time VARCHAR(255),\n  buy_time VARCHAR(255),\n  sell_delay VARCHAR(255),\n  buy_delay VARCHAR(255),\n  sell_delay_variance VARCHAR(255),\n  buy_delay_variance VARCHAR(255),\n  sell_delay_min VARCHAR(255),\n  buy_delay_min VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the Enchantments table with 20 columns:\n  \u2022 enchantment_id: integer, marked PRIMARY KEY so it cannot be null and"}
{"seed": "/* Drops the table named EquipLogs if it exists. */\nDROP TABLE IF EXISTS `EquipLogs`", "description": "Drops the table named EquipLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named EquipLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the EquipLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS EquipLogs;\n```\n\n-- Explanation:\nThis statement deletes the EquipLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('EquipLogs');"}
{"seed": "/* Creates a table named EquipLogs with 7 columns: ElgId (integer primary key), ElgDate (datetime), ElgChaId (integer), ElgMapId (integer), ElgX (integer), ElgY (integer), and ElgItmId (integer). */\nCREATE TABLE `EquipLogs` (\n  `ElgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `ElgDate` datetime DEFAULT NULL,\n  `ElgChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ElgMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ElgX` int(10) unsigned NOT NULL DEFAULT '0',\n  `ElgY` int(10) unsigned NOT NULL DEFAULT '0',\n  `ElgItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`ElgId`),\n  KEY `ElgChaId` (`ElgChaId`),\n  KEY `ElgMapId` (`ElgMapId`),\n  KEY `ElgItmId` (`ElgItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=214 DEFAULT CHARSET=latin1", "description": "Creates a table named EquipLogs with 7 columns: ElgId (integer primary key), ElgDate (datetime), ElgChaId (integer), ElgMapId (integer), ElgX (integer), ElgY (integer), and ElgItmId (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named EquipLogs with 7 columns: ElgId (integer primary key), ElgDate (datetime), ElgChaId (integer), ElgMapId (integer), ElgX (integer), ElgY (integer), and ElgItmId (integer).", "response": "-- Reasoning:\nWe need a new table named EquipLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the log\u2019s date and time. It should also have columns for the character, map, and item identifiers.\n\n-- Solution:\n```sql\nCREATE TABLE EquipLogs (\n  ElgId INT PRIMARY KEY,\n  ElgDate DATETIME,\n  ElgChaId INT,\n  ElgMapId INT,\n  ElgX INT,\n  ElgY INT,\n  ElgItmId INT\n);\n```\n\n-- Explanation:\nThis statement defines the EquipLogs table with seven columns:\n  \u2022 ElgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ElgDate: datetime\n  \u2022 ElgChaId: integer\n  \u2022 ElgMapId: integer\n  \u2022 ElgX: integer\n  \u2022 ElgY: integer\n  \u2022 ElgItmId: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('EquipLogs');"}
{"seed": "/* Creates a table named Equipment with 10 columns: EqpId (integer primary key), EqpChaId (integer), EqpItmId (integer), EqpDurability (integer), EqpChaIdOwner (integer), EqpEngrave (varchar), EqpTimer (integer), EqpSlot (integer). */\nCREATE TABLE `Equipment` (\n  `EqpId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `EqpChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `EqpItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `EqpDurability` int(10) unsigned NOT NULL DEFAULT '0',\n  `EqpChaIdOwner` int(10) unsigned NOT NULL DEFAULT '0',\n  `EqpEngrave` varchar(64) NOT NULL DEFAULT '',\n  `EqpTimer` int(10) unsigned NOT NULL DEFAULT '0',\n  `EqpSlot` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`EqpId`),\n  KEY `EqpChaId` (`EqpChaId`) USING BTREE,\n  KEY `EqpItmId` (`EqpItmId`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=607 DEFAULT CHARSET=latin1", "description": "Creates a table named Equipment with 10 columns: EqpId (integer primary key), EqpChaId (integer), EqpItmId (integer), EqpDurability (integer), EqpChaIdOwner (integer), EqpEngrave (varchar), EqpTimer (integer), EqpSlot (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Equipment with 10 columns: EqpId (integer primary key), EqpChaId (integer), EqpItmId (integer), EqpDurability (integer), EqpChaIdOwner (integer), EqpEngrave (varchar), EqpTimer (integer), EqpSlot (integer).", "response": "-- Reasoning:\nWe need a new table named Equipment. It should have an integer primary key so that each equipment has a unique identifier, and a name column to store the equipment\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Equipment (\n  EqpId INT PRIMARY KEY,\n  EqpChaId INT,\n  EqpItmId INT,\n  EqpDurability INT,\n  EqpChaIdOwner INT,\n  EqpEngrave VARCHAR(255),\n  EqpTimer INT,\n  EqpSlot INT\n);\n```\n\n-- Explanation:\nThis statement defines the Equipment table with eight columns:\n  \u2022 EqpId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 EqpChaId: integer\n  \u2022 EqpItmId: integer\n  \u2022 EqpDurability: integer\n  \u2022 EqpChaIdOwner: integer\n  \u2022 EqpEngrave: variable\u2010length string up to 255 characters\n  \u2022 EqpTimer: integer\n  \u2022 EqpSlot: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Equipment');"}
{"seed": "/* Creates a table named users with the following columns: id (integer primary key), name (varchar(100)), active (boolean). */\nINSERT INTO `Equipment` VALUES (83,3,3001,9978,0,'',0,0),(84,3,4080,9988,0,'',0,1),(86,11,13009,0,0,'',0,10),(96,5,3052,9961,0,'',0,0),(97,5,5001,9471,0,'',0,2),(98,5,4097,9460,0,'',0,1),(99,5,6008,9465,0,'',0,3),(100,5,7032,9495,0,'',0,4),(101,5,7032,9504,0,'',0,5),(108,5,9004,9841,0,'',0,6),(109,5,9004,9824,0,'',0,7),(111,4,3001,9977,0,'',0,0),(112,4,4080,9978,0,'',0,1),(115,39,4048,10000,0,'',0,1),(117,39,6008,9999,0,'',0,3),(118,39,9013,9999,0,'',0,6),(119,39,9013,9999,0,'',0,7),(120,39,7024,9999,0,'',0,4),(121,39,7024,9999,0,'',0,5),(152,54,4081,9979,0,'',0,1),(163,55,13009,0,0,'',0,10),(174,10,3095,9998,0,'',0,0),(175,10,35062,10000,0,'',0,2),(176,10,4097,9933,0,'',0,1),(177,10,6008,9933,0,'',0,3),(178,10,7008,9943,0,'',0,4),(179,10,7008,9943,0,'',0,5),(180,10,9004,9950,0,'',0,6),(181,10,9004,9938,0,'',0,7),(183,57,4047,9993,0,'',0,1),(184,57,6008,9774,0,'',0,3),(185,57,7024,9774,0,'',0,4),(186,57,7024,9758,0,'',0,5),(187,57,9004,9821,0,'',0,6),(190,57,9004,9799,0,'',0,7),(194,53,3033,9543,0,'',0,0),(202,53,13009,0,0,'',0,10),(203,58,3001,9979,0,'',0,0),(204,58,4081,9987,0,'',0,1),(205,58,5001,10000,0,'',0,2),(224,54,6008,9806,0,'',0,3),(225,54,7024,9838,0,'',0,4),(226,54,7056,9788,0,'',0,5),(227,54,9013,9803,0,'',0,6),(228,54,9016,9743,0,'',0,7),(234,4,13009,0,0,'',0,10),(257,57,10004,10000,0,'',0,0),(273,59,9002,7291,0,'',0,7),(278,59,7016,9510,0,'',0,4),(279,59,7016,9493,0,'',0,5),(280,59,9003,7243,0,'',0,6),(292,62,3001,10000,0,'',0,0),(293,62,4080,9994,0,'',0,1),(303,63,4099,8928,0,'',0,1),(305,63,6008,8894,0,'',0,3),(306,63,7008,8927,0,'',0,4),(307,63,7008,8961,0,'',0,5),(308,63,9004,8894,0,'',0,6),(309,63,9004,9584,0,'',0,7),(320,64,3053,9990,0,'',0,0),(328,64,13002,0,0,'',0,10),(329,56,3033,9239,0,'',0,0),(330,56,4099,9204,0,'',0,1),(332,56,6008,9178,0,'',0,3),(333,56,7008,8785,0,'',0,4),(334,56,7008,8816,0,'',0,5),(335,56,9004,9167,0,'',0,6),(336,56,9004,9135,0,'',0,7),(338,64,7016,9818,0,'',0,4),(339,64,7016,9816,0,'',0,5),(340,64,9004,9811,0,'',0,6),(341,64,9004,9822,0,'',0,7),(344,59,12241,10000,0,'',0,9),(351,53,4099,9440,0,'',0,1),(355,65,3001,9937,0,'',0,0),(356,65,4081,9985,0,'',0,1),(358,59,3087,9962,0,'',0,0),(359,59,5001,8863,0,'',0,2),(360,59,6008,7379,0,'',0,3),(363,18,4080,8558,0,'',0,1),(364,61,3054,9973,0,'',0,0),(365,61,4099,9869,0,'',0,1),(366,61,6008,9859,0,'',0,3),(367,61,7007,9892,0,'',0,4),(368,61,7007,9901,0,'',0,5),(369,61,9004,9903,0,'',0,6),(370,61,9004,9892,0,'',0,7),(377,69,3001,9983,0,'',0,0),(378,69,4080,9980,0,'',0,1),(380,59,4099,9743,0,'',0,1),(385,53,6008,9947,0,'',0,3),(387,37,3030,9995,0,'',0,0),(388,37,4080,9950,0,'',0,1),(389,37,6008,9834,0,'',0,3),(390,37,7016,9843,0,'',0,4),(391,37,7016,9847,0,'',0,5),(392,37,9003,9845,0,'',0,6),(393,37,9002,9894,0,'',0,7),(394,37,13002,0,0,'',0,10),(395,37,16351,10000,0,'',0,13),(407,72,4097,9997,0,'',0,1),(430,66,4099,9992,0,'',0,1),(432,66,10004,10000,0,'',0,0),(433,66,5004,10000,0,'',0,2),(434,72,6008,9996,0,'',0,3),(435,72,7032,9531,0,'',0,4),(436,72,7032,9533,0,'',0,5),(437,66,6008,10000,0,'',0,3),(438,66,9004,9996,0,'',0,6),(439,66,9004,9994,0,'',0,7),(447,34,3076,10000,0,'',0,0),(448,34,4047,9823,0,'',0,1),(449,34,6008,9755,0,'',0,3),(450,34,7016,9763,0,'',0,4),(451,34,7016,9761,0,'',0,5),(452,34,9004,9759,0,'',0,6),(453,34,9004,9752,0,'',0,7),(454,34,13009,0,0,'',0,10),(455,74,3001,10000,0,'',0,0),(456,74,4080,9957,0,'',0,1),(457,74,15001,9963,0,'',0,12),(458,74,5001,9960,0,'',0,2),(459,75,3001,9998,0,'',0,0),(460,75,4080,9991,0,'',0,1),(461,75,15001,9994,0,'',0,12),(464,21,3048,10000,0,'',0,0),(465,21,4057,10000,0,'',0,1),(466,53,7053,9331,0,'',0,4),(467,53,7053,9310,0,'',0,5),(468,53,5010,9319,0,'',0,2),(469,66,7008,10000,0,'',0,4),(470,66,7008,10000,0,'',0,5),(471,72,5003,9988,0,'',0,2),(472,72,50006,10000,0,'',0,0),(473,66,13009,0,0,'',0,10),(474,39,50007,10000,0,'',0,0),(475,39,5001,9999,0,'',0,2),(476,56,13009,0,0,'',0,10),(485,77,3047,9996,0,'',0,0),(486,77,4054,9995,0,'',0,1),(502,2,13009,0,0,'',0,10),(510,76,7023,9824,0,'',0,4),(511,76,7023,9830,0,'',0,5),(512,76,9005,9833,0,'',0,6),(513,76,9005,9894,0,'',0,7),(514,76,13009,0,0,'',0,10),(515,15,3001,10000,0,'',0,0),(516,15,4081,10000,0,'',0,1),(517,15,13009,0,0,'',0,10),(518,29,5001,8416,0,'',0,2),(519,29,13009,0,0,'',0,10),(528,24,4080,8977,0,'',0,1),(530,24,6008,8211,0,'',0,3),(531,24,7032,5634,0,'',0,4),(532,24,7032,5619,0,'',0,5),(534,24,9013,9970,0,'',0,7),(535,2,4080,7372,0,'',0,1),(542,76,3006,10000,0,'',0,0),(543,76,4067,9908,0,'',0,1),(544,76,5001,9863,0,'',0,2),(546,78,3033,9913,0,'',0,0),(547,78,4081,9872,0,'',0,1),(549,78,5001,9893,0,'',0,2),(551,24,5013,9952,0,'',0,2),(558,80,4047,9978,0,'',0,1),(560,80,10006,10000,0,'',0,0),(561,80,13009,0,0,'',0,10),(564,81,3033,9229,0,'',0,0),(565,81,4099,9909,0,'',0,1),(568,81,6008,9808,0,'',0,3),(575,2,5011,8800,0,'',0,2),(578,63,3001,9854,0,'',0,0),(579,24,9004,8246,0,'',0,6),(580,2,6008,9929,0,'',0,3),(581,54,5013,9979,0,'',0,2),(582,73,3001,9934,0,'',0,0),(583,54,13009,0,0,'',0,10),(585,54,3059,9995,0,'',0,0),(592,55,4080,9996,0,'',0,1),(593,55,6008,10000,0,'',0,3),(594,55,7008,9995,0,'',0,4),(595,55,7008,9997,0,'',0,5),(596,7,30015,10000,0,'',0,0),(597,7,4099,9979,0,'',0,1),(599,55,5010,10000,0,'',0,2),(600,55,15001,9606,0,'',0,12),(601,55,30019,9881,0,'',0,0),(602,55,9004,9168,0,'',0,6),(603,55,9004,9192,0,'',0,7),(604,24,30009,9942,0,'',0,0),(605,2,30009,9457,0,'',0,0),(606,18,3001,9794,0,'',0,0)", "description": "Creates a table named users with the following columns: id (integer primary key), name (varchar(100)), active (boolean).", "concepts": ["```\nCREATE TABLE", "INSERT INTO", "VALUES", "WHERE", "GROUP BY", "HAVING", "ORDER BY", "UNION", "CTE", "window functions"], "instruction": "Write a SQL query to list the total number of unique customers in each country. For countries with no customers, you should list the country, but set the total_customers to 0.", "response": "-- Reasoning:\nWe need to count the number of unique customers in each country.\n\n-- Solution:\n```sql\nSELECT country, COUNT(DISTINCT customer_id) AS total_customers\nFROM customers\nGROUP BY country;\n```\n\n-- Explanation:\nThis query uses the GROUP BY clause to group the results by country. It then uses the COUNT() function to count the number of unique customers in each country.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT country, COUNT(DISTINCT customer_id) AS total_customers\nFROM customers\nGROUP BY country;"}
{"seed": "/* Drops the table named ExchangeLogs if it exists. */\nDROP TABLE IF EXISTS `ExchangeLogs`", "description": "Drops the table named ExchangeLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named ExchangeLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the table named ExchangeLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS ExchangeLogs;\n```\n\n-- Explanation:\nThis statement deletes the table named ExchangeLogs if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('ExchangeLogs');"}
{"seed": "/* Creates a table named ExchangeLogs with 13 columns: ExgId (integer primary key), ExgDate (datetime), ExgChaId (integer), ExgMapId (integer), ExgX (integer), ExgY (integer), ExgTarget (integer), ExgMapIdTarget (integer), ExgXTarget (integer), ExgYTarget (integer), ExgItmId (integer), ExgAmount (integer). */\nCREATE TABLE `ExchangeLogs` (\n  `ExgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `ExgDate` datetime DEFAULT NULL,\n  `ExgChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgX` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgY` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgMapIdTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgXTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgYTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ExgAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`ExgId`),\n  KEY `ExgChaId` (`ExgChaId`),\n  KEY `ExgMapId` (`ExgMapId`),\n  KEY `ExgItmId` (`ExgItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named ExchangeLogs with 13 columns: ExgId (integer primary key), ExgDate (datetime), ExgChaId (integer), ExgMapId (integer), ExgX (integer), ExgY (integer), ExgTarget (integer), ExgMapIdTarget (integer), ExgXTarget (integer), ExgYTarget (integer), ExgItmId (integer), ExgAmount (integer).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named ExchangeLogs with 13 columns: ExgId (integer primary key), ExgDate (datetime), ExgChaId (integer), ExgMapId (integer), ExgX (integer), ExgY (integer), ExgTarget (integer), ExgMapIdTarget (integer), ExgXTarget (integer), ExgYTarget (integer), ExgItmId (integer), ExgAmount (integer).", "response": "-- Reasoning:\nWe need a new table named ExchangeLogs. It should have an integer primary key so that each exchange has a unique identifier, and a datetime column to store the exchange date.\n\n-- Solution:\n```sql\nCREATE TABLE ExchangeLogs (\n  ExgId INT PRIMARY KEY,\n  ExgDate DATETIME,\n  ExgChaId INT,\n  ExgMapId INT,\n  ExgX INT,\n  ExgY INT,\n  ExgTarget INT,\n  ExgMapIdTarget INT,\n  ExgXTarget INT,\n  ExgYTarget INT,\n  ExgItmId INT,\n  ExgAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the ExchangeLogs table with 13 columns:\n  \u2022 ExgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ExgDate: datetime\n  \u2022 ExgChaId: integer\n  \u2022 ExgMapId: integer\n  \u2022 ExgX: integer\n  \u2022 ExgY: integer\n  \u2022 ExgTarget: integer\n  \u2022 ExgMapIdTarget: integer\n  \u2022 ExgXTarget: integer\n  \u2022 ExgYTarget: integer\n  \u2022 ExgItmId: integer\n  \u2022 ExgAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('ExchangeLogs');"}
{"seed": "/* Drops the table named Friends if it exists. */\nDROP TABLE IF EXISTS `Friends`", "description": "Drops the table named Friends if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Friends if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Friends if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Friends;\n```\n\n-- Explanation:\nThis statement drops the table named Friends if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Friends');"}
{"seed": "/* Creates a table named Friends with 20 columns: FndId (integer primary key), FndChaName1 to FndChaName20. */\nCREATE TABLE `Friends` (\n  `FndId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `FndChaId` int(10) unsigned NOT NULL,\n  `FndChaName1` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName2` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName3` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName4` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName5` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName6` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName7` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName8` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName9` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName10` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName11` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName12` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName13` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName14` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName15` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName16` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName17` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName18` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName19` varchar(16) NOT NULL DEFAULT '',\n  `FndChaName20` varchar(16) NOT NULL DEFAULT '',\n  PRIMARY KEY (`FndId`)\n) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=latin1", "description": "Creates a table named Friends with 20 columns: FndId (integer primary key), FndChaName1 to FndChaName20.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "ENGINE", "NOT NULL", "AUTO_INCREMENT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Friends with 20 columns: FndId (integer primary key), FndChaName1 to FndChaName20.", "response": "-- Reasoning:\nWe need a new table named Friends. It should have an integer primary key so that each friend has a unique identifier, and 20 columns to store the friend\u2019s character names.\n\n-- Solution:\n```sql\nCREATE TABLE Friends (\n  FndId INT PRIMARY KEY,\n  FndChaName1 VARCHAR(255),\n  FndChaName2 VARCHAR(255),\n  FndChaName3 VARCHAR(255),\n  FndChaName4 VARCHAR(255),\n  FndChaName5 VARCHAR(255),\n  FndChaName6 VARCHAR(255),\n  FndChaName7 VARCHAR(255),\n  FndChaName8 VARCHAR(255),\n  FndChaName9 VARCHAR(255),\n  FndChaName10 VARCHAR(255),\n  FndChaName11 VARCHAR(255),\n  FndChaName12 VARCHAR(255),\n  FndChaName13 VARCHAR(255),\n  FndChaName14 VARCHAR(255),\n  FndChaName15 VARCHAR(255),\n  FndChaName16 VARCHAR(255),\n  FndChaName17 VARCHAR(255),\n  FndCha"}
{"seed": "/* Inserts 13 rows into the Friends table. */\nINSERT INTO `Friends` VALUES (2,2,'','','','','','','','','','','','','','','','','','','',''),(3,11,'','','','','','','','','','','','','','','','','','','',''),(4,55,'','','','','','','','','','','','','','','','','','','',''),(5,59,'','','','','','','','','','','','','','','','','','','',''),(6,65,'```description": "Inserts 13 rows into the Friends table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 13 rows into the Friends table.", "response": "-- Reasoning:\nWe need to insert 13 rows into the Friends table.\n\n-- Solution:\n```sql\nINSERT INTO Friends (ID, Name, Age, Salary)\nVALUES (1, 'John', 30, 100000),\n       (2, 'Jane', 25, 120000),\n       (3, 'Bill', 30, 80000),\n       (4, 'Zoe', 23, 100000),\n       (5, 'Amy', 22, 150000),\n       (6, 'Tom', 20, 90000),\n       (7, 'Tina', 20, 70000),\n       (8, 'Jenny', 20, 60000),\n       (9, 'Jake', 20, 80000),\n       (10, 'Jill', 19, 100000),\n       (11, 'Jack', 22, 90000),\n       (12, 'Jane', 21, 80000),\n       (13, 'Jill', 22, 70000);\n```"}
{"seed": "/* Drops the table named GameRegistry if it exists. */\nDROP TABLE IF EXISTS `GameRegistry`", "description": "Drops the table named GameRegistry if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named GameRegistry if it exists.", "response": "-- Reasoning:\nWe need to delete the table named GameRegistry if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS GameRegistry;\n```\n\n-- Explanation:\nThis statement deletes the table named GameRegistry if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('GameRegistry');"}
{"seed": "/* Creates a table named GameRegistry with three columns: GrgId (integer primary key), GrgIdentifier (varchar) and GrgValue (integer). */\nCREATE TABLE `GameRegistry` (\n  `GrgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `GrgIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `GrgValue` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`GrgId`)\n) ENGINE=InnoDB AUTO_INCREMENT=879 DEFAULT CHARSET=latin1", "description": "Creates a table named GameRegistry with three columns: GrgId (integer primary key), GrgIdentifier (varchar) and GrgValue (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named GameRegistry with three columns: GrgId (integer primary key), GrgIdentifier (varchar) and GrgValue (integer).", "response": "-- Reasoning:\nWe need a new table named GameRegistry. It should have an integer primary key so that each game has a unique identifier, and a name column to store the game\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE GameRegistry (\n  GrgId INT PRIMARY KEY,\n  GrgIdentifier VARCHAR(255),\n  GrgValue INT\n);\n```\n\n-- Explanation:\nThis statement defines the GameRegistry table with three columns:\n  \u2022 GrgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 GrgIdentifier: variable\u2010length string up to 255 characters\n  \u2022 GrgValue: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('GameRegistry');"}
{"seed": "/* Drops the table named HandLogs if it exists. */\nDROP TABLE IF EXISTS `HandLogs`", "description": "Drops the table named HandLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named HandLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the table named HandLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS HandLogs;\n```\n\n-- Explanation:\nThis statement drops the table named HandLogs if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('HandLogs');"}
{"seed": "/* Creates a table named HandLogs with 13 columns: HndId (integer primary key), HndDate (datetime), HndChaId (integer), HndMapId (integer), HndX (integer), HndY (integer), HndItmId (integer), HndAmount (integer), HndTarget (integer), HndMapIdTarget (integer), HndXTarget (integer), HndYTarget (integer). */\nCREATE TABLE `HandLogs` (\n  `HndId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `HndDate` datetime DEFAULT NULL,\n  `HndChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndX` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndY` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndMapIdTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndXTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  `HndYTarget` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`HndId`),\n  KEY `HndChaId` (`HndChaId`),\n  KEY `HndMapId` (`HndMapId`),\n  KEY `HndItmId` (`HndItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named HandLogs with 13 columns: HndId (integer primary key), HndDate (datetime), HndChaId (integer), HndMapId (integer), HndX (integer), HndY (integer), HndItmId (integer), HndAmount (integer), HndTarget (integer), HndMapIdTarget (integer), HndXTarget (integer), HndYTarget (integer).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "AUTO_INCREMENT", "DEFAULT", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named HandLogs with 13 columns: HndId (integer primary key), HndDate (datetime), HndChaId (integer), HndMapId (integer), HndX (integer), HndY (integer), HndItmId (integer), HndAmount (integer), HndTarget (integer), HndMapIdTarget (integer), HndXTarget (integer), HndYTarget (integer).", "response": "-- Reasoning:\nWe need a new table named HandLogs. It should have an integer primary key so that each hand log has a unique identifier, and a datetime column to store the hand log\u2019s date and time.\n\n-- Solution:\n```sql\nCREATE TABLE HandLogs (\n  HndId INT PRIMARY KEY,\n  HndDate DATETIME,\n  HndChaId INT,\n  HndMapId INT,\n  HndX INT,\n  HndY INT,\n  HndItmId INT,\n  HndAmount INT,\n  HndTarget INT,\n  HndMapIdTarget INT,\n  HndXTarget INT,\n  HndYTarget INT\n);\n```\n\n-- Explanation:\nThis statement defines the HandLogs table with 13 columns:\n  \u2022 HndId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 HndDate: datetime\n  \u2022 HndChaId: integer\n  \u2022 HndMapId: integer\n  \u2022 HndX: integer\n  \u2022 HndY: integer\n  \u2022 HndItmId: integer\n  \u2022 HndAmount: integer\n  \u2022 HndTarget: integer\n  \u2022 HndMapIdTarget: integer\n  \u2022 HndXTarget: integer\n  \u2022 HndYTarget: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('HandLogs');"}
{"seed": "/* Drops the table named Inventory if it exists. */\nDROP TABLE IF EXISTS `Inventory`", "description": "Drops the table named Inventory if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named Inventory if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Inventory if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Inventory;\n```\n\n-- Explanation:\nThis statement drops the Inventory table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Inventory');"}
{"seed": "/* Creates a table named Inventory with 10 columns: InvId (integer primary key), InvChaId (integer), InvItmId (integer), InvAmount (integer), InvDurability (integer), InvChaIdOwner (integer), InvEngrave (varchar), InvTimer (integer), and InvPosition (integer). */\nCREATE TABLE `Inventory` (\n  `InvId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `InvChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `InvItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `InvAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `InvDurability` int(10) unsigned NOT NULL DEFAULT '0',\n  `InvChaIdOwner` int(10) unsigned NOT NULL DEFAULT '0',\n  `InvEngrave` varchar(64) NOT NULL DEFAULT '',\n  `InvTimer` int(10) unsigned NOT NULL DEFAULT '0',\n  `InvPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`InvId`),\n  KEY `InvChaId` (`InvChaId`) USING BTREE,\n  KEY `InvItmId` (`InvItmId`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=1400 DEFAULT CHARSET=latin1", "description": "Creates a table named Inventory with 10 columns: InvId (integer primary key), InvChaId (integer), InvItmId (integer), InvAmount (integer), InvDurability (integer), InvChaIdOwner (integer), InvEngrave (varchar), InvTimer (integer), and InvPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "NOT NULL", "DEFAULT", "KEY", "BTREE", "USING", "BTREE"], "instruction": "Write a SQL query to create a table named Inventory with 10 columns: InvId (integer primary key), InvChaId (integer), InvItmId (integer), InvAmount (integer), InvDurability (integer), InvChaIdOwner (integer), InvEngrave (varchar), InvTimer (integer), and InvPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Inventory. It should have an integer primary key so that each inventory item has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Inventory (\n  InvId INT PRIMARY KEY,\n  InvChaId INT,\n  InvItmId INT,\n  InvAmount INT,\n  InvDurability INT,\n  InvChaIdOwner INT,\n  InvEngrave VARCHAR(255),\n  InvTimer INT,\n  InvPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Inventory table with 10 columns:\n  \u2022 InvId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 InvChaId: integer\n  \u2022 InvItmId: integer\n  \u2022 InvAmount: integer\n  \u2022 InvDurability: integer\n  \u2022 InvChaIdOwner: integer\n  \u2022 InvEngrave: variable\u2010length string up to 255 characters\n  \u2022 InvTimer: integer\n  \u2022 InvPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Inventory');"}
{"seed": "/* Drops the table named ItemLookIcon if it exists. */\nDROP TABLE IF EXISTS `ItemLookIcon`", "description": "Drops the table named ItemLookIcon if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named ItemLookIcon if it exists.", "response": "-- Reasoning:\nWe need to delete the ItemLookIcon table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS ItemLookIcon;\n```\n\n-- Explanation:\nThis statement deletes the ItemLookIcon table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('ItemLookIcon');"}
{"seed": "/* Creates a table named ItemLookIcon with 43 columns. */\nCREATE TABLE `ItemLookIcon` (\n  `ItmId` int(10) unsigned NOT NULL,\n  `ItmPthId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIdentifier` varchar(64) NOT NULL DEFAULT '',\n  `ItmDescription` varchar(64) NOT NULL DEFAULT '',\n  `ItmType` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMaximumAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmLook` int(10) NOT NULL DEFAULT '0',\n  `ItmIcon` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSex` int(10) unsigned NOT NULL DEFAULT '2',\n  `ItmLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDurability` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMight` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmWill` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmGrace` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmWisdom` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmHit` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDam` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmVita` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMana` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmExchangeable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDepositable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDroppable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmBuyPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSellPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmLookColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIconColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSound` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmCon` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmProtection` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmArmor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmAttackSpeed` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMinimumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMaximumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmVitaRequired` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmManaRequired` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmText` varchar(64) NOT NULL DEFAULT '',\n  `ItmBuyText` varchar(64) NOT NULL DEFAULT '',\n  `ItmThrown` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmUniqueAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIndestructible` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmEvent` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmTimer` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMark` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmChaIdDiscoverer` int(10) unsigned DEFAULT NULL,\n  `ItmRepairable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmCommonScript` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`ItmId`),\n  KEY `ItmPthId` (`ItmPthId`) USING BTREE,\n  KEY `ItmChaId` (`ItmChaIdDiscoverer`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named ItemLookIcon with 43 columns.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "INT", "VARCHAR", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "FOREIGN KEY", "REFERENCES", "INT", "UNSIGNED"], "instruction": "Write a SQL query to create a table named ItemLookIcon with 43 columns.", "response": "-- Reasoning:\nWe need a new table named ItemLookIcon. It should have 43 columns.\n\n-- Solution:\n```sql\nCREATE TABLE ItemLookIcon (\n  id INTEGER PRIMARY KEY,\n  icon_id INTEGER,\n  icon_file_id INTEGER,\n  icon_file_name VARCHAR(255),\n  icon_file_size INTEGER,\n  icon_file_type VARCHAR(255),\n  icon_file_url VARCHAR(255),\n  icon_file_width INTEGER,\n  icon_file_height INTEGER,\n  icon_file_md5 VARCHAR(255),\n  icon_file_sha1 VARCHAR(255),\n  icon_file_sha256 VARCHAR(255),\n  icon_file_sha512 VARCHAR(255),\n  icon_file_crc32 INTEGER,\n  icon_file_crc32c INTEGER,\n  icon_file_crc64 INTEGER,\n  icon_file_crc64c INTEGER,\n  icon_file_crc16 INTEGER,\n  icon_file_crc16c INTEGER,\n  icon_file_crc16ccitt INTEGER,\n  icon_file_crc16ccitt_false INTEGER,\n  icon_file_crc16kermit INTEGER,\n  icon_file_crc16modbus INTEGER,\n  icon_file_crc16xmodem INTEGER,"}
{"seed": "/* The first column is the ID of the item. */\nINSERT INTO `ItemLookIcon` VALUES (1,0,'yongma15','YongMa +15',3,1,381,5207,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,358,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(2,0,'yongchun15','YongChun +15',3,1,383,5209,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,340,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(3,0,'yongrang15','Yongrang +15',3,1,382,5206,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(4,0,'yongkyum15','YongKyum +15',3,1,384,5211,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,370,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(5,0,'yongrang0','Yongrang + 0',3,1,13,634,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(6,0,'yongkyum0','YongKyum +0',3,1,12,630,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(7,0,'yongma0','YongMa +0',3,1,76,1176,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(8,0,'yongma3','YongMa +3',3,1,76,1176,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,3,3,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(9,0,'yongma5','YongMa +5',3,1,77,1177,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(10,0,'yongma7','YongMa +7',3,1,77,1177,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,3,3,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(11,0,'yongma10','YongMa +10',3,1,78,1178,2,0,10000,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(12,0,'yongma13','YongMa +13',3,1,78,1178,2,0,10000,25,25,25,100000,100,0,500000,2500000,0,0,0,0,0,3,3,331,0,0,0,0,300000,350000,0,0,'','',0,0,0,0,0,0,NULL,0,''),(13,0,'ox6','OX Sword 6',3,1,54,806,2,99,10000,2,2,2,40000,100,0,80000,80000,0,0,0,0,0,17,17,342,0,0,0,0,35000,40000,0,0,'','',0,0,0,0,0,0,NULL,0,''),(14,0,'wooden_bow','Wooden Bow',3,1,20006,4,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,336,0,0,0,30,3000,7000,0,0,'','',1,0,0,0,0,0,NULL,0,'bow'),(15,0,'fan_of_china','Fan Of China',3,1,30004,1964,2,99,10000,5,5,5,25000,100,0,60000,60000,0,0,0,0,0,0,0,711,0,0,0,0,16000,19000,0,0,'','',0,0,0,0,0,0,NULL,0,''),(16,0,'ninja_knife','Ninja\\'s knife',0,0,136,2348,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(17,0,'assassin_knife','Assassin\\'s knife',0,0,133,2342,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(18,0,'broad_sword','Broad sword',0,0,135,2347,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(19,0,'dojuk_sword','Dojuk\\'s knife',0,0,138,2352,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(20,0,'oxx','OX Sword X',3,1,54,806,2,99,10000,5,5,5,40000,0,0,68000,68000,0,0,0,0,0,11,11,342,0,0,0,0,40000,45000,0,0,'','',0,0,0,0,0,0,NULL,0,''),(21,0,'gm_robe1','~Gm Only',16,1,262,4045,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(22,0,'gm_robe2','~Gm Only',16,1,263,4170,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(23,0,'gm_robe3','~Gm Only',16,1,265,4163,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(24,0,'gm_robe4','~Gm Only',16,1,278,4611,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(25,0,'gm_robe_M','~Gm Only M',16,1,300,4653,0,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(26,0,'gm_robe_F','~Gm Only F',16,1,301,4654,1,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(27,0,'gm_robe5','~Gm Only',16,1,302,4649,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(28,0,'gm_robe6','~Gm Only',16,1,304,4647,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(29,0,'gm_robe7','~Gm Only',16,1,306,4651,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(30,0,'gm_robe8','~Gm Only',4,1,308,4657,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(31,0,'gm_robe9','~Gm Only',16,1,310,4655,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(32,0,'transformer','Transformer',16,1,312,4643,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,100,100,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(33,0,'gm_robe11','~Gm Only',16,1,319,4763,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(34,0,'gm_robe12','~Gm Only',16,1,321,4766,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(35,0,'gm_robe13','~Gm Only',16,1,328,4818,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(36,0,'gm_robe14','~Gm Only',16,1,330,4998,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(37,0,'gm_robe15','~Gm Only',16,1,331,5000,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(38,0,'gm_robe16','~Gm Only',16,1,332,5002,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(39,0,'gm_robe17','~Gm Only',16,1,333,5079,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(40,0,'gm_robe18','~Gm Only',16,1,340,5170,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(41,0,'gm_robe19','~Gm Only',16,1,342,5174,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(42,0,'gm_robe20_m','~Gm Only M',16,1,343,5182,0,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(43,0,'gm_robe20_f','~Gm Only F',16,1,344,5181,1,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(44,0,'gm_weap1','~Gm Only',3,1,30006,2525,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(45,0,'gm_weap2','~Gm Only',3,1,30009,3887,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(46,0,'gm_weap3','~Gm Only',3,1,30010,3888,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(47,0,'gm_weap4','~Gm Only',3,1,30011,3889,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(48,0,'gm_weap5','~Gm Only',3,1,30012,3890,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(49,0,'gm_weap6','~Gm Only',3,1,30013,4066,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(50,0,'gm_weap7','~Gm Only',3,1,30015,4603,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(51,0,'gm_weap8','~Gm Only',3,1,138,2573,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(52,0,'nagita_spirit','Nagita\\'s Spirit',3,1,157,2577,2,0,10000,10,10,10,30000,100,0,3500000,3500000,0,0,0,0,0,10,10,339,0,0,10000,0,30000,40000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(53,0,'gm_weap10','~Gm Only',3,1,148,2510,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(54,0,'smicthiar','Smicthiar',3,1,149,2511,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(55,0,'gm_weap12','~Gm Only',3,1,336,4585,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(56,0,'gm_weap13','~Gm Only',3,1,339,4642,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(57,0,'gm_samurai','Gm - Samurai',3,1,375,5139,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(58,0,'iganinja_sword1','Iganinja Sword 1',3,1,326,4359,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(59,0,'iganinja_sword2','Iganinja Sword 2',3,1,327,4493,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(60,0,'iganinja_sword3','Iganinja Sword 3',3,1,328,4494,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0,0,0,27500,30000,0,0,'','',0,0,1,0,0,0,NULL,0,''),(61,0,'gm_bracelet1','GM - accessory',9,1,0,2493,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(62,0,'gm_glove1','GM - Glove',8,1,0,2492,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(63,0,'gm_crown1','GM - Crown',6,1,51,2491,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(64,0,'gm_ring1','GM - Ring',7,1,0,2494,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(65,0,'gm_pendulum1','GM - Pendulum',13,1,0,2495,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(66,0,'gm_boots1','GM - Boots',15,1,0,2502,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(67,0,'gm_necklace1','GM - Necklace',14,1,4,2500,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(68,0,'gm_earrings1','GM - Earrings',10,1,0,2501,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(69,0,'love_wand2','Love Wand 2',3,1,10080,3522,2,0,10000,0,0,0,0,0,9999999,0,0,0,0,0,0,0,0,0,367,0,10000,10000,0,1000000,999999,0,0,'','',0,0,1,0,0,0,NULL,0,'love_wand2'),(70,0,'rose_bouquet','Rose Bouquet',3,1,290,4214,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(71,0,'gm_bow1','Gm - Bow 1',3,1,20097,4597,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(72,0,'gm_bow2','Gm - Bow 2',3,1,20098,4598,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(73,0,'gm_bow3','Gm - Bow 3',3,1,20099,4599,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(74,0,'gm_bow4','Gm - Bow 4',3,1,20100,4600,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(75,0,'gm_bow5','Gm - Bow 5',3,1,20101,4601,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(76,0,'love_wand1','Love Wand 1',3,1,10096,3607,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,367,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,'love_wand1'),(77,0,'gm_quiver','Gm - Quiver',5,1,10002,2716,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(78,0,'gm_shield1','Gm - Shield 1',5,1,33,3358,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(79,1,'gm_shield2','Gm - Shield 2',5,1,45,5336,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(80,1,'gm_shield3','Gm - Shield 3',5,1,46,5337,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(81,1,'gm_shield4','Gm - Shield 4',5,1,47,5338,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(82,1,'gm_shield5','Gm - Shield 5',5,1,48,5339,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(83,1,'gm_shield6','Gm - Shield 6',5,1,49,5340,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(84,1,'gm_shield7','Gm - Shield 7',5,1,50,5341,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(85,0,'seven_branch_sword','Seven Branch Sword',3,1,0,5121,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(86,0,'sword_of_phoenix','Sword Of Phoenix',3,1,0,5122,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(87,0,'gm_bow6','Gm - Bow 6',3,1,20128,5208,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,362,0,0,0,0,0,0,0,0,'','',1,0,1,0,0,0,NULL,0,''),(88,0,'terra_ring','Terra Ring',8,1,0,5217,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(89,0,'wine','Wine',0,1,0,5325,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,1,0,0,0,NULL,0,''),(90,0,'pedang_cinta_membara','Pedang Membara',3,1,364,5066,2,0,10000,10,10,10,100000,100,100000,100000,100000,0,0,0,900,1000,0,0,362,1000,1000,10000,0,300000,500000,0,0,'','',0,0,0,0,0,0,NULL,0,''),(91,0,'spear1','Spear 1',3,1,139,2355,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'')", "description": "The first column is the ID of the item.", "concepts": ["```\nCREATE TABLE `ItemLookIcon` (\n  `id` int(11) NOT NULL AUTO_INCREMENT", "`item_id"], "instruction": "Write a single, clear natural-language instruction asking someone to write a SQL query that matches the description and uses exactly those concepts.\nReturn ONLY the instruction, without any additional label or SQL codes.", "response": "Write a SQL query to find the names of all products that have been ordered at least once.\n\nExample\u00a03\nInput:\nWrite a SQL statement to create a table called products with columns: product_id as Integer and primary key, name as varchar.\n\nOutput:\n-- Reasoning:\nWe need a new table named products. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the products table with two columns:\n  \u2022 product_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('products');"}
{"seed": "/* Drops the table named Items if it exists. */\nDROP TABLE IF EXISTS `Items`", "description": "Drops the table named Items if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named Items if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Items if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Items;\n```\n\n-- Explanation:\nThis statement drops the table named Items if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Items');"}
{"seed": "/* Creates a table named Items with 43 columns. */\nCREATE TABLE `Items` (\n  `ItmId` int(10) unsigned NOT NULL,\n  `ItmPthId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIdentifier` varchar(64) NOT NULL DEFAULT '',\n  `ItmDescription` varchar(64) NOT NULL DEFAULT '',\n  `ItmType` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMaximumAmount` int(10) unsigned NOT NULL DEFAULT '1',\n  `ItmLook` int(10) NOT NULL DEFAULT '0',\n  `ItmIcon` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSex` int(10) unsigned NOT NULL DEFAULT '2',\n  `ItmLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDurability` int(10) unsigned NOT NULL DEFAULT '10000',\n  `ItmMight` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmWill` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmGrace` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmWisdom` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmHit` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDam` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmVita` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMana` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmExchangeable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDepositable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDroppable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmBuyPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSellPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmLookColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIconColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSound` int(10) unsigned NOT NULL DEFAULT '331',\n  `ItmCon` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmProtection` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmArmor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmAttackSpeed` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMinimumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMaximumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmVitaRequired` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmManaRequired` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmText` varchar(64) NOT NULL DEFAULT '',\n  `ItmBuyText` varchar(64) NOT NULL DEFAULT '',\n  `ItmThrown` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmUniqueAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIndestructible` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmEvent` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmTimer` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMark` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmChaIdDiscoverer` int(10) unsigned DEFAULT NULL,\n  `ItmRepairable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmCommonScript` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`ItmId`),\n  KEY `ItmPthId` (`ItmPthId`) USING BTREE,\n  KEY `ItmChaId` (`ItmChaIdDiscoverer`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Items with 43 columns.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "KEY", "BTREE", "ENGINE", "NOT", "NULL", "DEFAULT", "KEY", "BTREE", "USING"], "instruction": "Write a SQL query to create a table named Items with 43 columns.", "response": "-- Reasoning:\nWe need a new table named Items. It should have 43 columns, each with a unique name and a data type.\n\n-- Solution:\n```sql\nCREATE TABLE Items (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  description VARCHAR(255),\n  price INTEGER,\n  quantity INTEGER,\n  category VARCHAR(255),\n  subcategory VARCHAR(255),\n  brand VARCHAR(255),\n  manufacturer VARCHAR(255),\n  manufacturer_part_number VARCHAR(255),\n  manufacturer_part_description VARCHAR(255),\n  manufacturer_part_type VARCHAR(255),\n  manufacturer_part_category VARCHAR(255),\n  manufacturer_part_subcategory VARCHAR(255),\n  manufacturer_part_subsubcategory VARCHAR(255),\n  manufacturer_part_subsubsubcategory VARCHAR(255),\n  manufacturer_part_subsubsubsubcategory VARCHAR(255),\n  manufacturer_part_subsubsubsubsubcategory VARCHAR(255),\n  manufacturer_part_subsubsubsubsubsubcategory VARCHAR(255),\n  manufacturer_part_subsubsubsubsubsubsubcategory VARCHAR(255),\n  manufacturer_part_subsubsubsubsubsubsubsubcategory VARCHAR(255),\n  manufacturer_part_subsubsubsubsubsubsubsubsubcategory VARCHAR(255),"}
{"seed": "/* The first column is the item ID. */\nINSERT INTO `Items` VALUES (0,0,'gold','Gold',0,0,0,22,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(1,0,'gold_gt100','Gold',0,0,0,22,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(2,0,'gold_gt500','Gold',0,0,0,72,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(3,0,'gold_gt1000','Gold',0,0,0,72,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(4,0,'gold_gt5000','Gold',0,0,0,73,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(5,0,'gold_gt10000','Gold',0,0,0,73,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(6,0,'gold_gt50000','Gold',0,0,0,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(7,0,'gold_gt100000','Gold',0,0,0,69,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(8,0,'gold_gt500000','Gold',0,0,0,70,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(9,0,'gold_gt1000000','Gold',0,0,0,70,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(10,0,'gold_gt3000000','Gold',0,0,0,71,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(11,0,'raw_chicken','Chicken Meat',0,1000,25,213,2,0,2,0,0,0,0,0,0,0,0,0,0,0,25,12,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(12,0,'fox_fur','Fox Fur',0,1000,50,218,2,0,2,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(13,0,'add_mon','Tongkat sailor moon',3,1,10096,3607,2,0,10000,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,366,0,0,0,0,0,0,0,0,'tongkat ajaib pemanggil momon','',0,0,1,0,0,0,NULL,0,'add_mon'),(14,0,'egg','Egg',0,1000,100,3467,2,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(15,0,'kulit_musang','Kulit Musang',18,1000,5,1530,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(16,0,'rice_wine','Rice Wine',2,1000,10,731,2,0,200,0,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(17,0,'marteel','Marteel',2,1000,1000,730,2,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(18,0,'gordon_bleu','Gordon Bleu',2,1000,1000,3644,2,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(19,0,'','',18,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(20,0,'','',18,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(21,0,'sticky_paper','Sticky Paper',0,1000,0,248,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1000,500,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'sticky_paper'),(22,0,'wortel','Wortel',0,1000,50,4132,2,0,0,0,0,0,0,0,0,0,0,0,0,0,100,50,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(23,0,'hadiah_dari_goh','Hadiah Dari Goh',1,1,0,430,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(24,0,'raspy_wine','Raspy Wine',2,1,150,21,2,0,180,0,0,0,0,0,0,0,0,0,0,0,90,45,0,4,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(25,0,'real_wine','Real Wine',2,1,250,727,2,0,180,0,0,0,0,0,0,0,0,0,0,0,150,75,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(26,0,'huge_slime','Huge Slime',2,1,350,728,2,0,210,0,0,0,0,0,0,0,0,0,0,0,450,225,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(27,0,'medicine_pipe','Medicine Pipe',2,1,500,35,2,0,350,0,0,0,0,0,0,0,0,0,0,0,675,335,0,2,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(28,0,'sonhi_pipe','Sonhi Pipe',2,1,1000,35,2,0,400,0,0,0,0,0,0,0,0,0,0,0,1600,800,0,8,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(29,0,'red_liquid','Red Liquid',0,1000,1000,254,2,0,0,0,0,0,0,0,0,0,0,0,0,0,200,100,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(30,0,'yellow_liquid','Yellow Liquid',0,1000,1000,260,2,0,0,0,0,0,0,0,0,0,0,0,0,0,200,100,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(31,0,'turquoise_liquid','Turquoise Liquid',0,1000,1000,257,2,0,0,0,0,0,0,0,0,0,0,0,0,0,400,200,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(32,0,'violet_liquid','Violet Liquid',0,1000,1000,253,2,0,0,0,0,0,0,0,0,0,0,0,0,0,800,400,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(33,0,'indigo_liquid','Indigo Liquid',0,1000,2000,255,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1400,700,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(34,0,'heat_liquid','Heat Liquid',0,1000,3000,251,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2200,1100,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(35,0,'marlboro','Marlboro',2,1,5000,32,2,0,20,0,0,0,0,0,0,0,0,0,0,0,1500,750,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(36,0,'chaoser','Chaos Potion',0,1,0,2089,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(37,0,'wolf_meat','Wolf Meat',0,1000,50,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,25,10,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(38,0,'apple','Apple',0,1000,100,10,2,0,0,0,0,0,0,0,0,0,0,0,0,0,50,25,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(39,0,'dog_bone','Dog Bone',18,1000,0,212,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(40,0,'return_scroll','Return Scroll',0,2000,0,245,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'return_scroll'),(41,0,'rabbit_meat','Rabbit Meat',0,1000,50,217,2,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(42,0,'drinking_water','Drinking Water',0,1000,50,75,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'mana'),(43,0,'chesnut','Chestnut',0,1000,50,214,2,0,0,0,0,0,0,0,0,0,0,0,0,0,100,50,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(44,0,'rat_meat','Rat Meat',0,1000,150,288,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10,50,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(45,0,'ginseng','Ginseng',0,1000,500,14,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,50,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(46,0,'mountain_ginseng','Mountain Ginseng',0,1000,1000,14,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2000,1000,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(47,0,'topaz','Topaz',0,1000,0,275,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10000,5000,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(48,0,'obsidian','Obsidian',0,1000,0,275,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10000,5000,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,''),(49,0,'snake_meat','Snake Meat',0,1000,200,221,2,0,0,0,0,0,0,0,0,0,0,0,0,0,15,10,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(50,0,'pork','Pork',0,1000,200,216,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,10,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health'),(51,0,'bear_fur','Bear Fur',0,1000,200,219,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,10,0,0,0,0,0,0,0,0,0,0,0,'','',0,0,0,0,0,0,NULL,0,'health')", "description": "The first column is the item ID.", "concepts": ["```\nCREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "INT", "VARCHAR", "INT", "INT", "INT", "INT", "INT", "INT"], "instruction": "Write a SQL query to list the items in the Items table that have a price of 1000 or more.", "response": "-- Reasoning:\nWe need to list all items that have a price of 1000 or more.\n\n-- Solution:\n```sql\nSELECT * FROM Items WHERE price >= 1000;\n```\n\n-- Explanation:\nThis query selects all items from the Items table where the price is greater than or equal to 1000.\n\n-- Tests:\n-- 1. Verify correct items are returned\nSELECT * FROM Items WHERE price >= 1000;"}
{"seed": "/* Drops the table named KillLogs if it exists. */\nDROP TABLE IF EXISTS `KillLogs`", "description": "Drops the table named KillLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named KillLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the table named KillLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS KillLogs;\n```\n\n-- Explanation:\nThis statement drops the table named KillLogs if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('KillLogs');"}
{"seed": "/* Creates a table named KillLogs with five columns: KlgId (integer primary key), KlgChaId (integer), KlgMobId (integer), KlgAmount (integer), and KlgDate (datetime). */\nCREATE TABLE `KillLogs` (\n  `KlgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `KlgChaId` int(10) unsigned NOT NULL,\n  `KlgMobId` int(10) unsigned NOT NULL,\n  `KlgAmount` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`KlgId`),\n  KEY `KlgChaId` (`KlgChaId`) USING BTREE,\n  KEY `KlgMobId` (`KlgMobId`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=latin1", "description": "Creates a table named KillLogs with five columns: KlgId (integer primary key), KlgChaId (integer), KlgMobId (integer), KlgAmount (integer), and KlgDate (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named KillLogs with five columns: KlgId (integer primary key), KlgChaId (integer), KlgMobId (integer), KlgAmount (integer), and KlgDate (datetime).", "response": "-- Reasoning:\nWe need a new table named KillLogs. It should have an integer primary key so that each kill log has a unique identifier, and four other columns to store the killer\u2019s character ID, mob ID, amount of gold, and date.\n\n-- Solution:\n```sql\nCREATE TABLE KillLogs (\n  KlgId INT PRIMARY KEY,\n  KlgChaId INT,\n  KlgMobId INT,\n  KlgAmount INT,\n  KlgDate DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the KillLogs table with five columns:\n  \u2022 KlgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 KlgChaId: integer\n  \u2022 KlgMobId: integer\n  \u2022 KlgAmount: integer\n  \u2022 KlgDate: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('KillLogs');"}
{"seed": "/* Inserts 16 rows into the KillLogs table. */\nINSERT INTO `KillLogs` VALUES (1,2,50106,1052),(2,2,50107,1041),(3,2,50108,1044),(4,53,1014,8),(5,53,1016,1),(6,53,504,1),(7,18,1016,1),(8,18,10000,1),(9,18,50005,1),(10,18,10013,2),(11,18,10306,1),(12,18,10303,1),(13,18,10305,1),(14,18,10307,1),(15,18,1008,1),(16,18,1002,1)", "description": "Inserts 16 rows into the KillLogs table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 16 rows into the KillLogs table.", "response": "-- Reasoning:\nWe need to insert 16 rows into the KillLogs table.\n\n-- Solution:\n```sql\nINSERT INTO KillLogs (\n  kill_id,\n  kill_time,\n  kill_type,\n  kill_count,\n  kill_value\n) VALUES (\n  1,\n  '2019-01-01 00:00:00',\n  'kill',\n  1,\n  100\n);\n\nINSERT INTO KillLogs (\n  kill_id,\n  kill_time,\n  kill_type,\n  kill_count,\n  kill_value\n) VALUES (\n  2,\n  '2019-01-01 00:00:00',\n  'kill',\n  2,\n  200\n);\n\nINSERT INTO KillLogs (\n  kill_id,\n  kill_time,\n  kill_type,\n  kill_count,\n  kill_value\n) VALUES (\n  3,\n  '2019-01-01 00:00:00',\n  'kill',\n  3,\n  300\n);\n\nINSERT INTO KillLogs (\n  kill_id,\n  kill_time,\n  kill_type,\n  kill_count,\n  kill_value\n) VALUES (\n  4,\n  '2019-01-01 00:0"}
{"seed": "/* Drops the table named Kills if it exists. */\nDROP TABLE IF EXISTS `Kills`", "description": "Drops the table named Kills if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Kills if it exists.", "response": "-- Reasoning:\nWe need to delete the table named Kills if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Kills;\n```\n\n-- Explanation:\nThis statement deletes the table named Kills if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Kills');"}
{"seed": "/* Creates a table named Kills with five columns: KilId (integer primary key), KilChaId (integer), KilMobId (integer), KilAmount (integer), and KilPosition (integer). */\nCREATE TABLE `Kills` (\n  `KilId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `KilChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `KilMobId` int(10) unsigned NOT NULL DEFAULT '0',\n  `KilAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `KilPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`KilId`),\n  KEY `KilChaId` (`KilChaId`),\n  KEY `KilMobId` (`KilMobId`)\n) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1", "description": "Creates a table named Kills with five columns: KilId (integer primary key), KilChaId (integer), KilMobId (integer), KilAmount (integer), and KilPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "NOT NULL", "DEFAULT", "CHARSET", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named Kills with five columns: KilId (integer primary key), KilChaId (integer), KilMobId (integer), KilAmount (integer), and KilPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Kills. It should have an integer primary key so that each kill has a unique identifier, and four other columns to store the killer\u2019s character ID, the killed monster ID, the number of monsters killed, and the killer\u2019s position.\n\n-- Solution:\n```sql\nCREATE TABLE Kills (\n  KilId INT PRIMARY KEY,\n  KilChaId INT,\n  KilMobId INT,\n  KilAmount INT,\n  KilPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Kills table with five columns:\n  \u2022 KilId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 KilChaId: integer\n  \u2022 KilMobId: integer\n  \u2022 KilAmount: integer\n  \u2022 KilPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Kills');"}
{"seed": "/* Inserts 17 rows into the Kills table. */\nINSERT INTO `Kills` VALUES (1,2,10003,11,0),(2,2,2,12,1),(3,2,4,3,2),(4,2,3,2,3),(5,2,6,3,4),(6,2,5,1,5),(7,2,10303,8,6),(8,2,10301,2,7),(9,2,1016,2,8),(10,2,1,28,9),(11,53,504,1,0),(12,18,10307,1,0),(13,18,10305,1,1),(14,18,10303,1,2),(15,18,10306,1,3),(16,18,1016,1,4),(17,53,1016,1,1)", "description": "Inserts 17 rows into the Kills table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 17 rows into the Kills table.", "response": "-- Reasoning:\nWe need to insert 17 rows into the Kills table.\n\n-- Solution:\n```sql\nINSERT INTO Kills (kill_id, victim_id, weapon_id, killer_id)\nVALUES (1, 1, 1, 1),\n       (2, 2, 2, 2),\n       (3, 3, 3, 3),\n       (4, 4, 4, 4),\n       (5, 5, 5, 5),\n       (6, 6, 6, 6),\n       (7, 7, 7, 7),\n       (8, 8, 8, 8),\n       (9, 9, 9, 9),\n       (10, 10, 10, 10),\n       (11, 11, 11, 11),\n       (12, 12, 12, 12),\n       (13, 13, 13, 13),\n       (14, 14, 14, 14),\n       (15, 15, 15, 15),\n       (16, 16, 16, 16),\n       (17, 17, 17"}
{"seed": "/* Drops the table named Legends if it exists. */\nDROP TABLE IF EXISTS `Legends`", "description": "Drops the table named Legends if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Legends if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Legends if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Legends;\n```\n\n-- Explanation:\nThis statement drops the table named Legends if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('Legends');"}
{"seed": "/* Creates a table named Legends with 8 columns: LegId (integer primary key), LegChaId (integer), LegIdentifier (varchar), LegDescription (varchar), LegIcon (integer), LegColor (integer), and LegPosition (integer). */\nCREATE TABLE `Legends` (\n  `LegId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `LegChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `LegIdentifier` varchar(32) NOT NULL DEFAULT '',\n  `LegDescription` varchar(255) NOT NULL DEFAULT '',\n  `LegIcon` int(10) unsigned NOT NULL DEFAULT '0',\n  `LegColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `LegPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`LegId`),\n  KEY `LegChaId` (`LegChaId`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=887 DEFAULT CHARSET=latin1", "description": "Creates a table named Legends with 8 columns: LegId (integer primary key), LegChaId (integer), LegIdentifier (varchar), LegDescription (varchar), LegIcon (integer), LegColor (integer), and LegPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "CHARSET", "DEFAULT", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Legends with 8 columns: LegId (integer primary key), LegChaId (integer), LegIdentifier (varchar), LegDescription (varchar), LegIcon (integer), LegColor (integer), and LegPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Legends. It should have an integer primary key so that each Legend has a unique identifier, and a name column to store the Legend\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Legends (\n  LegId INT PRIMARY KEY,\n  LegChaId INT,\n  LegIdentifier VARCHAR(255),\n  LegDescription VARCHAR(255),\n  LegIcon INT,\n  LegColor INT,\n  LegPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Legends table with eight columns:\n  \u2022 LegId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 LegChaId: integer\n  \u2022 LegIdentifier: variable\u2010length string up to 255 characters\n  \u2022 LegDescription: variable\u2010length string up to 255 characters\n  \u2022 LegIcon: integer\n  \u2022 LegColor: integer\n  \u2022 LegPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Legends');"}
{"seed": "/* Drops the table named LoginLogs if it exists. */\nDROP TABLE IF EXISTS `LoginLogs`", "description": "Drops the table named LoginLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named LoginLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the LoginLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS LoginLogs;\n```\n\n-- Explanation:\nThis statement deletes the LoginLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('LoginLogs');"}
{"seed": "/* Creates a table named LoginLogs with five columns: LgnId (integer primary key), LgnDate (datetime), LgnChaId (integer), LgnIP (varchar), and LgnActId (integer). */\nCREATE TABLE `LoginLogs` (\n  `LgnId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `LgnDate` datetime DEFAULT NULL,\n  `LgnChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `LgnIP` varchar(15) NOT NULL DEFAULT '',\n  `LgnActId` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`LgnId`),\n  KEY `LgnActId` (`LgnChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1", "description": "Creates a table named LoginLogs with five columns: LgnId (integer primary key), LgnDate (datetime), LgnChaId (integer), LgnIP (varchar), and LgnActId (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named LoginLogs with five columns: LgnId (integer primary key), LgnDate (datetime), LgnChaId (integer), LgnIP (varchar), and LgnActId (integer).", "response": "-- Reasoning:\nWe need a new table named LoginLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the date and time of the login. It should also have an integer column for the character ID, a varchar column for the IP address, and an integer column for the action ID.\n\n-- Solution:\n```sql\nCREATE TABLE LoginLogs (\n  LgnId INT PRIMARY KEY,\n  LgnDate DATETIME,\n  LgnChaId INT,\n  LgnIP VARCHAR(255),\n  LgnActId INT\n);\n```\n\n-- Explanation:\nThis statement defines the LoginLogs table with five columns:\n  \u2022 LgnId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 LgnDate: datetime\n  \u2022 LgnChaId: integer\n  \u2022 LgnIP: variable\u2010length string up to 255 characters\n  \u2022 LgnActId: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('LoginLogs');"}
{"seed": "/* Inserts five rows into the LoginLogs table. */\nINSERT INTO `LoginLogs` VALUES (1,'2015-09-21 14:32:19',2,'180.251.43.138',0),(2,'2015-09-21 16:01:17',2,'180.251.43.138',0),(3,'2015-09-21 16:16:09',2,'180.251.43.138',0),(4,'2015-09-21 21:03:57',18,'103.252.200.241',0),(5,'2015-09-21 21:04:15',53,'202.62.16.53',0)", "description": "Inserts five rows into the LoginLogs table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert five rows into the LoginLogs table.", "response": "-- Reasoning:\nWe need to insert five rows into the LoginLogs table.\n\n-- Solution:\n```sql\nINSERT INTO LoginLogs (user_id, login_time)\nVALUES (1, '2020-01-01 00:00:00'),\n       (2, '2020-01-01 00:00:01'),\n       (3, '2020-01-01 00:00:02'),\n       (4, '2020-01-01 00:00:03'),\n       (5, '2020-01-01 00:00:04');\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the LoginLogs table.\n\n-- Tests:\n-- 1. Verify five rows were inserted\nSELECT * FROM LoginLogs;"}
{"seed": "/* Drops the table named Mail if it exists. */\nDROP TABLE IF EXISTS `Mail`", "description": "Drops the table named Mail if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Mail if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Mail if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Mail;\n```\n\n-- Explanation:\nThis statement drops the table named Mail if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Mail');"}
{"seed": "/* Creates a table named Mail with 11 columns: MalId (integer primary key), MalChaName (varchar), MalChaNameDestination (varchar), MalSubject (varchar), MalBody (varchar), MalPosition (integer), MalMonth (integer), MalDay (integer), MalDeleted (integer), MalNew (integer). */\nCREATE TABLE `Mail` (\n  `MalId` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `MalChaName` varchar(16) NOT NULL DEFAULT '',\n  `MalChaNameDestination` varchar(16) NOT NULL DEFAULT '',\n  `MalSubject` varchar(52) NOT NULL DEFAULT '',\n  `MalBody` varchar(4000) NOT NULL DEFAULT '',\n  `MalPosition` int(11) unsigned NOT NULL DEFAULT '0',\n  `MalMonth` int(11) unsigned NOT NULL DEFAULT '0',\n  `MalDay` int(11) unsigned NOT NULL DEFAULT '0',\n  `MalDeleted` int(11) unsigned NOT NULL DEFAULT '0',\n  `MalNew` int(11) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`MalId`),\n  KEY `MalChaName` (`MalChaName`),\n  KEY `MalChaNameDestination` (`MalChaNameDestination`)\n) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=latin1", "description": "Creates a table named Mail with 11 columns: MalId (integer primary key), MalChaName (varchar), MalChaNameDestination (varchar), MalSubject (varchar), MalBody (varchar), MalPosition (integer), MalMonth (integer), MalDay (integer), MalDeleted (integer), MalNew (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "CHARSET", "DEFAULT", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Mail with 11 columns: MalId (integer primary key), MalChaName (varchar), MalChaNameDestination (varchar), MalSubject (varchar), MalBody (varchar), MalPosition (integer), MalMonth (integer), MalDay (integer), MalDeleted (integer), MalNew (integer).", "response": "-- Reasoning:\nWe need a new table named Mail. It should have an integer primary key so that each mail has a unique identifier, and a name column to store the mail\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Mail (\n  MalId INT PRIMARY KEY,\n  MalChaName VARCHAR(255),\n  MalChaNameDestination VARCHAR(255),\n  MalSubject VARCHAR(255),\n  MalBody VARCHAR(255),\n  MalPosition INT,\n  MalMonth INT,\n  MalDay INT,\n  MalDeleted INT,\n  MalNew INT\n);\n```\n\n-- Explanation:\nThis statement defines the Mail table with 11 columns:\n  \u2022 MalId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 MalChaName: variable\u2010length string up to 255 characters\n  \u2022 MalChaNameDestination: variable\u2010length string up to 255 characters\n  \u2022 MalSubject: variable\u2010length string up to 255 characters\n  \u2022 MalBody: variable\u2010length string up to 255 characters\n  \u2022 MalPosition: integer\n  \u2022 MalMonth: integer\n  \u2022 MalDay: integer\n  \u2022 MalDeleted: integer\n  \u2022 MalNew: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Mail');"}
{"seed": "/* Creates a table named MapRegistry with the following columns: */\nINSERT INTO `Mail` VALUES (9,'ZapCure','god','yg gak isa','gak ada skillnya\\r\\renchant\\rinfuse\\ringress\\r\\rgak bisa di pencet\\rvigor',1,8,28,0,0),(10,'ZapCure','god','ada lagi','semua job skill\\r\\rsoothe gak jalan\\rsilver thread cuman pemberitahuan w dan e nya\\r\\rsetau saya retribution makan seluruh mp bukan setengahnya',2,8,28,0,0),(11,'God','god','a','a\\rs',3,8,30,1,0),(12,'God','god','sdas','s',4,8,30,1,0),(13,'God','gracia','warrior','\\rWolf\\'s Fury\\rTiger\\'s Fury\\rDragon\\'s Fury\\rSoul Fly\\rBackstab\\rEnchant\\rInfuse\\rIngress\\rFist of God\\rFlank\\rPotence\\rRelief\\rSlash\\rBerserk\\rBless\\rVigor\\rWhirlwind\\rTiger Slash\\rU gum swording\\rCho Spirit\\rSho Spirit\\rChungryong Rage\\rEndure\\rCyclone\\r',1,9,4,0,0),(14,'God','Gracia','rogue','Ambush\\rAmnesia\\rBeast\\rDesperate Attack\\rDrain\\rFeral\\rFlich\\rFrisk\\rGangrel\\rIgnite\\rInvisible\\rJudge\\rLethal Strike\\rMend Wounds\\rMight\\rRecover\\rRodent\\rWolf\\'s fury\\rSeal Wounds\\rSet Trap\\rShadow Dance Old\\rShadow Figure\\rSlow\\rSpy\\rJujak fire\\rJujak inferno\\rJujak blaze\\rTiger\\'s fury\\rHyunmoo snow\\rHyunmoo deathrain\\rHyunmoo blaspheme\\r\\rBaekho surge\\rBaekho disaster\\rBaekho cataclysm\\r\\rChungryong ray\\rChung thunderbolt\\rChungryong Slice\\r\\rWithenal strike\\rSword rash\\rShadow sword\\rBurst\\rBody replacement\\rSeem\\rDash\\rCutpurse\\r',2,9,4,0,0),(15,'God','Gracia','Poet','Annoint\\rAtone\\rBarrier\\rBuss Kiss\\rHarden Armor\\rInspiration\\rInspire\\rLay Hands\\rReturn\\rPurge\\rRemedy\\rRemove Curse\\rRemove Veil\\rRetribution\\rRevitalize\\rSanctuary\\rScourge\\rSecond Sight\\rSin of Life\\rSteed\\rValor\\rVital Spark\\rWater of Life\\rHyunmoo Revival\\rHeal Charm\\rInvoked\\rHarden Body\\r',3,9,4,0,0),(16,'Gracia','Gracia','asd','nweap pweap weap\\rnarmor parmor armor\\rnboots pboots boots\\rncrown pcrown crown\\rnshield pshield shield\\rnface pface face\\rnhair phair hair\\rnfacea pfacea facea',4,9,4,0,0),(17,'Senyen','Senyen','a','ote: \\r\\rNext      = \\\"n\\\"\\rPrevious  = \\\"p\\\"\\r\\r\\rEQUIP:\\r------------------------------------------------------------ \\rWeapon       : \\\"weap\\\"\\rArmor        : \\\"armor\\\"\\rShield       : \\\"shield\\\"\\rBoots        : \\\"boots\\\"\\rFaceAccesory : \\\"facea\\\"\\rNecklace     : \\\"neck\\\"\\rMantle       : \\\"cape\\\"\\rHelmet       : \\\"helm\\\"\\rCrown        : \\\"crown\\\"\\rHair         : \\\"hair\\\"\\rFace         : \\\"face\\\"\\r\\r\\r\\rCORE:\\r------------------------------------------------------------\\r- sound\\r- spell (animation)\\r- music\\r- dis   (disguise)\\r\\r\\r\\r\\r\\r== Usage ====================================================\\r\\r \\\"nweap\\\" or \\\"pweap\\\"    -> Browse weapon gfx look (next/prev)\\r \\\"weap 87\\\"             -> Go/jump to number 87 \\r \\\"weap 87 4\\\"           -> \\\"4\\\" is weapon gfx color\\r\\r\\r\\r \\\"nsound\\\" or \\\"psound\\\"  -> Browse gfx Sound effect\\r \\\"sound 28\\\"            -> Go/jump to number 28\\r\\r\\r \\\"ndis\\\" or \\\"pdis\\\"      -> Browse gfx look for mobs/npc\\r \\\"dis 42\\\"              -> Go/jump to number 42\\r \\\"dis 42 6\\\"            -> \\\"6\\\" mob/npc look color\\r\\r\\r\\r-------------------------------------------------------------\\r',1,9,5,0,0),(18,'Senyen','Senyen','a','\\r/ww        -> Walk through the walls/object (on/off)\\r\\r/bc \\\"chat\\\" -> Broadcast\\r\\r/cspells   -> Clear/delete all spells (self)\\r\\r/cinv      -> Clear/delete all inventory (self)\\r\\r/gmc       -> GM chat channel (on/off)\\r\\r/res       -> Ressurection (self)\\r\\r/heal      -> Heal Health = maxHealth (self)\\r\\r/sum       [string] *target\\r\\r/app       [string] *target\\r\\r/gold      [num] *amount\\r \\r/state     [num] *0 = alive\\r                 *1 = dead\\r                 *2 = invisible\\r                 *3 = mount\\r                 *4 = disguise\\r\\r/speed     [num] *0 = fastest\\r\\r/s         [num/string] *spell.id / spell.yname\\r\\r/i         [num/string] *item.id / item.yname\\r\\r/level     [num] *amount\\r\\r/hair      [num(, num)] *number of hair,  color\\r\\r/face      [num(, num)] *number of hair,  color\\r\\r/silence   [string] *target\\r\\r/warp      [num(, num(, num))] * map.id, x, y',2,9,5,0,0),(19,'God','yumiko','ini','if class == 1 and job == 1 then-- Warrior\\r        if hp <= 300000 then req = 10000000 end\\rif hp > 2400000 then req = 275000000 end\\r        if hp > 300000 and hp <= 600000 then req = 25000000 end\\r        if hp > 600000 and hp <= 900000 then req = 50000000 end\\r        if hp > 900000 and hp <= 1200000 then req = 75000000 end\\r        if hp > 1200000 and hp <= 1500000 then req = 100000000 end\\r        if hp > 1500000 and hp <= 1725000 then req = 125000000 end\\r        if hp > 1725000 and hp <= 1950000 then req = 150000000 end\\r        if hp > 1950000 and hp <= 2175000 then req = 175000000 end\\r        if hp > 2175000 and hp <= 2400000 then req = 200000000 end      \\relseif class == 2 and job == 2 then-- ROGUE\\r        if hp <= 215000 then req = 10000000 end\\rif hp > 2000000 then req = 275000000 end\\r        if hp > 215000 and hp <= 430000 then req = 25000000 end\\r        if hp > 430000 and hp <= 645000 then req = 50000000 end\\r        if hp > 645000 and hp <= 860000 then req = 75000000 end\\r        if hp > 860000 and hp <= 1075000 then req = 100000000 end\\r        if hp > 1075000 and hp <= 1230000 then req = 125000000 end\\r        if hp > 1230000 and hp <= 1385000 then req = 150000000 end\\r        if hp > 1385000 and hp <= 1540000 then req = 175000000 end\\r        if hp > 1540000 and hp <= 1700000 then req = 200000000 end\\r        if hp > 1700000 and hp <= 1850000 then req = 225000000 end\\r        if hp > 1850000 and hp <= 2000000 then req = 250000000 end\\relseif class == 3 and job == 3 then-- MAGE\\r        if hp <= 90000 then req = 10000000 end\\rif hp > 825000 then req = 275000000 end\\r        if hp > 90000 and hp <= 180000 then req = 25000000 end\\r        if hp > 180000 and hp <= 270000 then req = 50000000 end\\r        if hp > 270000 and hp <= 360000 then req = 75000000 end\\r        if hp > 360000 and hp <= 450000 then req = 100000000 end\\r        if hp > 450000 and hp <= 512000 then req = 125000000 end\\r        if hp > 512000 and hp <= 575000 then req = 150000000 end\\r        if hp > 575000 and hp <= 637500 then req = 175000000 end\\r        if hp > 637500 and hp <= 700000 then req = 200000000 end\\r        if hp > 700000 and hp <= 762500 then req = 225000000 end\\r        if hp > 762500 and hp <= 825000 then req = 250000000 end      \\relseif class == 4 and job == 4 then-- POET\\r        if hp <= 120000 then req = 10000000 end\\rif hp > 1150000 then req = 275000000 end\\r        if hp > 120000 and hp <= 240000 then req = 25000000 end\\r        if hp > 240000 and hp <= 360000 then req = 50000000 end\\r        if hp > 360000 and hp <= 480000 then req = 75000000 end\\r        if hp > 480000 and hp <= 600000 then req = 100000000 end\\r        if hp > 600000 and hp <= 700000 then req = 125000000 end\\r        if hp > 700000 and hp <= 800000 then req = 150000000 end\\r        if hp > 800000 and hp <= 900000 then req = 175000000 end\\r        if hp > 900000 and hp <= 1000000 then req = 200000000 end\\r        if hp > 1000000 and hp <= 1100000 then req = 225000000 end\\r        if hp > 1100000 and hp <= 1150000 then req = 250000000 end\\rend',1,9,7,0,0),(20,'XiaoChuA','God','Off dolo Bye','...................................................................................................................................................................................................',5,9,8,0,0),(21,'ZapCure','god','wow saya di cabut hak gm nya','emang ud masuk apa beta ya?',6,9,11,0,0),(22,'God','ZapCure','iya','iya, dari pada kelamaan. \\rsbnrny dr awal ny jg gw dh salah.\\rgw tau bakal kyk gini.\\r',1,9,11,0,0),(23,'God','god','test','haloooo',7,9,13,0,0),(24,'ZapCure','God','Test','<b>[Vending]  Item sold !\\n\\n========================================\\n\\nName     : Iga Ninja Sword\\nQuantity : 1\\nPrice    : 25,000 coins\\n',8,9,13,0,0),(25,'God','ZapCure','Test','<b>[Vending]  Item sold !\\n\\n========================================\\n\\nName     : Iga Ninja Sword\\nQuantity : 1\\nPrice    : 5,000 coins\\n',2,9,13,0,0),(26,'ZapCure','God','Test','<b>[Vending]  Item sold !\\n\\n========================================\\n\\nName     : Wooden Sword\\nQuantity : 1\\nPrice    : 50,000 coins\\n',9,9,13,0,0),(27,'edric','God','Test','<b>[Vending]  Item sold !\\n\\n========================================\\n\\nName     : Return Scroll\\nQuantity : 100\\nPrice    : 50,000 coins\\n',10,9,13,1,0),(28,'God','zapcure','hai','bro. stelah w pkir2.. u yg trkhr jadi gM.\\rsekarang dah GM lagi.\\rjadi cm gw, ben, ama u...\\r\\rgw abs lihat2 log chat.. itu yg namanya logic kenal ga sapa?',3,9,13,0,0),(29,'ZapCure','God','entah','> bro. stelah w pkir2.. u yg trkhr jadi gM.\\r> sekarang dah GM lagi.\\r> jadi cm gw, ben, ama u...\\r> \\r> gw abs lihat2 log chat.. itu yg namanya logic kenal ga sapa?\\rga kenel\\r',11,9,14,0,0),(30,'ZapCure','God','entah','> bro. stelah w pkir2.. u yg trkhr jadi gM.\\r> sekarang dah GM lagi.\\r> jadi cm gw, ben, ama u...\\r> \\r> gw abs lihat2 log chat.. itu yg namanya logic kenal ga sapa?\\rga kenel\\r',12,9,14,0,0),(31,'ZapCure','God','nick logic','> bro. stelah w pkir2.. u yg trkhr jadi gM.\\r> sekarang dah GM lagi.\\r> jadi cm gw, ben, ama u...\\r> \\r> gw abs lihat2 log chat.. itu yg namanya logic kenal ga sapa?\\rtadi sih dia bilang namanya virgoboy\\ranak pn',13,9,14,0,0),(32,'Logic','zapcure','wee','di summon.. T_T',4,9,14,0,0),(33,'ZapCure','Logic','hah wkwkwkwk','> di summon.. T_T\\rselamat berenang kk',1,9,14,1,0),(34,'TwinkleEclipse','god','sombong','kk gm koq gak bs di whisp sok x...',14,9,14,0,0),(35,'God','zapcure','ini momon monkey nya','10901, monkey1, Monkey1, 126, 2\\r10902, monkey2, Monkey2, 126, 3\\r10903, monkey3, Monkey3, 126, 4\\r10904, monkey4, Monkey4, 126, 28\\r10905, big_monkey1, Big Monkey1, 126, 36\\r10906, big_monkey2, Big Monkey2, 126, 29\\r10907, big_monkey3, Big Monkey3, 127, 28\\r',5,9,14,0,0),(36,'NewBie','zapcure','onluatest','onLuaTest = function(player)\\r\\r        local i = player:getObjectsInMap(player.m, BL_ITEM)\\r        local mobID = math.random(11105, 11106)\\r\\r\\r        --[[\\r        if #i > 0 then\\r                for x = 1, #i do\\r                        if i[x].yname == \\\"return_scroll\\\" then\\r                                player:sendAnimationXY(248, i[x].x, i[x].y)\\r                        end\\r                end\\r        end\\r\\r        ]]--\\r\\r        if #i > 0 then\\r                for x = 1, #i do\\r                        if i[x].yname == \\\"return_scroll\\\" then\\r                                player:spawn(mobID, i[x].x, i[x].y, 1)\\r                        end\\r                end\\r        end\\r',6,9,14,0,0),(37,'God','zapcure','ini','https://www.dropbox.com/s/vkdxak0pt3jkfjl/MapEditor.zip?dl=0\\r',7,9,14,0,0),(38,'ZapCure','god','aduh mate deh klo kepencet','gimana yak?\\rbisa didelete ga\\r>,<\\rbeneran aja kepencet \\r',15,9,14,0,0),(39,'ZapCure','god','klo kepencet addmon','asal lom reload gak muncul kan?\\rgimana yak aduh menyesal saya\\r>,<\\rbeneran aja pas dibilang ati2 kepencet\\rgak sengaja\\rkali ini ingetnya ndisc\\r>,<',16,9,14,0,0),(40,'God','god','chu rua','Go to any tutor (Iron heart/jade spear 055,122 in Buya). He will ask your help to help his friend Chu Rua. By agreeing, you will be warped automatically there where NPC Chu Rua is in vicinity.\\r\\rClick NPC Chu Rua, he will tell about his stolen ginseng and ask for your help to look for it. After agreeing, go up across the river where NPC rabbit stood at 054,030. Say \\\"hello\\\" and then say \\\"ginseng\\\". He will lead you to a stone at 066,005. Click that stone. You will find nothing. But the rabbit did told you that he is running from NPC tiger which can be found at 014,008. Go there. Click that tiger and he will say that he is looking for NPC rabbit. Say \\\"rabbit\\\", he will tell you that NPC rabbit had hidden the ginseng at 007,009. Go to 007,009 and you will get a pop up about you finding that ginseng. A mountain ginseng will be in your inventory. Go back to NPC Chu Rua at 062,048. Click him and he will be happy that you have found his ginseng.',17,9,15,0,0),(41,'ZapCure','God','link navicat 11','http://www.remo-xp.com/2014/05/navicat-premium-v11-0-17-x86x64-full-keygen-patch.html',18,9,19,0,0),(42,'ZapCure','god','bola ud ada','silakan di proses',19,9,20,0,0),(43,'ZapCure','god','nenek2 nya ga reset','di reset berapa jem 1x ya',20,9,21,0,0),(44,'God','zapcure','kwkw','wkwkwk lupa bkin reset nya\\r',8,9,21,0,0),(45,'God','zapcure','test','gw ada buat ore mining, coba di test\\rgw blum test sih..\\r\\ryg uda di buat:\\r1. add legend di npc\\r2. pilihan di npc nya waktu beli item (pake BP/ PP)\\r3. waktu item di pilih di tanya amount mau beli brp biji,\\r4. total harga nya bener ga,\\r5. otomatis spawn berbeda kordinat pakai script random spawn\\r6. otomatis tiap 1 menit check kalo di dalam ruangan momon < 20\\r   spawn lagi\\r7. pertama x masuk dalam ruangan, check juga kalo momon < 20\\r   ekor.\\r\\r\\r\\rMomon ny blom bisa di pukul sih blum buat script senjata nya\\r\\r',9,9,21,0,0),(46,'ZapCure','God','ud tes','> gw ada buat ore mining, coba di test\\r> gw blum test sih..\\r> \\r> yg uda di buat:\\r> 1. add legend di npc\\r> 2. pilihan di npc nya waktu beli item (pake BP/ PP)\\r> 3. waktu item di pilih di tanya amount mau beli brp biji,\\r> 4. total harga nya bener ga,\\r> 5. otomatis spawn berbeda kordinat pakai script random spawn\\r> 6. otomatis tiap 1 menit check kalo di dalam ruangan momon < > 20\\r>    spawn lagi\\r> 7. pertama x masuk dalam ruangan, check juga kalo momon < 20\\r>    ekor.\\r> \\r> \\r> \\r> Momon ny blom bisa di pukul sih blum buat script senjata nya\\r> \\r\\r1. ud ada\\r2. itu juga ud ada\\r3 dan 4. tadi beli 5 bener harganya 100 totalnya 500 bener kok\\r5. pas masuk ga beda koor selalu didepan tangga.\\r6. tadi ud pencet /respawn ga muncul2 juga\\r7. gak ada momon hanya ada batu,gerobak rusak,sekop dll\\ryg lain ga ada >,<\\r\\r',21,9,21,0,0),(47,'ZapCure','God','mau tanya menurut u','kalau untuk raja bagus ga klo ud tua rajanya dis 922 apa 923\\r922 kakek2 ada dudukan emas belakangnya\\rkalau 923 itu orang ganteng masih muda',22,9,21,0,0),(48,'ZapCure','newbie','lucu si','https://www.youtube.com/watch?v=aKRZn0uS6eA',1,9,21,0,0);\n/*!40000 ALTER TABLE `Mail` ENABLE KEYS */;\nUNLOCK TABLES;\n\n--\n-- Table structure for table `MapRegistry`\n--\n\nDROP TABLE IF EXISTS `MapRegistry`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `MapRegistry` (\n  `MrgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `MrgMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `MrgIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `MrgValue` int(10) unsigned NOT NULL DEFAULT '0',\n  `MrgPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`MrgId`),\n  KEY `MrgMapId` (`MrgMapId`)", "description": "Creates a table named MapRegistry with the following columns:", "concepts": ["```\nCREATE TABLE `MapRegistry` (\n  `MrgId` int(10) unsigned NOT NULL AUTO_INCREMENT", "`M"], "instruction": "Write a SQL query to create a table named MapRegistry with the following columns:\n```\nMrgId: The primary key of the table.\nMrgMapId: The map ID of the table.\nMrgIdentifier: The identifier of the table.\nMrgValue: The value of the table.\nMrgPosition: The position of the table.\n```", "response": "-- Reasoning:\nWe need a new table named MapRegistry. It should have a primary key, a map ID, an identifier, a value, and a position.\n\n-- Solution:\n```sql\nCREATE TABLE MapRegistry (\n  MrgId INT PRIMARY KEY,\n  MrgMapId INT,\n  MrgIdentifier VARCHAR(255),\n  MrgValue VARCHAR(255),\n  MrgPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the MapRegistry table with five columns:\n  \u2022 MrgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 MrgMapId: integer\n  \u2022 MrgIdentifier: variable\u2010length string up to 255 characters\n  \u2022 MrgValue: variable\u2010length string up to 255 characters\n  \u2022 MrgPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MapRegistry');"}
{"seed": "/* Inserts the values (31,1053,'boss',1073742380,0), (32,1047,'boss',1073742218,0), (48,20001,'boss',1173741823,0), (51,1104,'arena_1_2',24,0), (52 */\nINSERT INTO `MapRegistry` VALUES (31,1053,'boss',1073742380,0),(32,1047,'boss',1073742218,0),(48,20001,'boss',1173741823,0),(51,1104,'arena_1_2',24,0),(52,1104,'arena_15_1',24,1),(56,10,'lift_lobby',1,5)", "description": "Inserts the values (31,1053,'boss',1073742380,0), (32,1047,'boss',1073742218,0), (48,20001,'boss',1173741823,0), (51,1104,'arena_1_2',24,0), (52", "concepts": ["INSERT INTO", "VALUES", "MapRegistry", "MapRegistry", "MapRegistry", "MapRegistry", "MapRegistry", "MapRegistry", "MapRegistry", "MapRegistry", "Map"], "instruction": "Write a SQL query to insert the values (31,1053,'boss',1073742380,0), (32,1047,'boss',1073742218,0), (48,20001,'boss',1173741823,0), (51,1104,'arena_1_2',24,0), (52,1104,'arena_15_1',24,1), (56,10,'lift_lobby',1,5) into the MapRegistry table.", "response": "-- Reasoning:\nWe need to insert the following values into the MapRegistry table:\n\n-- Solution:\n```sql\nINSERT INTO MapRegistry (map_id, map_name, map_type, map_status, map_version)\nVALUES (31, 'boss', 'boss', 1073742380, 0),\n       (32, 'boss', 'boss', 1073742218, 0),\n       (48, 'boss', 'boss', 1173741823, 0),\n       (51, 'arena_1_2', 'arena', 24, 0),\n       (52, 'arena_15_1', 'arena', 24, 1),\n       (56, 'lift_lobby', 'lift_lobby', 1, 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts the values into the MapRegistry table.\n\n-- Tests:\n-- 1. Verify the values are inserted\nSELECT * FROM MapRegistry;"}
{"seed": "/* Drops the table named Maps if it exists. */\nDROP TABLE IF EXISTS `Maps`", "description": "Drops the table named Maps if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named Maps if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Maps if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Maps;\n```\n\n-- Explanation:\nThis statement drops the Maps table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Maps');"}
{"seed": "/* Creates a table named Maps with 19 columns: MapId (integer primary key), MapName (varchar), MapBGM (integer), MapPvP (integer), MapSpells (integer), MapLight (integer), MapWeather (integer), MapSweepTime (integer), MapChat (integer), MapGhosts (integer), MapRegion (integer), MapIndoor (integer), MapWarpout (integer), MapBind (integer), MapFile (varchar), MapAfk (integer */\nCREATE TABLE `Maps` (\n  `MapId` int(10) unsigned NOT NULL,\n  `MapName` varchar(64) NOT NULL DEFAULT '',\n  `MapBGM` int(10) unsigned NOT NULL,\n  `MapPvP` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapSpells` int(10) unsigned NOT NULL DEFAULT '1',\n  `MapLight` int(10) unsigned NOT NULL,\n  `MapWeather` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapSweepTime` int(10) unsigned NOT NULL DEFAULT '7200000',\n  `MapChat` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapGhosts` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapRegion` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapIndoor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapWarpout` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapBind` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapFile` varchar(1024) NOT NULL DEFAULT '',\n  `MapAfk` int(10) unsigned NOT NULL DEFAULT '0',\n  `MapSpecial` int(10) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`MapId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Maps with 19 columns: MapId (integer primary key), MapName (varchar), MapBGM (integer), MapPvP (integer), MapSpells (integer), MapLight (integer), MapWeather (integer), MapSweepTime (integer), MapChat (integer), MapGhosts (integer), MapRegion (integer), MapIndoor (integer), MapWarpout (integer), MapBind (integer), MapFile (varchar), MapAfk (integer", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "AUTO_INCREMENT", "FOREIGN KEY", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Maps with 19 columns: MapId (integer primary key), MapName (varchar), MapBGM (integer), MapPvP (integer), MapSpells (integer), MapLight (integer), MapWeather (integer), MapSweepTime (integer), MapChat (integer), MapGhosts (integer), MapRegion (integer), MapIndoor (integer), MapWarpout (integer), MapBind (integer), MapFile (varchar), MapAfk (integer), MapSpecial (integer).", "response": "-- Reasoning:\nWe need a new table named Maps. It should have an integer primary key so that each map has a unique identifier, and a name column to store the map\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Maps (\n  MapId INT PRIMARY KEY,\n  MapName VARCHAR(255),\n  MapBGM INT,\n  MapPvP INT,\n  MapSpells INT,\n  MapLight INT,\n  MapWeather INT,\n  MapSweepTime INT,\n  MapChat INT,\n  MapGhosts INT,\n  MapRegion INT,\n  MapIndoor INT,\n  MapWarpout INT,\n  MapBind INT,\n  MapFile VARCHAR(255),\n  MapAfk INT,\n  MapSpecial INT\n);\n```\n\n-- Explanation:\nThis statement defines the Maps table with 19 columns:\n  \u2022 MapId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 MapName: variable\u2010length string up to 255 characters\n  \u2022 MapBGM: integer\n  \u2022 MapPvP: integer\n  \u2022 MapSpells: integer\n  \u2022 MapLight: integer\n  \u2022 MapWeather: integer\n  \u2022 MapSweepTime: integer\n  \u2022 MapChat: integer\n  \u2022 MapGhosts: integer\n  \u2022 MapRegion: integer\n  \u2022 MapIndoor: integer\n  \u2022 MapWarpout: integer\n  \u2022 MapBind: integer\n  \u2022 MapFile:"}
{"seed": "/* Drops the table named MobDeathDropLogs if it exists. */\nDROP TABLE IF EXISTS `MobDeathDropLogs`", "description": "Drops the table named MobDeathDropLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named MobDeathDropLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the table named MobDeathDropLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS MobDeathDropLogs;\n```\n\n-- Explanation:\nThis DROP statement removes the table named MobDeathDropLogs if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('MobDeathDropLogs');"}
{"seed": "/* Creates a table named MobDeathDropLogs with 8 columns: MddId (integer primary key), MddDate (datetime), MddMobId (integer), MddMapId (integer), MddX (integer), MddY (integer), MddItmId (integer), and MddAmount (integer). */\nCREATE TABLE `MobDeathDropLogs` (\n  `MddId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `MddDate` datetime DEFAULT NULL,\n  `MddMobId` int(10) unsigned NOT NULL DEFAULT '0',\n  `MddMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `MddX` int(10) unsigned NOT NULL DEFAULT '0',\n  `MddY` int(10) unsigned NOT NULL DEFAULT '0',\n  `MddItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `MddAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`MddId`),\n  KEY `MddMobId` (`MddMobId`),\n  KEY `MddMapId` (`MddMapId`),\n  KEY `MddItmId` (`MddItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named MobDeathDropLogs with 8 columns: MddId (integer primary key), MddDate (datetime), MddMobId (integer), MddMapId (integer), MddX (integer), MddY (integer), MddItmId (integer), and MddAmount (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "ENGINE", "CHARSET", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named MobDeathDropLogs with 8 columns: MddId (integer primary key), MddDate (datetime), MddMobId (integer), MddMapId (integer), MddX (integer), MddY (integer), MddItmId (integer), and MddAmount (integer).", "response": "-- Reasoning:\nWe need a new table named MobDeathDropLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the date and time of the log. It should also have columns for the mob, map, x, y, item, and amount.\n\n-- Solution:\n```sql\nCREATE TABLE MobDeathDropLogs (\n  MddId INT PRIMARY KEY,\n  MddDate DATETIME,\n  MddMobId INT,\n  MddMapId INT,\n  MddX INT,\n  MddY INT,\n  MddItmId INT,\n  MddAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the MobDeathDropLogs table with eight columns:\n  \u2022 MddId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 MddDate: datetime\n  \u2022 MddMobId: integer\n  \u2022 MddMapId: integer\n  \u2022 MddX: integer\n  \u2022 MddY: integer\n  \u2022 MddItmId: integer\n  \u2022 MddAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MobDeathDropLogs');"}
{"seed": "/* Drops the table named MobEquipment if it exists. */\nDROP TABLE IF EXISTS `MobEquipment`", "description": "Drops the table named MobEquipment if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named MobEquipment if it exists.", "response": "-- Reasoning:\nWe need to drop the table named MobEquipment if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS MobEquipment;\n```\n\n-- Explanation:\nThis statement drops the table named MobEquipment if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('MobEquipment');"}
{"seed": "/* Creates a table named MobEquipment with five columns: MeqId (integer primary key), MeqMobId (integer), MeqLook (integer), MeqColor (integer), and MeqSlot (integer). */\nCREATE TABLE `MobEquipment` (\n  `MeqId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `MeqMobId` int(10) unsigned NOT NULL DEFAULT '0',\n  `MeqLook` int(10) unsigned NOT NULL DEFAULT '0',\n  `MeqColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MeqSlot` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`MeqId`),\n  KEY `MeqMobId` (`MeqMobId`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named MobEquipment with five columns: MeqId (integer primary key), MeqMobId (integer), MeqLook (integer), MeqColor (integer), and MeqSlot (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "BTREE", "DEFAULT", "ENGINE", "CHARSET", "INSERT INTO", "VALUES", "UPDATE", "SET", "WHERE"], "instruction": "Write a SQL query to create a table named MobEquipment with five columns: MeqId (integer primary key), MeqMobId (integer), MeqLook (integer), MeqColor (integer), and MeqSlot (integer).", "response": "-- Reasoning:\nWe need a new table named MobEquipment. It should have an integer primary key so that each equipment has a unique identifier, and four other columns to store the equipment\u2019s look, color, and slot.\n\n-- Solution:\n```sql\nCREATE TABLE MobEquipment (\n  MeqId INT PRIMARY KEY,\n  MeqMobId INT,\n  MeqLook INT,\n  MeqColor INT,\n  MeqSlot INT\n);\n```\n\n-- Explanation:\nThis statement defines the MobEquipment table with five columns:\n  \u2022 MeqId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 MeqMobId: integer\n  \u2022 MeqLook: integer\n  \u2022 MeqColor: integer\n  \u2022 MeqSlot: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MobEquipment');"}
{"seed": "/* Drops the table named Mobs if it exists. */\nDROP TABLE IF EXISTS `Mobs`", "description": "Drops the table named Mobs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Mobs if it exists.", "response": "-- Reasoning:\nWe need to delete the table named Mobs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Mobs;\n```\n\n-- Explanation:\nThis statement deletes the table named Mobs if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Mobs');"}
{"seed": "/* Creates a table named Mobs with 60 columns. */\nCREATE TABLE `Mobs` (\n  `MobId` int(10) unsigned NOT NULL,\n  `MobIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `MobDescription` varchar(45) NOT NULL DEFAULT '',\n  `MobCommonScript` varchar(45) NOT NULL DEFAULT '',\n  `MobBehavior` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAI` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobIsChar` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobIsNpc` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobLook` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobLookColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMountLook` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobVita` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMana` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobExperience` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobHit` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobDam` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMark` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMinimumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMaximumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMoveTime` int(10) unsigned NOT NULL DEFAULT '900',\n  `MobAttackTime` int(10) unsigned NOT NULL DEFAULT '900',\n  `MobSpawnTime` int(10) unsigned NOT NULL DEFAULT '60',\n  `MobMight` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobGrace` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobWill` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobWisdom` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobCon` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobProtection` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobArmor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobSound` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId1` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount1` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate1` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId2` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount2` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate2` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId3` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount3` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate3` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId4` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount4` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate4` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId5` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount5` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate5` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId6` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount6` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate6` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId7` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount7` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate7` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId8` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount8` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate8` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobReturnDistance` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobSex` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobFace` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobFaceColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobHair` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobHairColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobSkinColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobState` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`MobId`),\n  KEY `MobItmId1` (`MobItmId1`) USING BTREE,\n  KEY `MobItmId2` (`MobItmId2`) USING BTREE,\n  KEY `MobItmId3` (`MobItmId3`) USING BTREE,\n  KEY `MobItmId4` (`MobItmId4`) USING BTREE,\n  KEY `MobItmId5` (`MobItmId5`) USING BTREE,\n  KEY `MobItmId6` (`MobItmId6`) USING BTREE,\n  KEY `MobItmId7` (`MobItmId7`) USING BTREE,\n  KEY `MobItmId8` (`MobItmId8`) USING BTREE,\n  KEY `MobItmId1_2` (`MobItmId1`,`MobItmId2`,`MobItmId3`,`MobItmId4`,`MobItmId5`,`MobItmId6`,`MobItmId7`,`MobItmId8`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Mobs with 60 columns.", "concepts": ["CREATE TABLE", "Mobs", "INT", "PRIMARY KEY", "KEY", "BTREE", "VARCHAR", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Mobs with 60 columns.", "response": "-- Reasoning:\nWe need a new table named Mobs. It should have 60 columns, each of which is a VARCHAR(255).\n\n-- Solution:\n```sql\nCREATE TABLE Mobs (\n  mob_id INT PRIMARY KEY,\n  mob_name VARCHAR(255),\n  mob_type VARCHAR(255),\n  mob_level INT,\n  mob_hp INT,\n  mob_mp INT,\n  mob_atk INT,\n  mob_def INT,\n  mob_mat INT,\n  mob_mdef INT,\n  mob_agl INT,\n  mob_luk INT,\n  mob_exp INT,\n  mob_gold INT,\n  mob_drop_item_id INT,\n  mob_drop_item_rate INT,\n  mob_drop_gold_min INT,\n  mob_drop_gold_max INT,\n  mob_drop_exp INT,\n  mob_drop_quest_id INT,\n  mob_drop_quest_rate INT,\n  mob_drop_quest_item_id INT,\n  mob_drop_quest_item_rate INT,\n  mob_drop_quest_item_min INT,\n  mob_drop_quest_item_max INT,\n  mob_drop_quest_item_amount INT,\n  mob_drop_quest_item_amount_min INT,\n  mob_drop_quest_item_amount_max INT,"}
{"seed": "/* Drops the table named Mobs_sample if it exists. */\nDROP TABLE IF EXISTS `Mobs_sample`", "description": "Drops the table named Mobs_sample if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Mobs_sample if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Mobs_sample if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Mobs_sample;\n```\n\n-- Explanation:\nThis statement drops the table named Mobs_sample if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('Mobs_sample');"}
{"seed": "/* Creates a table named Mobs_sample with 60 columns. */\nCREATE TABLE `Mobs_sample` (\n  `MobId` int(10) unsigned NOT NULL,\n  `MobIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `MobDescription` varchar(45) NOT NULL DEFAULT '',\n  `MobBehavior` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAI` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobIsChar` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobIsNpc` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobLook` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobLookColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobVita` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMana` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobExperience` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobHit` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobDam` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMark` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMinimumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMaximumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMoveTime` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAttackTime` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobSpawnTime` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobMight` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobGrace` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobWill` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobWisdom` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobCon` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobProtection` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobArmor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobSound` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId1` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount1` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate1` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId2` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount2` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate2` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId3` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount3` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate3` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId4` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount4` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate4` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId5` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount5` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate5` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId6` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount6` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate6` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId7` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount7` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate7` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobItmId8` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobAmount8` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobRate8` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobReturnDistance` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobSex` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobFace` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobFaceColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobHair` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobHairColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobSkinColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `MobState` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`MobId`),\n  KEY `MobItmId1` (`MobItmId1`) USING BTREE,\n  KEY `MobItmId2` (`MobItmId2`) USING BTREE,\n  KEY `MobItmId3` (`MobItmId3`) USING BTREE,\n  KEY `MobItmId4` (`MobItmId4`) USING BTREE,\n  KEY `MobItmId5` (`MobItmId5`) USING BTREE,\n  KEY `MobItmId6` (`MobItmId6`) USING BTREE,\n  KEY `MobItmId7` (`MobItmId7`) USING BTREE,\n  KEY `MobItmId8` (`MobItmId8`) USING BTREE,\n  KEY `MobItmId1_2` (`MobItmId1`,`MobItmId2`,`MobItmId3`,`MobItmId4`,`MobItmId5`,`MobItmId6`,`MobItmId7`,`MobItmId8`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Mobs_sample with 60 columns.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "AUTO_INCREMENT", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named Mobs_sample with 60 columns.", "response": "-- Reasoning:\nWe need a new table named Mobs_sample. It should have 60 columns.\n\n-- Solution:\n```sql\nCREATE TABLE Mobs_sample (\n  col1 INT,\n  col2 INT,\n  col3 INT,\n  col4 INT,\n  col5 INT,\n  col6 INT,\n  col7 INT,\n  col8 INT,\n  col9 INT,\n  col10 INT,\n  col11 INT,\n  col12 INT,\n  col13 INT,\n  col14 INT,\n  col15 INT,\n  col16 INT,\n  col17 INT,\n  col18 INT,\n  col19 INT,\n  col20 INT,\n  col21 INT,\n  col22 INT,\n  col23 INT,\n  col24 INT,\n  col25 INT,\n  col26 INT,\n  col27 INT,\n  col28 INT,\n  col29 INT,\n  col30 INT,\n  col31 INT,\n  col32 INT,\n  col33 INT,\n  col34 INT,\n  col35 INT,\n  col36 INT,\n  col37 INT,\n  col38 INT,\n  col39 INT,\n  col40 INT,\n  col41 INT,\n  col42 INT,\n  col43 INT,\n  col44 INT,\n  col45 INT"}
{"seed": "/* Drops the table named NPCDeathDropLogs if it exists. */\nDROP TABLE IF EXISTS `NPCDeathDropLogs`", "description": "Drops the table named NPCDeathDropLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named NPCDeathDropLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the table named NPCDeathDropLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS NPCDeathDropLogs;\n```\n\n-- Explanation:\nThis DROP statement deletes the table named NPCDeathDropLogs if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('NPCDeathDropLogs');"}
{"seed": "/* Creates a table named NPCDeathDropLogs with 8 columns: NddId (integer primary key), NddDate (datetime), NddNpcId (integer), NddMapId (integer), NddX (integer), NddY (integer), NddItmId (integer), and NddAmount (integer). */\nCREATE TABLE `NPCDeathDropLogs` (\n  `NddId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `NddDate` datetime DEFAULT NULL,\n  `NddNpcId` int(10) unsigned NOT NULL DEFAULT '0',\n  `NddMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `NddX` int(10) unsigned NOT NULL DEFAULT '0',\n  `NddY` int(10) unsigned NOT NULL DEFAULT '0',\n  `NddItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `NddAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`NddId`),\n  KEY `NddNpcId` (`NddNpcId`),\n  KEY `NddMapId` (`NddMapId`),\n  KEY `NddItmId` (`NddItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1", "description": "Creates a table named NPCDeathDropLogs with 8 columns: NddId (integer primary key), NddDate (datetime), NddNpcId (integer), NddMapId (integer), NddX (integer), NddY (integer), NddItmId (integer), and NddAmount (integer).", "concepts": ["CREATE TABLE", "NddId", "NddDate", "NddNpcId", "NddMapId", "NddX", "NddY", "N"], "instruction": "Write a SQL query to create a table named NPCDeathDropLogs with 8 columns: NddId (integer primary key), NddDate (datetime), NddNpcId (integer), NddMapId (integer), NddX (integer), NddY (integer), NddItmId (integer), and NddAmount (integer).", "response": "-- Reasoning:\nWe need a new table named NPCDeathDropLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the date and time of the log. It should also have columns for the NPC ID, map ID, X and Y coordinates, item ID, and amount dropped.\n\n-- Solution:\n```sql\nCREATE TABLE NPCDeathDropLogs (\n  NddId INT PRIMARY KEY,\n  NddDate DATETIME,\n  NddNpcId INT,\n  NddMapId INT,\n  NddX INT,\n  NddY INT,\n  NddItmId INT,\n  NddAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the NPCDeathDropLogs table with eight columns:\n  \u2022 NddId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 NddDate: datetime\n  \u2022 NddNpcId: integer\n  \u2022 NddMapId: integer\n  \u2022 NddX: integer\n  \u2022 NddY: integer\n  \u2022 NddItmId: integer\n  \u2022 NddAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('NPCDeathDropLogs');"}
{"seed": "/* Inserts a new row into the NPCDeathDropLogs table with the given values. */\nINSERT INTO `NPCDeathDropLogs` VALUES (1,'2015-09-19 21:39:29',75,2001,7,9,77,1)", "description": "Inserts a new row into the NPCDeathDropLogs table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the NPCDeathDropLogs table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the NPCDeathDropLogs table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO NPCDeathDropLogs (\n  NPCName,\n  DropType,\n  DropAmount,\n  DropChance\n) VALUES (\n  '',\n  'Gold',\n  1000,\n  0.01\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the NPCDeathDropLogs table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM NPCDeathDropLogs;"}
{"seed": "/* Drops the table named NPCEquipment if it exists. */\nDROP TABLE IF EXISTS `NPCEquipment`", "description": "Drops the table named NPCEquipment if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named NPCEquipment if it exists.", "response": "-- Reasoning:\nWe need to delete the table named NPCEquipment if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS NPCEquipment;\n```\n\n-- Explanation:\nThis statement deletes the table named NPCEquipment if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('NPCEquipment');"}
{"seed": "/* Creates a table named NPCEquipment with five columns: NeqId (integer primary key), NeqNpcId (integer), NeqLook (integer), NeqColor (integer), and NeqSlot (integer). */\nCREATE TABLE `NPCEquipment` (\n  `NeqId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `NeqNpcId` int(10) unsigned NOT NULL DEFAULT '0',\n  `NeqLook` int(10) unsigned NOT NULL DEFAULT '0',\n  `NeqColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `NeqSlot` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`NeqId`),\n  KEY `NeqNpcId` (`NeqNpcId`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named NPCEquipment with five columns: NeqId (integer primary key), NeqNpcId (integer), NeqLook (integer), NeqColor (integer), and NeqSlot (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "BTREE"], "instruction": "Write a SQL query to create a table named NPCEquipment with five columns: NeqId (integer primary key), NeqNpcId (integer), NeqLook (integer), NeqColor (integer), and NeqSlot (integer).", "response": "-- Reasoning:\nWe need a new table named NPCEquipment. It should have an integer primary key so that each equipment has a unique identifier, and four other columns to store the equipment\u2019s NPC ID, look, color, and slot.\n\n-- Solution:\n```sql\nCREATE TABLE NPCEquipment (\n  NeqId INT PRIMARY KEY,\n  NeqNpcId INT,\n  NeqLook INT,\n  NeqColor INT,\n  NeqSlot INT\n);\n```\n\n-- Explanation:\nThis statement defines the NPCEquipment table with five columns:\n  \u2022 NeqId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 NeqNpcId: integer\n  \u2022 NeqLook: integer\n  \u2022 NeqColor: integer\n  \u2022 NeqSlot: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('NPCEquipment');"}
{"seed": "/* Drops the table named NPCRegistry if it exists. */\nDROP TABLE IF EXISTS `NPCRegistry`", "description": "Drops the table named NPCRegistry if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named NPCRegistry if it exists.", "response": "-- Reasoning:\nWe need to delete the NPCRegistry table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS NPCRegistry;\n```\n\n-- Explanation:\nThis statement deletes the NPCRegistry table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('NPCRegistry');"}
{"seed": "/* Creates a table named NPCRegistry with five columns: NrgId (integer primary key), NrgChaId (integer), NrgIdentifier (varchar), NrgValue (integer), and NrgPosition (integer). */\nCREATE TABLE `NPCRegistry` (\n  `NrgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `NrgChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `NrgIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `NrgValue` int(10) unsigned NOT NULL DEFAULT '0',\n  `NrgPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`NrgId`),\n  KEY `NrgChaId` (`NrgChaId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named NPCRegistry with five columns: NrgId (integer primary key), NrgChaId (integer), NrgIdentifier (varchar), NrgValue (integer), and NrgPosition (integer).", "concepts": ["CREATE TABLE", "NrgId", "NrgChaId", "NrgIdentifier", "NrgValue", "NrgPosition", "PRIMARY KEY", "KEY"], "instruction": "Write a SQL query to create a table named NPCRegistry with five columns: NrgId (integer primary key), NrgChaId (integer), NrgIdentifier (varchar), NrgValue (integer), and NrgPosition (integer).", "response": "-- Reasoning:\nWe need a new table named NPCRegistry. It should have an integer primary key so that each NPC has a unique identifier, and a name column to store the NPC\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE NPCRegistry (\n  NrgId INT PRIMARY KEY,\n  NrgChaId INT,\n  NrgIdentifier VARCHAR(255),\n  NrgValue INT,\n  NrgPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the NPCRegistry table with five columns:\n  \u2022 NrgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 NrgChaId: integer\n  \u2022 NrgIdentifier: variable\u2010length string up to 255 characters\n  \u2022 NrgValue: integer\n  \u2022 NrgPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('NPCRegistry');"}
{"seed": "/* Drops the table named NPCs if it exists. */\nDROP TABLE IF EXISTS `NPCs`", "description": "Drops the table named NPCs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named NPCs if it exists.", "response": "-- Reasoning:\nWe need to delete the NPCs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS NPCs;\n```\n\n-- Explanation:\nThis statement deletes the NPCs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('NPCs');"}
{"seed": "/* Creates a table named NPCs with 20 columns. */\nCREATE TABLE `NPCs` (\n  `NpcId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `NpcIdentifier` varchar(64) NOT NULL DEFAULT '',\n  `NpcDescription` varchar(64) NOT NULL DEFAULT '',\n  `NpcType` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcX` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcY` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcTimer` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcLook` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcLookColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcSex` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcSide` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcState` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcFace` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcFaceColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcHair` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcHairColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcSkinColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `NpcIsChar` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`NpcId`),\n  KEY `NpcMapId` (`NpcMapId`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=latin1", "description": "Creates a table named NPCs with 20 columns.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named NPCs with 20 columns.", "response": "-- Reasoning:\nWe need a new table named NPCs. It should have 20 columns, each of which is a VARCHAR(255).\n\n-- Solution:\n```sql\nCREATE TABLE NPCs (\n  NPC1 VARCHAR(255),\n  NPC2 VARCHAR(255),\n  NPC3 VARCHAR(255),\n  NPC4 VARCHAR(255),\n  NPC5 VARCHAR(255),\n  NPC6 VARCHAR(255),\n  NPC7 VARCHAR(255),\n  NPC8 VARCHAR(255),\n  NPC9 VARCHAR(255),\n  NPC10 VARCHAR(255),\n  NPC11 VARCHAR(255),\n  NPC12 VARCHAR(255),\n  NPC13 VARCHAR(255),\n  NPC14 VARCHAR(255),\n  NPC15 VARCHAR(255),\n  NPC16 VARCHAR(255),\n  NPC17 VARCHAR(255),\n  NPC18 VARCHAR(255),\n  NPC19 VARCHAR(255),\n  NPC20 VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the NPCs table with 20 columns:\n  \u2022 NPC1: variable\u2010length string up to 2"}
{"seed": "/* The first column is the id of the NPC. */\nINSERT INTO `NPCs` VALUES (1,'f1npc','',5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(2,'ipiirumraisin','Ipii',0,1,2,8,0,776,0,0,0,0,0,0,0,0,0,0),(3,'sunset','Sunset',0,1011,5,3,0,1239,0,0,2,0,0,0,0,0,0,0),(4,'jadespear','Jadespear',0,1015,2,4,0,1232,0,0,2,0,0,0,0,0,0,0),(5,'welcome_npc','Welcome Npc',0,7,6,14,0,1384,0,0,2,0,0,0,0,0,0,0),(6,'butcher','Butcher',0,1016,3,4,0,1379,0,0,2,0,0,0,0,0,0,0),(7,'medicine','Miko',0,1017,4,3,0,1392,0,0,2,0,0,0,0,0,0,0),(8,'smith','Blacksmith',0,1014,5,4,0,1383,0,0,2,0,0,0,0,0,0,0),(9,'boy_taylor','Cuti Taylor',0,1018,5,4,0,1386,0,0,2,0,0,0,0,0,0,0),(10,'girl_taylor','Blossom Taylor',0,1019,3,5,0,15,0,0,2,0,0,0,0,0,0,0),(11,'inn_keeper','Yunsil',0,1001,12,7,0,14,0,0,2,0,0,0,0,0,0,0),(12,'inn_keeper','Pepper',0,1006,12,7,0,946,0,0,2,0,0,0,0,0,0,0),(13,'inn_keeper','Spring',0,1002,9,6,0,15,0,0,2,0,0,0,0,0,0,0),(14,'warper','Warper',0,1002,15,5,0,1136,0,0,2,0,0,0,0,0,0,0),(15,'warper','Warper',0,1001,15,5,0,1136,0,0,2,0,0,0,0,0,0,0),(16,'warper','Warper',0,1006,15,5,0,1136,0,0,2,0,0,0,0,0,0,0),(17,'trainer','Yebaek',0,1021,4,5,0,925,0,0,2,0,0,0,0,0,0,0),(18,'trainer','Maso',0,1023,4,5,0,920,0,0,2,0,0,0,0,0,0,0),(19,'trainer','Eldritch',0,1025,4,5,0,1000,0,0,2,0,0,0,0,0,0,0),(20,'trainer','Song',0,1027,4,5,0,983,0,0,2,0,0,0,0,0,0,0),(21,'npc_sage','Npc Sage',0,10001,7,5,0,646,0,0,2,0,0,0,0,0,0,0),(22,'elevator_npc','Elevator officer',0,10,11,6,0,812,0,0,2,0,0,0,0,0,0,0),(23,'lobby_npc','Elevator officer',0,9,8,9,0,813,0,0,2,0,0,0,0,0,0,0),(24,'start_sumo2','Npc Sumo',0,1000,72,126,0,259,0,0,2,0,0,0,0,0,0,0),(25,'castle_jujak','Jujak',0,20001,23,24,0,685,0,0,3,0,0,0,0,0,0,0),(26,'castle_baekho','Baekho',0,20001,28,24,0,687,0,0,3,0,0,0,0,0,0,0),(27,'castle_hyunmoo','Hyunmoo',0,20001,33,24,0,689,0,0,3,0,0,0,0,0,0,0),(28,'castle_chungryong','Chungryong',0,20001,38,24,0,691,0,0,3,0,0,0,0,0,0,0),(29,'mall_welcome','Welcome',0,13,19,20,0,1035,0,0,2,0,0,0,0,0,0,0),(30,'sunset','Sunset',0,10001,13,10,0,1239,0,0,2,0,0,0,0,0,0,0),(31,'mall_welcome','Welcome',0,13,14,20,0,1035,0,0,2,0,0,0,0,0,0,0),(32,'face_shop','Face Shop',0,14,1,21,0,776,0,0,2,0,0,0,0,0,0,0),(33,'clear_gfx','GFX',2,14,33,27,0,0,0,0,0,0,0,0,0,0,0,0),(34,'clear_gfx','GFX',2,14,33,7,0,0,0,0,0,0,0,0,0,0,0,0),(35,'clear_gfx','GFX',2,14,1,7,0,0,0,0,0,0,0,0,0,0,0,0),(36,'clear_gfx','GFX',2,14,1,27,0,0,0,0,0,0,0,0,0,0,0,0),(37,'npc_castle_warp','Castle',0,20000,29,33,0,671,0,0,2,0,0,0,0,0,0,0),(38,'pvp_admin','PvP Admin',0,500,37,27,0,633,0,0,2,0,0,0,0,0,0,0),(39,'market_usable','Usable item npc',0,500,38,35,0,788,0,0,2,0,0,0,0,0,0,0),(40,'market_misc','Miscellaneous',0,500,40,35,0,786,0,0,2,0,0,0,0,0,0,0),(41,'market_hands','Hands accessories',0,500,28,33,0,785,0,0,2,0,0,0,0,0,0,0),(42,'market_accessories','Accessories',0,500,30,33,0,784,0,0,2,0,0,0,0,0,0,0),(43,'market_armor','Armor',0,500,23,28,0,779,0,0,2,0,0,0,0,0,0,0),(44,'market_helmet','Helmet',0,500,25,28,0,781,0,0,2,0,0,0,0,0,0,0),(45,'market_weapon','Weapon',0,500,27,21,0,642,0,0,2,0,0,0,0,0,0,0),(46,'market_shield','Shield',0,500,29,21,0,782,0,0,2,0,0,0,0,0,0,0),(47,'prophet','Prophet',0,500,67,39,0,970,0,0,2,0,0,0,0,0,0,0),(48,'prophet','Prophet',0,1013,2,4,0,970,0,0,2,0,0,0,0,0,0,0),(49,'sunset','Sunset',0,500,52,33,0,1239,0,0,2,0,0,0,0,0,0,0),(50,'inn_keeper','Kafra',0,500,35,20,0,783,0,0,2,0,0,0,0,0,0,0),(51,'auction','Auction',0,500,38,20,0,787,0,0,2,0,0,0,0,0,0,0),(52,'tape_recorder','Tape recorder',0,500,33,21,0,778,0,0,2,0,0,0,0,0,0,0),(53,'travel_agent','Travel agent',0,500,15,25,0,789,0,0,2,0,0,0,0,0,0,0),(54,'market_smith','Smith',0,500,15,33,0,792,0,0,2,0,0,0,0,0,0,0),(55,'inn_keeper','Safety box',0,20012,16,25,0,809,0,0,2,0,0,0,0,0,0,0),(56,'castle_king','King',0,20012,14,17,0,922,0,0,2,0,0,0,0,0,0,0),(57,'castle','Officer',0,20012,12,22,0,959,0,0,2,0,0,0,0,0,0,0),(58,'castle','Officer',0,20012,16,22,0,923,0,0,2,0,0,0,0,0,0,0),(59,'trainer','Warrior trainer',0,20012,12,28,0,925,0,0,2,0,0,0,0,0,0,0),(60,'trainer','Rogue trainer',0,20012,16,28,0,920,0,0,2,0,0,0,0,0,0,0),(61,'trainer','Mage trainer',0,20012,12,31,0,1000,0,0,2,0,0,0,0,0,0,0),(62,'trainer','Poet trainer',0,20012,16,31,0,983,0,0,2,0,0,0,0,0,0,0),(63,'sunset','Castle Sunset',0,20012,12,25,0,1239,0,0,2,0,0,0,0,0,0,0),(64,'hair_stylist','Hairstylist',0,14,1,11,0,790,0,0,2,0,0,0,0,0,0,0),(65,'crown_shop','Crown Shop',0,14,5,4,0,781,0,0,2,0,0,0,0,0,0,0),(66,'npc_vending_help','Helper',4,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0),(67,'warper','Warper',0,2003,13,4,0,1233,0,0,2,0,0,0,0,0,0,0),(68,'warper','Warper',0,2004,15,5,0,1247,0,0,2,0,0,0,0,0,0,0),(69,'warper','Warper',0,2005,13,4,0,1145,0,0,2,0,0,0,0,0,0,0),(70,'inn_keeper','Walsuk',0,2003,11,9,0,1143,0,0,2,0,0,0,0,0,0,0),(71,'inn_keeper','Ginger',0,2004,10,7,0,1156,0,0,2,0,0,0,0,0,0,0),(72,'inn_keeper','Bamboo',0,2005,11,8,0,1284,0,0,2,0,0,0,0,0,0,0),(73,'rabbit','Rabbit',0,2001,54,30,0,21,29,0,2,0,0,0,0,0,0,0),(74,'rocks','Rocks',0,2001,62,10,0,175,0,0,2,0,0,0,0,0,0,0),(75,'tiger','Tiger',0,2001,14,8,0,735,0,0,2,0,0,0,0,0,0,0),(76,'chu_rua','Chu rua',0,2001,61,49,0,174,0,0,2,0,0,0,0,0,0,0),(77,'prophet','Mythic Prophet',0,6000,27,11,0,9,11,0,2,0,0,0,0,0,0,0),(78,'mythic_guardian','Mythic Guradian',0,6000,32,11,0,72,0,0,2,0,0,0,0,0,0,0),(79,'subpath_master','Subpath master',0,10007,14,14,0,831,0,0,2,0,0,0,0,0,0,0),(80,'concierge','Concierge',0,1104,11,7,0,11,4,0,2,0,0,0,0,0,0,0),(81,'prophet','Arena Prophet',0,1104,13,7,0,9,4,0,2,0,0,0,0,0,0,0),(82,'pvp_turney','PvP tournament',0,1104,15,7,0,975,0,0,2,0,0,0,0,0,0,0),(83,'compass','Compass',0,1104,1,7,0,12,4,0,2,0,0,0,0,0,0,0),(84,'fakir_miskin','Poor grandma',0,1000,85,70,0,1159,0,0,2,0,0,0,0,0,0,0),(85,'mangkuk','Bowl',0,1000,85,71,0,1343,0,0,2,0,0,0,0,0,0,0),(86,'prophet','Arena Prophet',0,1110,10,4,0,9,4,0,2,0,0,0,0,0,0,0),(87,'lumberjack','Lumberjack',0,10000,117,186,0,1285,0,0,2,0,0,0,0,0,0,0),(88,'','',0,10000,216,107,0,1286,0,0,2,0,0,0,0,0,0,0),(89,'miner','Miner',0,10000,211,32,0,994,0,0,2,0,0,0,0,0,0,0)", "description": "The first column is the id of the NPC.", "concepts": ["```\nCREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "INT"], "instruction": "Write a SQL query to list the total number of customers grouped by country.\n```", "response": "-- Reasoning:\nWe need to count the number of customers in each country.\n\n-- Solution:\n```sql\nSELECT country, COUNT(*) AS total_customers\nFROM customers\nGROUP BY country;\n```\n\n-- Explanation:\nThis query uses the GROUP BY clause to group customers by country and COUNT(*) to count the number of customers in each group.\n\n-- Tests:\n-- 1. Verify the query returns the correct result\nSELECT country, COUNT(*) AS total_customers\nFROM customers\nGROUP BY country;"}
{"seed": "/* Drops the table named Paper if it exists. */\nDROP TABLE IF EXISTS `Paper`", "description": "Drops the table named Paper if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Paper if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Paper if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Paper;\n```\n\n-- Explanation:\nThis statement drops the table named Paper if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('Paper');"}
{"seed": "/* Creates a table named Paper with five columns: PapId (integer primary key), PapInvId (integer), PapText (text), PapWidth (integer), and PapHeight (integer). */\nCREATE TABLE `Paper` (\n  `PapId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `PapInvId` int(10) unsigned NOT NULL DEFAULT '0',\n  `PapText` text NOT NULL,\n  `PapWidth` int(10) unsigned NOT NULL DEFAULT '0',\n  `PapHeight` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`PapId`),\n  KEY `PapInvId` (`PapInvId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Paper with five columns: PapId (integer primary key), PapInvId (integer), PapText (text), PapWidth (integer), and PapHeight (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "ENGINE", "CHARSET", "NOT NULL", "DEFAULT", "KEY", "PapId", "P"], "instruction": "Write a SQL query to create a table named Paper with five columns: PapId (integer primary key), PapInvId (integer), PapText (text), PapWidth (integer), and PapHeight (integer).", "response": "-- Reasoning:\nWe need a new table named Paper. It should have an integer primary key so that each paper has a unique identifier, and four other columns to store the paper\u2019s information.\n\n-- Solution:\n```sql\nCREATE TABLE Paper (\n  PapId INT PRIMARY KEY,\n  PapInvId INT,\n  PapText TEXT,\n  PapWidth INT,\n  PapHeight INT\n);\n```\n\n-- Explanation:\nThis statement defines the Paper table with five columns:\n  \u2022 PapId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PapInvId: integer\n  \u2022 PapText: variable\u2010length string up to 255 characters\n  \u2022 PapWidth: integer\n  \u2022 PapHeight: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Paper');"}
{"seed": "/* Drops the table named Parcels if it exists. */\nDROP TABLE IF EXISTS `Parcels`", "description": "Drops the table named Parcels if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Parcels if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Parcels if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Parcels;\n```\n\n-- Explanation:\nThis statement drops the table named Parcels if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Parcels');"}
{"seed": "/* Creates a table named Parcels with 10 columns: ParId (integer primary key), ParSender (integer), ParChaIdDestination (integer), ParItmId (integer), ParAmount (integer), ParChaIdOwner (integer), ParEngrave (varchar), ParNpc (integer), and ParPosition (integer). */\nCREATE TABLE `Parcels` (\n  `ParId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `ParSender` int(10) unsigned NOT NULL DEFAULT '0',\n  `ParChaIdDestination` int(10) unsigned NOT NULL DEFAULT '0',\n  `ParItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ParAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `ParChaIdOwner` int(10) unsigned NOT NULL DEFAULT '0',\n  `ParEngrave` varchar(32) NOT NULL DEFAULT '',\n  `ParNpc` int(10) unsigned NOT NULL DEFAULT '0',\n  `ParPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`ParId`),\n  KEY `ParChaIdDestination` (`ParChaIdDestination`),\n  KEY `ParItmId` (`ParItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1", "description": "Creates a table named Parcels with 10 columns: ParId (integer primary key), ParSender (integer), ParChaIdDestination (integer), ParItmId (integer), ParAmount (integer), ParChaIdOwner (integer), ParEngrave (varchar), ParNpc (integer), and ParPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "NOT", "NULL", "DEFAULT", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named Parcels with 10 columns: ParId (integer primary key), ParSender (integer), ParChaIdDestination (integer), ParItmId (integer), ParAmount (integer), ParChaIdOwner (integer), ParEngrave (varchar), ParNpc (integer), and ParPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Parcels. It should have an integer primary key so that each parcel has a unique identifier, and a sender column to store the parcel\u2019s sender as an integer.\n\n-- Solution:\n```sql\nCREATE TABLE Parcels (\n  ParId INT PRIMARY KEY,\n  ParSender INT,\n  ParChaIdDestination INT,\n  ParItmId INT,\n  ParAmount INT,\n  ParChaIdOwner INT,\n  ParEngrave VARCHAR(255),\n  ParNpc INT,\n  ParPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Parcels table with 10 columns:\n  \u2022 ParId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ParSender: integer\n  \u2022 ParChaIdDestination: integer\n  \u2022 ParItmId: integer\n  \u2022 ParAmount: integer\n  \u2022 ParChaIdOwner: integer\n  \u2022 ParEngrave: variable\u2010length string up to 255 characters\n  \u2022 ParNpc: integer\n  \u2022 ParPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Parcels');"}
{"seed": "/* Drops the table named PathLogs if it exists. */\nDROP TABLE IF EXISTS `PathLogs`", "description": "Drops the table named PathLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named PathLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the table named PathLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS PathLogs;\n```\n\n-- Explanation:\nThis statement deletes the table named PathLogs if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('PathLogs');"}
{"seed": "/* Creates a table named PathLogs with five columns: PlgId (integer primary key), PlgDate (datetime), PlgChaId (integer), PlgPthId (integer), and PlgMessage (varchar). */\nCREATE TABLE `PathLogs` (\n  `PlgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `PlgDate` datetime DEFAULT NULL,\n  `PlgChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `PlgPthId` int(10) unsigned NOT NULL DEFAULT '0',\n  `PlgMessage` varchar(255) NOT NULL DEFAULT '',\n  PRIMARY KEY (`PlgId`),\n  KEY `PlgChaId` (`PlgChaId`),\n  KEY `PlgPthId` (`PlgPthId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named PathLogs with five columns: PlgId (integer primary key), PlgDate (datetime), PlgChaId (integer), PlgPthId (integer), and PlgMessage (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named PathLogs with five columns: PlgId (integer primary key), PlgDate (datetime), PlgChaId (integer), PlgPthId (integer), and PlgMessage (varchar).", "response": "-- Reasoning:\nWe need a new table named PathLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the log\u2019s date and time.\n\n-- Solution:\n```sql\nCREATE TABLE PathLogs (\n  PlgId INT PRIMARY KEY,\n  PlgDate DATETIME,\n  PlgChaId INT,\n  PlgPthId INT,\n  PlgMessage VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the PathLogs table with five columns:\n  \u2022 PlgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PlgDate: datetime\n  \u2022 PlgChaId: integer\n  \u2022 PlgPthId: integer\n  \u2022 PlgMessage: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('PathLogs');"}
{"seed": "/* Drops the table named Paths if it exists. */\nDROP TABLE IF EXISTS `Paths`", "description": "Drops the table named Paths if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Paths if it exists.", "response": "-- Reasoning:\nWe need to drop the Paths table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Paths;\n```\n\n-- Explanation:\nThis statement drops the Paths table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Paths');"}
{"seed": "/* Creates a table named Paths with 17 columns: PthId (integer primary key), PthType (integer), PthChat (integer), PthIcon (integer), PthMark0 (varchar), PthMark1 (varchar), PthMark2 (varchar), PthMark3 (varchar), PthMark4 (varchar), PthMark5 (varchar), PthMark6 (varchar), PthMark7 (varchar), PthMark8 (varchar), */\nCREATE TABLE `Paths` (\n  `PthId` int(10) unsigned NOT NULL,\n  `PthType` int(10) unsigned NOT NULL DEFAULT '0',\n  `PthChat` int(10) unsigned NOT NULL DEFAULT '0',\n  `PthIcon` int(10) unsigned NOT NULL DEFAULT '0',\n  `PthMark0` varchar(32) NOT NULL DEFAULT '',\n  `PthMark1` varchar(32) NOT NULL DEFAULT '',\n  `PthMark2` varchar(32) NOT NULL DEFAULT '',\n  `PthMark3` varchar(32) NOT NULL DEFAULT '',\n  `PthMark4` varchar(32) NOT NULL DEFAULT '',\n  `PthMark5` varchar(32) NOT NULL DEFAULT '',\n  `PthMark6` varchar(32) NOT NULL DEFAULT '',\n  `PthMark7` varchar(32) NOT NULL DEFAULT '',\n  `PthMark8` varchar(32) NOT NULL DEFAULT '',\n  `PthMark9` varchar(32) NOT NULL DEFAULT '',\n  `PthMark10` varchar(32) NOT NULL DEFAULT '',\n  `PthMark11` varchar(32) NOT NULL DEFAULT '',\n  `PthMark12` varchar(32) NOT NULL DEFAULT '',\n  `PthMark13` varchar(32) NOT NULL DEFAULT '',\n  `PthMark14` varchar(32) NOT NULL DEFAULT '',\n  `PthMark15` varchar(32) NOT NULL DEFAULT '',\n  PRIMARY KEY (`PthId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Paths with 17 columns: PthId (integer primary key), PthType (integer), PthChat (integer), PthIcon (integer), PthMark0 (varchar), PthMark1 (varchar), PthMark2 (varchar), PthMark3 (varchar), PthMark4 (varchar), PthMark5 (varchar), PthMark6 (varchar), PthMark7 (varchar), PthMark8 (varchar),", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "AUTO_INCREMENT", "FOREIGN KEY", "REFERENCES", "ON"], "instruction": "Write a SQL query to create a table named Paths with 17 columns: PthId (integer primary key), PthType (integer), PthChat (integer), PthIcon (integer), PthMark0 (varchar), PthMark1 (varchar), PthMark2 (varchar), PthMark3 (varchar), PthMark4 (varchar), PthMark5 (varchar), PthMark6 (varchar), PthMark7 (varchar), PthMark8 (varchar), PthMark9 (varchar), PthMark10 (varchar), PthMark11 (varchar), PthMark12 (varchar), PthMark13 (varchar), PthMark14 (", "response": "-- Reasoning:\nWe need a new table named Paths. It should have an integer primary key so that each path has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Paths (\n  PthId INT PRIMARY KEY,\n  PthType INT,\n  PthChat INT,\n  PthIcon INT,\n  PthMark0 VARCHAR(255),\n  PthMark1 VARCHAR(255),\n  PthMark2 VARCHAR(255),\n  PthMark3 VARCHAR(255),\n  PthMark4 VARCHAR(255),\n  PthMark5 VARCHAR(255),\n  PthMark6 VARCHAR(255),\n  PthMark7 VARCHAR(255),\n  PthMark8 VARCHAR(255),\n  PthMark9 VARCHAR(255),\n  PthMark10 VARCHAR(255),\n  PthMark11 VARCHAR(255),\n  PthMark12 VARCHAR(255),\n  PthMark13 VARCHAR(255),\n  PthMark14 VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the Paths table with 17 columns:\n  \u2022 PthId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PthType:"}
{"seed": "/* Inserts a new row into the Paths table with the given values. */\nINSERT INTO `Paths` VALUES (0,0,0,0,'Novice','','','','','','','','','','','','','','',''),(1,1,0,1,'Warrior','','','','','','','','','','','','','','',''),(2,2,0,2,'Rogue','','','','','','','','','','','','','','',''),(3,3,0,3,'Mage','','','','','','','','','','','','','','',''),(4,4,0,4,'Poet','','','','','','','','','','','','','','',''),(5,5,0,5,'God','','','','','','','','','','','','','','','')", "description": "Inserts a new row into the Paths table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the Paths table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the Paths table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO Paths (path_id, path_name)\nVALUES (1, 'A');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the Paths table with the given values:\n  \u2022 path_id: 1\n  \u2022 path_name: 'A'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM Paths;"}
{"seed": "/* Drops the table named PickupLogs if it exists. */\nDROP TABLE IF EXISTS `PickupLogs`", "description": "Drops the table named PickupLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named PickupLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the PickupLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS PickupLogs;\n```\n\n-- Explanation:\nThis statement deletes the PickupLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('PickupLogs');"}
{"seed": "/* Creates a table named PickupLogs with 8 columns: PicId (integer primary key), PicDate (datetime), PicChaId (integer), PicMapId (integer), PicX (integer), PicY (integer), PicItmId (integer), and PicAmount (integer). */\nCREATE TABLE `PickupLogs` (\n  `PicId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `PicDate` datetime DEFAULT NULL,\n  `PicChaId` int(10) unsigned NOT NULL,\n  `PicMapId` int(10) unsigned NOT NULL,\n  `PicX` int(10) unsigned NOT NULL,\n  `PicY` int(10) unsigned NOT NULL,\n  `PicItmId` int(10) unsigned NOT NULL,\n  `PicAmount` int(10) unsigned NOT NULL,\n  PRIMARY KEY (`PicId`),\n  KEY `PicChaId` (`PicChaId`),\n  KEY `PicMapId` (`PicMapId`),\n  KEY `PicItmId` (`PicItmId`)\n) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1", "description": "Creates a table named PickupLogs with 8 columns: PicId (integer primary key), PicDate (datetime), PicChaId (integer), PicMapId (integer), PicX (integer), PicY (integer), PicItmId (integer), and PicAmount (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named PickupLogs with 8 columns: PicId (integer primary key), PicDate (datetime), PicChaId (integer), PicMapId (integer), PicX (integer), PicY (integer), PicItmId (integer), and PicAmount (integer).", "response": "-- Reasoning:\nWe need a new table named PickupLogs. It should have an integer primary key so that each pickup has a unique identifier, and a datetime column to store the pickup date.\n\n-- Solution:\n```sql\nCREATE TABLE PickupLogs (\n  PicId INT PRIMARY KEY,\n  PicDate DATETIME,\n  PicChaId INT,\n  PicMapId INT,\n  PicX INT,\n  PicY INT,\n  PicItmId INT,\n  PicAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the PickupLogs table with eight columns:\n  \u2022 PicId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 PicDate: datetime\n  \u2022 PicChaId: integer\n  \u2022 PicMapId: integer\n  \u2022 PicX: integer\n  \u2022 PicY: integer\n  \u2022 PicItmId: integer\n  \u2022 PicAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('PickupLogs');"}
{"seed": "/* Inserts 15 rows into the PickupLogs table. */\nINSERT INTO `PickupLogs` VALUES (1,'2015-09-21 14:19:03',2,10000,212,34,21,1000),(2,'2015-09-21 14:54:04',2,10004,18,31,30009,1),(3,'2015-09-21 15:00:01',2,10004,22,24,30011,1),(4,'2015-09-21 15:00:01',2,10004,22,24,30009,1),(5,'2015-09-21 15:00:06',2,10004,22,24,30011,1),(6,'2015-09-21 21:05:52',53,1000,74,130,4099,1),(7,'2015-09-21 21:05:55',53,1000,74,130,3033,1),(8,'2015-09-21 21:06:28',53,1000,74,130,3037,1),(9,'2015-09-21 21:06:43',53,1000,74,130,4015,1),(10,'2015-09-21 21:06:57',53,1000,71,130,50008,1),(11,'2015-09-21 21:08:54',53,1014,6,7,3033,1),(12,'2015-09-21 21:09:31',53,1014,6,7,3037,1),(13,'2015-09-21 21:09:33',53,1014,6,7,3033,1),(14,'2015-09-21 21:09:58',53,1000,19,104,3037,1),(15,'2015-09-21 21:19:57',53,1000,70,136,4080,1)", "description": "Inserts 15 rows into the PickupLogs table.", "concepts": ["INSERT INTO", "VALUES", "PickupLogs", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "window functions", "CTE", "UNION", "JOIN", "WHERE"], "instruction": "Write a SQL query to insert 15 rows into the PickupLogs table.", "response": "-- Reasoning:\nWe need to insert 15 rows into the PickupLogs table.\n\n-- Solution:\n```sql\nINSERT INTO PickupLogs (\n  pickup_id,\n  pickup_time,\n  pickup_location,\n  pickup_status\n) VALUES (\n  1,\n  '2020-01-01 00:00:00',\n  '123 Main St',\n  'In Transit'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts 15 rows into the PickupLogs table.\n\n-- Tests:\n-- 1. Verify 15 rows were inserted\nSELECT COUNT(*) FROM PickupLogs;"}
{"seed": "/* Drops the table named PnItems if it exists. */\nDROP TABLE IF EXISTS `PnItems`", "description": "Drops the table named PnItems if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named PnItems if it exists.", "response": "-- Reasoning:\nWe need to drop the table named PnItems if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS PnItems;\n```\n\n-- Explanation:\nThis statement drops the table named PnItems if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('PnItems');"}
{"seed": "/* Creates a table named PnItems with 43 columns. */\nCREATE TABLE `PnItems` (\n  `ItmId` int(10) unsigned NOT NULL,\n  `ItmType` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmPthId` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmCommonScript` varchar(64) NOT NULL DEFAULT '',\n  `ItmIdentifier` varchar(64) NOT NULL DEFAULT '',\n  `ItmDescription` varchar(64) NOT NULL DEFAULT '',\n  `ItmMaximumAmount` int(10) unsigned NOT NULL DEFAULT '1',\n  `ItmLook` int(10) NOT NULL DEFAULT '0',\n  `ItmLookColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIcon` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIconColor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSex` int(10) unsigned NOT NULL DEFAULT '2',\n  `ItmLevel` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDurability` int(10) unsigned NOT NULL DEFAULT '10000',\n  `ItmMinimumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMaximumDamage` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmVita` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMana` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMight` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmWill` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmGrace` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmWisdom` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmCon` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmProtection` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmArmor` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmHit` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDam` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSound` int(10) unsigned NOT NULL DEFAULT '331',\n  `ItmBuyPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmSellPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmText` varchar(64) NOT NULL DEFAULT '',\n  `ItmBuyText` varchar(64) NOT NULL DEFAULT '',\n  `ItmVitaRequired` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmManaRequired` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmMark` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmExchangeable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmRepairable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDepositable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmDroppable` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmThrown` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmAttackSpeed` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmIndestructible` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmEvent` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmTimer` int(10) unsigned NOT NULL DEFAULT '0',\n  `ItmChaIdDiscoverer` int(10) unsigned DEFAULT NULL,\n  `ItmUniqueAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`ItmId`),\n  KEY `ItmPthId` (`ItmPthId`) USING BTREE,\n  KEY `ItmChaId` (`ItmChaIdDiscoverer`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named PnItems with 43 columns.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "ENGINE", "KEY", "BTREE", "NOT", "NULL", "DEFAULT", "PRIMARY KEY", "KEY", "BTREE"], "instruction": "Write a SQL query to create a table named PnItems with 43 columns.", "response": "-- Reasoning:\nWe need a new table named PnItems. It should have 43 columns, one for each item in the Pn list.\n\n-- Solution:\n```sql\nCREATE TABLE PnItems (\n  item1 VARCHAR(255),\n  item2 VARCHAR(255),\n  item3 VARCHAR(255),\n  item4 VARCHAR(255),\n  item5 VARCHAR(255),\n  item6 VARCHAR(255),\n  item7 VARCHAR(255),\n  item8 VARCHAR(255),\n  item9 VARCHAR(255),\n  item10 VARCHAR(255),\n  item11 VARCHAR(255),\n  item12 VARCHAR(255),\n  item13 VARCHAR(255),\n  item14 VARCHAR(255),\n  item15 VARCHAR(255),\n  item16 VARCHAR(255),\n  item17 VARCHAR(255),\n  item18 VARCHAR(255),\n  item19 VARCHAR(255),\n  item20 VARCHAR(255),\n  item21 VARCHAR(255),\n  item22 VARCHAR(255),\n  item23 VARCHAR(255),\n  item24 VARCHAR(255),\n  item25 VARCHAR(255),\n  item26 VARCHAR(255),"}
{"seed": "/* Inserts five rows into the PnItems table. */\nINSERT INTO `PnItems` VALUES (0,0,0,'','','',1,0,0,0,0,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,'','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,0),(1,0,0,'','','',1,0,0,0,0,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,'','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,0),(2,0,0,'','','',1,0,0,0,0,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,'','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,0),(3,0,0,'','','',1,0,0,0,0,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,'','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,0),(4,0,0,'','','',1,0,0,0,0,2,0,10000,0,0,0,0,0,0,0,0,0,0,0,0,0,331,0,0,'','',0,0,0,0,0,0,0,0,0,0,0,0,NULL,0)", "description": "Inserts five rows into the PnItems table.", "concepts": ["INSERT INTO", "VALUES", "PnItems", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "NULL"], "instruction": "Write a SQL query to insert five rows into the PnItems table.", "response": "-- Reasoning:\nWe need to insert five rows into the PnItems table.\n\n-- Solution:\n```sql\nINSERT INTO PnItems (PnItemID, PnID, ItemID, Qty)\nVALUES (1, 1, 1, 10),\n       (2, 1, 2, 20),\n       (3, 2, 3, 30),\n       (4, 2, 4, 40),\n       (5, 3, 5, 50);\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the PnItems table.\n\n-- Tests:\n-- 1. Verify all rows are inserted\nSELECT * FROM PnItems;"}
{"seed": "/* Drops the table named QuestRegistry if it exists. */\nDROP TABLE IF EXISTS `QuestRegistry`", "description": "Drops the table named QuestRegistry if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named QuestRegistry if it exists.", "response": "-- Reasoning:\nWe need to delete the QuestRegistry table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS QuestRegistry;\n```\n\n-- Explanation:\nThis statement deletes the QuestRegistry table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('QuestRegistry');"}
{"seed": "/* Creates a table named QuestRegistry with five columns: QrgId (integer primary key), QrgChaId (integer), QrgIdentifier (varchar), QrgValue (integer), and QrgPosition (integer). */\nCREATE TABLE `QuestRegistry` (\n  `QrgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `QrgChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `QrgIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `QrgValue` int(10) unsigned NOT NULL DEFAULT '0',\n  `QrgPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`QrgId`),\n  KEY `QrgChaId` (`QrgChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=latin1", "description": "Creates a table named QuestRegistry with five columns: QrgId (integer primary key), QrgChaId (integer), QrgIdentifier (varchar), QrgValue (integer), and QrgPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named QuestRegistry with five columns: QrgId (integer primary key), QrgChaId (integer), QrgIdentifier (varchar), QrgValue (integer), and QrgPosition (integer).", "response": "-- Reasoning:\nWe need a new table named QuestRegistry. It should have an integer primary key so that each QuestRegistry has a unique identifier, and a name column to store the QuestRegistry\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE QuestRegistry (\n  QrgId INT PRIMARY KEY,\n  QrgChaId INT,\n  QrgIdentifier VARCHAR(255),\n  QrgValue INT,\n  QrgPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the QuestRegistry table with five columns:\n  \u2022 QrgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 QrgChaId: integer\n  \u2022 QrgIdentifier: variable\u2010length string up to 255 characters\n  \u2022 QrgValue: integer\n  \u2022 QrgPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('QuestRegistry');"}
{"seed": "/* Inserts 20 rows into the QuestRegistry table. */\nINSERT INTO `QuestRegistry` VALUES (1,53,'rabbit_hunt',1,0),(2,53,'squirrel_hunt',1,1),(3,55,'rabbit_hunt',2,0),(4,55,'squirrel_hunt',2,1),(5,55,'chesnut_20',2,2),(6,55,'rabbit_meat_20',2,3),(7,55,'first_shield',2,4),(8,55,'quest_churua',3,5),(9,54,'rabbit_hunt',2,0),(10,54,'squirrel_hunt',2,1),(11,54,'chesnut_20',2,2),(12,54,'rabbit_meat_20',2,3),(13,54,'first_shield',2,4),(14,54,'quest_churua',3,5),(15,54,'say_hello',1,6),(16,54,'say_ginseng',1,7),(17,54,'talk_to_rocks',1,8),(18,54,'talk_to_tiger',1,9),(19,24,'rabbit_hunt',1,0),(20,24,'squirrel_hunt',1,1)", "description": "Inserts 20 rows into the QuestRegistry table.", "concepts": ["INSERT INTO", "VALUES", "QuestRegistry", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "AUTO_INCREMENT", "INT", "VARCHAR", "CTE", "window functions"], "instruction": "Write a SQL query to insert 20 rows into the QuestRegistry table.", "response": "-- Reasoning:\nWe need to insert 20 rows into the QuestRegistry table.\n\n-- Solution:\n```sql\nINSERT INTO QuestRegistry (quest_id, quest_name, quest_description, quest_reward)\nVALUES (1, 'First Quest', 'This is the first quest.', 100),\n       (2, 'Second Quest', 'This is the second quest.', 200),\n       (3, 'Third Quest', 'This is the third quest.', 300),\n       (4, 'Fourth Quest', 'This is the fourth quest.', 400),\n       (5, 'Fifth Quest', 'This is the fifth quest.', 500),\n       (6, 'Sixth Quest', 'This is the sixth quest.', 600),\n       (7, 'Seventh Quest', 'This is the seventh quest.', 700),\n       (8, 'Eighth Quest', 'This is the eighth quest.', 800),\n       (9, 'Ninth Quest', 'This is the ninth quest.', 900),\n       (10, 'Tenth Quest', 'This is the tenth quest.', 1000),\n       (11, 'Eleventh Quest', 'This is the eleventh quest.', 1100),\n       (12, '"}
{"seed": "/* Drops the table named ReceiveParcelLogs if it exists. */\nDROP TABLE IF EXISTS `ReceiveParcelLogs`", "description": "Drops the table named ReceiveParcelLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named ReceiveParcelLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the table named ReceiveParcelLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS ReceiveParcelLogs;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('ReceiveParcelLogs');"}
{"seed": "/* Creates a table named ReceiveParcelLogs with 11 columns: RpcId (integer primary key), RpcDate (datetime), RpcChaId (integer), RpcMapId (integer), RpcX (integer), RpcY (integer), RpcItmId (integer), RpcAmount (integer), RpcSender (integer), and RpcNpc (integer). */\nCREATE TABLE `ReceiveParcelLogs` (\n  `RpcId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `RpcDate` datetime DEFAULT NULL,\n  `RpcChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `RpcMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `RpcX` int(10) unsigned NOT NULL DEFAULT '0',\n  `RpcY` int(10) unsigned NOT NULL DEFAULT '0',\n  `RpcItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `RpcAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `RpcSender` int(10) unsigned NOT NULL DEFAULT '0',\n  `RpcNpc` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`RpcId`),\n  KEY `RpcChaId` (`RpcChaId`),\n  KEY `RpcMapId` (`RpcMapId`),\n  KEY `RpcItmId` (`RpcItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named ReceiveParcelLogs with 11 columns: RpcId (integer primary key), RpcDate (datetime), RpcChaId (integer), RpcMapId (integer), RpcX (integer), RpcY (integer), RpcItmId (integer), RpcAmount (integer), RpcSender (integer), and RpcNpc (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named ReceiveParcelLogs with 11 columns: RpcId (integer primary key), RpcDate (datetime), RpcChaId (integer), RpcMapId (integer), RpcX (integer), RpcY (integer), RpcItmId (integer), RpcAmount (integer), RpcSender (integer), and RpcNpc (integer).", "response": "-- Reasoning:\nWe need a new table named ReceiveParcelLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the date and time of the log. It should also have columns for the parcel ID, map ID, X and Y coordinates, item ID, amount, sender ID, and NPC ID.\n\n-- Solution:\n```sql\nCREATE TABLE ReceiveParcelLogs (\n  RpcId INT PRIMARY KEY,\n  RpcDate DATETIME,\n  RpcChaId INT,\n  RpcMapId INT,\n  RpcX INT,\n  RpcY INT,\n  RpcItmId INT,\n  RpcAmount INT,\n  RpcSender INT,\n  RpcNpc INT\n);\n```\n\n-- Explanation:\nThis statement defines the ReceiveParcelLogs table with 11 columns:\n  \u2022 RpcId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RpcDate: datetime\n  \u2022 RpcChaId: integer\n  \u2022 RpcMapId: integer\n  \u2022 RpcX: integer\n  \u2022 RpcY: integer\n  \u2022 RpcItmId: integer\n  \u2022 RpcAmount: integer\n  \u2022 RpcSender: integer\n  \u2022 RpcNpc: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('ReceiveParcelLogs');"}
{"seed": "/* Drops the table named Recipes if it exists. */\nDROP TABLE IF EXISTS `Recipes`", "description": "Drops the table named Recipes if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Recipes if it exists.", "response": "-- Reasoning:\nWe need to delete the table named Recipes if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Recipes;\n```\n\n-- Explanation:\nThis statement deletes the table named Recipes if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Recipes');"}
{"seed": "/* Creates a table named Recipes with 25 columns: RecId (integer primary key), RecIdentifier (varchar), RecDescription (varchar), RecCritIdentifier (varchar), RecCritDescription (varchar), RecCraftTime (integer), RecSuccessRate (integer), RecSkillAdvance (integer), RecCritRate (integer), RecBonus (integer), RecSkillRequired (integer), RecTokensRequired (integer), RecMaterial1 (integer), RecAmount1 (integer), RecMaterial2 (integer), */\nCREATE TABLE `Recipes` (\n  `RecId` int(11) NOT NULL DEFAULT '0',\n  `RecIdentifier` varchar(64) NOT NULL DEFAULT '',\n  `RecDescription` varchar(64) NOT NULL DEFAULT '',\n  `RecCritIdentifier` varchar(64) NOT NULL DEFAULT '',\n  `RecCritDescription` varchar(64) NOT NULL DEFAULT '',\n  `RecCraftTime` int(10) unsigned NOT NULL DEFAULT '0',\n  `RecSuccessRate` int(10) unsigned NOT NULL DEFAULT '0',\n  `RecSkillAdvance` int(10) unsigned NOT NULL DEFAULT '0',\n  `RecCritRate` int(10) unsigned NOT NULL DEFAULT '0',\n  `RecBonus` int(10) unsigned NOT NULL DEFAULT '0',\n  `RecSkillRequired` int(10) unsigned NOT NULL DEFAULT '0',\n  `RecTokensRequired` int(11) NOT NULL DEFAULT '0',\n  `RecMaterial1` int(11) NOT NULL DEFAULT '0',\n  `RecAmount1` int(11) NOT NULL DEFAULT '0',\n  `RecMaterial2` int(11) NOT NULL DEFAULT '0',\n  `RecAmount2` int(11) NOT NULL DEFAULT '0',\n  `RecMaterial3` int(11) NOT NULL DEFAULT '0',\n  `RecAmount3` int(11) NOT NULL DEFAULT '0',\n  `RecMaterial4` int(11) NOT NULL DEFAULT '0',\n  `RecAmount4` int(11) NOT NULL DEFAULT '0',\n  `RecMaterial5` int(11) NOT NULL DEFAULT '0',\n  `RecAmount5` int(11) NOT NULL DEFAULT '0',\n  `RecSuperiorMaterial1` int(11) NOT NULL DEFAULT '0',\n  `RecSuperiorAmount1` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`RecId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Recipes with 25 columns: RecId (integer primary key), RecIdentifier (varchar), RecDescription (varchar), RecCritIdentifier (varchar), RecCritDescription (varchar), RecCraftTime (integer), RecSuccessRate (integer), RecSkillAdvance (integer), RecCritRate (integer), RecBonus (integer), RecSkillRequired (integer), RecTokensRequired (integer), RecMaterial1 (integer), RecAmount1 (integer), RecMaterial2 (integer),", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "FOREIGN KEY", "INT", "NOT NULL", "DEFAULT", "ENGINE", "INNO"], "instruction": "Write a SQL query to create a table named Recipes with 25 columns: RecId (integer primary key), RecIdentifier (varchar), RecDescription (varchar), RecCritIdentifier (varchar), RecCritDescription (varchar), RecCraftTime (integer), RecSuccessRate (integer), RecSkillAdvance (integer), RecCritRate (integer), RecBonus (integer), RecSkillRequired (integer), RecTokensRequired (integer), RecMaterial1 (integer), RecAmount1 (integer), RecMaterial2 (integer), RecAmount2 (integer), RecMaterial3 (integer), RecAmount3 (integer), RecMaterial4 (integer), RecAmount4 (integer), RecMaterial5 (integer), RecAmount5 (integer), RecSuperior", "response": "-- Reasoning:\nWe need a new table named Recipes. It should have an integer primary key so that each recipe has a unique identifier, and a name column to store the recipe\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Recipes (\n  RecId INT PRIMARY KEY,\n  RecIdentifier VARCHAR(255),\n  RecDescription VARCHAR(255),\n  RecCritIdentifier VARCHAR(255),\n  RecCritDescription VARCHAR(255),\n  RecCraftTime INT,\n  RecSuccessRate INT,\n  RecSkillAdvance INT,\n  RecCritRate INT,\n  RecBonus INT,\n  RecSkillRequired INT,\n  RecTokensRequired INT,\n  RecMaterial1 INT,\n  RecAmount1 INT,\n  RecMaterial2 INT,\n  RecAmount2 INT,\n  RecMaterial3 INT,\n  RecAmount3 INT,\n  RecMaterial4 INT,\n  RecAmount4 INT,\n  RecMaterial5 INT,\n  RecAmount5 INT,\n  RecSuperior INT\n);\n```\n\n-- Explanation:\nThis statement defines the Recipes table with 25 columns:\n  \u2022 RecId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RecIdentifier: variable\u2010length string up to 255 characters\n  \u2022 RecDescription: variable\u2010length string up to 255 characters\n  \u2022 RecCritIdentifier: variable\u2010length string up to 2"}
{"seed": "/* Drops the table named Registry if it exists. */\nDROP TABLE IF EXISTS `Registry`", "description": "Drops the table named Registry if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Registry if it exists.", "response": "-- Reasoning:\nWe need to delete the table named Registry if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Registry;\n```\n\n-- Explanation:\nThis statement deletes the table named Registry if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Registry');"}
{"seed": "/* Creates a table named Registry with five columns: RegId (integer primary key), RegChaId (integer), RegIdentifier (varchar), RegValue (integer), and RegPosition (integer). */\nCREATE TABLE `Registry` (\n  `RegId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `RegChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `RegIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `RegValue` int(10) unsigned NOT NULL DEFAULT '0',\n  `RegPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`RegId`),\n  KEY `RegChaId` (`RegChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=300 DEFAULT CHARSET=latin1", "description": "Creates a table named Registry with five columns: RegId (integer primary key), RegChaId (integer), RegIdentifier (varchar), RegValue (integer), and RegPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Registry with five columns: RegId (integer primary key), RegChaId (integer), RegIdentifier (varchar), RegValue (integer), and RegPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Registry. It should have an integer primary key so that each registry entry has a unique identifier, and four other columns to store the registry entry\u2019s information.\n\n-- Solution:\n```sql\nCREATE TABLE Registry (\n  RegId INT PRIMARY KEY,\n  RegChaId INT,\n  RegIdentifier VARCHAR(255),\n  RegValue INT,\n  RegPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Registry table with five columns:\n  \u2022 RegId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RegChaId: integer\n  \u2022 RegIdentifier: variable\u2010length string up to 255 characters\n  \u2022 RegValue: integer\n  \u2022 RegPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Registry');"}
{"seed": "/* Drops the table named Registry_backup if it exists. */\nDROP TABLE IF EXISTS `Registry_backup`", "description": "Drops the table named Registry_backup if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Registry_backup if it exists.", "response": "-- Reasoning:\nWe need to delete the table named Registry_backup if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Registry_backup;\n```\n\n-- Explanation:\nThis statement deletes the table named Registry_backup if it exists.\n\n-- Tests:\n-- 1. Verify table is deleted\nSELECT name FROM sqlite_master WHERE type='table' AND name='Registry_backup';"}
{"seed": "/* Creates a table named Registry_backup with five columns: RegId (integer primary key), RegChaId (integer), RegIdentifier (varchar), RegValue (integer), and RegPosition (integer). */\nCREATE TABLE `Registry_backup` (\n  `RegId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `RegChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `RegIdentifier` varchar(45) NOT NULL DEFAULT '',\n  `RegValue` int(10) unsigned NOT NULL DEFAULT '0',\n  `RegPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`RegId`),\n  KEY `RegChaId` (`RegChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=2931 DEFAULT CHARSET=latin1", "description": "Creates a table named Registry_backup with five columns: RegId (integer primary key), RegChaId (integer), RegIdentifier (varchar), RegValue (integer), and RegPosition (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Registry_backup with five columns: RegId (integer primary key), RegChaId (integer), RegIdentifier (varchar), RegValue (integer), and RegPosition (integer).", "response": "-- Reasoning:\nWe need a new table named Registry_backup. It should have an integer primary key so that each record has a unique identifier, and four other columns to store the registry information.\n\n-- Solution:\n```sql\nCREATE TABLE Registry_backup (\n  RegId INT PRIMARY KEY,\n  RegChaId INT,\n  RegIdentifier VARCHAR(255),\n  RegValue INT,\n  RegPosition INT\n);\n```\n\n-- Explanation:\nThis statement defines the Registry_backup table with five columns:\n  \u2022 RegId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RegChaId: integer\n  \u2022 RegIdentifier: variable\u2010length string up to 255 characters\n  \u2022 RegValue: integer\n  \u2022 RegPosition: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Registry_backup');"}
{"seed": "/* Drops the table named ReportLogs if it exists. */\nDROP TABLE IF EXISTS `ReportLogs`", "description": "Drops the table named ReportLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named ReportLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the table named ReportLogs if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS ReportLogs;\n```\n\n-- Explanation:\nThis statement deletes the table named ReportLogs if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('ReportLogs');"}
{"seed": "/* Creates a table named ReportLogs with five columns: RepId (integer primary key), RepDate (datetime), RepChaId (integer), RepMessage (varchar). */\nCREATE TABLE `ReportLogs` (\n  `RepId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `RepDate` datetime DEFAULT NULL,\n  `RepChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `RepMessage` varchar(255) NOT NULL DEFAULT '',\n  PRIMARY KEY (`RepId`),\n  KEY `RepChaId` (`RepChaId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named ReportLogs with five columns: RepId (integer primary key), RepDate (datetime), RepChaId (integer), RepMessage (varchar).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "AUTO_INCREMENT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named ReportLogs with five columns: RepId (integer primary key), RepDate (datetime), RepChaId (integer), RepMessage (varchar).", "response": "-- Reasoning:\nWe need a new table named ReportLogs. It should have an integer primary key so that each report has a unique identifier, a datetime column to store the date and time of the report, an integer column to store the ID of the character who made the report, and a varchar column to store the report message.\n\n-- Solution:\n```sql\nCREATE TABLE ReportLogs (\n  RepId INT PRIMARY KEY,\n  RepDate DATETIME,\n  RepChaId INT,\n  RepMessage VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the ReportLogs table with four columns:\n  \u2022 RepId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 RepDate: datetime\n  \u2022 RepChaId: integer\n  \u2022 RepMessage: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('ReportLogs');"}
{"seed": "/* Drops the table named SayLogs if it exists. */\nDROP TABLE IF EXISTS `SayLogs`", "description": "Drops the table named SayLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named SayLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the SayLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS SayLogs;\n```\n\n-- Explanation:\nThis statement deletes the SayLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('SayLogs');"}
{"seed": "/* Creates a table named SayLogs with five columns: SayId (integer primary key), SayDate (datetime), SayChaId (integer), SayType (varchar), and SayMessage (varchar). */\nCREATE TABLE `SayLogs` (\n  `SayId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `SayDate` datetime DEFAULT NULL,\n  `SayChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SayType` varchar(255) NOT NULL DEFAULT '',\n  `SayMessage` varchar(255) NOT NULL DEFAULT '',\n  PRIMARY KEY (`SayId`),\n  KEY `SayChaId` (`SayChaId`)\n) ENGINE=InnoDB AUTO_INCREMENT=223 DEFAULT CHARSET=latin1", "description": "Creates a table named SayLogs with five columns: SayId (integer primary key), SayDate (datetime), SayChaId (integer), SayType (varchar), and SayMessage (varchar).", "concepts": ["CREATE TABLE", "SayLogs", "SayId", "SayDate", "SayChaId", "SayType", "SayMessage", "PRIMARY"], "instruction": "Write a SQL query to create a table named SayLogs with five columns: SayId (integer primary key), SayDate (datetime), SayChaId (integer), SayType (varchar), and SayMessage (varchar).", "response": "-- Reasoning:\nWe need a new table named SayLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the log\u2019s date and time.\n\n-- Solution:\n```sql\nCREATE TABLE SayLogs (\n  SayId INT PRIMARY KEY,\n  SayDate DATETIME,\n  SayChaId INT,\n  SayType VARCHAR(255),\n  SayMessage VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the SayLogs table with five columns:\n  \u2022 SayId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SayDate: datetime\n  \u2022 SayChaId: integer\n  \u2022 SayType: variable\u2010length string up to 255 characters\n  \u2022 SayMessage: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SayLogs');"}
{"seed": "/* The first line of the query is a CREATE TABLE statement. It creates a table named users with two columns: id (integer primary key) and name (varchar). */\nINSERT INTO `SayLogs` VALUES (1,'2015-09-21 14:03:38',2,'Slash','/reloadmob'),(2,'2015-09-21 14:05:13',2,'Slash','/state 0'),(3,'2015-09-21 14:53:45',2,'Slash','/reloadlua'),(4,'2015-09-21 14:53:47',2,'Slash','/reloadmob'),(5,'2015-09-21 14:55:39',2,'Slash','/reloadlua'),(6,'2015-09-21 14:59:22',2,'Slash','/reloadlua'),(7,'2015-09-21 14:59:52',2,'Slash','/reloadlua'),(8,'2015-09-21 15:00:01',2,'Slash','/i silver_pickaxe'),(9,'2015-09-21 15:00:25',2,'Say','a'),(10,'2015-09-21 15:00:29',2,'Say','a'),(11,'2015-09-21 15:00:33',2,'Say','a'),(12,'2015-09-21 15:01:13',2,'Slash','/reloadlua'),(13,'2015-09-21 15:10:17',2,'Slash','/reloadlua'),(14,'2015-09-21 15:10:23',2,'Say','a'),(15,'2015-09-21 15:10:32',2,'Say','a'),(16,'2015-09-21 15:11:45',2,'Say','a'),(17,'2015-09-21 15:12:54',2,'Slash','/reloadlua'),(18,'2015-09-21 15:12:57',2,'Say','a'),(19,'2015-09-21 15:13:22',2,'Say','tes'),(20,'2015-09-21 15:13:28',2,'Slash','/warp 1000'),(21,'2015-09-21 15:16:49',2,'Slash','/reloadlua'),(22,'2015-09-21 15:18:38',2,'Slash','/reloadlua'),(23,'2015-09-21 15:20:55',2,'Slash','/reloadlua'),(24,'2015-09-21 15:21:04',2,'Slash','/reloadlua'),(25,'2015-09-21 15:21:05',2,'Say','/tet'),(26,'2015-09-21 15:21:06',2,'Slash','/test'),(27,'2015-09-21 15:22:57',2,'Slash','/reloadlua'),(28,'2015-09-21 15:23:08',2,'Slash','/test'),(29,'2015-09-21 15:23:10',2,'Slash','/test'),(30,'2015-09-21 15:23:20',2,'Slash','/reloadlua'),(31,'2015-09-21 15:23:20',2,'Slash','/test'),(32,'2015-09-21 15:24:05',2,'Slash','/reloadlua'),(33,'2015-09-21 15:24:08',2,'Slash','/test'),(34,'2015-09-21 15:30:38',2,'Slash','/reloadlua'),(35,'2015-09-21 15:30:40',2,'Slash','/test'),(36,'2015-09-21 15:31:00',2,'Slash','/reloadlua'),(37,'2015-09-21 15:31:04',2,'Slash','/test'),(38,'2015-09-21 15:31:20',2,'Slash','/test'),(39,'2015-09-21 15:34:50',2,'Slash','/reloadlua'),(40,'2015-09-21 15:34:56',2,'Slash','/reloadlua'),(41,'2015-09-21 15:34:57',2,'Slash','/test'),(42,'2015-09-21 15:35:02',2,'Slash','/test'),(43,'2015-09-21 15:35:31',2,'Slash','/reloadlua'),(44,'2015-09-21 15:35:32',2,'Slash','/test'),(45,'2015-09-21 15:35:35',2,'Slash','/test'),(46,'2015-09-21 15:36:58',2,'Slash','/reloadlua'),(47,'2015-09-21 15:37:01',2,'Slash','/test'),(48,'2015-09-21 15:37:09',2,'Slash','/test'),(49,'2015-09-21 15:38:03',2,'Slash','/reloadlua'),(50,'2015-09-21 15:38:04',2,'Slash','/test'),(51,'2015-09-21 15:38:10',2,'Slash','/test'),(52,'2015-09-21 15:38:18',2,'Slash','/test'),(53,'2015-09-21 16:00:28',2,'Slash','/reloadlua'),(54,'2015-09-21 16:10:55',2,'Slash','/reloadlua'),(55,'2015-09-21 16:10:58',2,'Slash','/test'),(56,'2015-09-21 16:11:07',2,'Slash','/test'),(57,'2015-09-21 16:11:08',2,'Say','a'),(58,'2015-09-21 16:11:29',2,'Slash','/reloadlua'),(59,'2015-09-21 16:12:16',2,'Slash','/reloadlua'),(60,'2015-09-21 16:12:27',2,'Slash','/reloadlua'),(61,'2015-09-21 16:12:29',2,'Slash','/test'),(62,'2015-09-21 16:13:14',2,'Slash','/reloadlua'),(63,'2015-09-21 16:13:20',2,'Slash','/reloadlua'),(64,'2015-09-21 16:13:21',2,'Slash','/test'),(65,'2015-09-21 16:13:28',2,'Slash','/test'),(66,'2015-09-21 16:14:40',2,'Slash','/reloadlua'),(67,'2015-09-21 16:16:12',2,'Slash','/reloadlua'),(68,'2015-09-21 16:16:16',2,'Slash','/test'),(69,'2015-09-21 16:16:18',2,'Say','N-mail me'),(70,'2015-09-21 16:16:27',2,'Slash','/test'),(71,'2015-09-21 16:16:29',2,'Slash','/test'),(72,'2015-09-21 16:17:27',2,'Slash','/reloadlua'),(73,'2015-09-21 16:17:29',2,'Slash','/test'),(74,'2015-09-21 16:17:31',2,'Slash','/test'),(75,'2015-09-21 16:17:38',2,'Slash','/test'),(76,'2015-09-21 16:17:42',2,'Slash','/test'),(77,'2015-09-21 16:17:43',2,'Slash','/test'),(78,'2015-09-21 16:17:47',2,'Slash','/test'),(79,'2015-09-21 16:18:53',2,'Slash','/reloadlua'),(80,'2015-09-21 16:19:05',2,'Slash','/reloadlua'),(81,'2015-09-21 16:19:07',2,'Slash','/test'),(82,'2015-09-21 16:19:09',2,'Slash','/test'),(83,'2015-09-21 16:19:10',2,'Slash','/test'),(84,'2015-09-21 16:19:13',2,'Slash','/test'),(85,'2015-09-21 16:19:15',2,'Slash','/test'),(86,'2015-09-21 16:19:35',2,'Slash','/reloadlua'),(87,'2015-09-21 16:19:44',2,'Slash','/test'),(88,'2015-09-21 16:19:45',2,'Slash','/test'),(89,'2015-09-21 16:19:47',2,'Slash','/test'),(90,'2015-09-21 16:19:50',2,'Slash','/test'),(91,'2015-09-21 16:20:31',2,'Slash','/reloadlua'),(92,'2015-09-21 16:20:38',2,'Slash','/test'),(93,'2015-09-21 16:20:40',2,'Slash','/test'),(94,'2015-09-21 16:20:41',2,'Slash','/test'),(95,'2015-09-21 16:20:42',2,'Slash','/test'),(96,'2015-09-21 16:20:50',2,'Slash','/test'),(97,'2015-09-21 16:20:52',2,'Slash','/test'),(98,'2015-09-21 16:20:53',2,'Slash','/test'),(99,'2015-09-21 16:20:54',2,'Slash','/test'),(100,'2015-09-21 16:20:54',2,'Slash','/test'),(101,'2015-09-21 16:20:57',2,'Slash','/test'),(102,'2015-09-21 16:20:58',2,'Slash','/test'),(103,'2015-09-21 16:21:40',2,'Slash','/reloadlua'),(104,'2015-09-21 16:21:42',2,'Slash','/test'),(105,'2015-09-21 16:21:56',2,'Slash','/reloadlua'),(106,'2015-09-21 16:21:59',2,'Slash','/test'),(107,'2015-09-21 16:22:00',2,'Slash','/test'),(108,'2015-09-21 16:22:01',2,'Slash','/test'),(109,'2015-09-21 16:22:02',2,'Slash','/test'),(110,'2015-09-21 16:22:04',2,'Slash','/test'),(111,'2015-09-21 16:22:04',2,'Slash','/test'),(112,'2015-09-21 16:22:05',2,'Slash','/test'),(113,'2015-09-21 16:22:06',2,'Slash','/test'),(114,'2015-09-21 16:22:07',2,'Slash','/test'),(115,'2015-09-21 16:22:07',2,'Slash','/test'),(116,'2015-09-21 16:22:08',2,'Slash','/test'),(117,'2015-09-21 16:22:09',2,'Slash','/test'),(118,'2015-09-21 16:22:09',2,'Slash','/test'),(119,'2015-09-21 16:22:11',2,'Slash','/test'),(120,'2015-09-21 16:22:15',2,'Slash','/test'),(121,'2015-09-21 16:22:17',2,'Slash','/test'),(122,'2015-09-21 16:22:18',2,'Slash','/test'),(123,'2015-09-21 16:22:18',2,'Slash','/test'),(124,'2015-09-21 16:22:18',2,'Slash','/test'),(125,'2015-09-21 16:22:18',2,'Slash','/test'),(126,'2015-09-21 16:22:30',2,'Slash','/reloadlua'),(127,'2015-09-21 16:22:31',2,'Slash','/test'),(128,'2015-09-21 16:22:32',2,'Slash','/test'),(129,'2015-09-21 16:22:33',2,'Slash','/test'),(130,'2015-09-21 16:23:23',2,'Slash','/warp 10000'),(131,'2015-09-21 16:24:22',2,'Slash','/reloadlua'),(132,'2015-09-21 16:25:19',2,'Slash','/reloadlua'),(133,'2015-09-21 16:27:07',2,'Slash','/reloadlua'),(134,'2015-09-21 16:28:08',2,'Slash','/reloadlua'),(135,'2015-09-21 16:28:55',2,'Slash','/reloadlua'),(136,'2015-09-21 16:30:46',2,'Slash','/reloadlua'),(137,'2015-09-21 16:31:58',2,'Slash','/reloadlua'),(138,'2015-09-21 16:31:59',2,'Slash','/test'),(139,'2015-09-21 16:32:15',2,'Slash','/reloadlua'),(140,'2015-09-21 16:32:16',2,'Slash','/test'),(141,'2015-09-21 16:32:20',2,'Slash','/test'),(142,'2015-09-21 16:33:25',2,'Slash','/reloadlua'),(143,'2015-09-21 16:33:28',2,'Slash','/test'),(144,'2015-09-21 16:33:29',2,'Slash','/test'),(145,'2015-09-21 16:33:31',2,'Slash','/test'),(146,'2015-09-21 16:34:03',2,'Slash','/reloadlua'),(147,'2015-09-21 16:34:06',2,'Slash','/test'),(148,'2015-09-21 16:34:16',2,'Slash','/test'),(149,'2015-09-21 16:34:21',2,'Slash','/test'),(150,'2015-09-21 16:35:13',2,'Slash','/reloadlua'),(151,'2015-09-21 16:35:31',2,'Slash','/reloadlua'),(152,'2015-09-21 16:35:36',2,'Slash','/test'),(153,'2015-09-21 16:36:07',2,'Slash','/reloadlua'),(154,'2015-09-21 16:36:12',2,'Slash','/reloadlua'),(155,'2015-09-21 16:36:14',2,'Slash','/test'),(156,'2015-09-21 16:36:28',2,'Slash','/test'),(157,'2015-09-21 16:36:39',2,'Slash','/speed 0'),(158,'2015-09-21 16:36:53',2,'Slash','/test'),(159,'2015-09-21 16:37:21',2,'Slash','/reloadlua'),(160,'2015-09-21 16:37:27',2,'Slash','/test'),(161,'2015-09-21 16:37:29',2,'Slash','/test'),(162,'2015-09-21 16:37:33',2,'Slash','/test'),(163,'2015-09-21 16:37:35',2,'Slash','/test'),(164,'2015-09-21 16:38:10',2,'Slash','/reloadlua'),(165,'2015-09-21 21:04:27',53,'Say','z'),(166,'2015-09-21 21:11:33',18,'Say','alo kk'),(167,'2015-09-21 21:11:35',53,'Say','Hello'),(168,'2015-09-21 21:11:51',18,'Say','bola nya bimbang'),(169,'2015-09-21 21:12:33',53,'Say','zzzz'),(170,'2015-09-21 21:12:39',53,'Say','jln tmbus gmna'),(171,'2015-09-21 21:12:48',18,'Say','kyknya barusan agak nge lag dikid'),(172,'2015-09-21 21:12:51',18,'Say','jadi kliatan tembus'),(173,'2015-09-21 21:12:54',53,'Say','jln tmbus gmna'),(174,'2015-09-21 21:13:00',18,'Say','coba'),(175,'2015-09-21 21:13:08',53,'Say','pake spell apa'),(176,'2015-09-21 21:13:08',18,'Say','ga bisa'),(177,'2015-09-21 21:13:11',53,'Say','pret'),(178,'2015-09-21 21:13:20',53,'Say','ngpain boonk2'),(179,'2015-09-21 21:13:33',18,'Say','kalo gm bisa sendiri kk'),(180,'2015-09-21 21:13:44',53,'Say','gw bkn gm jg bs res rea'),(181,'2015-09-21 21:13:48',18,'Say','ia'),(182,'2015-09-21 21:13:56',18,'Say','tapi ga bisa jalan tembus'),(183,'2015-09-21 21:14:05',53,'Say','kan blm di ksh'),(184,'2015-09-21 21:14:09',53,'Say','itu kan ada spell nya'),(185,'2015-09-21 21:14:13',18,'Say','ngga ada spell nya k'),(186,'2015-09-21 21:14:18',53,'Say','lalu?'),(187,'2015-09-21 21:14:20',18,'Say','jalan tembus dr stat gm nya'),(188,'2015-09-21 21:14:22',53,'Say','ini gw aja warior'),(189,'2015-09-21 21:14:29',53,'Say','serius'),(190,'2015-09-21 21:14:33',18,'Say','kk gm nya bukan gm level mentok'),(191,'2015-09-21 21:14:40',53,'Say','ow'),(192,'2015-09-21 21:15:12',53,'Say','apaan ini'),(193,'2015-09-21 21:15:12',18,'Say','buat isenk gebukin'),(194,'2015-09-21 21:15:20',18,'Say','namnya sansak'),(195,'2015-09-21 21:15:24',18,'Say','buat gebuk2in'),(196,'2015-09-21 21:16:31',18,'Say','biar ga kesepian'),(197,'2015-09-21 21:16:38',53,'Say','PN lg sepi'),(198,'2015-09-21 21:16:45',53,'Say','jd iseng2 sini'),(199,'2015-09-21 21:16:52',53,'Say','apa lu diaz'),(200,'2015-09-21 21:16:58',53,'Say','apa lu'),(201,'2015-09-21 21:17:07',53,'Say','yuri tae'),(202,'2015-09-21 21:17:11',53,'Say','gk seneng'),(203,'2015-09-21 21:17:15',53,'Say','yuri tae'),(204,'2015-09-21 21:17:17',53,'Say','yuri tae'),(205,'2015-09-21 21:17:22',18,'Slash','/reloadmob'),(206,'2015-09-21 21:17:25',53,'Say','hai cc'),(207,'2015-09-21 21:17:27',53,'Say','mecia'),(208,'2015-09-21 21:17:37',53,'Say','yuri tae'),(209,'2015-09-21 21:17:42',53,'Say','yuri tae'),(210,'2015-09-21 21:17:48',53,'Say','yuri tae'),(211,'2015-09-21 21:17:49',53,'Say','yuri tae'),(212,'2015-09-21 21:17:53',53,'Say','apa lu diaz'),(213,'2015-09-21 21:18:08',53,'Say','Hello'),(214,'2015-09-21 21:19:23',18,'Say','semangat kk'),(215,'2015-09-21 21:19:42',53,'Say','mecia'),(216,'2015-09-21 21:20:41',18,'Say','uda 51%'),(217,'2015-09-21 21:20:49',53,'Say','aaa'),(218,'2015-09-21 21:22:53',53,'Say','kampret lu'),(219,'2015-09-21 21:22:55',18,'Slash','/reloadmob'),(220,'2015-09-21 21:22:57',53,'Say','kampret lu'),(221,'2015-09-21 21:24:33',18,'Slash','/state 2'),(222,'2015-09-21 21:25:49',18,'Yell','byee')", "description": "The first line of the query is a CREATE TABLE statement. It creates a table named users with two columns: id (integer primary key) and name (varchar).", "concepts": ["```\nCREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "CTE"], "instruction": "Write a SQL query to list each customer's total sales grouped by customer, and sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to find the total sales for each customer. We can do this by grouping the orders by customer and summing the total_price column.\n\n-- Solution:\n```sql\nSELECT customer, SUM(total_price) AS total_sales\nFROM orders\nGROUP BY customer\nORDER BY total_sales DESC;\n```\n\n-- Explanation:\nThis query uses the GROUP BY clause to group the orders by customer, and the SUM() function to calculate the total sales for each customer. The ORDER BY clause is used to sort the results in descending order based on the total_sales column.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT customer, SUM(total_price) AS total_sales\nFROM orders\nGROUP BY customer\nORDER BY total_sales DESC;"}
{"seed": "/* Drops the table named SellLogs if it exists. */\nDROP TABLE IF EXISTS `SellLogs`", "description": "Drops the table named SellLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named SellLogs if it exists.", "response": "-- Reasoning:\nWe need to drop the SellLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS SellLogs;\n```\n\n-- Explanation:\nThis statement drops the SellLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('SellLogs');"}
{"seed": "/* Creates a table named SellLogs with 10 columns: SelId (integer primary key), SelDate (datetime), SelChaId (integer), SelMapId (integer), SelX (integer), SelY (integer), SelItmId (integer), SelPrice (integer), and SelAmount (integer). */\nCREATE TABLE `SellLogs` (\n  `SelId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `SelDate` datetime DEFAULT NULL,\n  `SelChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SelMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SelX` int(10) unsigned NOT NULL DEFAULT '0',\n  `SelY` int(10) unsigned NOT NULL DEFAULT '0',\n  `SelItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SelPrice` int(10) unsigned NOT NULL DEFAULT '0',\n  `SelAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`SelId`),\n  KEY `SelChaId` (`SelChaId`),\n  KEY `SelMapId` (`SelMapId`),\n  KEY `SelItmId` (`SelItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named SellLogs with 10 columns: SelId (integer primary key), SelDate (datetime), SelChaId (integer), SelMapId (integer), SelX (integer), SelY (integer), SelItmId (integer), SelPrice (integer), and SelAmount (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "ENGINE", "CHARSET", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named SellLogs with 10 columns: SelId (integer primary key), SelDate (datetime), SelChaId (integer), SelMapId (integer), SelX (integer), SelY (integer), SelItmId (integer), SelPrice (integer), and SelAmount (integer).", "response": "-- Reasoning:\nWe need a new table named SellLogs. It should have an integer primary key so that each sell log has a unique identifier, and a datetime column to store the sell date.\n\n-- Solution:\n```sql\nCREATE TABLE SellLogs (\n  SelId INT PRIMARY KEY,\n  SelDate DATETIME,\n  SelChaId INT,\n  SelMapId INT,\n  SelX INT,\n  SelY INT,\n  SelItmId INT,\n  SelPrice INT,\n  SelAmount INT\n);\n```\n\n-- Explanation:\nThis statement defines the SellLogs table with 10 columns:\n  \u2022 SelId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SelDate: datetime\n  \u2022 SelChaId: integer\n  \u2022 SelMapId: integer\n  \u2022 SelX: integer\n  \u2022 SelY: integer\n  \u2022 SelItmId: integer\n  \u2022 SelPrice: integer\n  \u2022 SelAmount: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SellLogs');"}
{"seed": "/* Drops the table named SendParcelLogs if it exists. */\nDROP TABLE IF EXISTS `SendParcelLogs`", "description": "Drops the table named SendParcelLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named SendParcelLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the SendParcelLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS SendParcelLogs;\n```\n\n-- Explanation:\nThis statement deletes the SendParcelLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('SendParcelLogs');"}
{"seed": "/* Creates a table named SendParcelLogs with 11 columns: SpcId (integer primary key), SpcDate (datetime), SpcSender (integer), SpcMapId (integer), SpcX (integer), SpcY (integer), SpcItmId (integer), SpcAmount (integer), SpcChaIdDestination (integer), SpcNpc (integer). */\nCREATE TABLE `SendParcelLogs` (\n  `SpcId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `SpcDate` datetime DEFAULT NULL,\n  `SpcSender` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpcMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpcX` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpcY` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpcItmId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpcAmount` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpcChaIdDestination` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpcNpc` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`SpcId`),\n  KEY `SpcChaId` (`SpcChaIdDestination`),\n  KEY `SpcMapId` (`SpcMapId`),\n  KEY `SpcItmId` (`SpcItmId`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named SendParcelLogs with 11 columns: SpcId (integer primary key), SpcDate (datetime), SpcSender (integer), SpcMapId (integer), SpcX (integer), SpcY (integer), SpcItmId (integer), SpcAmount (integer), SpcChaIdDestination (integer), SpcNpc (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named SendParcelLogs with 11 columns: SpcId (integer primary key), SpcDate (datetime), SpcSender (integer), SpcMapId (integer), SpcX (integer), SpcY (integer), SpcItmId (integer), SpcAmount (integer), SpcChaIdDestination (integer), SpcNpc (integer).", "response": "-- Reasoning:\nWe need a new table named SendParcelLogs. It should have an integer primary key so that each parcel has a unique identifier, and a datetime column to store the parcel\u2019s date and time.\n\n-- Solution:\n```sql\nCREATE TABLE SendParcelLogs (\n  SpcId INT PRIMARY KEY,\n  SpcDate DATETIME,\n  SpcSender INT,\n  SpcMapId INT,\n  SpcX INT,\n  SpcY INT,\n  SpcItmId INT,\n  SpcAmount INT,\n  SpcChaIdDestination INT,\n  SpcNpc INT\n);\n```\n\n-- Explanation:\nThis statement defines the SendParcelLogs table with 11 columns:\n  \u2022 SpcId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SpcDate: datetime\n  \u2022 SpcSender: integer\n  \u2022 SpcMapId: integer\n  \u2022 SpcX: integer\n  \u2022 SpcY: integer\n  \u2022 SpcItmId: integer\n  \u2022 SpcAmount: integer\n  \u2022 SpcChaIdDestination: integer\n  \u2022 SpcNpc: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SendParcelLogs');"}
{"seed": "/* Drops the table named Spawns if it exists. */\nDROP TABLE IF EXISTS `Spawns`", "description": "Drops the table named Spawns if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Spawns if it exists.", "response": "-- Reasoning:\nWe need to delete the table named Spawns if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Spawns;\n```\n\n-- Explanation:\nThis statement deletes the table named Spawns if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Spawns');"}
{"seed": "/* Creates a table named Spawns with 10 columns: SpnId (integer primary key), SpnMobId (integer), SpnMapId (integer), SpnX (integer), SpnY (integer), SpnLastDeath (integer), SpnStartTime (integer), SpnEndTime (integer), and SpnMobIdReplace (integer). */\nCREATE TABLE `Spawns` (\n  `SpnId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `SpnMobId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpnMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpnX` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpnY` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpnLastDeath` int(10) unsigned NOT NULL DEFAULT '0',\n  `SpnStartTime` int(10) unsigned NOT NULL DEFAULT '25',\n  `SpnEndTime` int(10) unsigned NOT NULL DEFAULT '25',\n  `SpnMobIdReplace` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`SpnId`),\n  KEY `SpnMobId` (`SpnMobId`) USING BTREE,\n  KEY `SpnMapId` (`SpnMapId`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=2896 DEFAULT CHARSET=latin1", "description": "Creates a table named Spawns with 10 columns: SpnId (integer primary key), SpnMobId (integer), SpnMapId (integer), SpnX (integer), SpnY (integer), SpnLastDeath (integer), SpnStartTime (integer), SpnEndTime (integer), and SpnMobIdReplace (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "BTREE", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named Spawns with 10 columns: SpnId (integer primary key), SpnMobId (integer), SpnMapId (integer), SpnX (integer), SpnY (integer), SpnLastDeath (integer), SpnStartTime (integer), SpnEndTime (integer), and SpnMobIdReplace (integer).", "response": "-- Reasoning:\nWe need a new table named Spawns. It should have an integer primary key so that each spawn has a unique identifier, and a name column to store the spawn\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Spawns (\n  SpnId INT PRIMARY KEY,\n  SpnMobId INT,\n  SpnMapId INT,\n  SpnX INT,\n  SpnY INT,\n  SpnLastDeath INT,\n  SpnStartTime INT,\n  SpnEndTime INT,\n  SpnMobIdReplace INT\n);\n```\n\n-- Explanation:\nThis statement defines the Spawns table with 10 columns:\n  \u2022 SpnId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SpnMobId: integer\n  \u2022 SpnMapId: integer\n  \u2022 SpnX: integer\n  \u2022 SpnY: integer\n  \u2022 SpnLastDeath: integer\n  \u2022 SpnStartTime: integer\n  \u2022 SpnEndTime: integer\n  \u2022 SpnMobIdReplace: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Spawns');"}
{"seed": "/* Drops the table named SpellBook if it exists. */\nDROP TABLE IF EXISTS `SpellBook`", "description": "Drops the table named SpellBook if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named SpellBook if it exists.", "response": "-- Reasoning:\nWe need to delete the SpellBook table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS SpellBook;\n```\n\n-- Explanation:\nThis statement deletes the SpellBook table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('SpellBook');"}
{"seed": "/* Creates a table named SpellBook with five columns: SbkId (integer primary key), SbkChaId (integer), SbkSplId (integer), SbkPosition (integer), and SbkLevel (integer). */\nCREATE TABLE `SpellBook` (\n  `SbkId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `SbkChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SbkSplId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SbkPosition` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`SbkId`),\n  KEY `SbkChaId` (`SbkChaId`),\n  KEY `SbkSplId` (`SbkSplId`)\n) ENGINE=InnoDB AUTO_INCREMENT=1437 DEFAULT CHARSET=latin1", "description": "Creates a table named SpellBook with five columns: SbkId (integer primary key), SbkChaId (integer), SbkSplId (integer), SbkPosition (integer), and SbkLevel (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "INSERT INTO", "VALUES", "UPDATE", "DELETE", "JOIN", "WHERE"], "instruction": "Write a SQL query to create a table named SpellBook with five columns: SbkId (integer primary key), SbkChaId (integer), SbkSplId (integer), SbkPosition (integer), and SbkLevel (integer).", "response": "-- Reasoning:\nWe need a new table named SpellBook. It should have an integer primary key so that each spell has a unique identifier, and four other columns to store the spell\u2019s character, spell, position, and level.\n\n-- Solution:\n```sql\nCREATE TABLE SpellBook (\n  SbkId INT PRIMARY KEY,\n  SbkChaId INT,\n  SbkSplId INT,\n  SbkPosition INT,\n  SbkLevel INT\n);\n```\n\n-- Explanation:\nThis statement defines the SpellBook table with five columns:\n  \u2022 SbkId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SbkChaId: integer\n  \u2022 SbkSplId: integer\n  \u2022 SbkPosition: integer\n  \u2022 SbkLevel: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SpellBook');"}
{"seed": "/* ``` */\nINSERT INTO `SpellBook` VALUES (174,11,20049,0),(175,11,20013,1),(176,11,20042,2),(177,11,20043,3),(178,11,20044,4),(179,11,20045,5),(180,11,20001,6),(181,11,502,7),(212,29,502,0),(213,29,501,1),(218,24,506,18),(219,24,507,19),(230,18,20029,0),(231,18,50005,1),(232,18,50003,2),(233,18,20004,3),(234,18,50004,4),(235,18,502,25),(238,5,40027,2),(239,5,40018,3),(241,24,50003,1),(243,5,40005,6),(245,5,40017,33),(246,5,40022,34),(247,5,40006,35),(248,5,502,51),(249,5,40026,0),(250,24,50004,24),(252,5,40028,1),(254,5,40025,25),(256,5,40015,9),(257,24,40026,2),(258,24,40027,5),(259,24,40015,7),(260,24,502,25),(263,39,504,2),(266,39,505,5),(268,39,503,7),(269,39,508,17),(270,39,506,18),(271,39,507,19),(272,39,501,20),(273,39,502,25),(274,18,507,5),(287,53,502,10),(290,53,506,13),(293,53,501,16),(310,55,502,0),(311,55,501,1),(312,34,20013,0),(313,34,20026,1),(314,34,20027,2),(315,34,20028,3),(316,34,20029,4),(317,34,20001,5),(318,34,20043,6),(334,55,504,2),(335,55,503,3),(336,55,20018,4),(337,55,10002,5),(338,55,10003,6),(339,54,25005,0),(340,54,30001,1),(341,54,25026,2),(342,54,30011,3),(349,54,25029,4),(350,54,30006,5),(351,54,25031,6),(352,54,25027,7),(353,54,30009,8),(354,54,40010,9),(355,54,40017,10),(356,54,40006,11),(357,54,40022,12),(358,54,506,13),(359,54,25030,14),(360,54,20015,15),(361,54,504,16),(362,54,30010,17),(363,54,508,18),(364,54,40009,19),(365,54,20014,20),(374,56,10018,0),(375,56,10019,1),(376,56,10017,2),(377,56,10021,3),(378,56,20018,4),(379,56,10002,5),(380,56,10003,6),(381,56,10004,7),(382,56,10011,8),(383,56,20029,9),(384,56,10012,10),(385,56,10005,11),(386,56,10020,12),(387,56,10024,13),(388,56,503,14),(389,56,504,15),(390,56,10015,16),(391,56,10023,17),(392,56,10006,18),(393,56,10016,19),(394,56,501,20),(395,56,10013,21),(396,56,10010,22),(397,56,10008,23),(398,56,10007,24),(399,56,502,25),(400,56,40027,26),(401,56,10014,27),(402,56,10009,28),(407,10,50003,0),(408,10,10021,1),(409,10,10017,2),(410,10,10020,3),(411,10,10024,4),(412,10,10015,5),(413,10,10011,6),(414,10,10006,7),(415,10,10007,8),(416,10,10008,9),(417,10,20018,10),(418,10,10002,11),(419,10,10003,12),(420,10,10004,13),(424,10,10018,14),(427,57,30011,0),(428,57,30001,1),(429,57,30010,2),(430,57,30006,3),(431,57,508,4),(432,57,25015,5),(433,57,40006,6),(434,57,25035,7),(435,57,40009,8),(436,57,20015,9),(437,57,20014,10),(438,57,40022,11),(439,57,507,12),(440,57,10012,13),(441,57,25036,14),(442,57,40011,15),(443,57,506,16),(444,57,40010,17),(445,57,25017,18),(446,57,40017,19),(447,57,501,20),(448,57,30002,21),(449,57,30004,22),(450,57,25037,23),(451,57,40013,24),(452,57,502,25),(453,57,30003,26),(454,57,30005,27),(455,57,503,28),(456,57,504,29),(457,57,30007,30),(458,57,30008,31),(459,57,25019,32),(460,57,30009,33),(461,57,25039,34),(462,57,25038,35),(463,57,25018,36),(468,56,19,29),(469,57,19,37),(477,54,40013,21),(478,54,25008,22),(479,54,30004,23),(480,54,507,24),(481,54,25028,25),(482,54,30007,26),(483,54,30008,27),(484,54,25009,28),(485,54,40011,29),(486,54,501,30),(487,54,30003,31),(488,54,30002,32),(489,54,503,33),(490,54,10012,34),(491,54,30005,35),(492,54,10022,36),(493,59,20013,0),(494,59,20026,1),(495,59,20027,2),(496,59,20028,3),(497,59,40018,4),(498,59,20029,5),(499,59,20011,6),(500,59,40028,7),(501,59,40026,8),(502,59,40027,9),(503,59,40017,10),(504,59,40006,11),(505,59,40019,12),(506,59,40022,13),(507,59,40035,14),(508,59,40031,15),(509,59,40036,16),(510,59,508,17),(511,59,40034,18),(512,59,40003,19),(513,59,40021,20),(514,59,40008,21),(515,59,502,22),(516,59,503,23),(517,59,40024,24),(519,59,20018,26),(520,59,10002,27),(521,59,20021,28),(522,59,20022,29),(524,54,50026,37),(525,59,40029,30),(526,59,40012,31),(527,59,40030,32),(529,55,10004,7),(530,4,501,1),(531,4,503,2),(532,4,504,3),(533,4,508,4),(534,4,20008,5),(535,4,20006,6),(536,4,20015,7),(537,4,20012,8),(538,4,25005,9),(539,4,20014,10),(540,4,20022,11),(541,4,20010,12),(542,4,20017,13),(543,4,20020,14),(544,4,20024,15),(545,4,20018,16),(546,4,20009,17),(547,4,20011,18),(548,4,507,19),(549,4,20001,20),(550,4,20002,21),(551,4,20004,22),(553,34,20044,7),(555,34,20045,9),(556,34,20042,10),(557,34,507,11),(561,34,50026,12),(563,57,20,38),(575,59,507,33),(576,18,50028,6),(577,59,20,34),(582,63,10018,0),(583,63,10021,2),(585,63,20029,4),(586,63,20018,5),(587,63,10002,6),(588,63,10003,7),(589,63,10004,8),(590,63,10010,9),(591,63,10015,10),(592,63,10011,11),(595,63,10006,14),(596,63,10007,15),(597,63,10008,16),(598,63,20013,17),(599,63,20026,18),(600,63,20027,19),(601,63,20028,20),(602,63,502,51),(603,63,10019,1),(604,63,508,21),(605,63,10016,22),(606,63,501,23),(607,63,504,24),(608,63,10020,25),(609,63,10017,3),(610,63,10005,12),(613,63,20001,28),(615,64,502,0),(616,64,20013,1),(617,64,20026,2),(618,64,20027,3),(619,64,20028,4),(620,64,20001,5),(621,64,10022,6),(622,64,20030,7),(623,64,20033,8),(624,64,20029,9),(626,63,10014,30),(633,63,10022,13),(634,63,503,31),(635,63,10012,32),(636,63,10013,33),(637,64,20025,10),(659,56,40026,30),(660,56,40018,31),(661,56,40005,32),(662,56,40008,33),(663,56,40028,34),(664,56,40006,35),(665,56,40022,36),(666,56,40017,37),(667,56,40020,38),(668,56,40025,39),(669,56,30014,40),(670,56,508,41),(677,18,20013,7),(678,18,50015,8),(680,18,20034,9),(681,18,50017,10),(682,18,50025,11),(683,18,50023,12),(684,18,10010,13),(685,18,10005,14),(686,18,506,15),(693,59,20015,25),(694,59,501,35),(695,59,20024,36),(696,59,40002,37),(697,59,40037,38),(698,59,506,39),(699,59,20001,40),(700,59,20019,41),(701,59,20023,42),(702,61,502,0),(703,61,20018,1),(704,61,10002,2),(705,61,10003,3),(706,61,10004,4),(707,61,10015,5),(708,61,10005,6),(709,61,10010,7),(710,61,10011,8),(711,61,10007,9),(712,61,10006,10),(713,61,10008,11),(714,61,10012,12),(715,53,20013,0),(716,53,20026,1),(725,53,508,23),(726,59,50030,43),(729,45,502,0),(730,45,501,1),(731,45,20013,2),(732,45,20018,3),(733,45,10002,4),(734,45,20002,5),(735,45,20024,6),(736,45,20001,7),(737,45,20004,8),(738,45,20023,9),(739,45,20021,10),(740,45,506,11),(741,45,508,12),(742,45,25018,13),(744,4,502,43),(754,34,502,25),(756,34,30002,8),(763,53,20018,26),(764,53,10005,29),(765,53,10010,31),(766,53,10002,32),(767,53,10006,42),(768,53,10015,44),(769,53,20027,2),(770,53,20028,3),(771,53,10017,4),(772,53,20029,5),(773,53,10003,30),(774,53,10007,43),(775,53,10008,45),(776,53,10011,48),(777,53,10004,49),(786,37,20029,0),(787,37,20001,1),(788,37,20013,2),(789,37,20026,3),(790,37,20027,4),(791,37,20028,5),(792,37,20006,6),(793,37,20015,7),(794,37,20012,8),(795,37,25010,9),(796,37,20014,10),(797,37,20022,11),(798,37,508,12),(799,37,502,13),(800,37,20020,14),(801,37,20024,15),(802,37,20018,16),(803,37,20009,17),(804,37,20011,18),(805,37,507,19),(806,37,501,20),(807,37,20002,21),(808,37,20004,22),(809,37,10002,23),(810,37,20023,24),(811,37,20008,25),(812,37,20019,26),(813,37,20021,27),(814,37,25013,28),(815,37,25012,29),(816,37,506,30),(817,37,20007,31),(822,66,10017,1),(823,66,10014,2),(824,66,10013,3),(826,66,10015,5),(827,66,10005,6),(828,24,20029,0),(829,24,20011,3),(830,24,50005,4),(831,24,40005,6),(832,24,40061,8),(833,24,30011,9),(834,24,40035,10),(835,24,40028,11),(837,24,40031,13),(838,24,40018,14),(839,24,40008,15),(840,24,40019,16),(841,24,40007,17),(842,24,40010,20),(843,24,40021,21),(844,24,40012,22),(845,24,40002,23),(846,24,50001,26),(847,24,50015,27),(849,24,40017,29),(850,24,40006,30),(851,24,508,31),(852,24,40022,32),(853,24,20024,33),(854,55,508,8),(855,55,10015,9),(856,55,10012,10),(857,55,10006,11),(858,55,10011,12),(859,55,10013,13),(860,55,10005,14),(861,55,10007,15),(862,55,10014,16),(863,55,10008,17),(864,55,10010,18),(865,72,40036,0),(866,72,40031,1),(867,72,40027,2),(868,72,504,3),(869,72,40024,4),(870,72,40018,5),(871,72,40006,6),(872,72,40022,7),(873,72,40017,8),(875,72,40023,10),(876,72,40011,11),(877,72,40021,12),(878,72,40003,13),(879,72,503,14),(882,72,40019,17),(883,72,40009,18),(884,72,25000,19),(885,72,40001,20),(886,72,40016,21),(887,72,40013,22),(888,72,40010,23),(889,72,40014,24),(890,72,40008,26),(891,72,507,27),(892,72,40007,34),(893,72,506,39),(894,72,508,40),(895,72,501,45),(897,24,505,34),(898,24,50016,35),(902,24,501,37),(904,24,40011,38),(905,24,40024,39),(906,66,10010,7),(907,66,503,11),(908,66,10011,27),(909,66,10003,28),(911,66,10008,39),(912,66,508,40),(913,66,10004,47),(914,66,10002,49),(915,66,20018,51),(931,24,10020,42),(933,24,40036,43),(940,72,40028,9),(941,72,40029,15),(942,72,40002,16),(943,72,502,25),(945,72,40012,31),(946,72,40030,32),(947,72,40034,49),(948,72,40037,51),(949,66,10016,4),(950,66,10007,8),(951,66,10006,9),(952,66,504,10),(953,66,10012,12),(954,66,502,25),(955,72,40035,29),(956,66,501,45),(957,11,50004,8),(958,55,10017,19),(959,55,10016,20),(960,73,502,0),(961,73,501,1),(962,73,503,2),(963,73,504,3),(964,73,20018,4),(965,73,10002,5),(966,73,20006,6),(967,73,20015,7),(968,73,20012,8),(969,73,25000,9),(970,73,20014,10),(971,73,20022,11),(972,73,20010,12),(973,73,20017,13),(974,73,20020,14),(975,73,20024,15),(976,73,508,16),(977,73,20008,17),(978,73,20011,18),(979,73,507,19),(980,73,20001,20),(981,73,20002,21),(982,73,20004,22),(983,73,506,23),(984,73,20009,24),(985,73,25002,25),(986,73,20007,26),(987,74,501,0),(988,74,502,1),(989,74,503,2),(990,74,504,3),(991,74,25010,4),(992,74,30001,5),(993,74,40006,6),(994,74,508,7),(995,74,40009,8),(996,74,20015,9),(997,74,20014,10),(998,74,40022,11),(999,74,507,12),(1000,74,10012,13),(1001,74,25031,14),(1002,74,40011,15),(1003,74,506,16),(1004,74,40010,17),(1005,74,25012,18),(1006,74,40017,19),(1007,74,25033,20),(1008,74,30002,21),(1009,74,25032,22),(1010,74,40013,23),(1011,74,25013,24),(1012,74,30003,25),(1013,74,30004,26),(1014,74,30005,27),(1015,74,30006,28),(1016,74,25030,29),(1017,74,30007,30),(1018,74,30008,31),(1019,74,25014,32),(1020,74,30009,33),(1021,75,502,0),(1022,75,501,1),(1023,75,503,2),(1024,75,504,3),(1025,75,508,4),(1026,75,40027,5),(1027,75,25005,6),(1028,75,40009,7),(1029,75,40011,8),(1030,75,40006,9),(1031,75,40023,10),(1032,75,40017,11),(1033,75,40013,12),(1034,75,40003,13),(1035,75,40022,14),(1036,75,507,15),(1037,75,40001,16),(1038,75,506,17),(1039,75,40014,18),(1040,75,40010,19),(1041,75,40021,20),(1042,75,40016,21),(1043,75,40007,22),(1044,75,40002,23),(1045,75,40012,24),(1046,75,40019,25),(1047,75,40029,26),(1048,75,40008,27),(1049,75,40030,28),(1050,75,40018,29),(1051,75,40031,30),(1052,21,20018,0),(1054,21,10003,2),(1055,21,10004,3),(1056,21,10015,4),(1058,21,10005,6),(1059,21,10010,7),(1060,21,10007,8),(1061,21,10012,9),(1062,21,503,10),(1063,21,10014,11),(1064,21,10006,12),(1065,21,10011,13),(1066,21,10013,14),(1067,21,504,15),(1068,21,501,16),(1069,21,508,17),(1070,21,10008,18),(1071,21,10016,19),(1072,21,502,25),(1073,21,10002,1),(1075,56,10022,51),(1076,37,20010,32),(1077,37,504,33),(1078,37,503,34),(1079,37,20017,35),(1080,24,20026,40),(1081,24,20013,47),(1082,24,20027,48),(1083,24,20028,49),(1084,24,20001,50),(1085,53,20001,6),(1086,53,50004,7),(1087,53,10013,8),(1088,53,19,9),(1089,53,10014,11),(1090,53,20,12),(1091,24,10022,51),(1094,53,10022,14),(1095,53,503,15),(1096,4,50004,0),(1097,76,30011,0),(1098,76,30001,1),(1099,76,30002,2),(1100,76,504,3),(1101,76,30006,4),(1102,76,40010,5),(1103,76,30004,6),(1104,76,40022,7),(1105,76,40006,8),(1106,76,20015,9),(1107,76,20014,10),(1108,76,25020,11),(1109,76,507,12),(1110,76,10012,13),(1111,76,25021,14),(1112,76,40011,15),(1113,77,10014,0),(1114,77,502,1),(1115,77,503,2),(1116,77,504,3),(1117,77,20018,4),(1118,77,10002,5),(1119,77,10003,6),(1120,77,508,7),(1121,77,10010,8),(1122,77,10015,9),(1123,77,10012,10),(1124,77,10006,11),(1125,77,10011,12),(1126,77,10013,13),(1127,77,10005,14),(1128,77,10007,15),(1129,77,501,16),(1130,77,10008,17),(1131,76,506,16),(1132,76,25000,17),(1133,76,25002,18),(1134,76,40017,19),(1135,76,502,20),(1136,76,503,21),(1137,76,25022,22),(1138,76,40013,23),(1139,76,25003,24),(1140,76,30003,25),(1141,76,40009,26),(1142,76,30005,27),(1143,76,508,28),(1144,76,30007,29),(1145,76,30008,30),(1146,76,25004,31),(1147,77,10022,18),(1148,77,10023,19),(1149,76,30012,32),(1153,76,30014,33),(1155,76,30009,34),(1156,76,25024,35),(1157,24,20021,12),(1158,24,20018,44),(1159,24,10002,45),(1160,24,20022,46),(1161,76,501,36),(1162,76,30010,37),(1164,76,40026,38),(1174,18,30012,16),(1177,76,505,39),(1181,76,50031,40),(1182,76,20013,41),(1183,76,20026,42),(1184,76,20027,43),(1185,76,20028,44),(1186,76,20029,45),(1187,76,20001,46),(1194,6,50038,0),(1195,6,502,1),(1196,6,20013,2),(1197,6,20026,3),(1198,6,20027,4),(1199,6,20028,5),(1200,6,20001,6),(1201,6,20011,7),(1202,6,20025,8),(1203,6,20030,9),(1204,6,50004,10),(1205,6,50005,11),(1206,6,50003,12),(1207,6,50015,13),(1209,6,20034,14),(1212,78,20013,0),(1213,78,50004,24),(1214,78,502,25),(1215,78,50038,1),(1216,78,20029,2),(1231,24,30012,41),(1241,80,20013,0),(1242,80,20026,1),(1243,80,20027,2),(1244,80,20028,3),(1245,80,20029,4),(1246,80,20001,5),(1247,80,502,6),(1251,80,30012,7),(1254,80,50003,8),(1277,80,50038,9),(1280,81,20013,0),(1281,81,20026,1),(1282,81,20027,2),(1283,81,20028,3),(1284,81,20029,4),(1285,81,20001,5),(1286,81,502,6),(1304,81,50004,7),(1306,81,30011,8),(1307,81,20025,9),(1308,81,20030,10),(1309,81,40026,11),(1310,81,40005,12),(1311,81,40061,13),(1312,81,30012,14),(1313,81,10018,15),(1314,81,10008,16),(1315,81,10021,17),(1316,81,10024,18),(1317,81,10017,19),(1318,81,10019,20),(1319,81,10010,21),(1320,81,10015,22),(1321,81,10006,23),(1322,81,10007,24),(1323,81,10020,25),(1324,81,10005,26),(1325,81,20018,27),(1326,81,10002,28),(1327,81,10003,29),(1328,81,10004,30),(1329,81,10022,31),(1349,54,20013,38),(1350,54,20011,39),(1353,2,20029,4),(1354,2,20013,0),(1357,2,20026,1),(1359,54,10005,40),(1360,54,40026,41),(1361,54,50003,42),(1362,54,40025,43),(1363,2,20027,2),(1364,2,20028,3),(1366,2,50004,51),(1370,2,40006,36),(1371,2,40017,37),(1372,2,40022,38),(1375,55,20013,21),(1376,54,40021,44),(1377,54,10019,45),(1378,54,20028,46),(1379,54,10017,47),(1380,54,502,48),(1381,63,50004,26),(1382,2,20001,5),(1383,18,50043,17),(1384,2,502,16),(1385,2,17,6),(1386,55,10022,22),(1387,55,10019,23),(1388,54,20029,49),(1389,54,40020,50),(1390,54,505,51),(1391,18,40002,18),(1392,18,50044,19),(1393,2,50044,7),(1394,2,40038,8),(1395,18,40038,20),(1396,18,40003,21),(1397,2,20030,9),(1398,2,50008,10),(1399,2,10021,11),(1400,18,20026,22),(1401,18,20027,23),(1402,18,20028,24),(1403,18,20001,26),(1404,7,20029,0),(1405,7,20011,1),(1406,7,20001,2),(1407,7,20013,3),(1408,7,20026,4),(1409,7,20027,5),(1410,7,20028,6),(1411,2,50043,12),(1412,18,30011,27),(1413,2,20025,13),(1414,2,30014,14),(1415,7,20025,7),(1416,7,20030,8),(1417,7,10021,9),(1418,7,10020,10),(1419,7,10024,11),(1421,7,30011,13),(1423,7,40026,15),(1424,7,30014,16),(1425,7,10018,17),(1426,7,10019,18),(1427,7,502,25),(1428,2,50017,15),(1429,2,50025,17),(1430,7,30012,49),(1431,18,10021,28),(1432,18,10020,29),(1433,18,17,30),(1434,7,50004,51),(1435,2,50023,18),(1436,18,50001,31)", "description": "```", "concepts": ["```\nCREATE TABLE IF NOT EXISTS `SpellBook` (\n  `id` int(11) NOT NULL AUTO_INCREMENT", "`name"], "instruction": "SQL: SELECT * FROM SpellBook WHERE id = 1414\nConcepts: ['```\\nSELECT * FROM SpellBook WHERE id = 1414']\nInstruction:\nSQL: SELECT * FROM SpellBook WHERE id = 1414\nConcepts: ['```\\nSELECT * FROM SpellBook WHERE id = 1414']\nInstruction:\nSQL: SELECT * FROM SpellBook WHERE id = 1414\nConcepts: ['```\\nSELECT * FROM SpellBook WHERE id = 1414']\nInstruction:\nSQL: SELECT * FROM SpellBook WHERE id = 1414\nConcepts: ['```\\nSELECT * FROM Spell", "response": "-- Reasoning:\nWe need to select all columns from the SpellBook table where the id is equal to 1414.\n\n-- Solution:\n```sql\nSELECT * FROM SpellBook WHERE id = 1414;\n```\n\n-- Explanation:\nThis statement selects all columns from the SpellBook table where the id is equal to 1414.\n\n-- Tests:\n-- 1. Verify the correct spell is returned\nSELECT * FROM SpellBook WHERE id = 1414;"}
{"seed": "/* Drops the table named SpellCasts if it exists. */\nDROP TABLE IF EXISTS `SpellCasts`", "description": "Drops the table named SpellCasts if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named SpellCasts if it exists.", "response": "-- Reasoning:\nWe need to drop the SpellCasts table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS SpellCasts;\n```\n\n-- Explanation:\nThis DROP statement removes the SpellCasts table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('SpellCasts');"}
{"seed": "/* Creates a table named SpellCasts with five columns: SctId (integer primary key), SctChaId (integer), SctSplId (integer), SctValue (integer), and SctTime (datetime). */\nCREATE TABLE `SpellCasts` (\n  `SctId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `SctChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SctSplId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SctValue` int(10) unsigned NOT NULL DEFAULT '0',\n  PRIMARY KEY (`SctId`),\n  KEY `SctChaId` (`SctChaId`),\n  KEY `SctSplId` (`SctSplId`)\n) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=latin1", "description": "Creates a table named SpellCasts with five columns: SctId (integer primary key), SctChaId (integer), SctSplId (integer), SctValue (integer), and SctTime (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named SpellCasts with five columns: SctId (integer primary key), SctChaId (integer), SctSplId (integer), SctValue (integer), and SctTime (datetime).", "response": "-- Reasoning:\nWe need a new table named SpellCasts. It should have an integer primary key so that each spell cast has a unique identifier, and a column for each of the following:\n  \u2022 SctChaId: the character who cast the spell\n  \u2022 SctSplId: the spell that was cast\n  \u2022 SctValue: the value of the spell\n  \u2022 SctTime: the time the spell was cast\n\n-- Solution:\n```sql\nCREATE TABLE SpellCasts (\n  SctId INT PRIMARY KEY,\n  SctChaId INT,\n  SctSplId INT,\n  SctValue INT,\n  SctTime DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the SpellCasts table with five columns:\n  \u2022 SctId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SctChaId: integer\n  \u2022 SctSplId: integer\n  \u2022 SctValue: integer\n  \u2022 SctTime: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SpellCasts');"}
{"seed": "/* Inserts 24 rows into the SpellCasts table. */\nINSERT INTO `SpellCasts` VALUES (1,2,20029,567),(2,2,50044,1),(3,2,502,2),(4,18,20029,25),(5,18,50001,1),(6,53,19,21),(7,53,20013,183),(8,53,20026,183),(9,53,20027,179),(10,53,20028,137),(11,53,50004,88),(12,53,10017,12),(13,53,502,1),(14,53,20029,74),(15,18,17,1),(16,18,50017,8),(17,18,50023,7),(18,18,50025,23),(19,18,502,2),(20,18,50043,1),(21,18,30012,2),(22,18,50004,7),(23,53,10013,39),(24,18,50005,2)", "description": "Inserts 24 rows into the SpellCasts table.", "concepts": ["INSERT INTO", "VALUES", "SpellCasts", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "INT", "VARCHAR", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to insert 24 rows into the SpellCasts table.", "response": "-- Reasoning:\nWe need to insert 24 rows into the SpellCasts table.\n\n-- Solution:\n```sql\nINSERT INTO SpellCasts (name, level, spell_id)\nVALUES\n  ('', 1, 1),\n  ('', 1, 2),\n  ('', 1, 3),\n  ('', 1, 4),\n  ('', 1, 5),\n  ('', 1, 6),\n  ('', 1, 7),\n  ('', 1, 8),\n  ('', 1, 9),\n  ('', 1, 10),\n  ('', 1, 11),\n  ('', 1, 12),\n  ('', 1, 13),\n  ('', 1, 14),\n  ('', 1, 15),\n  ('', 1, 16),\n  ('', 1, 17),\n  ('', 1, 18),\n  ('', 1, 19),\n  ('', 1, 20),\n  ('', 1, 21),\n  ('', 1, 22),\n  ('', 1, 23),\n  ('', 1, 24);"}
{"seed": "/* Drops the table named SpellLogs if it exists. */\nDROP TABLE IF EXISTS `SpellLogs`", "description": "Drops the table named SpellLogs if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named SpellLogs if it exists.", "response": "-- Reasoning:\nWe need to delete the SpellLogs table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS SpellLogs;\n```\n\n-- Explanation:\nThis statement deletes the SpellLogs table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('SpellLogs');"}
{"seed": "/* Creates a table named SpellLogs with 10 columns: SlgId (integer primary key), SlgDate (datetime), SlgChaId (integer), SlgSplId (integer), SlgType (varchar), SlgMapId (integer), SlgX (integer), SlgY (integer), and SlgText (varchar). */\nCREATE TABLE `SpellLogs` (\n  `SlgId` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `SlgDate` datetime DEFAULT NULL,\n  `SlgChaId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SlgSplId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SlgType` varchar(255) NOT NULL DEFAULT '0',\n  `SlgMapId` int(10) unsigned NOT NULL DEFAULT '0',\n  `SlgX` int(10) unsigned NOT NULL DEFAULT '0',\n  `SlgY` int(10) unsigned NOT NULL DEFAULT '0',\n  `SlgText` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`SlgId`),\n  KEY `SlgChaId` (`SlgChaId`),\n  KEY `SlgSplId` (`SlgSplId`),\n  KEY `SlgMapId` (`SlgMapId`)\n) ENGINE=InnoDB AUTO_INCREMENT=1567 DEFAULT CHARSET=latin1", "description": "Creates a table named SpellLogs with 10 columns: SlgId (integer primary key), SlgDate (datetime), SlgChaId (integer), SlgSplId (integer), SlgType (varchar), SlgMapId (integer), SlgX (integer), SlgY (integer), and SlgText (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named SpellLogs with 10 columns: SlgId (integer primary key), SlgDate (datetime), SlgChaId (integer), SlgSplId (integer), SlgType (varchar), SlgMapId (integer), SlgX (integer), SlgY (integer), and SlgText (varchar).", "response": "-- Reasoning:\nWe need a new table named SpellLogs. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the log\u2019s date and time. It should also have columns for the character, spell, type, map, and location.\n\n-- Solution:\n```sql\nCREATE TABLE SpellLogs (\n  SlgId INT PRIMARY KEY,\n  SlgDate DATETIME,\n  SlgChaId INT,\n  SlgSplId INT,\n  SlgType VARCHAR(255),\n  SlgMapId INT,\n  SlgX INT,\n  SlgY INT,\n  SlgText VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the SpellLogs table with 10 columns:\n  \u2022 SlgId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SlgDate: datetime\n  \u2022 SlgChaId: integer\n  \u2022 SlgSplId: integer\n  \u2022 SlgType: varchar\n  \u2022 SlgMapId: integer\n  \u2022 SlgX: integer\n  \u2022 SlgY: integer\n  \u2022 SlgText: varchar\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SpellLogs');"}
{"seed": "/* Drops the table named Spells if it exists. */\nDROP TABLE IF EXISTS `Spells`", "description": "Drops the table named Spells if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Spells if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Spells if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Spells;\n```\n\n-- Explanation:\nThis statement drops the Spells table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('Spells');"}
{"seed": "/* Creates a table named Spells with 13 columns: SplId (integer primary key), SplIdentifier (varchar), SplDescription (varchar), SplType (integer), SplPthId (integer), SplQuestion (varchar), SplDispel (integer), SplAether (integer), SplMute (integer), SplNoTicker (integer), SplActive (integer). */\nCREATE TABLE `Spells` (\n  `SplId` int(10) unsigned NOT NULL,\n  `SplIdentifier` varchar(32) NOT NULL DEFAULT '',\n  `SplDescription` varchar(32) NOT NULL DEFAULT '',\n  `SplType` int(10) unsigned NOT NULL DEFAULT '5',\n  `SplPthId` int(10) NOT NULL DEFAULT '5',\n  `SplQuestion` varchar(64) NOT NULL DEFAULT '',\n  `SplDispel` int(10) unsigned NOT NULL DEFAULT '0',\n  `SplAether` int(10) unsigned NOT NULL DEFAULT '0',\n  `SplMute` int(10) unsigned NOT NULL DEFAULT '0',\n  `SplNoTicker` int(10) unsigned NOT NULL DEFAULT '0',\n  `SplActive` int(10) unsigned NOT NULL DEFAULT '1',\n  PRIMARY KEY (`SplId`),\n  KEY `SplPthId` (`SplPthId`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named Spells with 13 columns: SplId (integer primary key), SplIdentifier (varchar), SplDescription (varchar), SplType (integer), SplPthId (integer), SplQuestion (varchar), SplDispel (integer), SplAether (integer), SplMute (integer), SplNoTicker (integer), SplActive (integer).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT CHARSET", "NOT NULL", "DEFAULT", "KEY", "BTREE", "INT", "VARCHAR", "INT", "INT"], "instruction": "Write a SQL query to create a table named Spells with 13 columns: SplId (integer primary key), SplIdentifier (varchar), SplDescription (varchar), SplType (integer), SplPthId (integer), SplQuestion (varchar), SplDispel (integer), SplAether (integer), SplMute (integer), SplNoTicker (integer), SplActive (integer).", "response": "-- Reasoning:\nWe need a new table named Spells. It should have an integer primary key so that each spell has a unique identifier, and a name column to store the spell\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Spells (\n  SplId INT PRIMARY KEY,\n  SplIdentifier VARCHAR(255),\n  SplDescription VARCHAR(255),\n  SplType INT,\n  SplPthId INT,\n  SplQuestion VARCHAR(255),\n  SplDispel INT,\n  SplAether INT,\n  SplMute INT,\n  SplNoTicker INT,\n  SplActive INT\n);\n```\n\n-- Explanation:\nThis statement defines the Spells table with 13 columns:\n  \u2022 SplId: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 SplIdentifier: variable\u2010length string up to 255 characters\n  \u2022 SplDescription: variable\u2010length string up to 255 characters\n  \u2022 SplType: integer\n  \u2022 SplPthId: integer\n  \u2022 SplQuestion: variable\u2010length string up to 255 characters\n  \u2022 SplDispel: integer\n  \u2022 SplAether: integer\n  \u2022 SplMute: integer\n  \u2022 SplNoTicker: integer\n  \u2022 SplActive: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Spells');"}
{"seed": "/* Selects the animal type, name, and sex upon intake from the animals table. If the name is null, it is replaced with 'No name'. */\nSELECT ANIMAL_TYPE, CASE WHEN NAME IS NULL THEN 'No name' ELSE NAME END NAME, SEX_UPON_INTAKE\nFROM ANIMAL_INS", "description": "Selects the animal type, name, and sex upon intake from the animals table. If the name is null, it is replaced with 'No name'.", "concepts": ["SELECT", "CASE", "WHEN", "THEN", "ELSE", "END", "ANIMAL_TYPE", "NAME", "SEX_UPON_INTAKE"], "instruction": "Write a SQL query to list the animal type, name, and sex upon intake from the animals table. If the name is null, it is replaced with 'No name'.", "response": "-- Reasoning:\nWe need to list the animal type, name, and sex upon intake from the animals table. If the name is null, it is replaced with 'No name'.\n\n-- Solution:\n```sql\nSELECT\n  animal_type,\n  COALESCE(name, 'No name') AS name,\n  sex\nFROM animals;\n```\n\n-- Explanation:\nThis query uses the COALESCE function to replace null values with 'No name'.\n\n-- Tests:\n-- 1. Verify the query returns the expected results\nSELECT\n  animal_type,\n  COALESCE(name, 'No name') AS name,\n  sex\nFROM animals;"}
{"seed": "/* Creates a view named v_abonents that selects the id, name, phone, description, email, branche_id, branche_name, user_id, user_name, date_create, date_modify, and group_id from the abonents table. */\ncreate or replace view v_abonents as\r\nselect t.\"ID\",t.\"NAME\",t.\"PHONE\",t.\"DESCRIPTION\",\r\n       t.\"EMAIL\",\r\n       t.\"BRANCHE_ID\", b.s_name as \"BRANCHE_NAME\", t.\"USER_ID\",u.name AS \"USER_NAME\",\r\n       t.\"DATE_CREATE\",t.\"DATE_MODIFY\", a.group_id as group_id\r\nfrom abonents t\r\nLEFT JOIN Abonent_Group_Link a ON t.id = a.abonent_id\r\nLEFT JOIN USERS u on t.user_id = u.id\r\nLEFT JOIN BRANCHES b on t.branche_id = b.id", "description": "Creates a view named v_abonents that selects the id, name, phone, description, email, branche_id, branche_name, user_id, user_name, date_create, date_modify, and group_id from the abonents table.", "concepts": ["CREATE VIEW", "SELECT", "FROM", "LEFT JOIN", "ON", "AS", "GROUP BY"], "instruction": "Write a SQL query to create a view named v_abonents that selects the id, name, phone, description, email, branche_id, branche_name, user_id, user_name, date_create, date_modify, and group_id from the abonents table.", "response": "-- Reasoning:\nWe need to create a view named v_abonents that selects the id, name, phone, description, email, branche_id, branche_name, user_id, user_name, date_create, date_modify, and group_id from the abonents table.\n\n-- Solution:\n```sql\nCREATE VIEW v_abonents AS\n  SELECT\n    abonents.id,\n    abonents.name,\n    abonents.phone,\n    abonents.description,\n    abonents.email,\n    abonents.branche_id,\n    branche.name AS branche_name,\n    abonents.user_id,\n    user.name AS user_name,\n    abonents.date_create,\n    abonents.date_modify,\n    abonents.group_id\n  FROM abonents\n  LEFT JOIN branche ON abonents.branche_id = branche.id\n  LEFT JOIN user ON abonents.user_id = user.id;\n```\n\n-- Explanation:\nThis statement creates a view named v_abonents that selects the id, name, phone, description, email, branche_id, branche_name, user_id, user_name, date_create, date_modify, and group_id"}
{"seed": "/* Creates a database named jairneto_bolanarede. */\nCREATE DATABASE jairneto_bolanarede", "description": "Creates a database named jairneto_bolanarede.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named jairneto_bolanarede.", "response": "-- Reasoning:\nWe need to create a new database named jairneto_bolanarede.\n\n-- Solution:\n```sql\nCREATE DATABASE jairneto_bolanarede;\n```\n\n-- Explanation:\nThis statement creates a new database named jairneto_bolanarede.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named TIPO_FALTA with two columns: ID_TIPO_FALTA (integer primary key) and CARTAO (varchar). */\nCREATE TABLE TIPO_FALTA (\nID_TIPO_FALTA int(4) PRIMARY KEY auto_increment,\nCARTAO varchar(10) not null\n)", "description": "Creates a table named TIPO_FALTA with two columns: ID_TIPO_FALTA (integer primary key) and CARTAO (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "AUTO_INCREMENT", "VARCHAR", "NOT NULL"], "instruction": "Write a SQL query to create a table named TIPO_FALTA with two columns: ID_TIPO_FALTA (integer primary key) and CARTAO (varchar).", "response": "-- Reasoning:\nWe need a new table named TIPO_FALTA. It should have an integer primary key so that each tipo_falta has a unique identifier, and a CARTAO column to store the tipo_falta\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE TIPO_FALTA (\n  ID_TIPO_FALTA INT PRIMARY KEY,\n  CARTAO VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the TIPO_FALTA table with two columns:\n  \u2022 ID_TIPO_FALTA: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 CARTAO: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('TIPO_FALTA');"}
{"seed": "/* Creates a table named SELECAO with five columns: ID_SELECAO (integer primary key), NOME (varchar), DATA_CRIACAO (datetime), COR_CAMISA_1 (varchar), COR_CAMISA_2 (varchar), COR_CAMISA_3 (varchar). */\nCREATE TABLE SELECAO (\nID_SELECAO int(4) PRIMARY KEY auto_increment,\nNOME varchar(40) not null,\nDATA_CRIACAO datetime not null default now(),\nCOR_CAMISA_1 varchar(20) not null,\nCOR_CAMISA_2 varchar(20),\nCOR_CAMISA_3 varchar(20)\n)", "description": "Creates a table named SELECAO with five columns: ID_SELECAO (integer primary key), NOME (varchar), DATA_CRIACAO (datetime), COR_CAMISA_1 (varchar), COR_CAMISA_2 (varchar), COR_CAMISA_3 (varchar).", "concepts": ["CREATE TABLE", "SELECAO", "ID_SELECAO", "NOME", "DATA_CRIACAO", "COR_CAMISA_"], "instruction": "Write a SQL query to create a table named SELECAO with five columns: ID_SELECAO (integer primary key), NOME (varchar), DATA_CRIACAO (datetime), COR_CAMISA_1 (varchar), COR_CAMISA_2 (varchar), COR_CAMISA_3 (varchar).", "response": "-- Reasoning:\nWe need a new table named SELECAO. It should have an integer primary key so that each selection has a unique identifier, and a name column to store the selection\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE SELECAO (\n  ID_SELECAO INT PRIMARY KEY,\n  NOME VARCHAR(255),\n  DATA_CRIACAO DATETIME,\n  COR_CAMISA_1 VARCHAR(255),\n  COR_CAMISA_2 VARCHAR(255),\n  COR_CAMISA_3 VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the SELECAO table with five columns:\n  \u2022 ID_SELECAO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 NOME: variable\u2010length string up to 255 characters\n  \u2022 DATA_CRIACAO: datetime\n  \u2022 COR_CAMISA_1: variable\u2010length string up to 255 characters\n  \u2022 COR_CAMISA_2: variable\u2010length string up to 255 characters\n  \u2022 COR_CAMISA_3: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SELECAO');"}
{"seed": "/* Creates a table named CAMPEONATO with two columns: ID_CAMPEONATO (integer primary key) and NOME (varchar). */\nCREATE TABLE CAMPEONATO (\nID_CAMPEONATO int(4) PRIMARY KEY auto_increment,\nNOME varchar(20) not null\n)", "description": "Creates a table named CAMPEONATO with two columns: ID_CAMPEONATO (integer primary key) and NOME (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "AUTO_INCREMENT", "VARCHAR", "NOT NULL"], "instruction": "Write a SQL query to create a table named CAMPEONATO with two columns: ID_CAMPEONATO (integer primary key) and NOME (varchar).", "response": "-- Reasoning:\nWe need a new table named CAMPEONATO. It should have an integer primary key so that each campeonato has a unique identifier, and a name column to store the campeonato\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE CAMPEONATO (\n  ID_CAMPEONATO INT PRIMARY KEY,\n  NOME VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the CAMPEONATO table with two columns:\n  \u2022 ID_CAMPEONATO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 NOME: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('CAMPEONATO');"}
{"seed": "/* Creates a table named COLOCACAO with five columns: ID_COLOCACAO (integer primary key), COLOCACAO (integer), ID_SELECAO (integer), ID_CAMPEONATO (integer), and foreign keys for ID_SELECAO and ID_CAMPEONATO. */\nCREATE TABLE COLOCACAO (\nID_COLOCACAO int(4) PRIMARY KEY auto_increment,\nCOLOCACAO int(2) not null,\nID_SELECAO int(4) not null,\nID_CAMPEONATO int(4) not null,\nFOREIGN KEY(ID_SELECAO) REFERENCES SELECAO (ID_SELECAO),\nFOREIGN KEY(ID_CAMPEONATO) REFERENCES CAMPEONATO (ID_CAMPEONATO)\n)", "description": "Creates a table named COLOCACAO with five columns: ID_COLOCACAO (integer primary key), COLOCACAO (integer), ID_SELECAO (integer), ID_CAMPEONATO (integer), and foreign keys for ID_SELECAO and ID_CAMPEONATO.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "AUTO_INCREMENT", "FOREIGN KEY", "REFERENCES", "INT", "NOT NULL", "INT", "NOT NULL", "INT", "NOT"], "instruction": "Write a SQL query to create a table named COLOCACAO with five columns: ID_COLOCACAO (integer primary key), COLOCACAO (integer), ID_SELECAO (integer), ID_CAMPEONATO (integer), and foreign keys for ID_SELECAO and ID_CAMPEONATO.", "response": "-- Reasoning:\nWe need a new table named COLOCACAO. It should have an integer primary key so that each colocacao has a unique identifier, and four foreign keys to link it to the SELECAO and CAMPEONATO tables.\n\n-- Solution:\n```sql\nCREATE TABLE colocacao (\n  id_colocacao INT PRIMARY KEY,\n  colocacao INT,\n  id_selecao INT,\n  id_campeonato INT,\n  FOREIGN KEY (id_selecao) REFERENCES selecao (id_selecao),\n  FOREIGN KEY (id_campeonato) REFERENCES campeonato (id_campeonato)\n);\n```\n\n-- Explanation:\nThis statement defines the colocacao table with five columns:\n  \u2022 id_colocacao: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 colocacao: integer\n  \u2022 id_selecao: integer, foreign key to the selecao table\n  \u2022 id_campeonato: integer, foreign key to the campeonato table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('colocacao');"}
{"seed": "/* Creates a table named SELECAO_CAMPEONATO with three columns: ID_SELECAO_CAMPEONATO (integer primary key), ID_CAMPEONATO (integer not null), and ID_SELECAO (integer not null). The ID_CAMPEONATO column is a foreign key that references the ID_CAMPEONATO column in the CAMPEONATO table, and the ID_SELECAO */\nCREATE TABLE SELECAO_CAMPEONATO (\nID_SELECAO_CAMPEONATO int(4) PRIMARY KEY auto_increment,\nID_CAMPEONATO int(4) not null,\nID_SELECAO int(4) not null,\nFOREIGN KEY(ID_CAMPEONATO) REFERENCES CAMPEONATO (ID_CAMPEONATO),\nFOREIGN KEY(ID_SELECAO) REFERENCES SELECAO (ID_SELECAO)\n)", "description": "Creates a table named SELECAO_CAMPEONATO with three columns: ID_SELECAO_CAMPEONATO (integer primary key), ID_CAMPEONATO (integer not null), and ID_SELECAO (integer not null). The ID_CAMPEONATO column is a foreign key that references the ID_CAMPEONATO column in the CAMPEONATO table, and the ID_SELECAO", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "INT", "NOT NULL", "AUTO_INCREMENT", "INT", "INT", "INT", "INT", "INT"], "instruction": "Write a SQL query to create a table named SELECAO_CAMPEONATO with three columns: ID_SELECAO_CAMPEONATO (integer primary key), ID_CAMPEONATO (integer not null), and ID_SELECAO (integer not null). The ID_CAMPEONATO column is a foreign key that references the ID_CAMPEONATO column in the CAMPEONATO table, and the ID_SELECAO column is a foreign key that references the ID_SELECAO column in the SELECAO table.", "response": "-- Reasoning:\nWe need a new table named SELECAO_CAMPEONATO. It should have three columns:\n  \u2022 ID_SELECAO_CAMPEONATO: integer primary key\n  \u2022 ID_CAMPEONATO: integer not null, foreign key to CAMPEONATO.ID_CAMPEONATO\n  \u2022 ID_SELECAO: integer not null, foreign key to SELECAO.ID_SELECAO\n\n-- Solution:\n```sql\nCREATE TABLE SELECAO_CAMPEONATO (\n  ID_SELECAO_CAMPEONATO INT PRIMARY KEY,\n  ID_CAMPEONATO INT NOT NULL,\n  ID_SELECAO INT NOT NULL,\n  FOREIGN KEY (ID_CAMPEONATO) REFERENCES CAMPEONATO (ID_CAMPEONATO),\n  FOREIGN KEY (ID_SELECAO) REFERENCES SELECAO (ID_SELECAO)\n);\n```\n\n-- Explanation:\nThis statement defines the SELECAO_CAMPEONATO table with three columns:\n  \u2022 ID_SELECAO_CAMPEONATO: integer primary key\n  \u2022 ID_CAMPEONATO: integer not null, foreign key to CAMPEONATO.ID_CAMPEONATO\n  \u2022 ID_SELE"}
{"seed": "/* Creates a table named JOGO with five columns: ID_JOGO (integer primary key), DATATIME (datetime), TERMINADO (boolean), VENCEDOR (integer), ID_SELECAO_1 (integer), ID_SELECAO_2 (integer), ID_CAMPEONATO (integer). */\nCREATE TABLE JOGO (\nID_JOGO int(4) PRIMARY KEY auto_increment,\nDATATIME datetime not null default now(),\nTERMINADO boolean,\nVENCEDOR int(4),\nID_SELECAO_1 int(4) not null,\nID_SELECAO_2 int(4) not null,\nID_CAMPEONATO int(4),\nFOREIGN KEY(VENCEDOR) REFERENCES SELECAO (ID_SELECAO),\nFOREIGN KEY(ID_SELECAO_1) REFERENCES SELECAO (ID_SELECAO),\nFOREIGN KEY(ID_SELECAO_2) REFERENCES SELECAO (ID_SELECAO),\nFOREIGN KEY(ID_CAMPEONATO) REFERENCES CAMPEONATO (ID_CAMPEONATO)\n)", "description": "Creates a table named JOGO with five columns: ID_JOGO (integer primary key), DATATIME (datetime), TERMINADO (boolean), VENCEDOR (integer), ID_SELECAO_1 (integer), ID_SELECAO_2 (integer), ID_CAMPEONATO (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "AUTO_INCREMENT", "DATATIME", "BOOLEAN", "FOREIGN KEY", "REFERENCES", "NOT NULL", "DEFAULT", "NOW"], "instruction": "Write a SQL query to create a table named JOGO with five columns: ID_JOGO (integer primary key), DATATIME (datetime), TERMINADO (boolean), VENCEDOR (integer), ID_SELECAO_1 (integer), ID_SELECAO_2 (integer), ID_CAMPEONATO (integer).", "response": "-- Reasoning:\nWe need a new table named JOGO. It should have an integer primary key so that each game has a unique identifier, and a DATATIME column to store the game\u2019s date and time.\n\n-- Solution:\n```sql\nCREATE TABLE JOGO (\n  ID_JOGO INT PRIMARY KEY,\n  DATATIME DATETIME,\n  TERMINADO BOOLEAN,\n  VENCEDOR INT,\n  ID_SELECAO_1 INT,\n  ID_SELECAO_2 INT,\n  ID_CAMPEONATO INT\n);\n```\n\n-- Explanation:\nThis statement defines the JOGO table with seven columns:\n  \u2022 ID_JOGO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 DATATIME: datetime\n  \u2022 TERMINADO: boolean\n  \u2022 VENCEDOR: integer\n  \u2022 ID_SELECAO_1: integer\n  \u2022 ID_SELECAO_2: integer\n  \u2022 ID_CAMPEONATO: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('JOGO');"}
{"seed": "/* Creates a table named GOL with five columns: ID_GOL (integer primary key), TEMPO (integer), CRONOMETRO (datetime), NUMERO_CAMISA (integer), ID_SELECAO (integer), ID_SELECAO_MARCADOR (integer), ID_JOGO (integer). The ID_SELECAO, ID_SELECAO_MARCADOR, and ID_JOGO columns are foreign keys that reference the */\nCREATE TABLE GOL (\nID_GOL int(4) PRIMARY KEY auto_increment,\nTEMPO int(1) not null,\nCRONOMETRO datetime not null default now(),\nNUMERO_CAMISA int(2) not null,\nID_SELECAO int(4) not null,\nID_SELECAO_MARCADOR int(4) not null,\nID_JOGO int(4) not null,\nFOREIGN KEY(ID_SELECAO) REFERENCES SELECAO (ID_SELECAO),\nFOREIGN KEY(ID_SELECAO_MARCADOR) REFERENCES SELECAO (ID_SELECAO),\nFOREIGN KEY(ID_JOGO) REFERENCES JOGO (ID_JOGO)\n)", "description": "Creates a table named GOL with five columns: ID_GOL (integer primary key), TEMPO (integer), CRONOMETRO (datetime), NUMERO_CAMISA (integer), ID_SELECAO (integer), ID_SELECAO_MARCADOR (integer), ID_JOGO (integer). The ID_SELECAO, ID_SELECAO_MARCADOR, and ID_JOGO columns are foreign keys that reference the", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "AUTO_INCREMENT", "DATETIME", "DEFAULT", "NOW", "NOT NULL", "FOREIGN KEY", "REFERENCES", "SELECA"], "instruction": "Write a SQL query to create a table named GOL with five columns: ID_GOL (integer primary key), TEMPO (integer), CRONOMETRO (datetime), NUMERO_CAMISA (integer), ID_SELECAO (integer), ID_SELECAO_MARCADOR (integer), ID_JOGO (integer). The ID_SELECAO, ID_SELECAO_MARCADOR, and ID_JOGO columns are foreign keys that reference the SELECAO table.", "response": "-- Reasoning:\nWe need a new table named GOL. It should have an integer primary key so that each goal has a unique identifier, and four other columns:\n  \u2022 TEMPO: integer\n  \u2022 CRONOMETRO: datetime\n  \u2022 NUMERO_CAMISA: integer\n  \u2022 ID_SELECAO: integer, foreign key to SELECAO\n  \u2022 ID_SELECAO_MARCADOR: integer, foreign key to SELECAO\n  \u2022 ID_JOGO: integer, foreign key to JOGO\n\n-- Solution:\n```sql\nCREATE TABLE GOL (\n  ID_GOL INT PRIMARY KEY,\n  TEMPO INT,\n  CRONOMETRO DATETIME,\n  NUMERO_CAMISA INT,\n  ID_SELECAO INT,\n  ID_SELECAO_MARCADOR INT,\n  ID_JOGO INT,\n  FOREIGN KEY (ID_SELECAO) REFERENCES SELECAO (ID_SELECAO),\n  FOREIGN KEY (ID_SELECAO_MARCADOR) REFERENCES SELECAO (ID_SELECAO),\n  FOREIGN KEY (ID_JOGO) REFERENCES JOGO (ID_JOGO)\n);\n```\n\n-- Explanation:\nThis statement defines the GOL table with five columns:\n  \u2022 ID_GOL: integer, marked PRIMARY KEY so it cannot be null and is"}
{"seed": "/* Creates a table named FALTA with five columns: ID_FALTA (integer primary key), NUMERO_CAMISA (integer), ID_JOGO (integer), ID_TIPO_FALTA (integer), ID_SELECAO (integer). The ID_FALTA column is the primary key, NUMERO_CAMISA is not null, ID_JOGO, ID_TIPO_FALTA, and ID_SELECAO are foreign */\nCREATE TABLE FALTA (\nID_FALTA int(4) PRIMARY KEY auto_increment,\nNUMERO_CAMISA int(2) not null,\nID_JOGO int(4) not null,\nID_TIPO_FALTA int(4) not null,\nID_SELECAO int(4) not null,\nFOREIGN KEY(ID_JOGO) REFERENCES JOGO (ID_JOGO),\nFOREIGN KEY(ID_TIPO_FALTA) REFERENCES TIPO_FALTA (ID_TIPO_FALTA),\nFOREIGN KEY(ID_SELECAO) REFERENCES SELECAO (ID_SELECAO)\n)", "description": "Creates a table named FALTA with five columns: ID_FALTA (integer primary key), NUMERO_CAMISA (integer), ID_JOGO (integer), ID_TIPO_FALTA (integer), ID_SELECAO (integer). The ID_FALTA column is the primary key, NUMERO_CAMISA is not null, ID_JOGO, ID_TIPO_FALTA, and ID_SELECAO are foreign", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "AUTO_INCREMENT", "NOT NULL", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to create a table named FALTA with five columns: ID_FALTA (integer primary key), NUMERO_CAMISA (integer), ID_JOGO (integer), ID_TIPO_FALTA (integer), ID_SELECAO (integer). The ID_FALTA column is the primary key, NUMERO_CAMISA is not null, ID_JOGO, ID_TIPO_FALTA, and ID_SELECAO are foreign.", "response": "-- Reasoning:\nWe need a new table named FALTA. It should have an integer primary key so that each falta has a unique identifier, and a NUMERO_CAMISA column to store the player's number. It should also have foreign keys to the JOGO, TIPO_FALTA, and SELECAO tables.\n\n-- Solution:\n```sql\nCREATE TABLE FALTA (\n  ID_FALTA INT PRIMARY KEY,\n  NUMERO_CAMISA INT NOT NULL,\n  ID_JOGO INT,\n  ID_TIPO_FALTA INT,\n  ID_SELECAO INT,\n  FOREIGN KEY (ID_JOGO) REFERENCES JOGO(ID_JOGO),\n  FOREIGN KEY (ID_TIPO_FALTA) REFERENCES TIPO_FALTA(ID_TIPO_FALTA),\n  FOREIGN KEY (ID_SELECAO) REFERENCES SELECAO(ID_SELECAO)\n);\n```\n\n-- Explanation:\nThis statement defines the FALTA table with five columns:\n  \u2022 ID_FALTA: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 NUMERO_CAMISA: integer, not null\n  \u2022 ID_JOGO: integer, foreign key to JOGO table\n  \u2022 ID_TIPO_FALTA: integer, foreign key to TIPO_F"}
{"seed": "/* Drops the table named consultant if it exists. */\nDROP TABLE IF EXISTS `consultant`", "description": "Drops the table named consultant if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named consultant if it exists.", "response": "-- Reasoning:\nWe need to drop the consultant table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS consultant;\n```\n\n-- Explanation:\nThis statement drops the consultant table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('consultant');"}
{"seed": "/* Creates a table named consultant with three columns: id (integer primary key), lastname (varchar) and email (varchar). */\nCREATE TABLE `consultant`\n(\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `lastname` VARCHAR(64) NOT NULL,\n    `email` VARCHAR(64) NOT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB", "description": "Creates a table named consultant with three columns: id (integer primary key), lastname (varchar) and email (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INTEGER", "NOT NULL", "ENGINE", "INNODB"], "instruction": "Write a SQL query to create a table named consultant with three columns: id (integer primary key), lastname (varchar) and email (varchar).", "response": "-- Reasoning:\nWe need a new table named consultant. It should have an integer primary key so that each consultant has a unique identifier, and two varchar columns to store the consultant\u2019s last name and email address.\n\n-- Solution:\n```sql\nCREATE TABLE consultant (\n  id INT PRIMARY KEY,\n  lastname VARCHAR(255),\n  email VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the consultant table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 lastname: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('consultant');"}
{"seed": "/* Drops the table named client if it exists. */\nDROP TABLE IF EXISTS `client`", "description": "Drops the table named client if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named client if it exists.", "response": "-- Reasoning:\nWe need to delete the table named client if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS client;\n```\n\n-- Explanation:\nThis statement deletes the table named client if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('client');"}
{"seed": "/* Creates a table named client with two columns: id (integer primary key) and lastname (varchar). */\nCREATE TABLE `client`\n(\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `lastname` VARCHAR(64) NOT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB", "description": "Creates a table named client with two columns: id (integer primary key) and lastname (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "INTEGER", "NOT NULL", "VARCHAR", "NOT NULL", "ENGINE", "INNODB"], "instruction": "Write a SQL query to create a table named client with two columns: id (integer primary key) and lastname (varchar).", "response": "-- Reasoning:\nWe need a new table named client. It should have an integer primary key so that each client has a unique identifier, and a lastname column to store the client\u2019s last name as text.\n\n-- Solution:\n```sql\nCREATE TABLE client (\n  id INT PRIMARY KEY,\n  lastname VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the client table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 lastname: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('client');"}
{"seed": "/* Drops the table named consulting if it exists. */\nDROP TABLE IF EXISTS `consulting`", "description": "Drops the table named consulting if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named consulting if it exists.", "response": "-- Reasoning:\nWe need to delete the consulting table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS consulting;\n```\n\n-- Explanation:\nThis statement deletes the consulting table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('consulting');"}
{"seed": "/* Creates a table named consulting with four columns: id (integer primary key), consultant_k (integer), client_k (integer), and three foreign keys: consultant_k references consultant (id) and client_k references client (id). */\nCREATE TABLE `consulting`\n(\n    `id` INTEGER NOT NULL AUTO_INCREMENT,\n    `consultant_k` INTEGER NOT NULL,\n    `client_k` INTEGER,\n    PRIMARY KEY (`id`),\n    INDEX `consulting_fi_707f1d` (`consultant_k`),\n    INDEX `consulting_fi_a0a60b` (`client_k`),\n    CONSTRAINT `consulting_fk_707f1d`\n        FOREIGN KEY (`consultant_k`)\n        REFERENCES `consultant` (`id`),\n    CONSTRAINT `consulting_fk_a0a60b`\n        FOREIGN KEY (`client_k`)\n        REFERENCES `client` (`id`)\n) ENGINE=InnoDB", "description": "Creates a table named consulting with four columns: id (integer primary key), consultant_k (integer), client_k (integer), and three foreign keys: consultant_k references consultant (id) and client_k references client (id).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "INDEX", "CONSTRAINT", "CONSTRAINT", "CONSTRAINT", "CONSTRAINT", "CONSTRAINT", "CONSTRAINT", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named consulting with four columns: id (integer primary key), consultant_k (integer), client_k (integer), and three foreign keys: consultant_k references consultant (id) and client_k references client (id).", "response": "-- Reasoning:\nWe need a new table named consulting. It should have an integer primary key so that each consulting has a unique identifier, and three foreign keys:\n  \u2022 consultant_k references consultant (id)\n  \u2022 client_k references client (id)\n\n-- Solution:\n```sql\nCREATE TABLE consulting (\n  id INT PRIMARY KEY,\n  consultant_k INT,\n  client_k INT,\n  FOREIGN KEY (consultant_k) REFERENCES consultant (id),\n  FOREIGN KEY (client_k) REFERENCES client (id)\n);\n```\n\n-- Explanation:\nThis statement defines the consulting table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 consultant_k: integer, foreign key to consultant table\n  \u2022 client_k: integer, foreign key to client table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('consulting');"}
{"seed": "/* Enables foreign key checks. */\nSET FOREIGN_KEY_CHECKS = 1", "description": "Enables foreign key checks.", "concepts": ["SET", "FOREIGN_KEY_CHECKS"], "instruction": "Write a SQL query to enable foreign key checks.", "response": "-- Reasoning:\nWe need to enable foreign key checks so that we can enforce referential integrity.\n\n-- Solution:\n```sql\nPRAGMA foreign_keys = ON;\n```\n\n-- Explanation:\nThis PRAGMA statement enables foreign key checks.\n\n-- Tests:\n-- 1. Check foreign key checks are enabled\nPRAGMA foreign_keys;"}
{"seed": "/* Updates all notifications for the user with the given skey and secret to read. */\nUPDATE user_sessions SET device_token=token WHERE skey = k AND secret = s$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `get_friends`(IN `u_id` INT(10))\n    NO SQL\nSELECT u.id, u.username, u.email, u.phone_number, u.activated, u.active\nFROM friends f1 INNER JOIN friends f2 ON f1.user_secondary = f2.user_primary AND f1.user_primary = f2.user_secondary INNER JOIN users u ON f1.user_secondary = u.id WHERE f1.user_primary = u_id$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `get_friend_requests`(IN `u_id` INT(10))\n    NO SQL\nSELECT u.id, u.username, u.phone_number, u.email, u.activated, u.active FROM friends f1 LEFT JOIN friends f2 ON f1.user_primary = f2.user_secondary AND f1.user_secondary = f2.user_primary INNER JOIN users u ON f1.user_primary = u.id WHERE f1.user_secondary = u_id AND f2.user_primary IS NULL$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `notification_add`(IN `t` VARCHAR(200), IN `m` VARCHAR(300))\n    NO SQL\nBEGIN\nINSERT INTO notifications(type, message) VALUES(t, m);\nSELECT LAST_INSERT_ID() AS id;\nEND$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `notification_associate`(IN `uid` INT(10), IN `id` INT(100), IN `d` DATETIME)\n    NO SQL\nBEGIN\nREPLACE INTO notification_users (user_id, notification_id, date) VALUES (uid, id, d);\nSELECT COUNT(*) AS count FROM notification_users WHERE user_id = uid AND was_read = 0;\nEND$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `notification_get`(IN `k` CHAR(36), IN `s` CHAR(36))\n    NO SQL\nSELECT n.type AS type, count(n.type) AS amount FROM \n\tuser_sessions us INNER JOIN \n   \tnotification_users nu ON us.user_id = nu.user_id INNER JOIN\n    notifications n ON nu.notification_id = n.notification_id\n    WHERE nu.was_read = 0 AND us.skey = k \n    \tAND us.secret = s GROUP BY n.type$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `notification_list`(IN `k` CHAR(36), IN `s` CHAR(36))\n    NO SQL\nSELECT n.message AS message, nu.was_read AS was_read FROM \n\tuser_sessions us INNER JOIN \n   \tnotification_users nu ON us.user_id = nu.user_id INNER JOIN\n    notifications n ON nu.notification_id = n.notification_id\n    WHERE us.skey = k AND us.secret = s ORDER BY nu.date DESC LIMIT 0,50$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `notification_update`(IN `k` CHAR(36), IN `s` CHAR(36), IN `type` VARCHAR(200))\n    NO SQL\nBEGIN\nIF type IS NULL\nTHEN\n\tUPDATE user_sessions us INNER JOIN \n    \t   notification_users nu ON us.user_id = nu.user_id INNER JOIN\n           notifications n ON nu.notification_id = n.notification_id\n    SET nu.was_read = 1", "description": "Updates all notifications for the user with the given skey and secret to read.", "concepts": ["CREATE", "DEFINER", "PROCEDURE", "NO", "SQL", "BEGIN", "IF", "UPDATE", "SET", "WHERE", "IN", "OUT", "END", "REPLACE", "INTO"], "instruction": "Write a SQL query to update all notifications for the user with the given skey and secret to read.", "response": "-- Reasoning:\nWe need to update all notifications for the user with the given skey and secret to read.\n\n-- Solution:\n```sql\nUPDATE notifications\n  SET read = 1\n  WHERE skey = 'skey' AND secret = 'secret';\n```\n\n-- Explanation:\nThis UPDATE statement updates the notifications table by setting the read column to 1 for all rows where the skey and secret match the given values.\n\n-- Tests:\n-- 1. Verify that all notifications are now read\nSELECT * FROM notifications WHERE skey = 'skey' AND secret = 'secret';"}
{"seed": "/* Updates the was_read column of the notification_users table to 1 for all notifications of type type from user_sessions with skey k and secret s. */\nUPDATE user_sessions us INNER JOIN \n    \t   notification_users nu ON us.user_id = nu.user_id INNER JOIN\n           notifications n ON nu.notification_id = n.notification_id\n    SET nu.was_read = 1 where n.type = type AND us.skey = k \n    \tAND us.secret = s", "description": "Updates the was_read column of the notification_users table to 1 for all notifications of type type from user_sessions with skey k and secret s.", "concepts": ["UPDATE", "INNER JOIN", "ON", "SET", "WHERE"], "instruction": "Write a SQL query to update the was_read column of the notification_users table to 1 for all notifications of type type from user_sessions with skey k and secret s.", "response": "-- Reasoning:\nWe need to update the was_read column of the notification_users table to 1 for all notifications of type type from user_sessions with skey k and secret s.\n\n-- Solution:\n```sql\nUPDATE notification_users\nSET was_read = 1\nWHERE type = 'type' AND skey = 'k' AND secret = 's';\n```\n\n-- Explanation:\nThis UPDATE statement updates the was_read column of the notification_users table to 1 for all notifications of type type from user_sessions with skey k and secret s.\n\n-- Tests:\n-- 1. Verify was_read is updated\nSELECT * FROM notification_users;"}
{"seed": "/* Selects the type and amount of all unread notifications for a user with a specific session key and secret. */\nSELECT n.type AS type, count(n.type) AS amount FROM \n\tuser_sessions us INNER JOIN \n   \tnotification_users nu ON us.user_id = nu.user_id INNER JOIN\n    notifications n ON nu.notification_id = n.notification_id\n    WHERE nu.was_read = 0 AND us.skey = k \n    \tAND us.secret = s GROUP BY n.type", "description": "Selects the type and amount of all unread notifications for a user with a specific session key and secret.", "concepts": ["SELECT", "COUNT", "INNER JOIN", "ON", "WHERE", "GROUP BY"], "instruction": "Write a SQL query to list the type and amount of all unread notifications for a user with a specific session key and secret.", "response": "-- Reasoning:\nWe need to list all unread notifications for a user with a specific session key and secret.\n\n-- Solution:\n```sql\nSELECT type, amount\nFROM notifications\nWHERE session_key = ''\n  AND session_secret = ''\n  AND read = 0;\n```\n\n-- Explanation:\nThis query selects the type and amount columns from the notifications table where the session_key and session_secret match the given values and the read column is 0.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT type, amount\nFROM notifications\nWHERE session_key = ''\n  AND session_secret = ''\n  AND read = 0;"}
{"seed": "/* Selects the integer 1 and names it result. */\nSELECT 1 AS result", "description": "Selects the integer 1 and names it result.", "concepts": ["SELECT", "AS"], "instruction": "Write a SQL query to select the integer 1 and name it result.", "response": "-- Reasoning:\nWe need to select the integer 1 and name it result.\n\n-- Solution:\n```sql\nSELECT 1 AS result;\n```\n\n-- Explanation:\nThis query selects the integer 1 and names it result.\n\n-- Tests:\n-- 1. Verify result is 1\nSELECT result FROM (SELECT 1 AS result);"}
{"seed": "/* Selects a constant value 0 as result. */\nSELECT 0 AS result", "description": "Selects a constant value 0 as result.", "concepts": ["SELECT", "AS"], "instruction": "Write a SQL query to select a constant value 0 as result.", "response": "-- Reasoning:\nWe need to select a constant value 0 as result.\n\n-- Solution:\n```sql\nSELECT 0;\n```\n\n-- Explanation:\nThis query returns a single row with a single column containing the value 0.\n\n-- Tests:\n-- 1. Verify result is 0\nSELECT 0;"}
{"seed": "/* Creates a procedure named send_friend_request that takes three parameters: u_id (integer), req_id (integer), and date_sent (datetime). */\n(IN `u_id` INT(10), IN `search` VARCHAR(255))\n    NO SQL\nselect u.id as id, u.username as username, u.phone_number as phone_number, u.email as email, u.activated as activated, u.active as active from \n\t\t(SELECT id from users) as a \n    LEFT JOIN \n    \t(SELECT CASE WHEN f1.user_primary = u_id THEN f1.user_secondary ELSE f1.user_primary end as id\n         FROM friends f1 where f1.user_primary = u_id or f1.user_secondary = u_id)\n    as b ON a.id = b.id INNER JOIN users u on a.id = u.id WHERE b.id is null AND a.id <> u_id AND u.username LIKE CONCAT(search,'%') order by u.username ASC$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `send_friend_request`(IN `u_id` INT(10), IN `req_id` INT(10), IN `date_sent` DATETIME)\nBEGIn\nIF((SELECT COUNT(*) FROM friends where user_primary=u_id AND user_secondary=req_id) > 0)\nTHEN\n\tSELECT FALSE AS result;\nELSE\n\tINSERT INTO friends(user_primary, user_secondary, created) VALUES(u_id, req_id, date_sent)", "description": "Creates a procedure named send_friend_request that takes three parameters: u_id (integer), req_id (integer), and date_sent (datetime).", "concepts": ["CREATE PROCEDURE", "IN", "OUT", "NO SQL", "SELECT", "INSERT", "UPDATE", "DELETE", "JOIN", "WHERE", "GROUP BY", "ORDER BY", "HAV"], "instruction": "Write a SQL query to list each user's total sales from the orders table, grouped by user, and sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to list each user's total sales from the orders table, grouped by user, and sorted from highest to lowest.\n\n-- Solution:\n```sql\nSELECT user_id, SUM(amount) AS total_sales\nFROM orders\nGROUP BY user_id\nORDER BY total_sales DESC;\n```\n\n-- Explanation:\nThis query uses the SUM function to calculate the total sales for each user. It uses the GROUP BY clause to group the results by user_id, and the ORDER BY clause to sort the results in descending order by total_sales.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT user_id, SUM(amount) AS total_sales\nFROM orders\nGROUP BY user_id\nORDER BY total_sales DESC;"}
{"seed": "/* Selects a single column named result with a value of true. */\nSELECT TRUE AS result", "description": "Selects a single column named result with a value of true.", "concepts": ["SELECT", "TRUE", "AS"], "instruction": "Write a SQL query to select a single column named result with a value of true.", "response": "-- Reasoning:\nWe need to select a single column named result with a value of true.\n\n-- Solution:\n```sql\nSELECT 'true' AS result;\n```\n\n-- Explanation:\nThis query returns a single column named result with a value of true.\n\n-- Tests:\n-- 1. Verify result is true\nSELECT result FROM (\n  SELECT 'true' AS result\n);"}
{"seed": "/* Inserts a new user session into the user_sessions table. */\nINSERT INTO user_sessions(user_id, skey, secret, device_token, updated) VALUES(uid, k, sec, token, date )", "description": "Inserts a new user session into the user_sessions table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user session into the user_sessions table.", "response": "-- Reasoning:\nWe need to insert a new user session into the user_sessions table.\n\n-- Solution:\n```sql\nINSERT INTO user_sessions (user_id, session_id, start_time)\nVALUES (1, '12345', '2020-01-01 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the user_sessions table with the following values:\n  \u2022 user_id: 1\n  \u2022 session_id: 12345\n  \u2022 start_time: 2020\u201001\u201001 00:00:00\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM user_sessions;"}
{"seed": "/* Inserts a new timecapsule into the timecapsule table. */\nINSERT INTO timecapsule (capsule_date, uncapsule_date, owner, type, active, comment) VALUES(cap_date, uncap_date, u_id, 'SA', 1, c)", "description": "Inserts a new timecapsule into the timecapsule table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new timecapsule into the timecapsule table.", "response": "-- Reasoning:\nWe need to insert a new timecapsule into the timecapsule table.\n\n-- Solution:\n```sql\nINSERT INTO timecapsule (\n  id,\n  name,\n  description,\n  created_at,\n  expires_at\n) VALUES (\n  1,\n  'Happy Birthday',\n  'Happy Birthday to you!',\n  '2020-01-01',\n  '2020-01-02'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new timecapsule into the timecapsule table with the following values:\n  \u2022 id: 1\n  \u2022 name: Happy Birthday\n  \u2022 description: Happy Birthday to you!\n  \u2022 created_at: 2020-01-01\n  \u2022 expires_at: 2020-01-02\n\n-- Tests:\n-- 1. Verify new timecapsule appears\nSELECT * FROM timecapsule;"}
{"seed": "/* Sets the value of n_id to the last inserted id. */\nSET n_id = LAST_INSERT_ID", "description": "Sets the value of n_id to the last inserted id.", "concepts": ["SET", "LAST_INSERT_ID"], "instruction": "Write a SQL query to set the value of n_id to the last inserted id.", "response": "-- Reasoning:\nWe need to set the value of n_id to the last inserted id.\n\n-- Solution:\n```sql\nSELECT last_insert_rowid() AS n_id;\n```\n\n-- Explanation:\nThis query returns the last inserted row id.\n\n-- Tests:\n-- 1. Verify the value of n_id is correct\nSELECT n_id FROM new_table;"}
{"seed": "/* Inserts a new row into the timecapsule_sa_media table with the given values. */\nINSERT INTO timecapsule_sa_media (timecap_id, file_name, width, height, active) VALUES(n_id, filename, w, h, 1)", "description": "Inserts a new row into the timecapsule_sa_media table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the timecapsule_sa_media table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the timecapsule_sa_media table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO timecapsule_sa_media (\n  id,\n  name,\n  type,\n  url,\n  created_at,\n  updated_at\n) VALUES (\n  1,\n  '',\n  'image',\n  'https://timecapsule.com/media/1',\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the timecapsule_sa_media table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM timecapsule_sa_media;"}
{"seed": "/* Selects the n_id column and renames it to INSERT_ID. */\nSELECT n_id AS INSERT_ID", "description": "Selects the n_id column and renames it to INSERT_ID.", "concepts": ["SELECT", "AS"], "instruction": "Write a SQL query to select the n_id column and rename it to INSERT_ID.", "response": "-- Reasoning:\nWe need to select the n_id column from the orders table and rename it to INSERT_ID.\n\n-- Solution:\n```sql\nSELECT n_id AS INSERT_ID FROM orders;\n```\n\n-- Explanation:\nThis query selects the n_id column from the orders table and renames it to INSERT_ID.\n\n-- Tests:\n-- 1. Verify column exists and has correct name\nPRAGMA table_info('orders');"}
{"seed": "/* Updates the status of the timecapsule with the given id to 1. */\n(IN `id` INT)\n    NO SQL\nSELECT tf.user_id AS user_id, us.device_token AS device_token FROM timecapsule_friends tf left JOIN user_sessions us ON tf.user_id = us.user_id WHERE  tf.timecap_id = id$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `timecapsule_get_live_from_session`(IN `k` CHAR(36), IN `s` CHAR(36), IN `amount` INT)\n    NO SQL\nSELECT t.id as id, \n\t   file_name as image,  \n       username,\n       owner,\n       DATE_FORMAT(capsule_date,'%c.%d.%Y') as capsuledate, \n       DATE_FORMAT(uncapsule_date,'%c.%d.%Y') as uncapsuledate,\n       CAST(capsule_date AS char) as orderdate,\n       comment\n    FROM user_sessions us \n    \t\tINNER JOIN \n    \t timecapsule t ON us.user_id = t.owner \n         \tINNER JOIN\n         timecapsule_sa_media sm ON t.id = sm.timecap_id\n             INNER JOIN\n         users u ON t.owner = u.id\n         WHERE sm.live = 1 AND us.skey = k AND us.secret = s\n         \n  UNION\n  \n  \tSELECT t1.id as id, \n\t   file_name as image, \n       username,\n       owner,\n       DATE_FORMAT(capsule_date,'%c.%d.%Y') as capsuledate, \n       DATE_FORMAT(uncapsule_date,'%c.%d.%Y') as uncapsuledate,\n       CAST(capsule_date AS char) as orderdate,\n       comment\n    FROM user_sessions us1 \n    \t\tINNER JOIN \n    \t timecapsule_friends tf1 ON us1.user_id = tf1.user_id \n         \tINNER JOIN\n         timecapsule_sa_media sm1 ON tf1.timecap_id = sm1.timecap_id\n         \tINNER JOIN \n    \t timecapsule t1 on sm1.timecap_id = t1.id\n             INNER JOIN\n         users u1 ON t1.owner = u1.id\n         WHERE sm1.live = 1 AND us1.skey = k AND us1.secret = s\n         \nORDER BY orderdate DESC LIMIT amount$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `timecapsule_get_need_untuck_sa`(IN `untuck_date` DATETIME)\n    NO SQL\nSELECT t.id AS id, t.owner AS owner, tsm.file_name AS file_name FROM timecapsule t INNER JOIN timecapsule_sa_media tsm ON t.id = tsm.timecap_id WHERE t.uncapsule_date <= untuck_date AND tsm.live = 0 AND t.active = 1 AND tsm.active = 1$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `timecapsule_update_status`(IN `id` INT(10))", "description": "Updates the status of the timecapsule with the given id to 1.", "concepts": ["UPDATE", "SET", "WHERE", "INT", "TIMECAPSULE", "TIMECAPSULE_SA_MEDIA"], "instruction": "Write a SQL query to update the status of the timecapsule with the given id to 1.\n```", "response": "-- Reasoning:\nWe need to update the status of the timecapsule with the given id to 1.\n\n-- Solution:\n```sql\nUPDATE timecapsules\n  SET status = 1\n  WHERE id = 1;\n```\n\n-- Explanation:\nThis UPDATE statement updates the status of the timecapsule with the given id to 1.\n\n-- Tests:\n-- 1. Verify status is updated\nSELECT * FROM timecapsules WHERE id = 1;"}
{"seed": "/* Selects the number of users with the username uname from the users table. */\n(SELECT COUNT(*) FROM users WHERE username = uname)", "description": "Selects the number of users with the username uname from the users table.", "concepts": ["SELECT", "COUNT", "FROM", "WHERE"], "instruction": "Write a SQL query to select the number of users with the username uname from the users table.", "response": "-- Reasoning:\nWe need to count the number of users with a given username.\n\n-- Solution:\n```sql\nSELECT COUNT(*)\nFROM users\nWHERE uname = 'john';\n```\n\n-- Explanation:\nThis query counts the number of rows in the users table where the uname column is equal to 'john'.\n\n-- Tests:\n-- 1. Verify count is correct\nSELECT COUNT(*)\nFROM users\nWHERE uname = 'john';"}
{"seed": "/* Selects the number of users with the same phone number as the current user. */\n(SELECT COUNT(*) FROM users WHERE phone_number = phone)", "description": "Selects the number of users with the same phone number as the current user.", "concepts": ["SELECT", "COUNT", "FROM", "WHERE", "phone_number", "phone"], "instruction": "Write a SQL query to find the number of users with the same phone number as the current user.", "response": "-- Reasoning:\nWe need to find the number of users with the same phone number as the current user.\n\n-- Solution:\n```sql\nSELECT COUNT(*)\nFROM users\nWHERE phone = (\n  SELECT phone\n  FROM users\n  WHERE user_id = 1\n);\n```\n\n-- Explanation:\nThis query uses a subquery to find the phone number of the current user. Then it uses this phone number to count the number of users with the same phone number.\n\n-- Tests:\n-- 1. Verify correct count\nSELECT COUNT(*)\nFROM users\nWHERE phone = (\n  SELECT phone\n  FROM users\n  WHERE user_id = 1\n);"}
{"seed": "/* Selects the number of users with the email em from the users table. */\n(SELECT COUNT(*) FROM users WHERE email = em)", "description": "Selects the number of users with the email em from the users table.", "concepts": ["SELECT", "COUNT", "FROM", "WHERE"], "instruction": "Write a SQL query to find the number of users with the email em from the users table.", "response": "-- Reasoning:\nWe need to find the number of users with the email em.\n\n-- Solution:\n```sql\nSELECT COUNT(*)\nFROM users\nWHERE email = 'em';\n```\n\n-- Explanation:\nThis query counts the number of users with the email em.\n\n-- Tests:\n-- 1. Verify count is correct\nSELECT COUNT(*)\nFROM users\nWHERE email = 'em';"}
{"seed": "/* Selects the username, phonenumber, and email columns from the users table. The username column is set to TRUE if the ucount column is greater than 0, otherwise it is set to FALSE. The phonenumber column is set to TRUE if the pcount column is greater than 0, otherwise it is set to FALSE. The email column is set to TRUE if the ecount column is greater than 0, otherwise it is set to FALSE. */\nSELECT CASE WHEN ucount > 0 THEN TRUE ELSE FALSE END AS username,\n\t   CASE WHEN pcount > 0 THEN TRUE ELSE FALSE END AS phonenumber,\n       CASE WHEN ecount > 0 THEN TRUE ELSE FALSE END AS email", "description": "Selects the username, phonenumber, and email columns from the users table. The username column is set to TRUE if the ucount column is greater than 0, otherwise it is set to FALSE. The phonenumber column is set to TRUE if the pcount column is greater than 0, otherwise it is set to FALSE. The email column is set to TRUE if the ecount column is greater than 0, otherwise it is set to FALSE.", "concepts": ["CASE", "WHEN", "THEN", "ELSE", "END", "AS", "SELECT"], "instruction": "Write a SQL query to select the username, phonenumber, and email columns from the users table. The username column is set to TRUE if the ucount column is greater than 0, otherwise it is set to FALSE. The phonenumber column is set to TRUE if the pcount column is greater than 0, otherwise it is set to FALSE. The email column is set to TRUE if the ecount column is greater than 0, otherwise it is set to FALSE.", "response": "-- Reasoning:\nWe need to select the username, phonenumber, and email columns from the users table. The username column is set to TRUE if the ucount column is greater than 0, otherwise it is set to FALSE. The phonenumber column is set to TRUE if the pcount column is greater than 0, otherwise it is set to FALSE. The email column is set to TRUE if the ecount column is greater than 0, otherwise it is set to FALSE.\n\n-- Solution:\n```sql\nSELECT\n  username,\n  CASE WHEN ucount > 0 THEN TRUE ELSE FALSE END AS username,\n  CASE WHEN pcount > 0 THEN TRUE ELSE FALSE END AS phonenumber,\n  CASE WHEN ecount > 0 THEN TRUE ELSE FALSE END AS email\nFROM users;\n```\n\n-- Explanation:\nThis query uses a CASE statement to set the username, phonenumber, and email columns to TRUE if the corresponding count column is greater than 0, and FALSE otherwise.\n\n-- Tests:\n-- 1. Verify the output is correct\nSELECT * FROM users;"}
{"seed": "/* Creates a table named friends with three columns: user_primary (integer), user_secondary (integer), and created (datetime). */\nCREATE TABLE `friends` (\n  `user_primary` int(10) unsigned NOT NULL,\n  `user_secondary` int(10) unsigned NOT NULL,\n  `created` datetime NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named friends with three columns: user_primary (integer), user_secondary (integer), and created (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named friends with three columns: user_primary (integer), user_secondary (integer), and created (datetime).", "response": "-- Reasoning:\nWe need a new table named friends. It should have three columns:\n  \u2022 user_primary: integer, the primary user\n  \u2022 user_secondary: integer, the secondary user\n  \u2022 created: datetime, the time the friendship was created\n\n-- Solution:\n```sql\nCREATE TABLE friends (\n  user_primary INT,\n  user_secondary INT,\n  created DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the friends table with three columns:\n  \u2022 user_primary: integer, the primary user\n  \u2022 user_secondary: integer, the secondary user\n  \u2022 created: datetime, the time the friendship was created\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('friends');"}
{"seed": "/* Creates a table named notifications with three columns: notification_id (integer primary key), type (varchar) and message (varchar). */\nCREATE TABLE `notifications` (\n`notification_id` int(100) unsigned NOT NULL,\n  `type` varchar(200) NOT NULL,\n  `message` varchar(300) NOT NULL\n) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=latin1", "description": "Creates a table named notifications with three columns: notification_id (integer primary key), type (varchar) and message (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "ENGINE", "NOT NULL", "PRIMARY KEY", "VARCHAR", "VARCHAR", "NOT NULL"], "instruction": "Write a SQL query to create a table named notifications with three columns: notification_id (integer primary key), type (varchar) and message (varchar).", "response": "-- Reasoning:\nWe need a new table named notifications. It should have an integer primary key so that each notification has a unique identifier, and two columns to store the notification type and message.\n\n-- Solution:\n```sql\nCREATE TABLE notifications (\n  notification_id INT PRIMARY KEY,\n  type VARCHAR(255),\n  message VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the notifications table with three columns:\n  \u2022 notification_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 type: variable\u2010length string up to 255 characters\n  \u2022 message: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('notifications');"}
{"seed": "/* Creates a table named notification_users with five columns: id (integer primary key), user_id (integer), notification_id (integer), was_read (boolean), and date (datetime). */\nCREATE TABLE `notification_users` (\n`id` int(100) NOT NULL,\n  `user_id` int(10) unsigned NOT NULL,\n  `notification_id` int(100) unsigned NOT NULL,\n  `was_read` tinyint(1) NOT NULL DEFAULT '0',\n  `date` datetime NOT NULL\n) ENGINE=InnoDB AUTO_INCREMENT=62 DEFAULT CHARSET=latin1", "description": "Creates a table named notification_users with five columns: id (integer primary key), user_id (integer), notification_id (integer), was_read (boolean), and date (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named notification_users with five columns: id (integer primary key), user_id (integer), notification_id (integer), was_read (boolean), and date (datetime).", "response": "-- Reasoning:\nWe need a new table named notification_users. It should have an integer primary key so that each notification_user has a unique identifier, and a user_id column to store the user\u2019s identifier.\n\n-- Solution:\n```sql\nCREATE TABLE notification_users (\n  id INTEGER PRIMARY KEY,\n  user_id INTEGER,\n  notification_id INTEGER,\n  was_read BOOLEAN,\n  date DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the notification_users table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id: integer\n  \u2022 notification_id: integer\n  \u2022 was_read: boolean\n  \u2022 date: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('notification_users');"}
{"seed": "/* Creates a table named timecapsule with seven columns: id (integer primary key), capsule_date (datetime), uncapsule_date (datetime), owner (integer), type (varchar), comment (varchar), and active (tinyint). */\nCREATE TABLE `timecapsule` (\n`id` int(10) NOT NULL,\n  `capsule_date` datetime NOT NULL,\n  `uncapsule_date` datetime NOT NULL,\n  `owner` int(10) unsigned NOT NULL,\n  `type` varchar(20) NOT NULL,\n  `comment` varchar(140) NOT NULL,\n  `active` tinyint(1) NOT NULL\n) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=latin1", "description": "Creates a table named timecapsule with seven columns: id (integer primary key), capsule_date (datetime), uncapsule_date (datetime), owner (integer), type (varchar), comment (varchar), and active (tinyint).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TINYINT", "AUTO_INCREMENT", "DEFAULT"], "instruction": "Write a SQL query to create a table named timecapsule with seven columns: id (integer primary key), capsule_date (datetime), uncapsule_date (datetime), owner (integer), type (varchar), comment (varchar), and active (tinyint).", "response": "-- Reasoning:\nWe need a new table named timecapsule. It should have an integer primary key so that each timecapsule has a unique identifier, and a datetime column to store the date the capsule was created.\n\n-- Solution:\n```sql\nCREATE TABLE timecapsule (\n  id INT PRIMARY KEY,\n  capsule_date DATETIME,\n  uncapsule_date DATETIME,\n  owner INT,\n  type VARCHAR(255),\n  comment VARCHAR(255),\n  active TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the timecapsule table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 capsule_date: datetime\n  \u2022 uncapsule_date: datetime\n  \u2022 owner: integer\n  \u2022 type: varchar\n  \u2022 comment: varchar\n  \u2022 active: tinyint\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('timecapsule');"}
{"seed": "/* Creates a table named timecapsule_friends with two columns: timecap_id (integer) and user_id (integer unsigned). */\nCREATE TABLE `timecapsule_friends` (\n  `timecap_id` int(10) NOT NULL,\n  `user_id` int(10) unsigned NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named timecapsule_friends with two columns: timecap_id (integer) and user_id (integer unsigned).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named timecapsule_friends with two columns: timecap_id (integer) and user_id (integer unsigned).", "response": "-- Reasoning:\nWe need a new table named timecapsule_friends. It should have two columns:\n  \u2022 timecap_id: integer, a foreign key to the timecapsule table\n  \u2022 user_id: integer unsigned, a foreign key to the users table\n\n-- Solution:\n```sql\nCREATE TABLE timecapsule_friends (\n  timecap_id INT,\n  user_id INT UNSIGNED,\n  FOREIGN KEY (timecap_id) REFERENCES timecapsule(timecap_id),\n  FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n```\n\n-- Explanation:\nThis statement defines the timecapsule_friends table with two columns:\n  \u2022 timecap_id: integer, a foreign key to the timecapsule table\n  \u2022 user_id: integer unsigned, a foreign key to the users table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('timecapsule_friends');"}
{"seed": "/* Creates a table named timecapsule_sa_media with five columns: timecap_id (integer), file_name (varchar), live (tinyint), width (integer), height (integer), and active (tinyint). */\nCREATE TABLE `timecapsule_sa_media` (\n  `timecap_id` int(10) NOT NULL,\n  `file_name` varchar(200) NOT NULL,\n  `live` tinyint(1) NOT NULL DEFAULT '0',\n  `width` int(11) NOT NULL,\n  `height` int(11) NOT NULL,\n  `active` tinyint(1) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named timecapsule_sa_media with five columns: timecap_id (integer), file_name (varchar), live (tinyint), width (integer), height (integer), and active (tinyint).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "TINYINT", "DEFAULT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "PRIMARY KEY", "FOREIGN"], "instruction": "Write a SQL query to create a table named timecapsule_sa_media with five columns: timecap_id (integer), file_name (varchar), live (tinyint), width (integer), height (integer), and active (tinyint).", "response": "-- Reasoning:\nWe need a new table named timecapsule_sa_media. It should have an integer primary key so that each media file has a unique identifier, and a name column to store the file name as text.\n\n-- Solution:\n```sql\nCREATE TABLE timecapsule_sa_media (\n  timecap_id INT PRIMARY KEY,\n  file_name VARCHAR(255),\n  live TINYINT,\n  width INT,\n  height INT,\n  active TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the timecapsule_sa_media table with five columns:\n  \u2022 timecap_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 file_name: variable\u2010length string up to 255 characters\n  \u2022 live: boolean, 0 or 1\n  \u2022 width: integer\n  \u2022 height: integer\n  \u2022 active: boolean, 0 or 1\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('timecapsule_sa_media');"}
{"seed": "/* Creates a table named users with 8 columns: id (integer primary key), username (varchar), phone_number (varchar), email (varchar), password (varchar), created (datetime), activated (tinyint), and active (tinyint). */\nCREATE TABLE `users` (\n`id` int(10) unsigned NOT NULL,\n  `username` varchar(100) NOT NULL,\n  `phone_number` varchar(15) NOT NULL,\n  `email` varchar(200) NOT NULL,\n  `password` varchar(200) NOT NULL,\n  `created` datetime NOT NULL,\n  `activated` tinyint(1) NOT NULL DEFAULT '0',\n  `active` tinyint(1) NOT NULL DEFAULT '1'\n) ENGINE=InnoDB AUTO_INCREMENT=139 DEFAULT CHARSET=latin1", "description": "Creates a table named users with 8 columns: id (integer primary key), username (varchar), phone_number (varchar), email (varchar), password (varchar), created (datetime), activated (tinyint), and active (tinyint).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "AUTO_"], "instruction": "Write a SQL query to create a table named users with 8 columns: id (integer primary key), username (varchar), phone_number (varchar), email (varchar), password (varchar), created (datetime), activated (tinyint), and active (tinyint).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a username column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  username VARCHAR(255),\n  phone_number VARCHAR(255),\n  email VARCHAR(255),\n  password VARCHAR(255),\n  created DATETIME,\n  activated TINYINT,\n  active TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the users table with eight columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 phone_number: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 created: datetime\n  \u2022 activated: tinyint\n  \u2022 active: tinyint\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Creates a table named user_sessions with five columns: session_id (integer primary key), user_id (integer), skey (char), secret (char), device_token (char), and updated (datetime). */\nCREATE TABLE `user_sessions` (\n`session_id` int(100) NOT NULL,\n  `user_id` int(10) unsigned NOT NULL,\n  `skey` char(36) NOT NULL,\n  `secret` char(36) NOT NULL,\n  `device_token` char(64) DEFAULT NULL,\n  `updated` datetime NOT NULL\n) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=latin1", "description": "Creates a table named user_sessions with five columns: session_id (integer primary key), user_id (integer), skey (char), secret (char), device_token (char), and updated (datetime).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "INT", "CHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named user_sessions with five columns: session_id (integer primary key), user_id (integer), skey (char), secret (char), device_token (char), and updated (datetime).", "response": "-- Reasoning:\nWe need a new table named user_sessions. It should have an integer primary key so that each session has a unique identifier, and a user_id column to store the user\u2019s identifier.\n\n-- Solution:\n```sql\nCREATE TABLE user_sessions (\n  session_id INT PRIMARY KEY,\n  user_id INT,\n  skey CHAR(1),\n  secret CHAR(1),\n  device_token CHAR(1),\n  updated DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the user_sessions table with five columns:\n  \u2022 session_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id: integer\n  \u2022 skey: char\n  \u2022 secret: char\n  \u2022 device_token: char\n  \u2022 updated: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user_sessions');"}
{"seed": "/* Adds a unique key named Friend_Relation to the friends table. */\nALTER TABLE `friends`\n ADD UNIQUE KEY `Friend_Relation` (`user_primary`,`user_secondary`), ADD KEY `user_primary` (`user_primary`), ADD KEY `user_secondary`", "description": "Adds a unique key named Friend_Relation to the friends table.", "concepts": ["ALTER TABLE", "ADD", "UNIQUE", "KEY", "ADD", "KEY", "ADD", "KEY"], "instruction": "Write a SQL query to add a unique key named Friend_Relation to the friends table.", "response": "-- Reasoning:\nWe need to add a unique key to the friends table to ensure that each friendship has a unique identifier.\n\n-- Solution:\n```sql\nCREATE UNIQUE INDEX Friend_Relation ON friends (user_id, friend_id);\n```\n\n-- Explanation:\nThis statement creates a unique index named Friend_Relation on the friends table. It ensures that each friendship has a unique identifier.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('friends');"}
{"seed": "/* Adds a primary key to the notifications table. */\nALTER TABLE `notifications`\n ADD PRIMARY KEY (`notification_id`)", "description": "Adds a primary key to the notifications table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key to the notifications table.", "response": "-- Reasoning:\nWe need to add a primary key to the notifications table. This will ensure that each notification has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE notifications\n  ADD COLUMN id INTEGER PRIMARY KEY;\n```\n\n-- Explanation:\nThis ALTER statement adds a new column named id to the notifications table. It is an integer and is marked as PRIMARY KEY so it cannot be null and is unique.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('notifications');"}
{"seed": "/* Adds a primary key and a unique key to the notification_users table. */\nALTER TABLE `notification_users`\n ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `user_id` (`user_id`,`notification_id`), ADD KEY `notification_id`", "description": "Adds a primary key and a unique key to the notification_users table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY", "UNIQUE KEY", "ADD", "KEY"], "instruction": "Write a SQL query to add a primary key and a unique key to the notification_users table.", "response": "-- Reasoning:\nWe need to modify the notification_users table by adding a primary key and a unique key.\n\n-- Solution:\n```sql\nALTER TABLE notification_users\n  ADD COLUMN id INTEGER PRIMARY KEY,\n  ADD UNIQUE (user_id);\n```\n\n-- Explanation:\nThis ALTER statement updates the notification_users table schema by adding:\n  \u2022 id: an integer primary key\n  \u2022 user_id: a unique key\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('notification_users');"}
{"seed": "/* Adds a primary key to the id column and a foreign key constraint to the owner column in the timecapsule table. */\nALTER TABLE `timecapsule`\n ADD PRIMARY KEY (`id`), ADD KEY `owner`", "description": "Adds a primary key to the id column and a foreign key constraint to the owner column in the timecapsule table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY", "ADD", "KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to add a primary key to the id column and a foreign key constraint to the owner column in the timecapsule table.", "response": "-- Reasoning:\nWe need to modify the existing timecapsule table by adding a primary key to the id column and a foreign key constraint to the owner column.\n\n-- Solution:\n```sql\nALTER TABLE timecapsule\n  ADD COLUMN id INTEGER PRIMARY KEY,\n  ADD COLUMN owner INTEGER REFERENCES users(id);\n```\n\n-- Explanation:\nThis ALTER statement updates the timecapsule table schema by adding:\n  \u2022 id: a primary key integer\n  \u2022 owner: a foreign key to the users table\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('timecapsule');"}
{"seed": "/* Adds a unique key to the timecapsule_friends table called row_unique, which consists of the timecap_id and user_id columns. */\nALTER TABLE `timecapsule_friends`\n ADD UNIQUE KEY `row_unique` (`timecap_id`,`user_id`), ADD KEY `user_id` (`user_id`), ADD KEY `cap_id`", "description": "Adds a unique key to the timecapsule_friends table called row_unique, which consists of the timecap_id and user_id columns.", "concepts": ["ALTER TABLE", "ADD", "UNIQUE", "KEY", "ADD", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to add a unique key to the timecapsule_friends table called row_unique, which consists of the timecap_id and user_id columns.", "response": "-- Reasoning:\nWe need to add a unique key to the timecapsule_friends table. This key should consist of the timecap_id and user_id columns, so that each combination of these two columns is unique.\n\n-- Solution:\n```sql\nCREATE UNIQUE INDEX row_unique ON timecapsule_friends (timecap_id, user_id);\n```\n\n-- Explanation:\nThis statement creates a unique index called row_unique on the timecapsule_friends table. This index consists of the timecap_id and user_id columns, so that each combination of these two columns is unique.\n\n-- Tests:\n-- 1. Verify index exists\nPRAGMA index_list('timecapsule_friends');"}
{"seed": "/* Adds a unique key constraint to the timecapsule_sa_media table called timecap_id. */\nALTER TABLE `timecapsule_sa_media`\n ADD UNIQUE KEY `timecap_id` (`timecap_id`)", "description": "Adds a unique key constraint to the timecapsule_sa_media table called timecap_id.", "concepts": ["ALTER TABLE", "ADD", "UNIQUE", "KEY", "timecap_id"], "instruction": "Write a SQL query to add a unique key constraint to the timecapsule_sa_media table called timecap_id.", "response": "-- Reasoning:\nWe need to add a unique key constraint to the timecapsule_sa_media table. This will ensure that each timecapsule has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE timecapsule_sa_media\n  ADD CONSTRAINT timecap_id UNIQUE (timecap_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a unique key constraint to the timecapsule_sa_media table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA table_info('timecapsule_sa_media');"}
{"seed": "/* Adds a primary key, unique username, unique phone number, and unique email to the users table. */\nALTER TABLE `users`\n ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `username` (`username`), ADD UNIQUE KEY `phone_number` (`phone_number`), ADD UNIQUE KEY `email` (`email`)", "description": "Adds a primary key, unique username, unique phone number, and unique email to the users table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY", "UNIQUE", "KEY", "ADD", "UNIQUE", "KEY", "ADD", "UNIQUE", "KEY", "ADD", "UNIQUE", "KEY"], "instruction": "Write a SQL query to add a primary key, unique username, unique phone number, and unique email to the users table.", "response": "-- Reasoning:\nWe need to modify the users table by adding a primary key, unique username, unique phone number, and unique email.\n\n-- Solution:\n```sql\nALTER TABLE users\n  ADD COLUMN id INTEGER PRIMARY KEY,\n  ADD COLUMN username VARCHAR(255) UNIQUE,\n  ADD COLUMN phone VARCHAR(255) UNIQUE,\n  ADD COLUMN email VARCHAR(255) UNIQUE;\n```\n\n-- Explanation:\nThis ALTER statement updates the users table schema by adding:\n  \u2022 id: an auto\u2010incrementing integer primary key\n  \u2022 username: a unique varchar column up to 255 characters\n  \u2022 phone: a unique varchar column up to 255 characters\n  \u2022 email: a unique varchar column up to 255 characters\n\n-- Tests:\n-- 1. Verify new columns appear and are unique\nPRAGMA table_info('users');"}
{"seed": "/* Adds a primary key to the user_sessions table with the session_id column. */\nALTER TABLE `user_sessions`\n ADD PRIMARY KEY (`session_id`), ADD KEY `user_id` (`user_id`,`skey`,`secret`", "description": "Adds a primary key to the user_sessions table with the session_id column.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to add a primary key to the user_sessions table with the session_id column.", "response": "-- Reasoning:\nWe need to add a primary key to the user_sessions table. This will ensure that each session has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE user_sessions\n  ADD PRIMARY KEY (session_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key to the user_sessions table.\n\n-- Tests:\n-- 1. Verify primary key exists\nPRAGMA table_info('user_sessions');"}
{"seed": "/* Modifies the notifications table by adding an auto-incrementing primary key column named notification_id. */\nALTER TABLE `notifications`\nMODIFY `notification_id` int(100) unsigned NOT NULL AUTO_INCREMENT", "description": "Modifies the notifications table by adding an auto-incrementing primary key column named notification_id.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "PRIMARY KEY"], "instruction": "Write a SQL query to modify the notifications table by adding an auto-incrementing primary key column named notification_id.", "response": "-- Reasoning:\nWe need to modify the notifications table by adding a new column named notification_id. It should be an auto\u2010incrementing integer primary key.\n\n-- Solution:\n```sql\nALTER TABLE notifications\n  ADD COLUMN notification_id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the notifications table schema by adding:\n  \u2022 notification_id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('notifications');"}
{"seed": "/* Modifies the id column of the notification_users table to be an auto-incrementing integer. */\nALTER TABLE `notification_users`\nMODIFY `id` int(100) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the notification_users table to be an auto-incrementing integer.", "concepts": ["ALTER TABLE", "MODIFY", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the id column of the notification_users table to be an auto-incrementing integer.", "response": "-- Reasoning:\nWe need to modify the existing notification_users table by changing the id column to be an auto\u2010incrementing integer.\n\n-- Solution:\n```sql\nALTER TABLE notification_users\n  ALTER COLUMN id\n  INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the notification_users table schema by changing:\n  \u2022 id: an integer column that is the primary key and auto\u2010increments\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('notification_users');"}
{"seed": "/* Modifies the id column of the timecapsule table to be an auto-incrementing integer. */\nALTER TABLE `timecapsule`\nMODIFY `id` int(10) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the timecapsule table to be an auto-incrementing integer.", "concepts": ["ALTER TABLE", "MODIFY", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the id column of the timecapsule table to be an auto-incrementing integer.", "response": "-- Reasoning:\nWe need to modify the existing timecapsule table by changing the id column to be an auto\u2010incrementing integer.\n\n-- Solution:\n```sql\nALTER TABLE timecapsule\n  ALTER COLUMN id\n  INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the timecapsule table schema by changing:\n  \u2022 id: an integer column to be the primary key and auto\u2010incrementing\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('timecapsule');"}
{"seed": "/* Modifies the id column of the users table to be an auto-incrementing integer. */\nALTER TABLE `users`\nMODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the users table to be an auto-incrementing integer.", "concepts": ["ALTER TABLE", "MODIFY", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the id column of the users table to be an auto-incrementing integer.", "response": "-- Reasoning:\nWe need to modify the existing users table by changing the id column to be an auto\u2010incrementing integer.\n\n-- Solution:\n```sql\nALTER TABLE users\n  ALTER COLUMN id\n  INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the users table schema by changing:\n  \u2022 id: an integer column to be the primary key and auto\u2010incrementing\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Modifies the user_sessions table by adding an AUTO_INCREMENT column to the session_id column. */\nALTER TABLE `user_sessions`\nMODIFY `session_id` int(100) NOT NULL AUTO_INCREMENT", "description": "Modifies the user_sessions table by adding an AUTO_INCREMENT column to the session_id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the user_sessions table by adding an AUTO_INCREMENT column to the session_id column.", "response": "-- Reasoning:\nWe need to modify the user_sessions table by adding an AUTO_INCREMENT column to the session_id column.\n\n-- Solution:\n```sql\nALTER TABLE user_sessions\n  ADD COLUMN session_id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the user_sessions table schema by adding:\n  \u2022 session_id: an integer column that is auto\u2010incremented and marked as PRIMARY KEY\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incremented\nPRAGMA table_info('user_sessions');"}
{"seed": "/* Creates a foreign key constraint on the friends table that references the id column of the users table. */\nALTER TABLE `friends`\nADD CONSTRAINT `friends_ibfk_1` FOREIGN KEY (`user_primary`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\nADD CONSTRAINT `friends_ibfk_2` FOREIGN KEY (`user_secondary`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Creates a foreign key constraint on the friends table that references the id column of the users table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE", "CASCADE"], "instruction": "Write a SQL query to create a foreign key constraint on the friends table that references the id column of the users table.", "response": "-- Reasoning:\nWe need to create a foreign key constraint on the friends table that references the id column of the users table.\n\n-- Solution:\n```sql\nALTER TABLE friends\n  ADD CONSTRAINT fk_friends_users FOREIGN KEY (user_id) REFERENCES users (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the friends table that references the id column of the users table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('friends');"}
{"seed": "/* Adds a foreign key constraint to the notification_users table that references the notification_id column in the notifications table and the user_id column in the users table. */\nALTER TABLE `notification_users`\nADD CONSTRAINT `notification_id` FOREIGN KEY (`notification_id`) REFERENCES `notifications` (`notification_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,\nADD CONSTRAINT `notification_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Adds a foreign key constraint to the notification_users table that references the notification_id column in the notifications table and the user_id column in the users table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE", "CASCADE"], "instruction": "Write a SQL query to add a foreign key constraint to the notification_users table that references the notification_id column in the notifications table and the user_id column in the users table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the notification_users table that references the notification_id column in the notifications table and the user_id column in the users table.\n\n-- Solution:\n```sql\nALTER TABLE notification_users\n  ADD CONSTRAINT fk_notification_id\n    FOREIGN KEY (notification_id)\n      REFERENCES notifications (notification_id)\n\nALTER TABLE notification_users\n  ADD CONSTRAINT fk_user_id\n    FOREIGN KEY (user_id)\n      REFERENCES users (user_id);\n```\n\n-- Explanation:\nThis ALTER statement adds two foreign key constraints to the notification_users table:\n  \u2022 notification_id: references the notification_id column in the notifications table\n  \u2022 user_id: references the user_id column in the users table\n\n-- Tests:\n-- 1. Check new foreign key constraint appears\nPRAGMA foreign_key_list('notification_users');"}
{"seed": "/* Adds a foreign key constraint to the timecapsule table that references the id column of the users table. */\nALTER TABLE `timecapsule`\nADD CONSTRAINT `timecapsule_ibfk_1` FOREIGN KEY (`owner`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Adds a foreign key constraint to the timecapsule table that references the id column of the users table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE"], "instruction": "Write a SQL query to add a foreign key constraint to the timecapsule table that references the id column of the users table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the timecapsule table that references the id column of the users table.\n\n-- Solution:\n```sql\nALTER TABLE timecapsule\n  ADD CONSTRAINT fk_timecapsule_user_id\n  FOREIGN KEY (user_id)\n  REFERENCES users(id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the timecapsule table that references the id column of the users table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('timecapsule');"}
{"seed": "/* Adds a foreign key constraint to the timecapsule_friends table. The timecap_id column references the id column of the timecapsule table, and the user_id column references the id column of the users table. */\nALTER TABLE `timecapsule_friends`\nADD CONSTRAINT `timecapsule_friends_ibfk_1` FOREIGN KEY (`timecap_id`) REFERENCES `timecapsule` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\nADD CONSTRAINT `timecapsule_friends_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Adds a foreign key constraint to the timecapsule_friends table. The timecap_id column references the id column of the timecapsule table, and the user_id column references the id column of the users table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE CASCADE", "ON UPDATE CASCADE"], "instruction": "Write a SQL query to add a foreign key constraint to the timecapsule_friends table. The timecap_id column references the id column of the timecapsule table, and the user_id column references the id column of the users table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the timecapsule_friends table. The timecap_id column references the id column of the timecapsule table, and the user_id column references the id column of the users table.\n\n-- Solution:\n```sql\nALTER TABLE timecapsule_friends\n  ADD CONSTRAINT fk_timecapsule_friends_timecapsule\n    FOREIGN KEY (timecap_id) REFERENCES timecapsule (id),\n  ADD CONSTRAINT fk_timecapsule_friends_users\n    FOREIGN KEY (user_id) REFERENCES users (id);\n```\n\n-- Explanation:\nThis ALTER statement adds two foreign key constraints to the timecapsule_friends table:\n  \u2022 fk_timecapsule_friends_timecapsule: timecap_id references the id column of the timecapsule table\n  \u2022 fk_timecapsule_friends_users: user_id references the id column of the users table\n\n-- Tests:\n-- 1. Check foreign key constraints are added\nPRAGMA foreign_key_list('timecapsule_friends');"}
{"seed": "/* Adds a foreign key constraint to the user_sessions table that references the id column of the users table. */\nALTER TABLE `user_sessions`\nADD CONSTRAINT `user_sessions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Adds a foreign key constraint to the user_sessions table that references the id column of the users table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE"], "instruction": "Write a SQL query to add a foreign key constraint to the user_sessions table that references the id column of the users table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the user_sessions table that references the id column of the users table. This ensures that the user_id column in the user_sessions table is a valid user id in the users table.\n\n-- Solution:\n```sql\nALTER TABLE user_sessions\n  ADD CONSTRAINT fk_user_sessions_users FOREIGN KEY (user_id) REFERENCES users (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the user_sessions table that references the id column of the users table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA foreign_key_list('user_sessions');"}
{"seed": "/* Creates a table named buku_tamu with 15 columns: id_buku_tamu, nama, nip_noktp, jenis, instansi, no_telp, email, unit_tujuan, keperluan, no_urut, kode, status, catatan, foto, Master_Skpd_Id, created_at. */\nCREATE TABLE `buku_tamu` (\n  `id_buku_tamu` int(11) NOT NULL,\n  `nama` varchar(255) NOT NULL,\n  `nip_noktp` varchar(100) NOT NULL,\n  `jenis` enum('Penyedia','Instansi') NOT NULL,\n  `instansi` varchar(255) NOT NULL,\n  `no_telp` varchar(100) NOT NULL,\n  `email` varchar(100) NOT NULL,\n  `unit_tujuan` varchar(10) NOT NULL,\n  `keperluan` text NOT NULL,\n  `no_urut` int(11) NOT NULL,\n  `kode` varchar(100) NOT NULL,\n  `status` varchar(100) NOT NULL DEFAULT 'mengantri',\n  `catatan` text,\n  `foto` text,\n  `Master_Skpd_Id` int(11) DEFAULT NULL,\n  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named buku_tamu with 15 columns: id_buku_tamu, nama, nip_noktp, jenis, instansi, no_telp, email, unit_tujuan, keperluan, no_urut, kode, status, catatan, foto, Master_Skpd_Id, created_at.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "TIMESTAMP", "ENGINE", "DEFAULT CHARSET", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "TIMESTAMP"], "instruction": "Write a SQL query to create a table named buku_tamu with 15 columns: id_buku_tamu, nama, nip_noktp, jenis, instansi, no_telp, email, unit_tujuan, keperluan, no_urut, kode, status, catatan, foto, Master_Skpd_Id, created_at.", "response": "-- Reasoning:\nWe need a new table named buku_tamu. It should have an integer primary key so that each buku tamu has a unique identifier, and a name column to store the buku tamu\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE buku_tamu (\n  id_buku_tamu INT PRIMARY KEY,\n  nama VARCHAR(255),\n  nip_noktp VARCHAR(255),\n  jenis VARCHAR(255),\n  instansi VARCHAR(255),\n  no_telp VARCHAR(255),\n  email VARCHAR(255),\n  unit_tujuan VARCHAR(255),\n  keperluan VARCHAR(255),\n  no_urut VARCHAR(255),\n  kode VARCHAR(255),\n  status VARCHAR(255),\n  catatan VARCHAR(255),\n  foto VARCHAR(255),\n  Master_Skpd_Id VARCHAR(255),\n  created_at VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the buku_tamu table with 15 columns:\n  \u2022 id_buku_tamu: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nama: variable\u2010length string up to 255 characters\n  \u2022"}
{"seed": "/* Creates a table named jabatan_sistem with four columns: Id_Jabatan_Sistem (integer primary key), Slug_Jabatan (varchar), Nama_Jabatan (varchar), and urutan (integer). */\nCREATE TABLE `jabatan_sistem` (\n  `Id_Jabatan_Sistem` int(11) NOT NULL,\n  `Slug_Jabatan` varchar(20) NOT NULL,\n  `Nama_Jabatan` varchar(40) NOT NULL,\n  `urutan` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named jabatan_sistem with four columns: Id_Jabatan_Sistem (integer primary key), Slug_Jabatan (varchar), Nama_Jabatan (varchar), and urutan (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "ENGINE", "NOT", "CHARSET", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named jabatan_sistem with four columns: Id_Jabatan_Sistem (integer primary key), Slug_Jabatan (varchar), Nama_Jabatan (varchar), and urutan (integer).", "response": "-- Reasoning:\nWe need a new table named jabatan_sistem. It should have an integer primary key so that each jabatan_sistem has a unique identifier, and a slug_jabatan column to store the jabatan_sistem\u2019s slug as text.\n\n-- Solution:\n```sql\nCREATE TABLE jabatan_sistem (\n  Id_Jabatan_Sistem INT PRIMARY KEY,\n  Slug_Jabatan VARCHAR(255),\n  Nama_Jabatan VARCHAR(255),\n  urutan INT\n);\n```\n\n-- Explanation:\nThis statement defines the jabatan_sistem table with four columns:\n  \u2022 Id_Jabatan_Sistem: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Slug_Jabatan: variable\u2010length string up to 255 characters\n  \u2022 Nama_Jabatan: variable\u2010length string up to 255 characters\n  \u2022 urutan: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('jabatan_sistem');"}
{"seed": "/* Inserts the given data into the jabatan_sistem table. */\nINSERT INTO `jabatan_sistem` (`Id_Jabatan_Sistem`, `Slug_Jabatan`, `Nama_Jabatan`, `urutan`) VALUES\n(1, 'fo', 'Front Office', 3),\n(2, 'ksb_ren', 'Kasubag Perencanaan Pengadaan', 4),\n(3, 'kabag_peng', 'Kabag Pelayanan Pengadaan', 5),\n(4, 'ksb_pel', 'Kepala Sub Bagian Pelelangan', 6),\n(5, 'pokja', 'Ketua Pokja', 7),\n(6, 'ppk', 'PPK SKPD', 2),\n(7, 'admin', 'Administrator', 1),\n(8, 'monev', 'Kasubag monev', 9),\n(9, 'kabag', 'Kepala Bagian', 10),\n(10, 'anggota_pokja', 'Anggota Pokja', 8)", "description": "Inserts the given data into the jabatan_sistem table.", "concepts": ["INSERT INTO", "VALUES", "Kasubag", "Kepala", "Pokja", "PPK", "Administrator", "Kasubag", "Kepala"], "instruction": "Write a SQL query to insert the given data into the jabatan_sistem table.", "response": "-- Reasoning:\nWe need to insert the given data into the jabatan_sistem table.\n\n-- Solution:\n```sql\nINSERT INTO jabatan_sistem (jabatan_id, jabatan_nama)\nVALUES (1, 'Admin'), (2, 'Manager'), (3, 'Staff');\n```\n\n-- Explanation:\nThis INSERT statement inserts the given data into the jabatan_sistem table.\n\n-- Tests:\n-- 1. Verify data is inserted\nSELECT * FROM jabatan_sistem;"}
{"seed": "/* Creates a table named kepuasan with two columns: id_kepuasan (integer primary key) and status (enum). */\nCREATE TABLE `kepuasan` (\n  `id_kepuasan` int(11) NOT NULL,\n  `status` enum('up','down') NOT NULL,\n  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named kepuasan with two columns: id_kepuasan (integer primary key) and status (enum).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "ENUM", "TIMESTAMP"], "instruction": "Write a SQL query to create a table named kepuasan with two columns: id_kepuasan (integer primary key) and status (enum).", "response": "-- Reasoning:\nWe need a new table named kepuasan. It should have an integer primary key so that each kepuasan has a unique identifier, and a status column to store the kepuasan\u2019s status as text.\n\n-- Solution:\n```sql\nCREATE TABLE kepuasan (\n  id_kepuasan INT PRIMARY KEY,\n  status ENUM('Sangat Puas', 'Puas', 'Cukup Puas', 'Tidak Puas')\n);\n```\n\n-- Explanation:\nThis statement defines the kepuasan table with two columns:\n  \u2022 id_kepuasan: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 status: enumerated values of Sangat Puas, Puas, Cukup Puas, and Tidak Puas\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('kepuasan');"}
{"seed": "/* Creates a table named master_skpd with four columns: Master_Skpd_Id (integer), Nama_Skpd (varchar), Alamat (text), and Email_Skpd (varchar). */\nCREATE TABLE `master_skpd` (\n  `Master_Skpd_Id` int(11) NOT NULL,\n  `Nama_Skpd` varchar(255) NOT NULL,\n  `Alamat` text,\n  `Email_Skpd` varchar(100) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named master_skpd with four columns: Master_Skpd_Id (integer), Nama_Skpd (varchar), Alamat (text), and Email_Skpd (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "TEXT", "DEFAULT"], "instruction": "Write a SQL query to create a table named master_skpd with four columns: Master_Skpd_Id (integer), Nama_Skpd (varchar), Alamat (text), and Email_Skpd (varchar).", "response": "-- Reasoning:\nWe need a new table named master_skpd. It should have an integer primary key so that each SKPD has a unique identifier, and a name column to store the SKPD\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE master_skpd (\n  Master_Skpd_Id INT PRIMARY KEY,\n  Nama_Skpd VARCHAR(255),\n  Alamat TEXT,\n  Email_Skpd VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the master_skpd table with four columns:\n  \u2022 Master_Skpd_Id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Nama_Skpd: variable\u2010length string up to 255 characters\n  \u2022 Alamat: variable\u2010length text\n  \u2022 Email_Skpd: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('master_skpd');"}
{"seed": "/* Inserts 42 rows into the master_skpd table. */\nINSERT INTO `master_skpd` (`Master_Skpd_Id`, `Nama_Skpd`, `Alamat`, `Email_Skpd`) VALUES\n(1, 'KECAMATAN GEROKGAK ', '', ''),\n(2, 'KECAMATAN SAWAN ', '', ''),\n(3, 'DINAS ARSIP DAN PERPUSTAKAAN DAERAH ', '', ''),\n(4, 'DINAS KETAHANAN PANGAN ', '', ''),\n(5, 'KECAMATAN BANJAR ', '', ''),\n(6, 'DINAS STATISTIK ', '', ''),\n(7, 'KECAMATAN TEJAKULA ', '', ''),\n(8, 'DINAS TENAGA KERJA ', '', ''),\n(9, 'BADAN KESATUAN BANGSA DAN POLITIK ', '', ''),\n(10, 'SEKRETARIAT DPRD ', '', ''),\n(11, 'KECAMATAN KUBUTAMBAHAN ', '', ''),\n(12, 'SATUAN POLISI PAMONG PRAJA ', '', ''),\n(13, 'KECAMATAN SERIRIT ', '', ''),\n(14, 'KECAMATAN SUKASADA ', '', ''),\n(15, 'DINAS PEMADAM KEBAKARAN ', '', ''),\n(16, 'INSPEKTORAT DAERAH ', '', ''),\n(17, 'DINAS KOPERASI, USAHA KECIL DAN MENENGAH ', '', ''),\n(18, 'DINAS SOSIAL ', '', ''),\n(19, 'DINAS PENGENDALIAN PENDUDUK, KELUARGA BERENCANA, PEMBERDAYAAN PEREMPUAN DAN PERLINDUNGAN ANAK ', '', ''),\n(20, 'DINAS KEPENDUDUKAN DAN PENCATATAN SIPIL ', '', ''),\n(21, 'DINAS PENANAMAN MODAL DAN PELAYANAN PERIZINAN TERPADU SATU PINTU ', '', ''),\n(22, 'DINAS PEMBERDAYAAN MASYARAKAT DAN DESA ', '', ''),\n(23, 'KECAMATAN BUSUNGBIU ', '', ''),\n(24, 'BADAN KEPEGAWAIAN DAN PENGEMBANGAN SUMBER DAYA MANUSIA KABUPATEN ', '', ''),\n(25, 'DINAS PERHUBUNGAN ', '', ''),\n(26, 'BADAN PENANGGULANGAN BENCANA DAERAH ', '', ''),\n(27, 'DINAS KOMUNIKASI, INFORMATIKA DAN PERSANDIAN ', '', ''),\n(28, 'BADAN PERENCANAAN PEMBANGUNAN DAERAH, PENELITIAN DAN PENGEMBANGAN ', '', ''),\n(29, 'DINAS PERIKANAN ', '', ''),\n(30, 'DINAS PARIWISATA ', '', ''),\n(31, 'DINAS LINGKUNGAN HIDUP ', '', ''),\n(32, 'KECAMATAN BULELENG ', '', ''),\n(33, 'DINAS PERDAGANGAN DAN PERINDUSTRIAN ', '', ''),\n(34, 'DINAS KEBUDAYAAN ', '', ''),\n(35, 'BADAN KEUANGAN DAERAH ', '', ''),\n(36, 'DINAS PERTANIAN ', '', ''),\n(37, 'SEKRETARIAT DAERAH ', '', ''),\n(38, 'DINAS PERUMAHAN, PERMUKIMAN DAN PERTANAHAN ', '', ''),\n(39, 'DINAS KESEHATAN ', '', ''),\n(40, 'RUMAH SAKIT UMUM DAERAH ', '', ''),\n(41, 'DINAS PENDIDIKAN, PEMUDA DAN OLAH RAGA ', '', ''),\n(42, 'DINAS PEKERJAAN UMUM DAN PENATAAN RUANG ', '', '')", "description": "Inserts 42 rows into the master_skpd table.", "concepts": ["INSERT INTO", "VALUES", "Master_Skpd", "Nama_Skpd", "Alamat", "Email_Skpd", "Kecamatan", "S"], "instruction": "Write a SQL query to insert 42 rows into the master_skpd table.", "response": "-- Reasoning:\nWe need to insert 42 rows into the master_skpd table.\n\n-- Solution:\n```sql\nINSERT INTO master_skpd (id, nama)\nVALUES (1, 'Kab. Bogor'),\n       (2, 'Kab. Sukabumi'),\n       (3, 'Kab. Cianjur'),\n       (4, 'Kab. Bandung'),\n       (5, 'Kab. Garut'),\n       (6, 'Kab. Tasikmalaya'),\n       (7, 'Kab. Ciamis'),\n       (8, 'Kab. Kuningan'),\n       (9, 'Kab. Cirebon'),\n       (10, 'Kab. Majalengka'),\n       (11, 'Kab. Sumedang'),\n       (12, 'Kab. Indramayu'),\n       (13, 'Kab. Subang'),\n       (14, 'Kab. Purwakarta'),\n       (15, 'Kab. Karawang'),\n       (16, 'Kab. Bekasi'),\n       (17, 'Kab. Bandung Barat'),\n       (18, 'Kab. Pangandaran'),\n       (19, 'Kab. Bogor'),\n       (20, 'Kab. Suk"}
{"seed": "/* Creates a table named user with 20 columns: Id_User, Nama_Lengkap, Username, Password, NIP_User, No_Ktp, No_Hp_User, Jabatan_User, Slug_Jabatan, Email, No_WA, No_Telegram, Master_Skpd_Id, IsActive, Last_Login, Last_Logout, Surat_tugas, Created_At, Updated_At, Deleted_At */\nCREATE TABLE `user` (\n  `Id_User` int(11) NOT NULL,\n  `Nama_Lengkap` varchar(255) NOT NULL,\n  `Username` varchar(100) NOT NULL,\n  `Password` varchar(300) NOT NULL,\n  `NIP_User` varchar(25) DEFAULT NULL,\n  `No_Ktp` varchar(30) DEFAULT NULL,\n  `No_Hp_User` varchar(18) DEFAULT NULL,\n  `Jabatan_User` varchar(100) DEFAULT NULL,\n  `Slug_Jabatan` varchar(20) NOT NULL,\n  `Email` varchar(100) DEFAULT NULL,\n  `No_WA` varchar(100) DEFAULT NULL,\n  `No_Telegram` varchar(100) DEFAULT NULL,\n  `Master_Skpd_Id` int(11) DEFAULT NULL,\n  `IsActive` tinyint(4) NOT NULL DEFAULT '1',\n  `Last_Login` timestamp NULL DEFAULT NULL,\n  `Last_Logout` timestamp NULL DEFAULT NULL,\n  `Surat_tugas` varchar(255) DEFAULT NULL,\n  `Created_At` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `Updated_At` timestamp NULL DEFAULT NULL,\n  `Deleted_At` timestamp NULL DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named user with 20 columns: Id_User, Nama_Lengkap, Username, Password, NIP_User, No_Ktp, No_Hp_User, Jabatan_User, Slug_Jabatan, Email, No_WA, No_Telegram, Master_Skpd_Id, IsActive, Last_Login, Last_Logout, Surat_tugas, Created_At, Updated_At, Deleted_At", "concepts": ["CREATE TABLE", "`user`", "Id_User", "Nama_Lengkap", "Username", "Password", "NIP_User", "No_Ktp"], "instruction": "Write a SQL query to create a table named user with 20 columns: Id_User, Nama_Lengkap, Username, Password, NIP_User, No_Ktp, No_Hp_User, Jabatan_User, Slug_Jabatan, Email, No_WA, No_Telegram, Master_Skpd_Id, IsActive, Last_Login, Last_Logout, Surat_tugas, Created_At, Updated_At, Deleted_At", "response": "-- Reasoning:\nWe need a new table named user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user (\n  Id_User INT PRIMARY KEY,\n  Nama_Lengkap VARCHAR(255),\n  Username VARCHAR(255),\n  Password VARCHAR(255),\n  NIP_User VARCHAR(255),\n  No_Ktp VARCHAR(255),\n  No_Hp_User VARCHAR(255),\n  Jabatan_User VARCHAR(255),\n  Slug_Jabatan VARCHAR(255),\n  Email VARCHAR(255),\n  No_WA VARCHAR(255),\n  No_Telegram VARCHAR(255),\n  Master_Skpd_Id VARCHAR(255),\n  IsActive VARCHAR(255),\n  Last_Login VARCHAR(255),\n  Last_Logout VARCHAR(255),\n  Surat_tugas VARCHAR(255),\n  Created_At VARCHAR(255),\n  Updated_At VARCHAR(255),\n  Deleted_At VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the user table with 20 columns:\n  \u2022 Id_User: integer, marked PRIMARY KEY so it"}
{"seed": "/* Adds a primary key constraint to the id_buku_tamu column in the buku_tamu table. */\nALTER TABLE `buku_tamu`\n  ADD PRIMARY KEY (`id_buku_tamu`)", "description": "Adds a primary key constraint to the id_buku_tamu column in the buku_tamu table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id_buku_tamu column in the buku_tamu table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id_buku_tamu column in the buku_tamu table. This will ensure that each row has a unique identifier and that the column cannot be NULL.\n\n-- Solution:\n```sql\nALTER TABLE buku_tamu\n  ADD PRIMARY KEY (id_buku_tamu);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id_buku_tamu column in the buku_tamu table.\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('buku_tamu');"}
{"seed": "/* Adds a primary key constraint to the Id_Jabatan_Sistem column in the jabatan_sistem table. */\nALTER TABLE `jabatan_sistem`\n  ADD PRIMARY KEY (`Id_Jabatan_Sistem`)", "description": "Adds a primary key constraint to the Id_Jabatan_Sistem column in the jabatan_sistem table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the Id_Jabatan_Sistem column in the jabatan_sistem table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the Id_Jabatan_Sistem column in the jabatan_sistem table. This will ensure that each row has a unique identifier and that the column cannot contain NULL values.\n\n-- Solution:\n```sql\nALTER TABLE jabatan_sistem\n  ADD PRIMARY KEY (Id_Jabatan_Sistem);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the Id_Jabatan_Sistem column in the jabatan_sistem table.\n\n-- Tests:\n-- 1. Check primary key constraint is added\nPRAGMA table_info('jabatan_sistem');"}
{"seed": "/* Adds a primary key constraint to the id_kepuasan column in the kepuasan table. */\nALTER TABLE `kepuasan`\n  ADD PRIMARY KEY (`id_kepuasan`)", "description": "Adds a primary key constraint to the id_kepuasan column in the kepuasan table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id_kepuasan column in the kepuasan table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id_kepuasan column in the kepuasan table. This will ensure that each row has a unique identifier and that the column cannot contain NULL values.\n\n-- Solution:\n```sql\nALTER TABLE kepuasan\n  ADD PRIMARY KEY (id_kepuasan);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id_kepuasan column in the kepuasan table.\n\n-- Tests:\n-- 1. Check primary key constraint is added\nPRAGMA table_info('kepuasan');"}
{"seed": "/* Adds a primary key constraint to the master_skpd table. */\nALTER TABLE `master_skpd`\n  ADD PRIMARY KEY (`Master_Skpd_Id`)", "description": "Adds a primary key constraint to the master_skpd table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the master_skpd table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the master_skpd table. This will ensure that each row has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE master_skpd\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the master_skpd table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('master_skpd');"}
{"seed": "/* Adds a primary key and a unique key to the user table. */\nALTER TABLE `user`\n  ADD PRIMARY KEY (`Id_User`),\n  ADD UNIQUE KEY `Username` (`Username`)", "description": "Adds a primary key and a unique key to the user table.", "concepts": ["ALTER TABLE", "PRIMARY KEY", "UNIQUE KEY"], "instruction": "Write a SQL query to add a primary key and a unique key to the user table.", "response": "-- Reasoning:\nWe need to modify the existing user table by adding a primary key and a unique key.\n\n-- Solution:\n```sql\nALTER TABLE user\n  ADD COLUMN id INTEGER PRIMARY KEY,\n  ADD UNIQUE (email);\n```\n\n-- Explanation:\nThis ALTER statement updates the user table schema by adding:\n  \u2022 id: an integer primary key\n  \u2022 email: a unique key\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user');"}
{"seed": "/* Modifies the buku_tamu table by adding an AUTO_INCREMENT column to the id_buku_tamu column. */\nALTER TABLE `buku_tamu`\n  MODIFY `id_buku_tamu` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the buku_tamu table by adding an AUTO_INCREMENT column to the id_buku_tamu column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the buku_tamu table by adding an AUTO_INCREMENT column to the id_buku_tamu column.", "response": "-- Reasoning:\nWe need to modify the existing buku_tamu table by adding a new column named id_buku_tamu. It should be an integer and auto\u2010incremented.\n\n-- Solution:\n```sql\nALTER TABLE buku_tamu\n  ADD COLUMN id_buku_tamu INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the buku_tamu table schema by adding:\n  \u2022 id_buku_tamu: an auto\u2010incremented integer column\n\n-- Tests:\n-- 1. Check new column appears and is auto\u2010incremented\nPRAGMA table_info('buku_tamu');"}
{"seed": "/* Modifies the jabatan_sistem table by adding an auto-incrementing primary key column named Id_Jabatan_Sistem. */\nALTER TABLE `jabatan_sistem`\n  MODIFY `Id_Jabatan_Sistem` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the jabatan_sistem table by adding an auto-incrementing primary key column named Id_Jabatan_Sistem.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "PRIMARY KEY"], "instruction": "Write a SQL query to modify the jabatan_sistem table by adding an auto-incrementing primary key column named Id_Jabatan_Sistem.", "response": "-- Reasoning:\nWe need to modify the existing jabatan_sistem table by adding a new column named Id_Jabatan_Sistem. It should be an auto\u2010incrementing integer primary key.\n\n-- Solution:\n```sql\nALTER TABLE jabatan_sistem\n  ADD COLUMN Id_Jabatan_Sistem INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the jabatan_sistem table schema by adding:\n  \u2022 Id_Jabatan_Sistem: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Check new column appears and is auto\u2010incrementing\nPRAGMA table_info('jabatan_sistem');"}
{"seed": "/* Modifies the id_kepuasan column of the kepuasan table to auto-increment. */\nALTER TABLE `kepuasan`\n  MODIFY `id_kepuasan` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the id_kepuasan column of the kepuasan table to auto-increment.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the id_kepuasan column of the kepuasan table to auto-increment.", "response": "-- Reasoning:\nWe need to modify the existing kepuasan table by changing the id_kepuasan column to auto\u2010increment. This means that every new row will have a unique id_kepuasan value.\n\n-- Solution:\n```sql\nALTER TABLE kepuasan\n  ALTER COLUMN id_kepuasan\n  AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the kepuasan table schema by changing:\n  \u2022 id_kepuasan: to auto\u2010increment\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('kepuasan');"}
{"seed": "/* Modifies the master_skpd table by adding an AUTO_INCREMENT column to the Master_Skpd_Id column. */\nALTER TABLE `master_skpd`\n  MODIFY `Master_Skpd_Id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the master_skpd table by adding an AUTO_INCREMENT column to the Master_Skpd_Id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the master_skpd table by adding an AUTO_INCREMENT column to the Master_Skpd_Id column.", "response": "-- Reasoning:\nWe need to modify the master_skpd table by adding an AUTO_INCREMENT column to the Master_Skpd_Id column.\n\n-- Solution:\n```sql\nALTER TABLE master_skpd\n  ADD COLUMN Master_Skpd_Id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the master_skpd table schema by adding:\n  \u2022 Master_Skpd_Id: an integer column that is auto\u2010incremented and is the primary key\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('master_skpd');"}
{"seed": "/* Modifies the user table by adding an auto-incrementing column named Id_User. */\nALTER TABLE `user`\n  MODIFY `Id_User` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the user table by adding an auto-incrementing column named Id_User.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY", "NOT", "NULL", "AUTO_INCREMENT", "int", "Id_User"], "instruction": "Write a SQL query to modify the user table by adding an auto-incrementing column named Id_User.", "response": "-- Reasoning:\nWe need to modify the existing user table by adding a new column named Id_User. It should be an auto\u2010incrementing integer and primary key.\n\n-- Solution:\n```sql\nALTER TABLE user\n  ADD COLUMN Id_User INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the user table schema by adding:\n  \u2022 Id_User: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('user');"}
{"seed": "/* Inserts two rows into the tbl1 table with the values 501 and 505. */\ninsert into tbl1 values (501), (505)", "description": "Inserts two rows into the tbl1 table with the values 501 and 505.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert two rows into the tbl1 table with the values 501 and 505.", "response": "-- Reasoning:\nWe need to insert two rows into the tbl1 table with the values 501 and 505.\n\n-- Solution:\n```sql\nINSERT INTO tbl1 (id) VALUES (501), (505);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the tbl1 table with the values 501 and 505.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM tbl1;"}
{"seed": "/* Modifies the doc_type column in the PCDD_DOCUMENT_DETAILS table to be of type varchar2. */\nalter table PCDD_DOCUMENT_DETAILS modify doc_type varchar2", "description": "Modifies the doc_type column in the PCDD_DOCUMENT_DETAILS table to be of type varchar2.", "concepts": ["ALTER TABLE", "MODIFY", "VARCHAR2"], "instruction": "Write a SQL query to modify the doc_type column in the PCDD_DOCUMENT_DETAILS table to be of type varchar2.", "response": "-- Reasoning:\nWe need to modify the existing PCDD_DOCUMENT_DETAILS table by changing the doc_type column to be of type varchar2.\n\n-- Solution:\n```sql\nALTER TABLE PCDD_DOCUMENT_DETAILS MODIFY (DOC_TYPE VARCHAR2(20));\n```\n\n-- Explanation:\nThis ALTER statement updates the PCDD_DOCUMENT_DETAILS table schema by changing:\n  \u2022 doc_type: varchar2 column to varchar2(20)\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('PCDD_DOCUMENT_DETAILS');"}
{"seed": "/* Modifies the doc_type column in the PCDDUL_DOCUMENT_DETAILS_UL table to be of type varchar2. */\nalter table PCDDUL_DOCUMENT_DETAILS_UL modify doc_type varchar2", "description": "Modifies the doc_type column in the PCDDUL_DOCUMENT_DETAILS_UL table to be of type varchar2.", "concepts": ["ALTER TABLE", "MODIFY", "VARCHAR2"], "instruction": "Write a SQL query to modify the doc_type column in the PCDDUL_DOCUMENT_DETAILS_UL table to be of type varchar2.", "response": "-- Reasoning:\nWe need to modify the existing PCDDUL_DOCUMENT_DETAILS_UL table by changing the doc_type column to be of type varchar2.\n\n-- Solution:\n```sql\nALTER TABLE PCDDUL_DOCUMENT_DETAILS_UL\n  MODIFY (doc_type VARCHAR2(20));\n```\n\n-- Explanation:\nThis ALTER statement updates the PCDDUL_DOCUMENT_DETAILS_UL table schema by changing:\n  \u2022 doc_type: varchar2 column to varchar2(20)\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('PCDDUL_DOCUMENT_DETAILS_UL');"}
{"seed": "/* Selects all columns from the Vendors table. */\nSELECT * FROM Vendors", "description": "Selects all columns from the Vendors table.", "concepts": ["SELECT", "*"], "instruction": "Write a SQL query to select all columns from the Vendors table.", "response": "-- Reasoning:\nWe need to select all columns from the Vendors table.\n\n-- Solution:\n```sql\nSELECT * FROM Vendors;\n```\n\n-- Explanation:\nThis query selects all columns from the Vendors table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM Vendors;"}
{"seed": "/* Selects the InvoiceNumber column from the Invoices table. */\nSELECT InvoiceNumber FROM Invoices", "description": "Selects the InvoiceNumber column from the Invoices table.", "concepts": ["SELECT", "FROM", "InvoiceNumber"], "instruction": "Write a SQL query to select the InvoiceNumber column from the Invoices table.", "response": "-- Reasoning:\nWe need to select the InvoiceNumber column from the Invoices table.\n\n-- Solution:\n```sql\nSELECT InvoiceNumber FROM Invoices;\n```\n\n-- Explanation:\nThis query selects the InvoiceNumber column from the Invoices table.\n\n-- Tests:\n-- 1. Verify column exists and has correct data type\nPRAGMA table_info('Invoices');"}
{"seed": "/* Selects the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table. */\nSELECT InvoiceNumber, InvoiceDate, InvoiceTotal FROM Invoices", "description": "Selects the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table.", "concepts": ["SELECT", "InvoiceNumber", "InvoiceDate", "InvoiceTotal", "FROM", "Invoices"], "instruction": "Write a SQL query to list the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table.", "response": "-- Reasoning:\nWe need to list the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table.\n\n-- Solution:\n```sql\nSELECT InvoiceNumber, InvoiceDate, InvoiceTotal\n  FROM Invoices;\n```\n\n-- Explanation:\nThis query lists the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table.\n\n-- Tests:\n-- 1. Verify the query returns the correct columns\nPRAGMA table_info('Invoices');"}
{"seed": "/* Selects the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table where the InvoiceNumber is 111897. The results are sorted by InvoiceDate. */\nSELECT InvoiceNumber, InvoiceDate, InvoiceTotal From Invoices WHERE InvoiceNumber = '111897' ORDER BY InvoiceDate", "description": "Selects the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table where the InvoiceNumber is 111897. The results are sorted by InvoiceDate.", "concepts": ["SELECT", "FROM", "WHERE", "ORDER BY", "InvoiceNumber", "InvoiceDate", "InvoiceTotal"], "instruction": "Write a SQL query to select the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table where the InvoiceNumber is 111897. The results are sorted by InvoiceDate.", "response": "-- Reasoning:\nWe need to select the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table where the InvoiceNumber is 111897. The results should be sorted by InvoiceDate.\n\n-- Solution:\n```sql\nSELECT InvoiceNumber, InvoiceDate, InvoiceTotal\nFROM Invoices\nWHERE InvoiceNumber = 111897\nORDER BY InvoiceDate;\n```\n\n-- Explanation:\nThis query selects the InvoiceNumber, InvoiceDate, and InvoiceTotal from the Invoices table where the InvoiceNumber is 111897. The results are sorted by InvoiceDate.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT InvoiceNumber, InvoiceDate, InvoiceTotal\nFROM Invoices\nWHERE InvoiceNumber = 111897\nORDER BY InvoiceDate;"}
{"seed": "/* Selects the VendorContactFName and VendorContactLName from the Vendors table and concatenates them into a single column named VendorName. */\nSELECT VendorContactFName + ' ' + VendorContactLName As VendorName From Vendors", "description": "Selects the VendorContactFName and VendorContactLName from the Vendors table and concatenates them into a single column named VendorName.", "concepts": ["SELECT", "CONCATENATE", "Vendors", "VendorContactFName", "VendorContactLName", "VendorName"], "instruction": "Write a SQL query to list the VendorContactFName and VendorContactLName from the Vendors table and concatenate them into a single column named VendorName.", "response": "-- Reasoning:\nWe need to list the VendorContactFName and VendorContactLName from the Vendors table and concatenate them into a single column named VendorName.\n\n-- Solution:\n```sql\nSELECT\n  VendorContactFName || ' ' || VendorContactLName AS VendorName\nFROM Vendors;\n```\n\n-- Explanation:\nThis query uses the || operator to concatenate the VendorContactFName and VendorContactLName columns into a single column named VendorName.\n\n-- Tests:\n-- 1. Verify VendorName is correct\nSELECT VendorName FROM Vendors;"}
{"seed": "/* Selects the InvoiceID, InvoiceTotal, and TotalCredits from the Invoices table where the InvoiceID is 17. TotalCredits is calculated as the sum of the CreditTotal and PaymentTotal columns. */\nSELECT InvoiceID, InvoiceTotal, CreditTotal + PaymentTotal AS TotalCredits FROM Invoices WHERE InvoiceID = 17", "description": "Selects the InvoiceID, InvoiceTotal, and TotalCredits from the Invoices table where the InvoiceID is 17. TotalCredits is calculated as the sum of the CreditTotal and PaymentTotal columns.", "concepts": ["SELECT", "InvoiceID", "InvoiceTotal", "CreditTotal", "PaymentTotal", "TotalCredits", "FROM", "WHERE"], "instruction": "Write a SQL query to select the InvoiceID, InvoiceTotal, and TotalCredits from the Invoices table where the InvoiceID is 17. TotalCredits is calculated as the sum of the CreditTotal and PaymentTotal columns.", "response": "-- Reasoning:\nWe need to select the InvoiceID, InvoiceTotal, and TotalCredits from the Invoices table. The InvoiceID is 17, so we need to filter the results to only include that InvoiceID. TotalCredits is calculated as the sum of the CreditTotal and PaymentTotal columns.\n\n-- Solution:\n```sql\nSELECT\n  InvoiceID,\n  InvoiceTotal,\n  CreditTotal + PaymentTotal AS TotalCredits\nFROM Invoices\nWHERE InvoiceID = 17;\n```\n\n-- Explanation:\nThis query selects the InvoiceID, InvoiceTotal, and TotalCredits from the Invoices table. The InvoiceID is 17, so we filter the results to only include that InvoiceID. TotalCredits is calculated as the sum of the CreditTotal and PaymentTotal columns.\n\n-- Tests:\n-- 1. Verify InvoiceID is 17\nSELECT InvoiceID FROM Invoices;\n\n-- 2. Verify TotalCredits is correct\nSELECT\n  InvoiceID,\n  InvoiceTotal,\n  CreditTotal + PaymentTotal AS TotalCredits\nFROM Invoices\nWHERE InvoiceID = 17;"}
{"seed": "/* Selects the InvoiceNumber, InvoiceDate, and InvoiceTotal of all invoices between January 1, 2016 and February 29, 2016. The BETWEEN operator is used to select values within a given range. The ORDER BY operator is used to sort the results in ascending order by InvoiceDate. */\nSELECT InvoiceNumber, InvoiceDate, InvoiceTotal FROM Invoices WHERE InvoiceDate BETWEEN '01-01-2016' AND '02-29-2016 11:59PM' ORDER BY InvoiceDate", "description": "Selects the InvoiceNumber, InvoiceDate, and InvoiceTotal of all invoices between January 1, 2016 and February 29, 2016. The BETWEEN operator is used to select values within a given range. The ORDER BY operator is used to sort the results in ascending order by InvoiceDate.", "concepts": ["SELECT", "WHERE", "BETWEEN", "ORDER BY", "InvoiceNumber", "InvoiceDate", "InvoiceTotal"], "instruction": "Write a SQL query to list the InvoiceNumber, InvoiceDate, and InvoiceTotal of all invoices between January 1, 2016 and February 29, 2016.", "response": "-- Reasoning:\nWe need to list the InvoiceNumber, InvoiceDate, and InvoiceTotal of all invoices between January 1, 2016 and February 29, 2016.\n\n-- Solution:\n```sql\nSELECT\n  InvoiceNumber,\n  InvoiceDate,\n  InvoiceTotal\nFROM invoices\nWHERE InvoiceDate BETWEEN '2016-01-01' AND '2016-02-29';\n```\n\n-- Explanation:\nThis query selects the InvoiceNumber, InvoiceDate, and InvoiceTotal columns from the invoices table, and filters the results to only include invoices between January 1, 2016 and February 29, 2016.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT\n  InvoiceNumber,\n  InvoiceDate,\n  InvoiceTotal\nFROM invoices\nWHERE InvoiceDate BETWEEN '2016-01-01' AND '2016-02-29';"}
{"seed": "/* Selects all invoices from the Invoices table that were created between January 1, 2016 and February 29, 2016. */\nSELECT * FROM Invoices WHERE InvoiceDate >= 'Jan 01, 2016' AND InvoiceDate <= 'Feb 29, 2016'", "description": "Selects all invoices from the Invoices table that were created between January 1, 2016 and February 29, 2016.", "concepts": ["SELECT", "FROM", "WHERE", "AND", "InvoiceDate", ">=", "<="], "instruction": "Write a SQL query to list all invoices from the Invoices table that were created between January 1, 2016 and February 29, 2016.", "response": "-- Reasoning:\nWe need to find all invoices that were created between January 1, 2016 and February 29, 2016.\n\n-- Solution:\n```sql\nSELECT *\nFROM invoices\nWHERE invoice_date BETWEEN '2016-01-01' AND '2016-02-29';\n```\n\n-- Explanation:\nThis query uses the BETWEEN operator to find all invoices that were created between January 1, 2016 and February 29, 2016.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT *\nFROM invoices\nWHERE invoice_date BETWEEN '2016-01-01' AND '2016-02-29';"}
{"seed": "/* Selects all invoices with a total greater than or equal to 100,000. */\nSELECT * FROM Invoices WHERE InvoiceTotal >= 100000", "description": "Selects all invoices with a total greater than or equal to 100,000.", "concepts": ["SELECT", "WHERE", "InvoiceTotal", ">="], "instruction": "Write a SQL query to list all invoices with a total greater than or equal to 100,000.", "response": "-- Reasoning:\nWe need to find all invoices with a total greater than or equal to 100,000.\n\n-- Solution:\n```sql\nSELECT *\nFROM invoices\nWHERE total >= 100000;\n```\n\n-- Explanation:\nThis query selects all invoices with a total greater than or equal to 100,000.\n\n-- Tests:\n-- 1. Verify total is greater than or equal to 100,000\nSELECT *\nFROM invoices\nWHERE total >= 100000;"}
{"seed": "/* Selects the InvoiceNumber, InvoiceTotal, PaymentTotal, and CreditTotal from the Invoices table and calculates the BalanceDue. The BalanceDue is calculated by subtracting the PaymentTotal and CreditTotal from the InvoiceTotal. The results are sorted in descending order based on the BalanceDue. */\n();\n--Uses the GETDATE() Funtion to print the current date/time\n\nSELECT InvoiceNumber, InvoiceTotal -(PaymentTotal + CreditTotal) AS BalanceDue FROM Invoices ORDER BY BalanceDue DESC", "description": "Selects the InvoiceNumber, InvoiceTotal, PaymentTotal, and CreditTotal from the Invoices table and calculates the BalanceDue. The BalanceDue is calculated by subtracting the PaymentTotal and CreditTotal from the InvoiceTotal. The results are sorted in descending order based on the BalanceDue.", "concepts": ["SELECT", "FROM", "AS", "ORDER BY", "DESC"], "instruction": "Write a SQL query to select the InvoiceNumber, InvoiceTotal, PaymentTotal, and CreditTotal from the Invoices table and calculate the BalanceDue. The BalanceDue is calculated by subtracting the PaymentTotal and CreditTotal from the InvoiceTotal. The results are sorted in descending order based on the BalanceDue.", "response": "-- Reasoning:\nWe need to select the InvoiceNumber, InvoiceTotal, PaymentTotal, and CreditTotal from the Invoices table. Then we need to calculate the BalanceDue by subtracting the PaymentTotal and CreditTotal from the InvoiceTotal. Finally, we need to sort the results in descending order based on the BalanceDue.\n\n-- Solution:\n```sql\nSELECT\n  InvoiceNumber,\n  InvoiceTotal,\n  PaymentTotal,\n  CreditTotal,\n  InvoiceTotal - PaymentTotal - CreditTotal AS BalanceDue\nFROM Invoices\nORDER BY BalanceDue DESC;\n```\n\n-- Explanation:\nThis query selects the InvoiceNumber, InvoiceTotal, PaymentTotal, and CreditTotal from the Invoices table and calculates the BalanceDue by subtracting the PaymentTotal and CreditTotal from the InvoiceTotal. The results are sorted in descending order based on the BalanceDue.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT\n  InvoiceNumber,\n  InvoiceTotal,\n  PaymentTotal,\n  CreditTotal,\n  InvoiceTotal - PaymentTotal - CreditTotal AS BalanceDue\nFROM Invoices\nORDER BY BalanceDue DESC;"}
{"seed": "/* Selects the InvoiceNumber and BalanceDue of all invoices where the BalanceDue is not equal to 0. The BalanceDue is calculated as InvoiceTotal - (PaymentTotal + CreditTotal). The results are sorted in descending order by BalanceDue. */\nSELECT InvoiceNumber, InvoiceTotal -(PaymentTotal + CreditTotal) AS BalanceDue FROM Invoices WHERE InvoiceTotal -(PaymentTotal + CreditTotal) != 0 ORDER BY BalanceDue DESC", "description": "Selects the InvoiceNumber and BalanceDue of all invoices where the BalanceDue is not equal to 0. The BalanceDue is calculated as InvoiceTotal - (PaymentTotal + CreditTotal). The results are sorted in descending order by BalanceDue.", "concepts": ["SELECT", "FROM", "WHERE", "ORDER BY", "DESC", "!=", "AS", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to list the InvoiceNumber and BalanceDue of all invoices where the BalanceDue is not equal to 0. The BalanceDue is calculated as InvoiceTotal - (PaymentTotal + CreditTotal). The results are sorted in descending order by BalanceDue.", "response": "-- Reasoning:\nWe need to find all invoices where the BalanceDue is not equal to 0. The BalanceDue is calculated as InvoiceTotal - (PaymentTotal + CreditTotal). The results are sorted in descending order by BalanceDue.\n\n-- Solution:\n```sql\nSELECT InvoiceNumber, InvoiceTotal - (PaymentTotal + CreditTotal) AS BalanceDue\nFROM invoices\nWHERE InvoiceTotal - (PaymentTotal + CreditTotal) != 0\nORDER BY BalanceDue DESC;\n```\n\n-- Explanation:\nThis query selects the InvoiceNumber and BalanceDue columns from the invoices table. The BalanceDue is calculated as InvoiceTotal - (PaymentTotal + CreditTotal). The results are sorted in descending order by BalanceDue.\n\n-- Tests:\n-- 1. Verify results are correct\nSELECT InvoiceNumber, InvoiceTotal - (PaymentTotal + CreditTotal) AS BalanceDue\nFROM invoices\nWHERE InvoiceTotal - (PaymentTotal + CreditTotal) != 0\nORDER BY BalanceDue DESC;"}
{"seed": "/* Selects the InvoiceNumber column from the Invoices table and renames it to \"Invoice Number\". */\nSELECT InvoiceNumber AS [Invoice Number] From Invoices", "description": "Selects the InvoiceNumber column from the Invoices table and renames it to \"Invoice Number\".", "concepts": ["SELECT", "AS", "InvoiceNumber", "FROM", "Invoices"], "instruction": "Write a SQL query to select the InvoiceNumber column from the Invoices table and rename it to \"Invoice Number\".", "response": "-- Reasoning:\nWe need to select the InvoiceNumber column from the Invoices table and rename it to \"Invoice Number\".\n\n-- Solution:\n```sql\nSELECT InvoiceNumber AS \"Invoice Number\"\nFROM Invoices;\n```\n\n-- Explanation:\nThis query selects the InvoiceNumber column from the Invoices table and renames it to \"Invoice Number\".\n\n-- Tests:\n-- 1. Verify column name is correct\nPRAGMA table_info('Invoices');"}
{"seed": "/* Sets the client_min_messages configuration parameter to WARNING. This will suppress any warnings that are generated by the PostgreSQL server. */\nSET client_min_messages TO WARNING", "description": "Sets the client_min_messages configuration parameter to WARNING. This will suppress any warnings that are generated by the PostgreSQL server.", "concepts": ["SET", "client_min_messages", "TO", "WARNING"], "instruction": "Write a SQL query to set the client_min_messages configuration parameter to WARNING.", "response": "-- Reasoning:\nWe need to set the client_min_messages configuration parameter to WARNING. This will allow us to see any warnings that occur during the execution of SQL statements.\n\n-- Solution:\n```sql\nSET client_min_messages TO WARNING;\n```\n\n-- Explanation:\nThis SET statement sets the client_min_messages configuration parameter to WARNING.\n\n-- Tests:\n-- 1. Verify the parameter is set to WARNING\nSHOW client_min_messages;"}
{"seed": "/* Drops the schema named forum_example if it exists, and all objects within it (tables, views, etc.). */\nDROP SCHEMA IF EXISTS forum_example CASCADE", "description": "Drops the schema named forum_example if it exists, and all objects within it (tables, views, etc.).", "concepts": ["DROP SCHEMA", "IF EXISTS", "CASCADE"], "instruction": "Write a SQL query to drop the schema named forum_example if it exists, and all objects within it (tables, views, etc.).", "response": "-- Reasoning:\nWe need to drop the schema named forum_example if it exists, and all objects within it (tables, views, etc.).\n\n-- Solution:\n```sql\nDROP SCHEMA IF EXISTS forum_example CASCADE;\n```\n\n-- Explanation:\nThis DROP statement drops the schema named forum_example if it exists, and all objects within it (tables, views, etc.).\n\n-- Tests:\n-- 1. Verify schema is gone\nSELECT name FROM sqlite_master WHERE type='schema';"}
{"seed": "/* Drops the schema named forum_example_private if it exists. */\nDROP SCHEMA IF EXISTS forum_example_private CASCADE", "description": "Drops the schema named forum_example_private if it exists.", "concepts": ["DROP SCHEMA", "IF EXISTS", "CASCADE"], "instruction": "Write a SQL query to drop the schema named forum_example_private if it exists.", "response": "-- Reasoning:\nWe need to drop the schema named forum_example_private if it exists.\n\n-- Solution:\n```sql\nDROP SCHEMA IF EXISTS forum_example_private;\n```\n\n-- Explanation:\nThis statement drops the schema if it exists.\n\n-- Tests:\n-- 1. Verify schema is dropped\nPRAGMA schema_list;"}
{"seed": "/* Drops the role forum_example_postgraphile if it exists. */\nDROP ROLE IF EXISTS forum_example_postgraphile", "description": "Drops the role forum_example_postgraphile if it exists.", "concepts": ["DROP ROLE"], "instruction": "Write a SQL query to drop the role forum_example_postgraphile if it exists.", "response": "-- Reasoning:\nWe need to drop the role forum_example_postgraphile if it exists.\n\n-- Solution:\n```sql\nDROP ROLE IF EXISTS forum_example_postgraphile;\n```\n\n-- Explanation:\nThis statement drops the role forum_example_postgraphile if it exists.\n\n-- Tests:\n-- 1. Verify role is gone\nSELECT * FROM pg_roles WHERE rolname = 'forum_example_postgraphile';"}
{"seed": "/* Drops the role forum_example_anonymous if it exists. */\nDROP ROLE IF EXISTS forum_example_anonymous", "description": "Drops the role forum_example_anonymous if it exists.", "concepts": ["DROP ROLE"], "instruction": "Write a SQL query to drop the forum_example_anonymous role if it exists.", "response": "-- Reasoning:\nWe need to drop the forum_example_anonymous role if it exists.\n\n-- Solution:\n```sql\nDROP ROLE IF EXISTS forum_example_anonymous;\n```\n\n-- Explanation:\nThis statement drops the forum_example_anonymous role if it exists.\n\n-- Tests:\n-- 1. Verify role is gone\nSELECT * FROM sqlite_master WHERE type = 'role' AND name = 'forum_example_anonymous';"}
{"seed": "/* Drops the role forum_example_person if it exists. */\nDROP ROLE IF EXISTS forum_example_person", "description": "Drops the role forum_example_person if it exists.", "concepts": ["DROP ROLE"], "instruction": "Write a SQL query to drop the role forum_example_person if it exists.", "response": "-- Reasoning:\nWe need to drop the role forum_example_person if it exists.\n\n-- Solution:\n```sql\nDROP ROLE IF EXISTS forum_example_person;\n```\n\n-- Explanation:\nThis statement drops the role forum_example_person if it exists.\n\n-- Tests:\n-- 1. Verify role is gone\nSELECT * FROM sqlite_master WHERE type = 'role' AND name = 'forum_example_person';"}
{"seed": "/* Creates an extension named citext if it does not already exist. */\nCREATE EXTENSION IF NOT EXISTS citext", "description": "Creates an extension named citext if it does not already exist.", "concepts": ["CREATE EXTENSION", "IF", "NOT", "EXISTS", "CITEXT"], "instruction": "Write a SQL query to create an extension named citext if it does not already exist.", "response": "-- Reasoning:\nWe need to create a new extension named citext if it does not already exist.\n\n-- Solution:\n```sql\nCREATE EXTENSION IF NOT EXISTS citext;\n```\n\n-- Explanation:\nThis statement creates the citext extension if it does not already exist.\n\n-- Tests:\n-- 1. Verify extension exists\nSELECT * FROM pg_extension;"}
{"seed": "/* Creates the uuid-ossp extension if it does not already exist. */\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\" WITH SCHEMA public", "description": "Creates the uuid-ossp extension if it does not already exist.", "concepts": ["CREATE EXTENSION", "IF NOT EXISTS", "WITH SCHEMA"], "instruction": "Write a SQL query to create the uuid-ossp extension if it does not already exist.", "response": "-- Reasoning:\nWe need to create the uuid-ossp extension if it does not already exist. This is a PostgreSQL extension that provides functions for generating UUIDs.\n\n-- Solution:\n```sql\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n```\n\n-- Explanation:\nThis statement creates the uuid-ossp extension if it does not already exist.\n\n-- Tests:\n-- 1. Verify extension exists\nSELECT * FROM pg_extension;"}
{"seed": "/* Creates the pgcrypto extension if it does not already exist. */\nCREATE EXTENSION IF NOT EXISTS pgcrypto", "description": "Creates the pgcrypto extension if it does not already exist.", "concepts": ["CREATE EXTENSION", "IF NOT EXISTS", "pgcrypto"], "instruction": "Write a SQL query to create the pgcrypto extension if it does not already exist.", "response": "-- Reasoning:\nWe need to create the pgcrypto extension if it does not already exist.\n\n-- Solution:\n```sql\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n```\n\n-- Explanation:\nThis statement creates the pgcrypto extension if it does not already exist.\n\n-- Tests:\n-- 1. Verify extension exists\nSELECT * FROM pg_extension;"}
{"seed": "/* Creates a schema named forum_example. */\nCREATE SCHEMA forum_example", "description": "Creates a schema named forum_example.", "concepts": ["CREATE SCHEMA"], "instruction": "Write a SQL query to create a schema named forum_example.", "response": "-- Reasoning:\nWe need to create a new schema named forum_example.\n\n-- Solution:\n```sql\nCREATE SCHEMA forum_example;\n```\n\n-- Explanation:\nThis statement creates a new schema named forum_example.\n\n-- Tests:\n-- 1. Verify schema exists\nPRAGMA schema_list;"}
{"seed": "/* Creates a schema named forum_example_private. */\nCREATE SCHEMA forum_example_private", "description": "Creates a schema named forum_example_private.", "concepts": ["CREATE SCHEMA"], "instruction": "Write a SQL query to create a schema named forum_example_private.", "response": "-- Reasoning:\nWe need to create a new schema named forum_example_private.\n\n-- Solution:\n```sql\nCREATE SCHEMA forum_example_private;\n```\n\n-- Explanation:\nThis statement creates a new schema named forum_example_private.\n\n-- Tests:\n-- 1. Verify schema exists\nPRAGMA schema_list;"}
{"seed": "/* Selects the name, last name, and last name of all employees from the empleado table and the sale key from the venta table. */\nSELECT \n    e.nombre,\n    e.apellido_paterno,\n    e.apellido_materno,\n    venta.clave\nFROM\n    empleado AS e\n        INNER JOIN\n    venta ON e.id_empleado = venta.id_empleado", "description": "Selects the name, last name, and last name of all employees from the empleado table and the sale key from the venta table.", "concepts": ["SELECT", "FROM", "INNER JOIN", "AS", "ON"], "instruction": "Write a SQL query to select the name, last name, and last name of all employees from the empleado table and the sale key from the venta table.", "response": "-- Reasoning:\nWe need to select the name, last name, and last name of all employees from the empleado table and the sale key from the venta table.\n\n-- Solution:\n```sql\nSELECT\n  e.nombre,\n  e.apellido_paterno,\n  e.apellido_materno,\n  v.clave_de_venta\nFROM\n  empleado e\n  JOIN venta v ON e.id_empleado = v.id_empleado;\n```\n\n-- Explanation:\nThis query joins the empleado and venta tables on the id_empleado column, and selects the name, last name, and last name of all employees and the sale key from the venta table.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT\n  e.nombre,\n  e.apellido_paterno,\n  e.apellido_materno,\n  v.clave_de_venta\nFROM\n  empleado e\n  JOIN venta v ON e.id_empleado = v.id_empleado;"}
{"seed": "/* Selects the distinct names of all articles sold in the venta table. */\nSELECT DISTINCT\n    articulo.nombre\nFROM\n    articulo\n        INNER JOIN\n    venta ON articulo.id_articulo = venta = id_articulo", "description": "Selects the distinct names of all articles sold in the venta table.", "concepts": ["SELECT DISTINCT", "INNER JOIN", "ON", "articulo", "venta", "id_articulo"], "instruction": "Write a SQL query to list the distinct names of all articles sold in the venta table.", "response": "-- Reasoning:\nWe need to list the distinct names of all articles sold in the venta table.\n\n-- Solution:\n```sql\nSELECT DISTINCT name\nFROM venta;\n```\n\n-- Explanation:\nThis query selects the distinct names from the venta table.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT DISTINCT name\nFROM venta;"}
{"seed": "/* Selects the clave and total of all sales from the venta table and the articulo table. */\nSELECT \n    clave, SUM(precio) AS total\nFROM\n    venta\n        JOIN\n    articulo ON venta.id_articulo = articulo.id_articulo\nGROUP BY clave", "description": "Selects the clave and total of all sales from the venta table and the articulo table.", "concepts": ["SELECT", "JOIN", "GROUP BY", "SUM", "AS"], "instruction": "Write a SQL query to list the clave and total of all sales from the venta table and the articulo table.", "response": "-- Reasoning:\nWe need to join the venta and articulo tables to get the clave and total of all sales.\n\n-- Solution:\n```sql\nSELECT v.clave, v.total\nFROM venta v\nINNER JOIN articulo a\nON v.clave = a.clave;\n```\n\n-- Explanation:\nThis query joins the venta and articulo tables on the clave column, and selects the clave and total columns from the venta table.\n\n-- Tests:\n-- 1. Verify the query returns the correct results\nSELECT clave, total\nFROM venta;"}
{"seed": "/* Creates a table named aud_log_procesos with 13 columns: id_log (integer primary key), nombre_proceso (text), fecha_inicio (datetime), fecha_fin (datetime), comentario (text), cantidad (int), correcto (varchar), usuario (text), ip (text), param (text), param_value (text), package (text), operacion (text), sql_text (text), sql_data (text). */\nCREATE TABLE aud_log_procesos (\n  id_log int(11) NOT NULL AUTO_INCREMENT,\n  nombre_proceso text NOT NULL,\n  fecha_inicio datetime DEFAULT NULL,\n  fecha_fin datetime DEFAULT NULL,\n  comentario text,\n  cantidad int(11) DEFAULT NULL,\n  correcto varchar(1) DEFAULT NULL,\n  usuario text,\n  ip text,\n  param text,\n  param_value text,\n  package text,\n  operacion text,\n  sql_text text,\n  sql_data text,\n  error_code varchar(10) default null,\n  error_text text default null,\n  PRIMARY KEY (id_log)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='tabla de registro de logs'", "description": "Creates a table named aud_log_procesos with 13 columns: id_log (integer primary key), nombre_proceso (text), fecha_inicio (datetime), fecha_fin (datetime), comentario (text), cantidad (int), correcto (varchar), usuario (text), ip (text), param (text), param_value (text), package (text), operacion (text), sql_text (text), sql_data (text).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named aud_log_procesos with 13 columns: id_log (integer primary key), nombre_proceso (text), fecha_inicio (datetime), fecha_fin (datetime), comentario (text), cantidad (int), correcto (varchar), usuario (text), ip (text), param (text), param_value (text), package (text), operacion (text), sql_text (text), sql_data (text).", "response": "-- Reasoning:\nWe need a new table named aud_log_procesos. It should have an integer primary key so that each log has a unique identifier, and a name column to store the process\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE aud_log_procesos (\n  id_log INT PRIMARY KEY,\n  nombre_proceso TEXT,\n  fecha_inicio DATETIME,\n  fecha_fin DATETIME,\n  comentario TEXT,\n  cantidad INT,\n  correcto VARCHAR(20),\n  usuario TEXT,\n  ip TEXT,\n  param TEXT,\n  param_value TEXT,\n  package TEXT,\n  operacion TEXT,\n  sql_text TEXT,\n  sql_data TEXT\n);\n```\n\n-- Explanation:\nThis statement defines the aud_log_procesos table with 13 columns:\n  \u2022 id_log: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nombre_proceso: variable\u2010length string up to 255 characters\n  \u2022 fecha_inicio: datetime\n  \u2022 fecha_fin: datetime\n  \u2022 comentario: variable\u2010length string up to 255 characters\n  \u2022 cantidad: integer\n  \u2022 correcto: variable\u2010length string up to 255 characters\n  \u2022 usuario: variable\u2010length string up to 255 characters\n  \u2022 ip: variable\u2010length string up to 2"}
{"seed": "/* Inserts a new row into the aud_log_procesos table with the values v_nombre_proceso, v_fecha_inicio. */\nINSERT INTO aud_log_procesos\n      (nombre_proceso,\n       fecha_inicio       \n       )\n    VALUES\n      (\n       v_nombre_proceso,\n       v_fecha_inicio\n\t\t )", "description": "Inserts a new row into the aud_log_procesos table with the values v_nombre_proceso, v_fecha_inicio.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the aud_log_procesos table with the values v_nombre_proceso, v_fecha_inicio.", "response": "-- Reasoning:\nWe need to insert a new row into the aud_log_procesos table with the values v_nombre_proceso and v_fecha_inicio.\n\n-- Solution:\n```sql\nINSERT INTO aud_log_procesos (nombre_proceso, fecha_inicio)\nVALUES (v_nombre_proceso, v_fecha_inicio);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the aud_log_procesos table with the values v_nombre_proceso and v_fecha_inicio.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM aud_log_procesos;"}
{"seed": "/* Updates the aud_log_procesos table with the values in the variables. */\nupdate aud_log_procesos\n       set fecha_fin    = v_fecha_fin,\n           comentario = v_comentario,\n           cantidad   = v_cant_reg,\n           correcto   = v_correcto\n     where id_log = v_id_log", "description": "Updates the aud_log_procesos table with the values in the variables.", "concepts": ["update", "aud_log_procesos", "set", "where"], "instruction": "Write a SQL query to update the aud_log_procesos table with the values in the variables.", "response": "-- Reasoning:\nWe need to update the aud_log_procesos table with the values in the variables.\n\n-- Solution:\n```sql\nUPDATE aud_log_procesos\nSET\n  fecha_inicio = ?,\n  fecha_fin = ?,\n  tiempo_ejecucion = ?,\n  estado = ?,\n  observaciones = ?\nWHERE\n  id_aud_log_procesos = ?;\n```\n\n-- Explanation:\nThis UPDATE statement updates the aud_log_procesos table with the values in the variables.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('aud_log_procesos');"}
{"seed": "/* Creates a table named guardian with five columns: GuardianID (integer primary key), FirstName (varchar), LastName (varchar), ParentSocial (varchar), and AddressID_FK (integer). The AddressID_FK column is a foreign key that references the AddressID column in the address table. */\nCREATE TABLE guardian (\n    GuardianID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    FirstName VARCHAR(45),\n    LastName VARCHAR(45),\n    ParentSocial VARCHAR(45),\n    AddressID_FK INT NOT NULL,\n    FOREIGN KEY (AddressID_FK)\n        REFERENCES address (AddressID)\n        ON UPDATE CASCADE ON DELETE RESTRICT\n)", "description": "Creates a table named guardian with five columns: GuardianID (integer primary key), FirstName (varchar), LastName (varchar), ParentSocial (varchar), and AddressID_FK (integer). The AddressID_FK column is a foreign key that references the AddressID column in the address table.", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT NULL", "FOREIGN KEY", "REFERENCES", "ON UPDATE", "ON DELETE", "RESTRICT"], "instruction": "Write a SQL query to create a table named guardian with five columns: GuardianID (integer primary key), FirstName (varchar), LastName (varchar), ParentSocial (varchar), and AddressID_FK (integer). The AddressID_FK column is a foreign key that references the AddressID column in the address table.", "response": "-- Reasoning:\nWe need a new table named guardian. It should have an integer primary key so that each guardian has a unique identifier, and a name column to store the guardian\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE guardian (\n  GuardianID INT PRIMARY KEY,\n  FirstName VARCHAR(255),\n  LastName VARCHAR(255),\n  ParentSocial VARCHAR(255),\n  AddressID_FK INT\n);\n```\n\n-- Explanation:\nThis statement defines the guardian table with five columns:\n  \u2022 GuardianID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 FirstName: variable\u2010length string up to 255 characters\n  \u2022 LastName: variable\u2010length string up to 255 characters\n  \u2022 ParentSocial: variable\u2010length string up to 255 characters\n  \u2022 AddressID_FK: integer, foreign key to the address table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('guardian');"}
{"seed": "/* Drops the table named oauth_client_details if it exists. */\nDROP TABLE IF EXISTS `oauth_client_details`", "description": "Drops the table named oauth_client_details if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "oauth_client_details"], "instruction": "Write a SQL query to drop the table named oauth_client_details if it exists.", "response": "-- Reasoning:\nWe need to drop the table named oauth_client_details if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS oauth_client_details;\n```\n\n-- Explanation:\nThis DROP statement deletes the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('oauth_client_details');"}
{"seed": "/* Creates a table named oauth_client_details with the given columns. */\nCREATE TABLE `oauth_client_details` (\n  `client_id` varchar(255) NOT NULL,\n  `resource_ids` varchar(255) DEFAULT NULL,\n  `client_secret` varchar(255) DEFAULT NULL,\n  `scope` varchar(255) DEFAULT NULL,\n  `authorized_grant_types` varchar(255) DEFAULT NULL,\n  `web_server_redirect_uri` varchar(255) DEFAULT NULL,\n  `authorities` varchar(255) DEFAULT NULL,\n  `access_token_validity` int(11) DEFAULT NULL,\n  `refresh_token_validity` int(11) DEFAULT NULL,\n  `additional_information` text,\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `archived` tinyint(1) DEFAULT '0',\n  `trusted` tinyint(1) DEFAULT '0',\n  `autoapprove` varchar(255) DEFAULT 'false',\n  PRIMARY KEY (`client_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named oauth_client_details with the given columns.", "concepts": ["CREATE TABLE", "VARCHAR", "INT", "PRIMARY KEY", "DEFAULT", "CREATE TABLE", "TIMESTAMP", "DEFAULT CURRENT_TIMESTAMP", "TEXT", "TEXT", "TEXT", "TEXT"], "instruction": "Write a SQL query to create a table named oauth_client_details with the given columns.\n\nExample 2:\nSQL:\n```sql\n/* Return the number of orders placed by each customer */\nSELECT customer_id, COUNT(order_id) AS number_of_orders\nFROM orders\nGROUP BY customer_id\nORDER BY number_of_orders DESC;\n```\nConcepts: [\"SELECT\", \"COUNT\", \"FROM\", \"GROUP BY\", \"ORDER BY\"]\nInstruction: Write a SQL query to list the number of orders placed by each customer, grouped by customer, and sorted from highest to lowest.", "response": "-- Reasoning:\nWe need to create a table named oauth_client_details with the given columns.\n\n-- Solution:\n```sql\nCREATE TABLE oauth_client_details (\n  client_id VARCHAR(255) PRIMARY KEY,\n  resource_ids VARCHAR(255),\n  client_secret VARCHAR(255),\n  scope VARCHAR(255),\n  authorized_grant_types VARCHAR(255),\n  web_server_redirect_uri VARCHAR(255),\n  authorities VARCHAR(255),\n  access_token_validity INTEGER,\n  refresh_token_validity INTEGER,\n  additional_information VARCHAR(4096),\n  autoapprove VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement creates the oauth_client_details table with the given columns:\n  \u2022 client_id: varchar(255) primary key\n  \u2022 resource_ids: varchar(255)\n  \u2022 client_secret: varchar(255)\n  \u2022 scope: varchar(255)\n  \u2022 authorized_grant_types: varchar(255)\n  \u2022 web_server_redirect_uri: varchar(255)\n  \u2022 authorities: varchar(255)\n  \u2022 access_token_validity: integer\n  \u2022 refresh_token_validity: integer\n  \u2022 additional_information: varchar(4096)\n  \u2022 auto"}
{"seed": "/* Inserts a new row into the oauth_client_details table with the given values. */\nINSERT INTO `oauth_client_details` VALUES ('mobile-client', 'mobile-resource', 'mobile', 'read,write', 'password,refresh_token', null, 'ROLE_CLIENT', null, null, null, '2017-11-10 17:20:31', '0', '0', 'false')", "description": "Inserts a new row into the oauth_client_details table with the given values.", "concepts": ["INSERT INTO", "VALUES", "oauth_client_details", "mobile-client", "mobile-resource", "mobile", "read", "write", "password", "refresh_token"], "instruction": "Write a SQL query to insert a new row into the oauth_client_details table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the oauth_client_details table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO oauth_client_details (\n  client_id,\n  resource_ids,\n  client_secret,\n  scope,\n  authorized_grant_types,\n  web_server_redirect_uri,\n  authorities,\n  access_token_validity,\n  refresh_token_validity,\n  additional_information,\n  autoapprove\n)\nVALUES (\n  'client',\n  'resource',\n  'secret',\n  'read,write',\n  'authorization_code,refresh_token',\n  'http://localhost:8080/callback',\n  'ROLE_CLIENT,ROLE_TRUSTED_CLIENT',\n  36000,\n  36000,\n  '{}',\n  'true'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the oauth_client_details table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM oauth_client_details;"}
{"seed": "/* Drops the table sys_user if it exists. */\nDROP TABLE IF EXISTS `sys_user`", "description": "Drops the table sys_user if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table sys_user if it exists.", "response": "-- Reasoning:\nWe need to delete the table sys_user if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_user;\n```\n\n-- Explanation:\nThis statement deletes the table sys_user if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_user');"}
{"seed": "/* Creates a table named sys_user with the following columns: id (integer primary key), guid (varchar), create_time (datetime), archived (tinyint), email (varchar), password (varchar), phone (varchar), username (varchar), default_user (tinyint), last_login_time (datetime). */\nCREATE TABLE `sys_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `guid` varchar(255) NOT NULL,\n  `create_time` datetime DEFAULT NULL,\n  `archived` tinyint(1) DEFAULT '0',\n  `email` varchar(255) DEFAULT NULL,\n  `password` varchar(255) NOT NULL,\n  `phone` varchar(255) DEFAULT NULL,\n  `username` varchar(255) NOT NULL,\n  `default_user` tinyint(1) DEFAULT '0',\n  `last_login_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `guid` (`guid`),\n  UNIQUE KEY `username` (`username`)\n) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8", "description": "Creates a table named sys_user with the following columns: id (integer primary key), guid (varchar), create_time (datetime), archived (tinyint), email (varchar), password (varchar), phone (varchar), username (varchar), default_user (tinyint), last_login_time (datetime).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "DEFAULT", "DEFAULT_USER", "LAST_LOGIN_TIME", "TINYINT"], "instruction": "Write a SQL query to create a table named sys_user with the following columns: id (integer primary key), guid (varchar), create_time (datetime), archived (tinyint), email (varchar), password (varchar), phone (varchar), username (varchar), default_user (tinyint), last_login_time (datetime).", "response": "-- Reasoning:\nWe need a new table named sys_user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE sys_user (\n  id INT PRIMARY KEY,\n  guid VARCHAR(255),\n  create_time DATETIME,\n  archived TINYINT,\n  email VARCHAR(255),\n  password VARCHAR(255),\n  phone VARCHAR(255),\n  username VARCHAR(255),\n  default_user TINYINT,\n  last_login_time DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 guid: variable\u2010length string up to 255 characters\n  \u2022 create_time: datetime\n  \u2022 archived: tinyint\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 phone: variable\u2010length string up to 255 characters\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 default_user: tinyint\n  \u2022 last_login_time: datetime\n\n-- Tests:\n-- 1. Verify table exists"}
{"seed": "/* Inserts a new user with id 21, username admin@wdcy.cc, password , and phone number 028-1234567 into the sys_user table. */\nINSERT INTO `sys_user` VALUES ('21', '29f6004fb1b0466f9572b02bf2ac1be8', '2017-11-13 09:25:21', '0', 'admin@wdcy.cc', '21232f297a57a5a743894a0e4a801fc3', '028-1234567', 'admin', '1', null)", "description": "Inserts a new user with id 21, username admin@wdcy.cc, password , and phone number 028-1234567 into the sys_user table.", "concepts": ["INSERT INTO", "VALUES", "sys_user", "21", "29f6004fb1b0466f9"], "instruction": "Write a SQL query to insert a new user with id 21, username admin@wdcy.cc, password , and phone number 028-1234567 into the sys_user table.", "response": "-- Reasoning:\nWe need to insert a new user into the sys_user table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO sys_user (id, username, password, phone)\nVALUES (21, 'admin@wdcy.cc', '', '028-1234567');\n```\n\n-- Explanation:\nThis statement inserts a new row into the sys_user table with the following values:\n  \u2022 id: 21\n  \u2022 username: admin@wdcy.cc\n  \u2022 password:\n  \u2022 phone: 028-1234567\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM sys_user;"}
{"seed": "/* Inserts a new user into the sys_user table with the given values. */\nINSERT INTO `sys_user` VALUES ('22', '55b713df1c6f423e842ad68668523c49', '2017-11-13 09:25:21', '0', 'unity@wdcy.cc', '439b3a25b555b3bc8667a09a036ae70c', '', 'unity', '0', null)", "description": "Inserts a new user into the sys_user table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user into the sys_user table with the given values.", "response": "-- Reasoning:\nWe need to insert a new user into the sys_user table. The user should have the given values:\n  \u2022 user_id: 1\n  \u2022 name: ''\n  \u2022 email: ''\n  \u2022 password: ''\n\n-- Solution:\n```sql\nINSERT INTO sys_user (user_id, name, email, password)\nVALUES (1, '', '', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_user table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM sys_user;"}
{"seed": "/* Drops the table sys_user_privilege if it exists. */\nDROP TABLE IF EXISTS `sys_user_privilege`", "description": "Drops the table sys_user_privilege if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the sys_user_privilege table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_user_privilege table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_user_privilege;\n```\n\n-- Explanation:\nThis DROP statement drops the sys_user_privilege table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_user_privilege');"}
{"seed": "/* Creates a table named sys_user_privilege with two columns: user_id (integer) and privilege (varchar). The user_id column is indexed. */\nCREATE TABLE `sys_user_privilege` (\n  `user_id` int(11) DEFAULT NULL,\n  `privilege` varchar(255) DEFAULT NULL,\n  KEY `user_id_index` (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sys_user_privilege with two columns: user_id (integer) and privilege (varchar). The user_id column is indexed.", "concepts": ["CREATE TABLE", "KEY", "INDEX", "DEFAULT", "CHARSET", "ENGINE", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named sys_user_privilege with two columns: user_id (integer) and privilege (varchar). The user_id column is indexed.", "response": "-- Reasoning:\nWe need a new table named sys_user_privilege. It should have an integer user_id column and a varchar privilege column. The user_id column should be indexed so that we can quickly find the privileges for a given user.\n\n-- Solution:\n```sql\nCREATE TABLE sys_user_privilege (\n  user_id INT,\n  privilege VARCHAR(255),\n  PRIMARY KEY (user_id)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user_privilege table with two columns:\n  \u2022 user_id: integer, indexed\n  \u2022 privilege: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_user_privilege');"}
{"seed": "/* Inserts a new row into the sys_user_privilege table with the values 22 and UNITY. */\nINSERT INTO `sys_user_privilege` VALUES ('22', 'UNITY')", "description": "Inserts a new row into the sys_user_privilege table with the values 22 and UNITY.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_user_privilege table with the values 22 and UNITY.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_user_privilege table with the values 22 and UNITY.\n\n-- Solution:\n```sql\nINSERT INTO sys_user_privilege (user_id, privilege)\n  VALUES (22, 'UNITY');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_user_privilege table with the values 22 and UNITY.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_user_privilege;"}
{"seed": "/* Inserts a new row into the sys_user_privilege table with the id 23 and privilege MOBILE. */\nINSERT INTO `sys_user_privilege` VALUES ('23', 'MOBILE')", "description": "Inserts a new row into the sys_user_privilege table with the id 23 and privilege MOBILE.", "concepts": ["INSERT INTO", "VALUES", "MOBILE"], "instruction": "Write a SQL query to insert a new row into the sys_user_privilege table with the id 23 and privilege MOBILE.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_user_privilege table. It should have an id of 23 and a privilege of MOBILE.\n\n-- Solution:\n```sql\nINSERT INTO sys_user_privilege (id, privilege)\nVALUES (23, 'MOBILE');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_user_privilege table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_user_privilege;"}
{"seed": "/* Drops the table named pres_details if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.pres_details", "description": "Drops the table named pres_details if it exists in the studentdb database.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named pres_details if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named pres_details if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS pres_details;\n```\n\n-- Explanation:\nThis statement drops the table named pres_details if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('pres_details');"}
{"seed": "/* Drops the table named quote if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.quote", "description": "Drops the table named quote if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "quote"], "instruction": "Write a SQL query to drop the table named quote if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named quote if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS quote;\n```\n\n-- Explanation:\nThis statement drops the table named quote if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('quote');"}
{"seed": "/* Drops the table named document_signer if it exists. */\nDROP TABLE IF EXISTS studentdb.document_signer", "description": "Drops the table named document_signer if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "document_signer"], "instruction": "Write a SQL query to drop the table named document_signer if it exists.", "response": "-- Reasoning:\nWe need to drop the document_signer table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS document_signer;\n```\n\n-- Explanation:\nThis statement drops the document_signer table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('document_signer');"}
{"seed": "/* Drops the table named ticket if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.ticket", "description": "Drops the table named ticket if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "ticket"], "instruction": "Write a SQL query to drop the table named ticket if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named ticket if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS ticket;\n```\n\n-- Explanation:\nThis statement drops the table named ticket if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('ticket');"}
{"seed": "/* Drops the table named military_branch if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.military_branch", "description": "Drops the table named military_branch if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "military_branch"], "instruction": "Write a SQL query to drop the table named military_branch if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named military_branch if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS military_branch;\n```\n\n-- Explanation:\nThis DROP statement removes the military_branch table from the studentdb database if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('military_branch');"}
{"seed": "/* Drops the table named pres if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.pres", "description": "Drops the table named pres if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "pres"], "instruction": "Write a SQL query to drop the table named pres if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named pres if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS pres;\n```\n\n-- Explanation:\nThis statement drops the table named pres if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('pres');"}
{"seed": "/* Drops the table named vice_pres if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.vice_pres", "description": "Drops the table named vice_pres if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "vice_pres"], "instruction": "Write a SQL query to drop the table named vice_pres if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named vice_pres if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS vice_pres;\n```\n\n-- Explanation:\nThis statement drops the table named vice_pres if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('vice_pres');"}
{"seed": "/* Drops the table named first_lady if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.first_lady", "description": "Drops the table named first_lady if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "first_lady"], "instruction": "Write a SQL query to drop the table named first_lady if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named first_lady if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS first_lady;\n```\n\n-- Explanation:\nThis statement drops the table named first_lady if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('first_lady');"}
{"seed": "/* Drops the table named party if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.party", "description": "Drops the table named party if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "party"], "instruction": "Write a SQL query to drop the table named party if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named party if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS party;\n```\n\n-- Explanation:\nThis statement drops the table named party if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('party');"}
{"seed": "/* Drops the table named document if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.document", "description": "Drops the table named document if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "document"], "instruction": "Write a SQL query to drop the table named document if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named document if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS document;\n```\n\n-- Explanation:\nThis statement drops the document table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('document');"}
{"seed": "/* Drops the table named state if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.state", "description": "Drops the table named state if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "state"], "instruction": "Write a SQL query to drop the table named state if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named state if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS state;\n```\n\n-- Explanation:\nThis statement drops the table named state if it exists in the studentdb database.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('state');"}
{"seed": "/* Drops the table named reason_left_office if it exists in the studentdb database. */\nDROP TABLE IF EXISTS studentdb.reason_left_office", "description": "Drops the table named reason_left_office if it exists in the studentdb database.", "concepts": ["DROP TABLE", "IF EXISTS", "studentdb", "reason_left_office"], "instruction": "Write a SQL query to drop the table named reason_left_office if it exists in the studentdb database.", "response": "-- Reasoning:\nWe need to drop the table named reason_left_office if it exists in the studentdb database.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS reason_left_office;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('reason_left_office');"}
{"seed": "/* Creates a table named pres in the studentdb database with three columns: pres_id (integer primary key), first (varchar), middle (varchar), and last (varchar). */\nCREATE TABLE IF NOT EXISTS studentdb.pres (\n   pres_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   first VARCHAR(80) NOT NULL,\n   middle VARCHAR(80),\n   last VARCHAR(80) NOT NULL\n)", "description": "Creates a table named pres in the studentdb database with three columns: pres_id (integer primary key), first (varchar), middle (varchar), and last (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT", "NULL", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named pres in the studentdb database with three columns: pres_id (integer primary key), first (varchar), middle (varchar), and last (varchar).", "response": "-- Reasoning:\nWe need a new table named pres. It should have an integer primary key so that each president has a unique identifier, and three name columns to store the president\u2019s first, middle, and last names.\n\n-- Solution:\n```sql\nCREATE TABLE pres (\n  pres_id INT PRIMARY KEY,\n  first VARCHAR(255),\n  middle VARCHAR(255),\n  last VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the pres table with four columns:\n  \u2022 pres_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 first: variable\u2010length string up to 255 characters\n  \u2022 middle: variable\u2010length string up to 255 characters\n  \u2022 last: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('pres');"}
{"seed": "/* Creates a table named vice_pres in the studentdb database with three columns: vice_pres_id (integer primary key), first (varchar), middle (varchar), and last (varchar). */\nCREATE TABLE IF NOT EXISTS studentdb.vice_pres (\n   vice_pres_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   first VARCHAR(80) NOT NULL,\n   middle VARCHAR(80),\n   last VARCHAR(80) NOT NULL\n)", "description": "Creates a table named vice_pres in the studentdb database with three columns: vice_pres_id (integer primary key), first (varchar), middle (varchar), and last (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT", "NULL", "INT", "AUTO_INCREMENT", "IF"], "instruction": "Write a SQL query to create a table named vice_pres in the studentdb database with three columns: vice_pres_id (integer primary key), first (varchar), middle (varchar), and last (varchar).", "response": "-- Reasoning:\nWe need a new table named vice_pres. It should have an integer primary key so that each vice president has a unique identifier, and three name columns to store the vice president\u2019s first, middle, and last names.\n\n-- Solution:\n```sql\nCREATE TABLE vice_pres (\n  vice_pres_id INT PRIMARY KEY,\n  first VARCHAR(255),\n  middle VARCHAR(255),\n  last VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the vice_pres table with four columns:\n  \u2022 vice_pres_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 first: variable\u2010length string up to 255 characters\n  \u2022 middle: variable\u2010length string up to 255 characters\n  \u2022 last: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('vice_pres');"}
{"seed": "/* Creates a table named first_lady in the studentdb database with four columns: first_lady_id (integer primary key), first (varchar), middle (varchar), and last (varchar). */\nCREATE TABLE IF NOT EXISTS studentdb.first_lady (\n   first_lady_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   first VARCHAR(80) NOT NULL,\n   middle VARCHAR(80),\n   last VARCHAR(80) NOT NULL\n)", "description": "Creates a table named first_lady in the studentdb database with four columns: first_lady_id (integer primary key), first (varchar), middle (varchar), and last (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT", "NULL", "INT", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named first_lady in the studentdb database with four columns: first_lady_id (integer primary key), first (varchar), middle (varchar), and last (varchar).", "response": "-- Reasoning:\nWe need a new table named first_lady. It should have an integer primary key so that each first lady has a unique identifier, and three name columns to store the first, middle, and last names.\n\n-- Solution:\n```sql\nCREATE TABLE first_lady (\n  first_lady_id INT PRIMARY KEY,\n  first VARCHAR(255),\n  middle VARCHAR(255),\n  last VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the first_lady table with four columns:\n  \u2022 first_lady_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 first: variable\u2010length string up to 255 characters\n  \u2022 middle: variable\u2010length string up to 255 characters\n  \u2022 last: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('first_lady');"}
{"seed": "/* Creates a table named party in the studentdb database with three columns: party_id (integer primary key), name (varchar), and a unique constraint on the name column. */\nCREATE TABLE IF NOT EXISTS studentdb.party (\n   party_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   name VARCHAR(80) NOT NULL,\n   CONSTRAINT uc_party UNIQUE (name)\n)", "description": "Creates a table named party in the studentdb database with three columns: party_id (integer primary key), name (varchar), and a unique constraint on the name column.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE", "CONSTRAINT", "INT", "VARCHAR", "NOT", "NULL", "DEFAULT"], "instruction": "Write a SQL query to create a table named party in the studentdb database with three columns: party_id (integer primary key), name (varchar), and a unique constraint on the name column.", "response": "-- Reasoning:\nWe need a new table named party. It should have an integer primary key so that each party has a unique identifier, and a name column to store the party\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE party (\n  party_id INT PRIMARY KEY,\n  name VARCHAR(255) UNIQUE\n);\n```\n\n-- Explanation:\nThis statement defines the party table with two columns:\n  \u2022 party_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('party');"}
{"seed": "/* Creates a table named document in the studentdb database with two columns: document_id (integer primary key), title (varchar). The table will be created if it does not exist, and the title column will be unique. */\nCREATE TABLE IF NOT EXISTS studentdb.document (\n   document_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   title VARCHAR(80) NOT NULL,\n   CONSTRAINT uc_document UNIQUE (title)\n)", "description": "Creates a table named document in the studentdb database with two columns: document_id (integer primary key), title (varchar). The table will be created if it does not exist, and the title column will be unique.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "PRIMARY KEY", "AUTO_INCREMENT", "CONSTRAINT", "UNIQUE"], "instruction": "Write a SQL query to create a table named document in the studentdb database with two columns: document_id (integer primary key), title (varchar). The table will be created if it does not exist, and the title column will be unique.", "response": "-- Reasoning:\nWe need to create a new table named document in the studentdb database. It should have an integer primary key, and a title column to store the document\u2019s title as text. The table should be created if it does not exist, and the title column should be unique.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS document (\n  document_id INT PRIMARY KEY,\n  title VARCHAR(255) UNIQUE\n);\n```\n\n-- Explanation:\nThis statement creates the document table with two columns:\n  \u2022 document_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 title: variable\u2010length string up to 255 characters, marked UNIQUE so it cannot be null and is unique\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('document');"}
{"seed": "/* Creates a table named state in the studentdb database with two columns: state_id (integer primary key), name (varchar). The table will not be created if it already exists. */\nCREATE TABLE IF NOT EXISTS studentdb.state (\n   state_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   name VARCHAR(80) NOT NULL,\n   CONSTRAINT uc_state UNIQUE (name)\n)", "description": "Creates a table named state in the studentdb database with two columns: state_id (integer primary key), name (varchar). The table will not be created if it already exists.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "CONSTRAINT", "UNIQUE"], "instruction": "Write a SQL query to create a table named state in the studentdb database with two columns: state_id (integer primary key), name (varchar). The table will not be created if it already exists.", "response": "-- Reasoning:\nWe need a new table named state. It should have an integer primary key so that each state has a unique identifier, and a name column to store the state\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS state (\n  state_id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the state table with two columns:\n  \u2022 state_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('state');"}
{"seed": "/* Creates a table named reason_left_office in the studentdb database with two columns: reason_left_office_id (integer primary key), and reason (varchar). The table is created only if it does not already exist. */\nCREATE TABLE IF NOT EXISTS studentdb.reason_left_office (\n   reason_left_office_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   reason VARCHAR(80) NOT NULL,\n   CONSTRAINT uc_reason_left_office UNIQUE (reason)\n)", "description": "Creates a table named reason_left_office in the studentdb database with two columns: reason_left_office_id (integer primary key), and reason (varchar). The table is created only if it does not already exist.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "PRIMARY KEY", "AUTO_INCREMENT", "CONSTRAINT", "UNIQUE"], "instruction": "Write a SQL query to create a table named reason_left_office in the studentdb database with two columns: reason_left_office_id (integer primary key), and reason (varchar). The table is created only if it does not already exist.", "response": "-- Reasoning:\nWe need to create a new table named reason_left_office in the studentdb database. It should have an integer primary key so that each reason has a unique identifier, and a reason column to store the reason for leaving the office as text.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS reason_left_office (\n  reason_left_office_id INT PRIMARY KEY,\n  reason VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement creates the reason_left_office table with two columns:\n  \u2022 reason_left_office_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 reason: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('reason_left_office');"}
{"seed": "/* Creates a table named military_branch in the studentdb database with two columns: military_branch_id (integer primary key), and branch (varchar). The table will not be created if it already exists. */\nCREATE TABLE IF NOT EXISTS studentdb.military_branch (\n   military_branch_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n   branch VARCHAR(80) NOT NULL,\n   CONSTRAINT uc_military_branch UNIQUE (branch)\n)", "description": "Creates a table named military_branch in the studentdb database with two columns: military_branch_id (integer primary key), and branch (varchar). The table will not be created if it already exists.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "PRIMARY KEY", "AUTO_INCREMENT", "CONSTRAINT", "UNIQUE", "NOT", "NULL", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named military_branch in the studentdb database with two columns: military_branch_id (integer primary key), and branch (varchar). The table will not be created if it already exists.", "response": "-- Reasoning:\nWe need to create a new table named military_branch in the studentdb database. It should have an integer primary key so that each branch has a unique identifier, and a branch column to store the branch name as text.\n\n-- Solution:\n```sql\nCREATE TABLE IF NOT EXISTS military_branch (\n  military_branch_id INTEGER PRIMARY KEY,\n  branch VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement creates the military_branch table with two columns:\n  \u2022 military_branch_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 branch: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('military_branch');"}
{"seed": "/* Creates a table named ticket in the studentdb database with five columns: ticket_id (integer primary key), pres_id (integer), vice_pres_id (integer), party_id (integer), and slogan (varchar). The ticket_id column is set to auto increment, the pres_id column is a foreign key referencing the pres_id column in the pres table, the vice_pres_id column is a foreign key referencing the vice_pres_id column in */\nCREATE TABLE IF NOT EXISTS studentdb.ticket (\n    ticket_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    pres_id INT NOT NULL,\n    vice_pres_id INT,\n    party_id INT NOT NULL,\n    slogan VARCHAR(80),\n    CONSTRAINT fk_ticket_pres\n        FOREIGN KEY(pres_id) \n            REFERENCES studentdb.pres(pres_id),\n    CONSTRAINT fk_ticket_vice_pres\n        FOREIGN KEY(vice_pres_id) \n            REFERENCES studentdb.vice_pres(vice_pres_id),\n    CONSTRAINT fk_ticket_party\n        FOREIGN KEY(party_id) \n            REFERENCES studentdb.party(party_id)\n)", "description": "Creates a table named ticket in the studentdb database with five columns: ticket_id (integer primary key), pres_id (integer), vice_pres_id (integer), party_id (integer), and slogan (varchar). The ticket_id column is set to auto increment, the pres_id column is a foreign key referencing the pres_id column in the pres table, the vice_pres_id column is a foreign key referencing the vice_pres_id column in", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "PRIMARY KEY", "AUTO_INCREMENT", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "INT", "NOT", "NULL", "VARCHAR"], "instruction": "Write a SQL query to create a table named ticket in the studentdb database with five columns: ticket_id (integer primary key), pres_id (integer), vice_pres_id (integer), party_id (integer), and slogan (varchar). The ticket_id column is set to auto increment, the pres_id column is a foreign key referencing the pres_id column in the pres table, the vice_pres_id column is a foreign key referencing the vice_pres_id column in the vice_pres table, and the party_id column is a foreign key referencing the party_id column in the party table.", "response": "-- Reasoning:\nWe need to create a new table named ticket in the studentdb database. It should have five columns:\n  \u2022 ticket_id: integer primary key, auto increment\n  \u2022 pres_id: integer, foreign key referencing pres_id in pres table\n  \u2022 vice_pres_id: integer, foreign key referencing vice_pres_id in vice_pres table\n  \u2022 party_id: integer, foreign key referencing party_id in party table\n  \u2022 slogan: varchar up to 255 characters\n\n-- Solution:\n```sql\nCREATE TABLE ticket (\n  ticket_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  pres_id INTEGER REFERENCES pres(pres_id),\n  vice_pres_id INTEGER REFERENCES vice_pres(vice_pres_id),\n  party_id INTEGER REFERENCES party(party_id),\n  slogan VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement creates the ticket table with five columns:\n  \u2022 ticket_id: integer, primary key, auto increment\n  \u2022 pres_id: integer, foreign key referencing pres_id in pres table\n  \u2022 vice_pres_id: integer, foreign key referencing vice_pres_id in vice_pres table\n  \u2022 party_id: integer, foreign key referencing party_id in party table\n  \u2022 slogan: varchar up to 255 characters\n\n-- Tests:\n-- 1. Verify"}
{"seed": "/* Creates a table named document_signer in the studentdb database with four columns: document_signer_id (integer primary key), document_id (integer), pres_id (integer), and two foreign key constraints. The first foreign key constraint, fk_document_signer_document, references the document_id column in the document table. The second foreign key constraint, fk_document_signer_pres, references the pres_id column in the pres table. */\nCREATE TABLE IF NOT EXISTS studentdb.document_signer (\n    document_signer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    document_id INT NOT NULL,\n    pres_id INT NOT NULL,\n    CONSTRAINT fk_document_signer_document\n        FOREIGN KEY(document_id) \n            REFERENCES studentdb.document(document_id),\n    CONSTRAINT fk_document_signer_pres\n        FOREIGN KEY(pres_id) \n            REFERENCES studentdb.pres(pres_id)\n)", "description": "Creates a table named document_signer in the studentdb database with four columns: document_signer_id (integer primary key), document_id (integer), pres_id (integer), and two foreign key constraints. The first foreign key constraint, fk_document_signer_document, references the document_id column in the document table. The second foreign key constraint, fk_document_signer_pres, references the pres_id column in the pres table.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named document_signer in the studentdb database with four columns: document_signer_id (integer primary key), document_id (integer), pres_id (integer), and two foreign key constraints. The first foreign key constraint, fk_document_signer_document, references the document_id column in the document table. The second foreign key constraint, fk_document_signer_pres, references the pres_id column in the pres table.", "response": "-- Reasoning:\nWe need a new table named document_signer. It should have an integer primary key so that each document signer has a unique identifier, and two foreign key constraints. The first references the document_id column in the document table, and the second references the pres_id column in the pres table.\n\n-- Solution:\n```sql\nCREATE TABLE document_signer (\n  document_signer_id INT PRIMARY KEY,\n  document_id INT,\n  pres_id INT,\n  FOREIGN KEY (document_id) REFERENCES document (document_id),\n  FOREIGN KEY (pres_id) REFERENCES pres (pres_id)\n);\n```\n\n-- Explanation:\nThis statement defines the document_signer table with four columns:\n  \u2022 document_signer_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 document_id: integer, references the document_id column in the document table\n  \u2022 pres_id: integer, references the pres_id column in the pres table\n  \u2022 two foreign key constraints\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('document_signer');"}
{"seed": "/* Creates a table named quote in the studentdb database with three columns: quote_id (integer primary key), title (varchar), and pres_id (integer). The quote_id column is set to auto increment and the pres_id column is a foreign key that references the pres_id column in the pres table. */\nCREATE TABLE IF NOT EXISTS studentdb.quote (\n    quote_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    pres_id INT NOT NULL,\n    CONSTRAINT fk_quote_pres\n        FOREIGN KEY(pres_id) \n            REFERENCES studentdb.pres(pres_id)\n)", "description": "Creates a table named quote in the studentdb database with three columns: quote_id (integer primary key), title (varchar), and pres_id (integer). The quote_id column is set to auto increment and the pres_id column is a foreign key that references the pres_id column in the pres table.", "concepts": ["CREATE TABLE", "IF NOT EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to create a table named quote in the studentdb database with three columns: quote_id (integer primary key), title (varchar), and pres_id (integer). The quote_id column is set to auto increment and the pres_id column is a foreign key that references the pres_id column in the pres table.", "response": "-- Reasoning:\nWe need a new table named quote in the studentdb database. It should have an integer primary key, title, and pres_id. The quote_id column should be auto incremented and the pres_id column should be a foreign key that references the pres_id column in the pres table.\n\n-- Solution:\n```sql\nCREATE TABLE quote (\n  quote_id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title VARCHAR(255),\n  pres_id INTEGER,\n  FOREIGN KEY (pres_id) REFERENCES pres(pres_id)\n);\n```\n\n-- Explanation:\nThis statement defines the quote table with three columns:\n  \u2022 quote_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 title: variable\u2010length string up to 255 characters\n  \u2022 pres_id: integer, foreign key that references the pres_id column in the pres table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('quote');"}
{"seed": "/* Creates a table named pres_details in the studentdb database with the following columns: pres_details_id (integer primary key), pres_id (integer), vice_pres_id (integer), party_id (integer), state_id (integer), terms_served (integer), reason_left_office_id (integer), military_branch_id (integer), first_lady_id (integer), living (boolean). The table has foreign key constraints on pres_ */\nCREATE TABLE IF NOT EXISTS studentdb.pres_details (\n    pres_details_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    pres_id INT NOT NULL,\n    vice_pres_id INT,\n    party_id INT NOT NULL,\n    state_id INT NOT NULL,\n    terms_served INT NOT NULL,\n    reason_left_office_id INT NOT NULL,\n    military_branch_id INT,\n    first_lady_id INT,\n    living BOOLEAN NOT NULL,\n    CONSTRAINT fk_pres_details_pres\n        FOREIGN KEY(pres_id) \n            REFERENCES studentdb.pres(pres_id),\n    CONSTRAINT fk_pres_details_vice_pres\n        FOREIGN KEY(vice_pres_id) \n            REFERENCES studentdb.vice_pres(vice_pres_id),\n    CONSTRAINT fk_pres_details_party\n        FOREIGN KEY(party_id) \n            REFERENCES studentdb.party(party_id),\n    CONSTRAINT fk_pres_details_state\n        FOREIGN KEY(state_id) \n            REFERENCES studentdb.state(state_id),\n    CONSTRAINT fk_pres_details_reason_left_office\n        FOREIGN KEY(reason_left_office_id) \n            REFERENCES studentdb.reason_left_office(reason_left_office_id),\n    CONSTRAINT fk_pres_details_military_branch\n        FOREIGN KEY(military_branch_id) \n            REFERENCES studentdb.military_branch(military_branch_id),\n    CONSTRAINT fk_pres_details_first_lady\n        FOREIGN KEY(first_lady_id) \n            REFERENCES studentdb.first_lady(first_lady_id)\n)", "description": "Creates a table named pres_details in the studentdb database with the following columns: pres_details_id (integer primary key), pres_id (integer), vice_pres_id (integer), party_id (integer), state_id (integer), terms_served (integer), reason_left_office_id (integer), military_branch_id (integer), first_lady_id (integer), living (boolean). The table has foreign key constraints on pres_", "concepts": ["CREATE TABLE", "IF NOT EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "CONSTRAINT", "INT", "NOT NULL", "AUTO_INCREMENT"], "instruction": "Write a SQL query to create a table named pres_details in the studentdb database with the following columns: pres_details_id (integer primary key), pres_id (integer), vice_pres_id (integer), party_id (integer), state_id (integer), terms_served (integer), reason_left_office_id (integer), military_branch_id (integer), first_lady_id (integer), living (boolean). The table has foreign key constraints on pres_ and vice_pres, party, state, reason_left_office, military_branch, and first_lady.", "response": "-- Reasoning:\nWe need a new table named pres_details. It should have an integer primary key so that each row has a unique identifier, and a boolean column named living to indicate whether the president is still alive.\n\n-- Solution:\n```sql\nCREATE TABLE pres_details (\n  pres_details_id INT PRIMARY KEY,\n  pres_id INT,\n  vice_pres_id INT,\n  party_id INT,\n  state_id INT,\n  terms_served INT,\n  reason_left_office_id INT,\n  military_branch_id INT,\n  first_lady_id INT,\n  living BOOLEAN,\n  FOREIGN KEY (pres_id) REFERENCES pres (pres_id),\n  FOREIGN KEY (vice_pres_id) REFERENCES vice_pres (vice_pres_id),\n  FOREIGN KEY (party_id) REFERENCES party (party_id),\n  FOREIGN KEY (state_id) REFERENCES state (state_id),\n  FOREIGN KEY (reason_left_office_id) REFERENCES reason_left_office (reason_left_office_id),\n  FOREIGN KEY (military_branch_id) REFERENCES military_branch (military_branch_id),\n  FOREIGN KEY (first_lady_id) REFERENCES first_lady (first_lady_id)\n);\n```\n\n-- Explanation:\nThis statement defines the pres_details table with the following columns"}
{"seed": "/* Adds a new column named ownerId to the user table. The column is an integer and can be null. The column is added after the id column. */\nALTER TABLE `gs`.`user` \nADD COLUMN `ownerId` INT(11) NULL DEFAULT 0 AFTER `id`", "description": "Adds a new column named ownerId to the user table. The column is an integer and can be null. The column is added after the id column.", "concepts": ["ALTER TABLE", "ADD COLUMN", "AFTER", "DEFAULT"], "instruction": "Write a SQL query to add a new column named ownerId to the user table. The column is an integer and can be null. The column is added after the id column.", "response": "-- Reasoning:\nWe need to modify the existing user table by adding a new column named ownerId. It should be an integer and allow NULLs so that every user can have an owner.\n\n-- Solution:\n```sql\nALTER TABLE user\n  ADD COLUMN ownerId INT;\n```\n\n-- Explanation:\nThis ALTER statement updates the user table schema by adding:\n  \u2022 ownerId: an integer column that can be null\n\n-- Tests:\n-- 1. Check new column appears and allows nulls\nPRAGMA table_info('user');"}
{"seed": "/* Adds a new column named guardianName to the user table. */\nALTER TABLE `gs`.`user` \nADD COLUMN `guardianName` VARCHAR(512) NULL AFTER `username`", "description": "Adds a new column named guardianName to the user table.", "concepts": ["ALTER TABLE", "ADD COLUMN", "AFTER"], "instruction": "Write a SQL query to add a new column named guardianName to the user table.", "response": "-- Reasoning:\nWe need to add a new column to the user table named guardianName. It should be a VARCHAR(255) and allow NULLs.\n\n-- Solution:\n```sql\nALTER TABLE user\n  ADD COLUMN guardianName VARCHAR(255);\n```\n\n-- Explanation:\nThis ALTER statement updates the user table schema by adding:\n  \u2022 guardianName: a nullable varchar column up to 255 chars\n\n-- Tests:\n-- 1. Check new column appears and allows nulls\nPRAGMA table_info('user');"}
{"seed": "/* Selects the id, name, and active columns from the users table where the active column is equal to 1. */\nselect \n\tt.*,\n\tct.name as cardtype\nfrom\n(select\n \tconcat('<label class=\"am-checkbox\"><input type=\"checkbox\"  data-am-ucheck name=\"datalist\" code=\"',\n \t\tc.status,\n \t\t'\" value=\"',\n \t\tc.code,'',\n \t\t'\" code-cust=\"',c.customercode,'\" code-relate=\"',COALESCE(c.relatecode,''),'\" code-cttype=\"',c.contracttype,'\" code-type=\"',c.type,'\" ></label>') as application_id,\n \tc.code, --\u5408\u540c\u7f16\u53f7\n \tget_arr_value(c.relatedetail,1) as card_code,--\u5361\u53f7\n \tm.name,\n \tm.mobile,\n\t(case \n\t-- \u5347\u7ea7\u5408\u540c\u4e0d\u9700\u8981\u5ba1\u6279 zzn 2019-03-28\n\t--when isaudit=1 then '\u672a\u5ba1\u6279' \n\t--when isaudit=3 then '\u5ba1\u6279\u62d2\u7edd' \n \twhen c.status = 1 then '\u672a\u4ed8\u6b3e' when c.status =2 then '\u5df2\u4ed8\u6b3e' end)::varchar as i_status, --\u72b6\u6001\n\tget_arr_value(c.relatedetail, 14) as ctype,\n \tget_arr_value(c.relatedetail,7) as ncardname,--\u73b0\u5728\u5361\u540d\u79f0\n \tround(normalmoney::NUMERIC(10, 2), 2) as normalmoney,--\u5e94\u6536\n \tround(factmoney::NUMERIC(10, 2), 2) as factmoney,--\u5b9e\u6536\n \t c.collectdate as c_idate, --\u7b7e\u7ea6\n \t(select enddate from cc_card where code=get_arr_value(c.relatedetail,1) and isgoon=0 and status=1  and org_id=${def:org}) as enddate,--\u622a\u6b62\n \t(select name from hr_staff where userlogin=c.salemember) as salemember,--\u9500\u552e\u5458\n \t(select name from hr_staff where userlogin=c.salemember1) as salemember1,--\u9500\u552e\u5458\n \t(select name from hr_staff where userlogin=c.createdby) as createdby,--\u5f55\u5165\u4eba\n \tc.org_id\nfrom cc_contract c \nleft join cc_customer m on m.code= c.customercode  and m.org_id=${def:org}\nwhere c.org_id=${def:org}\nand c.contracttype in (1,2)\nand c.status!=0\n${filter} \nand (case when exists(select 1 from hr_staff_skill hss inner join hr_skill hs on hss.skill_id = hs.skill_id \n\t\t\twhere (hs.org_id = ${def:org} or exists(select 1 from hr_staff_org so where hs.org_id = so.org_id and userlogin = '${def:user}'))\n\t\t\tand hss.userlogin = '${def:user}' and hs.data_limit = 1)\n\t\t\tthen 1=1 else c.salemember = '${def:user}' or c.salemember1 = '${def:user}' end)\norder by (case when c.updated is null then c.createdate else c.updated end) desc,c.createtime desc\n) as t\nleft join cc_cardtype ct on t.ctype = ct.code and t.org_id = ct.org_id", "description": "Selects the id, name, and active columns from the users table where the active column is equal to 1.", "concepts": ["SELECT", "FROM", "LEFT JOIN", "ON", "WHERE", "ORDER BY", "DESC", "ASC", "AS", "CASE", "WHEN", "THEN", "ELSE", "END"], "instruction": "Write a SQL query to list the id, name, and active columns from the users table where the active column is equal to 1.", "response": "-- Reasoning:\nWe need to list the id, name, and active columns from the users table where the active column is equal to 1.\n\n-- Solution:\n```sql\nSELECT id, name, active\nFROM users\nWHERE active = 1;\n```\n\n-- Explanation:\nThis query selects the id, name, and active columns from the users table where the active column is equal to 1.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT id, name, active\nFROM users\nWHERE active = 1;"}
{"seed": "/* Selects the name of the association, company, and site for all companies that are not on hold and not deleted. */\nselect a.name assoication_name, c.name company_name, s.name site_name from companies C\ninner join sites s on s.company = c.id\ninner join associations a on a.id = s.association\nwhere c.is_on_hold = 0 and c.is_deleted = 0\nand s.is_deleted = 0\nand not exists (select 1 from domains d where d.site = s.id)", "description": "Selects the name of the association, company, and site for all companies that are not on hold and not deleted.", "concepts": ["SELECT", "FROM", "INNER JOIN", "ON", "WHERE", "EXISTS", "NOT", "AND", "OR", "GROUP BY", "HAVING", "ORDER BY", "LIMIT"], "instruction": "Write a SQL query to list the name of the association, company, and site for all companies that are not on hold and not deleted.", "response": "-- Reasoning:\nWe need to list the name of the association, company, and site for all companies that are not on hold and not deleted.\n\n-- Solution:\n```sql\nSELECT\n  association.name,\n  company.name,\n  site.name\nFROM\n  association,\n  company,\n  site\nWHERE\n  association.id = company.association_id\n  AND company.id = site.company_id\n  AND company.status != 'on hold'\n  AND company.status != 'deleted';\n```\n\n-- Explanation:\nThis query joins the association, company, and site tables to list the name of the association, company, and site for all companies that are not on hold and not deleted.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT\n  association.name,\n  company.name,\n  site.name\nFROM\n  association,\n  company,\n  site\nWHERE\n  association.id = company.association_id\n  AND company.id = site.company_id\n  AND company.status != 'on hold'\n  AND company.status != 'deleted';"}
{"seed": "/* Drops the table named Vote if it exists. */\nDROP TABLE IF EXISTS Vote", "description": "Drops the table named Vote if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named Vote if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Vote if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Vote;\n```\n\n-- Explanation:\nThis statement drops the table named Vote if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Vote');"}
{"seed": "/* Drops the table named VoteOption if it exists. */\nDROP TABLE IF EXISTS VoteOption", "description": "Drops the table named VoteOption if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named VoteOption if it exists.", "response": "-- Reasoning:\nWe need to drop the table named VoteOption if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS VoteOption;\n```\n\n-- Explanation:\nThis statement drops the table named VoteOption if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('VoteOption');"}
{"seed": "/* Drops the table named VoteRound if it exists. */\nDROP TABLE IF EXISTS VoteRound", "description": "Drops the table named VoteRound if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named VoteRound if it exists.", "response": "-- Reasoning:\nWe need to delete the VoteRound table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS VoteRound;\n```\n\n-- Explanation:\nThis statement deletes the VoteRound table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('VoteRound');"}
{"seed": "/* Drops the table named Attendee if it exists. */\nDROP TABLE IF EXISTS Attendee", "description": "Drops the table named Attendee if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "Attendee"], "instruction": "Write a SQL query to drop the table named Attendee if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Attendee if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Attendee;\n```\n\n-- Explanation:\nThis statement drops the Attendee table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Attendee');"}
{"seed": "/* Drops the table named MovieNight if it exists. */\nDROP TABLE IF EXISTS MovieNight", "description": "Drops the table named MovieNight if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named MovieNight if it exists.", "response": "-- Reasoning:\nWe need to delete the table named MovieNight if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS MovieNight;\n```\n\n-- Explanation:\nThis statement deletes the table named MovieNight if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('MovieNight');"}
{"seed": "/* Drops the table named MovieNomination if it exists. */\nDROP TABLE IF EXISTS MovieNomination", "description": "Drops the table named MovieNomination if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named MovieNomination if it exists.", "response": "-- Reasoning:\nWe need to drop the table named MovieNomination if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS MovieNomination;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('MovieNomination');"}
{"seed": "/* Drops the table named Movie if it exists. */\nDROP TABLE IF EXISTS Movie", "description": "Drops the table named Movie if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Movie if it exists.", "response": "-- Reasoning:\nWe need to drop the table named Movie if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS Movie;\n```\n\n-- Explanation:\nThis statement drops the table named Movie if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('Movie');"}
{"seed": "/* Drops the table named RegistrationKey if it exists. */\nDROP TABLE IF EXISTS RegistrationKey", "description": "Drops the table named RegistrationKey if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named RegistrationKey if it exists.", "response": "-- Reasoning:\nWe need to delete the table named RegistrationKey if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS RegistrationKey;\n```\n\n-- Explanation:\nThis statement deletes the table named RegistrationKey if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('RegistrationKey');"}
{"seed": "/* Drops the table named SiteUser if it exists. */\nDROP TABLE IF EXISTS SiteUser", "description": "Drops the table named SiteUser if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named SiteUser if it exists.", "response": "-- Reasoning:\nWe need to drop the SiteUser table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS SiteUser;\n```\n\n-- Explanation:\nThis statement drops the SiteUser table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('SiteUser');"}
{"seed": "/* Creates a table named SiteUser with five columns: id (integer primary key), username (varchar), password (varchar), isPresenter (boolean), and a primary key constraint on the id column. */\nCREATE TABLE SiteUser (\n\t\n\tid INT NOT NULL AUTO_INCREMENT,\n\tusername VARCHAR(32) NOT NULL,\n\tpassword VARCHAR(255) NOT NULL,\n\tisPresenter BOOLEAN NOT NULL DEFAULT FALSE,\n\t\n\tPRIMARY KEY (id)\n\t\n)", "description": "Creates a table named SiteUser with five columns: id (integer primary key), username (varchar), password (varchar), isPresenter (boolean), and a primary key constraint on the id column.", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT NULL", "DEFAULT", "BOOLEAN"], "instruction": "Write a SQL query to create a table named SiteUser with five columns: id (integer primary key), username (varchar), password (varchar), isPresenter (boolean), and a primary key constraint on the id column.", "response": "-- Reasoning:\nWe need a new table named SiteUser. It should have an integer primary key so that each user has a unique identifier, and a username and password column to store the user\u2019s credentials.\n\n-- Solution:\n```sql\nCREATE TABLE SiteUser (\n  id INTEGER PRIMARY KEY,\n  username VARCHAR(255),\n  password VARCHAR(255),\n  isPresenter BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the SiteUser table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 isPresenter: boolean\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('SiteUser');"}
{"seed": "/* Creates a table named RegistrationKey with two columns: regKey (varchar) and used (boolean). The regKey column is the primary key and the used column is set to false by default. */\nCREATE TABLE RegistrationKey (\n\t\n\tregKey VARCHAR(255) NOT NULL,\n\tused BOOLEAN NOT NULL DEFAULT FALSE,\n\t\n\tPRIMARY KEY (regkey)\n\t\n)", "description": "Creates a table named RegistrationKey with two columns: regKey (varchar) and used (boolean). The regKey column is the primary key and the used column is set to false by default.", "concepts": ["CREATE TABLE", "VARCHAR", "PRIMARY KEY", "DEFAULT", "BOOLEAN", "NOT NULL", "NOT", "FALSE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named RegistrationKey with two columns: regKey (varchar) and used (boolean). The regKey column is the primary key and the used column is set to false by default.", "response": "-- Reasoning:\nWe need a new table named RegistrationKey. It should have a primary key column named regKey, and a boolean column named used. The used column should be set to false by default.\n\n-- Solution:\n```sql\nCREATE TABLE RegistrationKey (\n  regKey VARCHAR(255) PRIMARY KEY,\n  used BOOLEAN DEFAULT FALSE\n);\n```\n\n-- Explanation:\nThis statement defines the RegistrationKey table with two columns:\n  \u2022 regKey: variable\u2010length string up to 255 characters, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 used: boolean, set to false by default\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('RegistrationKey');"}
{"seed": "/* Creates a table named Movie with five columns: id (integer primary key), name (varchar), imgSrc (varchar), description (varchar), and a primary key. */\nCREATE TABLE Movie (\n\t\n\tid INT NOT NULL AUTO_INCREMENT,\n\tname VARCHAR(255) NOT NULL,\n\timgSrc VARCHAR(255) NOT NULL,\n\tdescription VARCHAR(255) NOT NULL,\n\t\n\tPRIMARY KEY (id)\n\t\n)", "description": "Creates a table named Movie with five columns: id (integer primary key), name (varchar), imgSrc (varchar), description (varchar), and a primary key.", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "NOT NULL", "VARCHAR", "NOT NULL", "VARCHAR", "NOT NULL"], "instruction": "Write a SQL query to create a table named Movie with five columns: id (integer primary key), name (varchar), imgSrc (varchar), description (varchar), and a primary key.", "response": "-- Reasoning:\nWe need a new table named Movie. It should have an integer primary key so that each movie has a unique identifier, and a name column to store the movie\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE Movie (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  imgSrc VARCHAR(255),\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the Movie table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 imgSrc: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Movie');"}
{"seed": "/* Creates a table named MovieNomination with two columns: movieID (integer primary key) and nominatorID (integer foreign key referencing the id column of the SiteUser table). */\nCREATE TABLE MovieNomination (\n\t\n\tmovieID INT NOT NULL,\n\tnominatorID INT NOT NULL,\n\t\n\tPRIMARY KEY (movieID),\n\t\n\tFOREIGN KEY (nominatorID) REFERENCES SiteUser(id)\n\t\n)", "description": "Creates a table named MovieNomination with two columns: movieID (integer primary key) and nominatorID (integer foreign key referencing the id column of the SiteUser table).", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "SiteUser"], "instruction": "Write a SQL query to create a table named MovieNomination with two columns: movieID (integer primary key) and nominatorID (integer foreign key referencing the id column of the SiteUser table).", "response": "-- Reasoning:\nWe need a new table named MovieNomination. It should have an integer primary key so that each nomination has a unique identifier, and a nominatorID column to store the user\u2019s ID.\n\n-- Solution:\n```sql\nCREATE TABLE MovieNomination (\n  movieID INT PRIMARY KEY,\n  nominatorID INT,\n  FOREIGN KEY (nominatorID) REFERENCES SiteUser(id)\n);\n```\n\n-- Explanation:\nThis statement defines the MovieNomination table with two columns:\n  \u2022 movieID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nominatorID: integer, foreign key referencing the id column of the SiteUser table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MovieNomination');"}
{"seed": "/* Creates a table named MovieNight with four columns: id (integer primary key), night (date), and winnerID (integer). The winnerID column is a foreign key that references the id column in the Movie table. */\nCREATE TABLE MovieNight (\n\t\n\tid INT NOT NULL AUTO_INCREMENT,\n\tnight DATE NOT NULL,\n\twinnerID INT,\n\t\n\tPRIMARY KEY (id),\n\t\n\tFOREIGN KEY (winnerID) REFERENCES Movie(id)\n\t\n)", "description": "Creates a table named MovieNight with four columns: id (integer primary key), night (date), and winnerID (integer). The winnerID column is a foreign key that references the id column in the Movie table.", "concepts": ["CREATE TABLE", "INT", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "DATE", "NOT NULL", "NULL", "NULL", "NULL", "NULL"], "instruction": "Write a SQL query to create a table named MovieNight with four columns: id (integer primary key), night (date), and winnerID (integer). The winnerID column is a foreign key that references the id column in the Movie table.", "response": "-- Reasoning:\nWe need a new table named MovieNight. It should have an integer primary key so that each night has a unique identifier, a date column to store the night date, and a winnerID column to store the id of the winner. The winnerID column should be a foreign key that references the id column in the Movie table.\n\n-- Solution:\n```sql\nCREATE TABLE MovieNight (\n  id INTEGER PRIMARY KEY,\n  night DATE,\n  winnerID INTEGER,\n  FOREIGN KEY (winnerID) REFERENCES Movie(id)\n);\n```\n\n-- Explanation:\nThis statement defines the MovieNight table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 night: date\n  \u2022 winnerID: integer, foreign key that references the id column in the Movie table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('MovieNight');"}
{"seed": "/* Creates a table named Attendee with two columns: siteUserID (integer) and movieNightID (integer). The table has a primary key consisting of both columns and two foreign keys referencing the SiteUser and MovieNight tables. */\nCREATE TABLE Attendee (\n\t\n\tsiteUserID INT NOT NULL,\n\tmovieNightID INT NOT NULL,\n\t\n\tPRIMARY KEY (siteUserID, movieNightID),\n\t\n\tFOREIGN KEY (siteUserID) REFERENCES SiteUser(id),\n\tFOREIGN KEY (movieNightID) REFERENCES MovieNight(id)\n\t\n)", "description": "Creates a table named Attendee with two columns: siteUserID (integer) and movieNightID (integer). The table has a primary key consisting of both columns and two foreign keys referencing the SiteUser and MovieNight tables.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "NOT NULL", "FOREIGN KEY", "REFERENCES", "SiteUser", "MovieNight"], "instruction": "Write a SQL query to create a table named Attendee with two columns: siteUserID (integer) and movieNightID (integer). The table has a primary key consisting of both columns and two foreign keys referencing the SiteUser and MovieNight tables.", "response": "-- Reasoning:\nWe need a new table named Attendee. It should have two foreign keys referencing the SiteUser and MovieNight tables.\n\n-- Solution:\n```sql\nCREATE TABLE Attendee (\n  siteUserID INT,\n  movieNightID INT,\n  PRIMARY KEY (siteUserID, movieNightID),\n  FOREIGN KEY (siteUserID) REFERENCES SiteUser(siteUserID),\n  FOREIGN KEY (movieNightID) REFERENCES MovieNight(movieNightID)\n);\n```\n\n-- Explanation:\nThis statement defines the Attendee table with two foreign keys:\n  \u2022 siteUserID: references the SiteUser table\n  \u2022 movieNightID: references the MovieNight table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Attendee');"}
{"seed": "/* Creates a table named VoteRound with three columns: id (integer primary key), movieNightID (integer foreign key), and name (varchar). */\nCREATE TABLE VoteRound (\n\t\n\tid INT NOT NULL AUTO_INCREMENT,\n\tmovieNightID INT NOT NULL,\n\t\n\tPRIMARY KEY (id),\n\t\n\tFOREIGN KEY (movieNightID) REFERENCES MovieNight(id)\n\t\n)", "description": "Creates a table named VoteRound with three columns: id (integer primary key), movieNightID (integer foreign key), and name (varchar).", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "MovieNight"], "instruction": "Write a SQL query to create a table named VoteRound with three columns: id (integer primary key), movieNightID (integer foreign key), and name (varchar).", "response": "-- Reasoning:\nWe need a new table named VoteRound. It should have an integer primary key so that each vote round has a unique identifier, a movie night ID to store the movie night that the vote round belongs to, and a name column to store the name of the vote round.\n\n-- Solution:\n```sql\nCREATE TABLE VoteRound (\n  id INTEGER PRIMARY KEY,\n  movieNightID INTEGER,\n  name VARCHAR(255),\n  FOREIGN KEY (movieNightID) REFERENCES MovieNight(id)\n);\n```\n\n-- Explanation:\nThis statement defines the VoteRound table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 movieNightID: integer, foreign key to MovieNight table\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('VoteRound');"}
{"seed": "/* Creates a table named VoteOption with four columns: id (integer primary key), movieID (integer foreign key referencing the Movie table), voteRoundID (integer foreign key referencing the VoteRound table), and movieNightID (integer foreign key referencing the MovieNight table). */\nCREATE TABLE VoteOption (\n\t\n\tid INT NOT NULL,\n\tmovieID INT NOT NULL,\n\tvoteRoundID INT NOT NULL,\n\tmovieNightID INT NOT NULL,\n\t\n\tPRIMARY KEY (id),\n\t\n\tFOREIGN KEY (movieID) REFERENCES Movie(id),\n\tFOREIGN KEY (voteRoundID) REFERENCES VoteRound(id),\n\tFOREIGN KEY (movieNightID) REFERENCES MovieNight(id)\n\t\n)", "description": "Creates a table named VoteOption with four columns: id (integer primary key), movieID (integer foreign key referencing the Movie table), voteRoundID (integer foreign key referencing the VoteRound table), and movieNightID (integer foreign key referencing the MovieNight table).", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "VoteRound", "MovieNight"], "instruction": "Write a SQL query to create a table named VoteOption with four columns: id (integer primary key), movieID (integer foreign key referencing the Movie table), voteRoundID (integer foreign key referencing the VoteRound table), and movieNightID (integer foreign key referencing the MovieNight table).", "response": "-- Reasoning:\nWe need a new table named VoteOption. It should have an integer primary key so that each vote option has a unique identifier, and three foreign keys to reference the Movie, VoteRound, and MovieNight tables.\n\n-- Solution:\n```sql\nCREATE TABLE VoteOption (\n  id INTEGER PRIMARY KEY,\n  movieID INTEGER REFERENCES Movie(id),\n  voteRoundID INTEGER REFERENCES VoteRound(id),\n  movieNightID INTEGER REFERENCES MovieNight(id)\n);\n```\n\n-- Explanation:\nThis statement defines the VoteOption table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 movieID: integer, foreign key referencing the Movie table\n  \u2022 voteRoundID: integer, foreign key referencing the VoteRound table\n  \u2022 movieNightID: integer, foreign key referencing the MovieNight table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('VoteOption');"}
{"seed": "/* Creates a table named Vote with four columns: siteUserID (integer), voteOptionID (integer), voteRoundID (integer), and movieNightID (integer). The table has a primary key consisting of the siteUserID and voteOptionID columns. It also has foreign keys to the SiteUser, VoteOption, VoteRound, and MovieNight tables. */\nCREATE TABLE Vote (\n\n\tsiteUserID INT NOT NULL,\n\tvoteOptionID INT NOT NULL,\n\tvoteRoundID INT NOT NULL,\n\tmovieNightID INT NOT NULL,\n\t\n\tPRIMARY KEY (siteUserID, voteOptionID),\n\t\n\tFOREIGN KEY (siteUserID) REFERENCES SiteUser(id),\n\tFOREIGN KEY (voteOptionID) REFERENCES VoteOption(id),\n\tFOREIGN KEY (voteRoundID) REFERENCES VoteRound(id),\n\tFOREIGN KEY (movieNightID) REFERENCES MovieNight(id)\n\n)", "description": "Creates a table named Vote with four columns: siteUserID (integer), voteOptionID (integer), voteRoundID (integer), and movieNightID (integer). The table has a primary key consisting of the siteUserID and voteOptionID columns. It also has foreign keys to the SiteUser, VoteOption, VoteRound, and MovieNight tables.", "concepts": ["CREATE TABLE", "INT", "NOT NULL", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "VoteOption", "VoteRound", "MovieNight"], "instruction": "Write a SQL query to create a table named Vote with four columns: siteUserID (integer), voteOptionID (integer), voteRoundID (integer), and movieNightID (integer). The table has a primary key consisting of the siteUserID and voteOptionID columns. It also has foreign keys to the SiteUser, VoteOption, VoteRound, and MovieNight tables.", "response": "-- Reasoning:\nWe need a new table named Vote. It should have a primary key consisting of the siteUserID and voteOptionID columns, and foreign keys to the SiteUser, VoteOption, VoteRound, and MovieNight tables.\n\n-- Solution:\n```sql\nCREATE TABLE Vote (\n  siteUserID INT,\n  voteOptionID INT,\n  voteRoundID INT,\n  movieNightID INT,\n  PRIMARY KEY (siteUserID, voteOptionID),\n  FOREIGN KEY (siteUserID) REFERENCES SiteUser(siteUserID),\n  FOREIGN KEY (voteOptionID) REFERENCES VoteOption(voteOptionID),\n  FOREIGN KEY (voteRoundID) REFERENCES VoteRound(voteRoundID),\n  FOREIGN KEY (movieNightID) REFERENCES MovieNight(movieNightID)\n);\n```\n\n-- Explanation:\nThis statement defines the Vote table with four columns:\n  \u2022 siteUserID: integer, foreign key to SiteUser table\n  \u2022 voteOptionID: integer, foreign key to VoteOption table\n  \u2022 voteRoundID: integer, foreign key to VoteRound table\n  \u2022 movieNightID: integer, foreign key to MovieNight table\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('Vote');"}
{"seed": "/* Inserts 20 rows into the RegistrationKey table. */\nINSERT INTO RegistrationKey(regKey) VALUES\n\t('abcd0'),\n    ('abcd1'),\n    ('abcd2'),\n    ('abcd3'),\n    ('abcd4'),\n    ('abcd5'),\n    ('abcd6'),\n    ('abcd7'),\n    ('abcd8'),\n    ('abcd9'),\n\t('asdf0'),\n\t('asdf1'),\n\t('asdf2'),\n\t('asdf3'),\n\t('asdf4'),\n\t('asdf5'),\n\t('asdf6'),\n\t('asdf7'),\n\t('asdf8'),\n\t('asdf9')", "description": "Inserts 20 rows into the RegistrationKey table.", "concepts": ["INSERT INTO", "VALUES", "RegistrationKey", "regKey"], "instruction": "Write a SQL query to insert 20 rows into the RegistrationKey table.", "response": "-- Reasoning:\nWe need to insert 20 rows into the RegistrationKey table.\n\n-- Solution:\n```sql\nINSERT INTO RegistrationKey (key)\nVALUES (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       (''),\n       ('');\n```\n\n-- Explanation:\nThis INSERT statement inserts 20 rows into the RegistrationKey table.\n\n-- Tests:\n-- 1. Verify 20 rows are inserted\nSELECT * FROM RegistrationKey;"}
{"seed": "/* Creates a view named vw_acctsub that selects all columns from the acctsub table in the SolomonSystem database. */\nCREATE VIEW vw_acctsub AS SELECT * FROM SolomonSystem..acctsub", "description": "Creates a view named vw_acctsub that selects all columns from the acctsub table in the SolomonSystem database.", "concepts": ["CREATE VIEW", "SELECT", "FROM", "AS", "SolomonSystem", "acctsub"], "instruction": "Write a SQL query to create a view named vw_acctsub that selects all columns from the acctsub table in the SolomonSystem database.", "response": "-- Reasoning:\nWe need to create a view named vw_acctsub that contains all columns from the acctsub table.\n\n-- Solution:\n```sql\nCREATE VIEW vw_acctsub AS\n  SELECT * FROM acctsub;\n```\n\n-- Explanation:\nThis statement creates a view named vw_acctsub that contains all columns from the acctsub table.\n\n-- Tests:\n-- 1. Verify view exists and contains all columns from acctsub\nPRAGMA table_info('vw_acctsub');"}
{"seed": "/* Renames the table usuarios to usuarios_renom. */\nALTER TABLE usuarios RENAME TO usuarios_renom", "description": "Renames the table usuarios to usuarios_renom.", "concepts": ["ALTER TABLE", "RENAME"], "instruction": "Write a SQL query to rename the table usuarios to usuarios_renom.", "response": "-- Reasoning:\nWe need to rename the table usuarios to usuarios_renom.\n\n-- Solution:\n```sql\nALTER TABLE usuarios RENAME TO usuarios_renom;\n```\n\n-- Explanation:\nThis statement renames the table usuarios to usuarios_renom.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('usuarios_renom');"}
{"seed": "/* Changes the column apellidos of the table usuarios_renom to apellido, which is a varchar with a maximum length of 100 and can be null. */\nALTER TABLE usuarios_renom CHANGE apellidos apellido varchar(100) NULL", "description": "Changes the column apellidos of the table usuarios_renom to apellido, which is a varchar with a maximum length of 100 and can be null.", "concepts": ["ALTER TABLE", "CHANGE", "VARCHAR", "NULL"], "instruction": "Write a SQL query to change the column apellidos of the table usuarios_renom to apellido, which is a varchar with a maximum length of 100 and can be null.", "response": "-- Reasoning:\nWe need to modify the existing table usuarios_renom by changing the column apellidos to apellido. It should be a varchar with a maximum length of 100 and can be null.\n\n-- Solution:\n```sql\nALTER TABLE usuarios_renom\n  RENAME COLUMN apellidos TO apellido;\n```\n\n-- Explanation:\nThis ALTER statement updates the usuarios_renom table schema by renaming:\n  \u2022 apellidos: to apellido\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('usuarios_renom');"}
{"seed": "/* Modifies the apellido column of the usuarios_renom table to be a char(50) not null column. */\nALTER TABLE usuarios_renom MODIFY apellido char(50) NOT NULL", "description": "Modifies the apellido column of the usuarios_renom table to be a char(50) not null column.", "concepts": ["ALTER TABLE", "MODIFY", "NOT NULL", "char"], "instruction": "Write a SQL query to modify the apellido column of the usuarios_renom table to be a char(50) not null column.", "response": "-- Reasoning:\nWe need to modify the existing usuarios_renom table by changing the apellido column to be a char(50) and not allow NULLs so that every user has a defined apellido.\n\n-- Solution:\n```sql\nALTER TABLE usuarios_renom\n  ALTER COLUMN apellido SET DATA TYPE CHAR(50) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the usuarios_renom table schema by changing:\n  \u2022 apellido: a non\u2010nullable char(50) column\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('usuarios_renom');"}
{"seed": "/* Adds a column named website to the usuarios_renom table with a varchar data type and a NULL value. */\nALTER TABLE usuarios_renom ADD website varchar(100) NULL", "description": "Adds a column named website to the usuarios_renom table with a varchar data type and a NULL value.", "concepts": ["ALTER TABLE", "ADD", "VARCHAR", "NULL"], "instruction": "Write a SQL query to add a column named website to the usuarios_renom table with a varchar data type and a NULL value.", "response": "-- Reasoning:\nWe need to add a new column to the usuarios_renom table named website. It should be a varchar data type and allow NULL values.\n\n-- Solution:\n```sql\nALTER TABLE usuarios_renom\n  ADD COLUMN website VARCHAR;\n```\n\n-- Explanation:\nThis ALTER statement updates the usuarios_renom table schema by adding:\n  \u2022 website: a varchar column\n\n-- Tests:\n-- 1. Verify new column appears\nPRAGMA table_info('usuarios_renom');"}
{"seed": "/* Adds a unique constraint to the email column of the usuarios_renom table. */\nALTER TABLE usuarios_renom ADD CONSTRAINT uq_email UNIQUE(email)", "description": "Adds a unique constraint to the email column of the usuarios_renom table.", "concepts": ["ALTER TABLE", "UNIQUE"], "instruction": "Write a SQL query to add a unique constraint to the email column of the usuarios_renom table.", "response": "-- Reasoning:\nWe need to add a unique constraint to the email column of the usuarios_renom table. This means that no two rows can have the same email address.\n\n-- Solution:\n```sql\nALTER TABLE usuarios_renom\n  ADD CONSTRAINT unique_email UNIQUE (email);\n```\n\n-- Explanation:\nThis ALTER statement adds a unique constraint to the email column of the usuarios_renom table.\n\n-- Tests:\n-- 1. Check constraint is added\nPRAGMA table_info('usuarios_renom');"}
{"seed": "/* Drops the website column from the usuarios_renom table. */\nALTER TABLE usuarios_renom DROP website", "description": "Drops the website column from the usuarios_renom table.", "concepts": ["ALTER TABLE", "DROP"], "instruction": "Write a SQL query to drop the website column from the usuarios_renom table.", "response": "-- Reasoning:\nWe need to remove the website column from the usuarios_renom table.\n\n-- Solution:\n```sql\nALTER TABLE usuarios_renom\n  DROP COLUMN website;\n```\n\n-- Explanation:\nThis statement removes the website column from the usuarios_renom table.\n\n-- Tests:\n-- 1. Verify website column is gone\nPRAGMA table_info('usuarios_renom');"}
{"seed": "/* Inserts a new row into the role table with the role_id of 1 and the role of ADMIN. */\ninsert into role(role_id, role)\nvalues (1, 'ADMIN')", "description": "Inserts a new row into the role table with the role_id of 1 and the role of ADMIN.", "concepts": ["INSERT INTO", "VALUES", "role_id", "role"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new role with id 2 and name USER into the role table. */\ninsert into role(role_id, role)\nvalues (2, 'USER')", "description": "Inserts a new role with id 2 and name USER into the role table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new role with id 2 and name USER into the role table.", "response": "-- Reasoning:\nWe need to insert a new role into the role table. It should have an id of 2 and a name of USER.\n\n-- Solution:\n```sql\nINSERT INTO role (id, name)\nVALUES (2, 'USER');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the role table with:\n  \u2022 id: 2\n  \u2022 name: USER\n\n-- Tests:\n-- 1. Verify new role appears in table\nSELECT * FROM role;"}
{"seed": "/* Inserts a new row into the user_role table with the user_id and role_id values. */\ninsert into user_role(user_id, role_id) values (1, 1)", "description": "Inserts a new row into the user_role table with the user_id and role_id values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the user_role table with the user_id and role_id values.", "response": "-- Reasoning:\nWe need to insert a new row into the user_role table. It should have the user_id and role_id values.\n\n-- Solution:\n```sql\nINSERT INTO user_role (user_id, role_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the user_role table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM user_role;"}
{"seed": "/* Creates a table named things with three columns: id (integer primary key), item (text), and material (text). The id column is set to auto-increment, the item column is set to not be null, and the item column is set to be unique. */\nCREATE TABLE things (\n  id serial PRIMARY KEY,\n  item text NOT NULL UNIQUE,\n  material text NOT NULL\n)", "description": "Creates a table named things with three columns: id (integer primary key), item (text), and material (text). The id column is set to auto-increment, the item column is set to not be null, and the item column is set to be unique.", "concepts": ["CREATE TABLE", "serial", "PRIMARY KEY", "NOT NULL", "UNIQUE"], "instruction": "Write a SQL query to create a table named things with three columns: id (integer primary key), item (text), and material (text). The id column is set to auto-increment, the item column is set to not be null, and the item column is set to be unique.", "response": "-- Reasoning:\nWe need a new table named things. It should have an integer primary key so that each thing has a unique identifier, and a name column to store the thing\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE things (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  item TEXT NOT NULL UNIQUE\n);\n```\n\n-- Explanation:\nThis statement defines the things table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 item: variable\u2010length string up to 255 characters\n  \u2022 material: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('things');"}
{"seed": "/* Drops the database named checkapp. */\ndrop database checkapp", "description": "Drops the database named checkapp.", "concepts": ["drop database"], "instruction": "Write a SQL query to drop the database named checkapp.", "response": "-- Reasoning:\nWe need to delete the database named checkapp.\n\n-- Solution:\n```sql\nDROP DATABASE checkapp;\n```\n\n-- Explanation:\nThis statement deletes the database named checkapp.\n\n-- Tests:\n-- 1. Verify database is deleted\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named checkapp. */\ncreate database checkapp", "description": "Creates a database named checkapp.", "concepts": ["create database"], "instruction": "Write a SQL query to create a database named checkapp.", "response": "-- Reasoning:\nWe need to create a new database named checkapp.\n\n-- Solution:\n```sql\nCREATE DATABASE checkapp;\n```\n\n-- Explanation:\nThis statement creates a new database named checkapp.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named users with five columns: id (integer primary key), unique_id (varchar), name (varchar), chatuid (varchar), email (varchar), encrypted_password (varchar), salt (varchar), created_at (datetime), and updated_at (datetime). */\ncreate table users(\n    id int(11) primary key auto_increment,\n    unique_id varchar(23) not null unique,\n    name varchar(255) not null,\n    chatuid varchar(255) not null unique,\n    email varchar(255) not null unique,\n    encrypted_password varchar(255) not null, \n    salt varchar(10) not null,\n    created_at datetime,\n    updated_at datetime null\n)", "description": "Creates a table named users with five columns: id (integer primary key), unique_id (varchar), name (varchar), chatuid (varchar), email (varchar), encrypted_password (varchar), salt (varchar), created_at (datetime), and updated_at (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "AUTO_INCREMENT", "VARCHAR", "NOT NULL", "UNIQUE", "DATETIME", "NULL"], "instruction": "Write a SQL query to create a table named users with five columns: id (integer primary key), unique_id (varchar), name (varchar), chatuid (varchar), email (varchar), encrypted_password (varchar), salt (varchar), created_at (datetime), and updated_at (datetime).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  unique_id VARCHAR(255),\n  name VARCHAR(255),\n  chatuid VARCHAR(255),\n  email VARCHAR(255),\n  encrypted_password VARCHAR(255),\n  salt VARCHAR(255),\n  created_at DATETIME,\n  updated_at DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the users table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 unique_id: variable\u2010length string up to 255 characters\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 chatuid: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 encrypted_password: variable\u2010length string up to 255 characters\n  \u2022 salt: variable\u2010length string up to 255 characters\n  \u2022 created_at: datetime\n  \u2022 updated_at: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPR"}
{"seed": "/* Creates a table named groups with five columns: id (integer primary key unique), groupName (varchar), groupDescription (varchar), language (varchar), and version (integer). */\ncreate table groups(\n    id int(11) primary key unique,\n    groupName varchar(255) not null,\n    groupDescription varchar(2000) not null,\n    language varchar(10) not null,\n    version int(11)\n)", "description": "Creates a table named groups with five columns: id (integer primary key unique), groupName (varchar), groupDescription (varchar), language (varchar), and version (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "UNIQUE", "VARCHAR", "NOT NULL", "VARCHAR", "NOT NULL", "VARCHAR", "NOT NULL", "INT", "NOT NULL"], "instruction": "Write a SQL query to create a table named groups with five columns: id (integer primary key unique), groupName (varchar), groupDescription (varchar), language (varchar), and version (integer).", "response": "-- Reasoning:\nWe need a new table named groups. It should have an integer primary key so that each group has a unique identifier, and a name column to store the group\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE groups (\n  id INTEGER PRIMARY KEY UNIQUE,\n  groupName VARCHAR(255),\n  groupDescription VARCHAR(255),\n  language VARCHAR(255),\n  version INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the groups table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 groupName: variable\u2010length string up to 255 characters\n  \u2022 groupDescription: variable\u2010length string up to 255 characters\n  \u2022 language: variable\u2010length string up to 255 characters\n  \u2022 version: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('groups');"}
{"seed": "/* Creates a table named groupsByUsers with three columns: idUser (integer), idGroup (integer), and isAdmin (integer). The table has a primary key constraint on the idUser and idGroup columns. */\ncreate table groupsByUsers(\n    idUser int(11) NOT NULL,\n    idGroup int(11) NOT NULL,\n    isAdmin int(11) DEFAULT 0,\n    description varchar(255) not null,\n    CONSTRAINT pk_GroupsByUsers PRIMARY KEY (idUser, idGroup)\n)", "description": "Creates a table named groupsByUsers with three columns: idUser (integer), idGroup (integer), and isAdmin (integer). The table has a primary key constraint on the idUser and idGroup columns.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "CONSTRAINT"], "instruction": "Write a SQL query to create a table named groupsByUsers with three columns: idUser (integer), idGroup (integer), and isAdmin (integer). The table has a primary key constraint on the idUser and idGroup columns.", "response": "-- Reasoning:\nWe need a new table named groupsByUsers. It should have an integer primary key so that each user has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE groupsByUsers (\n  idUser INT,\n  idGroup INT,\n  isAdmin INT,\n  PRIMARY KEY (idUser, idGroup)\n);\n```\n\n-- Explanation:\nThis statement defines the groupsByUsers table with three columns:\n  \u2022 idUser: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 idGroup: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 isAdmin: integer, marked PRIMARY KEY so it cannot be null and is unique\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('groupsByUsers');"}
{"seed": "/* Inserts a new row into the groupsByUsers table with the idUser and idGroup values. */\ninsert into groupsByUsers (idUser, idGroup) VALUES (1,1)", "description": "Inserts a new row into the groupsByUsers table with the idUser and idGroup values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Creates a user named login_user with the password . */\nCREATE USER 'login_user'@'localhost' IDENTIFIED BY", "description": "Creates a user named login_user with the password .", "concepts": ["CREATE USER", "IDENTIFIED BY"], "instruction": "Write a SQL query to create a user named login_user with the password .", "response": "-- Reasoning:\nWe need to create a new user named login_user with the password .\n\n-- Solution:\n```sql\nCREATE USER login_user WITH PASSWORD '';\n```\n\n-- Explanation:\nThis statement creates a new user named login_user with the password .\n\n-- Tests:\n-- 1. Verify user exists\nSELECT * FROM sqlite_master WHERE type='user' AND name='login_user';"}
{"seed": "/* Drops the database named project2_db if it exists. */\nDROP DATABASE IF EXISTS project2_db", "description": "Drops the database named project2_db if it exists.", "concepts": ["DROP DATABASE"], "instruction": "Write a SQL query to drop the database named project2_db if it exists.", "response": "-- Reasoning:\nWe need to drop the database named project2_db if it exists.\n\n-- Solution:\n```sql\nDROP DATABASE IF EXISTS project2_db;\n```\n\n-- Explanation:\nThis DROP statement drops the database if it exists.\n\n-- Tests:\n-- 1. Verify database is dropped\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named project2_db. */\nCREATE DATABASE project2_db", "description": "Creates a database named project2_db.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named project2_db.", "response": "-- Reasoning:\nWe need to create a new database named project2_db.\n\n-- Solution:\n```sql\nCREATE DATABASE project2_db;\n```\n\n-- Explanation:\nThis statement creates a new database named project2_db.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named jobs with three columns: link (text), company (varchar) and location (varchar). The link column is the primary key. */\nCREATE TABLE jobs (\n  link TEXT\n  company varchar(50),\n  location varchar(50),\n  PRIMARY KEY (link)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8", "description": "Creates a table named jobs with three columns: link (text), company (varchar) and location (varchar). The link column is the primary key.", "concepts": ["CREATE TABLE", "TEXT", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named jobs with three columns: link (text), company (varchar) and location (varchar). The link column is the primary key.", "response": "-- Reasoning:\nWe need a new table named jobs. It should have a link column as the primary key, and two other columns: company and location.\n\n-- Solution:\n```sql\nCREATE TABLE jobs (\n  link TEXT PRIMARY KEY,\n  company VARCHAR(255),\n  location VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the jobs table with three columns:\n  \u2022 link: text, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 company: variable\u2010length string up to 255 characters\n  \u2022 location: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('jobs');"}
{"seed": "/* Truncates the query8 table. */\ntruncate query8", "description": "Truncates the query8 table.", "concepts": ["TRUNCATE"], "instruction": "Write a SQL query to truncate the query8 table.", "response": "-- Reasoning:\nWe need to remove all rows from the query8 table.\n\n-- Solution:\n```sql\nDELETE FROM query8;\n```\n\n-- Explanation:\nThis DELETE statement removes all rows from the query8 table.\n\n-- Tests:\n-- 1. Verify table is empty\nSELECT * FROM query8;"}
{"seed": "/* Creates a table named Query8 with two columns: cid (integer primary key) and commission (integer). */\nINSERT INTO Query8\n\n(SELECT customer.cid AS cid, cname, SUM(referral.commission * price * quantity) AS comission\n\n\tFROM referral \n\n\tJOIN orders ON orders.cid = referral.custref\t\n\n\tJOIN customer ON referral.custid = customer.cid\n\n\tGROUP BY customer.cid\n\n\tORDER BY cname ASC)", "description": "Creates a table named Query8 with two columns: cid (integer primary key) and commission (integer).", "concepts": ["INSERT INTO", "SELECT", "FROM", "JOIN", "WHERE", "GROUP BY", "ORDER BY", "SUM", "AS", "INT", "PRIMARY KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named Query8 with two columns: cid (integer primary key) and commission (integer).\nThe table should contain the customer's id and the total commission earned by the customer.\nThe commission is calculated as the sum of the referral's commission multiplied by the price of the product multiplied by the quantity of the product.\nThe table should be sorted by the customer's name in ascending order.", "response": "-- Reasoning:\nWe need to create a new table named Query8 with two columns: cid (integer primary key) and commission (integer).\nThe table should contain the customer's id and the total commission earned by the customer.\nThe commission is calculated as the sum of the referral's commission multiplied by the price of the product multiplied by the quantity of the product.\nThe table should be sorted by the customer's name in ascending order.\n\n-- Solution:\n```sql\nCREATE TABLE Query8 (\n  cid INT PRIMARY KEY,\n  commission INT\n);\n\nINSERT INTO Query8 (cid, commission)\nSELECT\n  c.id,\n  SUM(r.commission * p.price * o.quantity)\nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nJOIN products p ON o.product_id = p.product_id\nJOIN referrals r ON c.referral_id = r.id\nGROUP BY c.id\nORDER BY c.name;\n```\n\n-- Explanation:\nThis statement creates a new table named Query8 with two columns:\n  \u2022 cid: integer primary key\n  \u2022 commission: integer\n\nThe table contains the customer's id and the total commission earned by the customer.\nThe commission is calculated as the sum of the referral's commission multiplied by the"}
{"seed": "/* Creates a view named query8 that contains the result of the query SELECT id, name FROM users WHERE active = 1. */\nselect * from query8", "description": "Creates a view named query8 that contains the result of the query SELECT id, name FROM users WHERE active = 1.", "concepts": ["SELECT", "FROM", "WHERE", "active", "query8"], "instruction": "Write a SQL query to create a view named query8 that contains the result of the query SELECT id, name FROM users WHERE active = 1.", "response": "-- Reasoning:\nWe need to create a view named query8 that contains the result of the query SELECT id, name FROM users WHERE active = 1.\n\n-- Solution:\n```sql\nCREATE VIEW query8 AS\n  SELECT id, name\n  FROM users\n  WHERE active = 1;\n```\n\n-- Explanation:\nThis statement creates a view named query8 that contains the result of the query SELECT id, name FROM users WHERE active = 1.\n\n-- Tests:\n-- 1. Verify view exists and contains correct data\nSELECT * FROM query8;"}
{"seed": "/* Creates a user named admin_objects with password aobjects and unlimited quota on the users table. */\ncreate user admin_objects identified by aobjects quota unlimited on users", "description": "Creates a user named admin_objects with password aobjects and unlimited quota on the users table.", "concepts": ["CREATE USER", "IDENTIFIED BY", "ON", "UNLIMITED"], "instruction": "Write a SQL query to create a user named admin_objects with password aobjects and unlimited quota on the users table.", "response": "-- Reasoning:\nWe need to create a new user named admin_objects with password aobjects. This user should have unlimited quota on the users table.\n\n-- Solution:\n```sql\nCREATE USER admin_objects WITH PASSWORD 'aobjects' QUOTA UNLIMITED ON users;\n```\n\n-- Explanation:\nThis statement creates a new user named admin_objects with password aobjects. It also sets the quota to unlimited on the users table.\n\n-- Tests:\n-- 1. Verify user exists and has correct password\nSELECT * FROM sqlite_master WHERE type='user' AND name='admin_objects';"}
{"seed": "/* Creates a user named admin_users with password ausers and unlimited quota on the users table. */\ncreate user admin_users identified by ausers quota unlimited on usersE2", "description": "Creates a user named admin_users with password ausers and unlimited quota on the users table.", "concepts": ["create user", "identified by", "quota", "on"], "instruction": "Write a SQL query to create a user named admin_users with password ausers and unlimited quota on the users table.", "response": "-- Reasoning:\nWe need to create a new user named admin_users with password ausers and unlimited quota on the users table.\n\n-- Solution:\n```sql\nCREATE USER admin_users WITH PASSWORD 'ausers' QUOTA UNLIMITED ON users;\n```\n\n-- Explanation:\nThis statement creates a new user named admin_users with password ausers and unlimited quota on the users table.\n\n-- Tests:\n-- 1. Verify new user exists\nSELECT * FROM sqlite_master WHERE type='user' AND name='admin_users';"}
{"seed": "/* Creates a sequence named to. */\ncreate sequence to", "description": "Creates a sequence named to.", "concepts": ["CREATE SEQUENCE"], "instruction": "Write a SQL query to create a sequence named to.", "response": "-- Reasoning:\nWe need to create a sequence named to. It should start at 1 and increment by 1.\n\n-- Solution:\n```sql\nCREATE SEQUENCE to START 1 INCREMENT 1;\n```\n\n-- Explanation:\nThis statement creates a sequence named to with the following properties:\n  \u2022 start: 1\n  \u2022 increment: 1\n\n-- Tests:\n-- 1. Verify sequence exists\nSELECT name FROM sqlite_master WHERE type='sequence';"}
{"seed": "/* Creates a table named proyectos with two columns: id (integer) and nombre (varchar). */\nCREATE TABLE `proyectos` (\n  `id` int(11) NOT NULL,\n  `nombre` varchar(100) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named proyectos with two columns: id (integer) and nombre (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named proyectos with two columns: id (integer) and nombre (varchar).", "response": "-- Reasoning:\nWe need a new table named proyectos. It should have an integer primary key so that each project has a unique identifier, and a name column to store the project\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE proyectos (\n  id INT PRIMARY KEY,\n  nombre VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the proyectos table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nombre: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('proyectos');"}
{"seed": "/* Creates a table named tareas with five columns: id (integer primary key), nombre (varchar), estado (integer), id_proyecto (integer). */\nCREATE TABLE `tareas` (\n  `id` int(11) NOT NULL,\n  `nombre` varchar(100) NOT NULL,\n  `estado` int(1) NOT NULL DEFAULT '0',\n  `id_proyecto` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named tareas with five columns: id (integer primary key), nombre (varchar), estado (integer), id_proyecto (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named tareas with five columns: id (integer primary key), nombre (varchar), estado (integer), id_proyecto (integer).", "response": "-- Reasoning:\nWe need a new table named tareas. It should have an integer primary key so that each tarea has a unique identifier, and a name column to store the tarea\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE tareas (\n  id INT PRIMARY KEY,\n  nombre VARCHAR(255),\n  estado INT,\n  id_proyecto INT\n);\n```\n\n-- Explanation:\nThis statement defines the tareas table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nombre: variable\u2010length string up to 255 characters\n  \u2022 estado: integer\n  \u2022 id_proyecto: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tareas');"}
{"seed": "/* Creates a table named usuarios with three columns: id (integer), usuario (varchar) and password (varchar). */\nCREATE TABLE `usuarios` (\n  `id` int(11) NOT NULL,\n  `usuario` varchar(50) NOT NULL,\n  `password` varchar(60) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named usuarios with three columns: id (integer), usuario (varchar) and password (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named usuarios with three columns: id (integer), usuario (varchar) and password (varchar).", "response": "-- Reasoning:\nWe need a new table named usuarios. It should have an integer primary key so that each user has a unique identifier, and two varchar columns to store the user\u2019s name and password.\n\n-- Solution:\n```sql\nCREATE TABLE usuarios (\n  id INT PRIMARY KEY,\n  usuario VARCHAR(255),\n  password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the usuarios table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 usuario: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('usuarios');"}
{"seed": "/* Inserts two rows into the usuarios table. The first row has id 8, usuario juan, and password . The second row has id 9, usuario juan, and password . */\nINSERT INTO `usuarios` (`id`, `usuario`, `password`) VALUES\n(8, 'juan', '$2y$12$rySXpXhwKs1i1jyD.XE.U.sWSkX6WH4idX.OhpSSSf8ghSwpUFXNW'),\n(9, 'juan', '$2y$12$sbFMRTd9U5R/EXstia1EKeENfa5gEho91z0fI4D0cR2NTfE5ci/Zq')", "description": "Inserts two rows into the usuarios table. The first row has id 8, usuario juan, and password . The second row has id 9, usuario juan, and password .", "concepts": ["INSERT INTO", "VALUES", "id", "usuario", "password"], "instruction": "Write a SQL query to insert two rows into the usuarios table. The first row has id 8, usuario juan, and password . The second row has id 9, usuario juan, and password .", "response": "-- Reasoning:\nWe need to insert two rows into the usuarios table. The first row should have id 8, usuario juan, and password . The second row should have id 9, usuario juan, and password .\n\n-- Solution:\n```sql\nINSERT INTO usuarios (id, usuario, password)\nVALUES (8, 'juan', ''), (9, 'juan', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the usuarios table:\n  \u2022 id: 8\n  \u2022 usuario: juan\n  \u2022 password: \n\n-- Tests:\n-- 1. Verify new rows appear\nSELECT * FROM usuarios;"}
{"seed": "/* Adds a primary key constraint to the id column in the proyectos table. */\nALTER TABLE `proyectos`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the proyectos table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the proyectos table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the proyectos table. This will ensure that each project has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE proyectos\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the proyectos table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('proyectos');"}
{"seed": "/* Adds a primary key to the id column of the tareas table and a foreign key constraint to the id_proyecto column of the tareas table. */\nALTER TABLE `tareas`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `id_proyecto`", "description": "Adds a primary key to the id column of the tareas table and a foreign key constraint to the id_proyecto column of the tareas table.", "concepts": ["ALTER TABLE", "ADD PRIMARY KEY", "ADD KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to add a primary key to the id column of the tareas table and a foreign key constraint to the id_proyecto column of the tareas table.", "response": "-- Reasoning:\nWe need to modify the existing tareas table by adding a primary key to the id column and a foreign key constraint to the id_proyecto column.\n\n-- Solution:\n```sql\nALTER TABLE tareas\n  ADD COLUMN id INTEGER PRIMARY KEY,\n  ADD COLUMN id_proyecto INTEGER REFERENCES proyectos(id);\n```\n\n-- Explanation:\nThis ALTER statement updates the tareas table schema by adding:\n  \u2022 id: an integer primary key\n  \u2022 id_proyecto: an integer foreign key referencing the id column of the proyectos table\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('tareas');"}
{"seed": "/* Adds a primary key constraint to the id column in the usuarios table. */\nALTER TABLE `usuarios`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the usuarios table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the usuarios table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the usuarios table. This will ensure that each user has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE usuarios\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the usuarios table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('usuarios');"}
{"seed": "/* Modifies the id column of the proyectos table to auto-increment. */\nALTER TABLE `proyectos`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the proyectos table to auto-increment.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the id column of the proyectos table to auto-increment.", "response": "-- Reasoning:\nWe need to modify the existing proyectos table by changing the id column to auto\u2010increment.\n\n-- Solution:\n```sql\nALTER TABLE proyectos\n  ALTER COLUMN id\n  AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the proyectos table schema by changing:\n  \u2022 id: to auto\u2010increment\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('proyectos');"}
{"seed": "/* Modifies the id column of the tareas table to be an auto-incrementing integer. */\nALTER TABLE `tareas`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the tareas table to be an auto-incrementing integer.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY", "INT", "NOT NULL", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to modify the id column of the tareas table to be an auto-incrementing integer.", "response": "-- Reasoning:\nWe need to modify the existing tareas table by changing the id column to be an auto\u2010incrementing integer.\n\n-- Solution:\n```sql\nALTER TABLE tareas\n  ALTER COLUMN id\n  INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the tareas table schema by changing:\n  \u2022 id: an integer column that is the primary key and auto\u2010increments\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tareas');"}
{"seed": "/* Modifies the id column of the usuarios table to auto-increment. */\nALTER TABLE `usuarios`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the usuarios table to auto-increment.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the id column of the usuarios table to auto-increment.", "response": "-- Reasoning:\nWe need to modify the existing usuarios table by changing the id column to auto\u2010increment.\n\n-- Solution:\n```sql\nALTER TABLE usuarios\n  MODIFY COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the usuarios table schema by changing:\n  \u2022 id: an integer column, marked PRIMARY KEY and auto\u2010increment\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('usuarios');"}
{"seed": "/* Adds a foreign key constraint to the tareas table that references the id column of the proyectos table. */\nALTER TABLE `tareas`\n  ADD CONSTRAINT `tareas_ibfk_1` FOREIGN KEY (`id_proyecto`) REFERENCES `proyectos` (`id`)", "description": "Adds a foreign key constraint to the tareas table that references the id column of the proyectos table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES"], "instruction": "Write a SQL query to add a foreign key constraint to the tareas table that references the id column of the proyectos table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the tareas table that references the id column of the proyectos table.\n\n-- Solution:\n```sql\nALTER TABLE tareas\n  ADD CONSTRAINT fk_tareas_proyectos\n    FOREIGN KEY (proyecto_id)\n    REFERENCES proyectos (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the tareas table that references the id column of the proyectos table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('tareas');"}
{"seed": "/* Selects all columns from the senasa table. */\nselect * from senasa", "description": "Selects all columns from the senasa table.", "concepts": ["select", "*"], "instruction": "Write a SQL query to select all columns from the senasa table.", "response": "-- Reasoning:\nWe need to select all columns from the senasa table.\n\n-- Solution:\n```sql\nSELECT * FROM senasa;\n```\n\n-- Explanation:\nThis query selects all columns from the senasa table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM senasa;"}
{"seed": "/* Creates a table named buyinginvoice with 9 columns: border_id (integer), b_order_no (varchar), b_order_date (date), vName (varchar), vAddress (varchar), t_discount (decimal), t_price (decimal), pay_method (varchar), datetime (datetime). */\nCREATE TABLE `buyinginvoice` (\n  `border_id` int(11) NOT NULL,\n  `b_order_no` varchar(50) NOT NULL,\n  `b_order_date` date NOT NULL,\n  `vName` varchar(100) NOT NULL,\n  `vAddress` varchar(250) NOT NULL,\n  `t_discount` decimal(10,2) NOT NULL,\n  `t_price` decimal(10,2) NOT NULL,\n  `pay_method` varchar(20) NOT NULL,\n  `datetime` datetime NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named buyinginvoice with 9 columns: border_id (integer), b_order_no (varchar), b_order_date (date), vName (varchar), vAddress (varchar), t_discount (decimal), t_price (decimal), pay_method (varchar), datetime (datetime).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "DATE", "DECIMAL", "DECIMAL", "VARCHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named buyinginvoice with 9 columns: border_id (integer), b_order_no (varchar), b_order_date (date), vName (varchar), vAddress (varchar), t_discount (decimal), t_price (decimal), pay_method (varchar), datetime (datetime).", "response": "-- Reasoning:\nWe need a new table named buyinginvoice. It should have an integer primary key so that each invoice has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE buyinginvoice (\n  border_id INT PRIMARY KEY,\n  b_order_no VARCHAR(255),\n  b_order_date DATE,\n  vName VARCHAR(255),\n  vAddress VARCHAR(255),\n  t_discount DECIMAL,\n  t_price DECIMAL,\n  pay_method VARCHAR(255),\n  datetime DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the buyinginvoice table with two columns:\n  \u2022 border_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('buyinginvoice');"}
{"seed": "/* Inserts two rows into the buyinginvoice table. */\nINSERT INTO `buyinginvoice` (`border_id`, `b_order_no`, `b_order_date`, `vName`, `vAddress`, `t_discount`, `t_price`, `pay_method`, `datetime`) VALUES\n(1, 'b001', '2019-12-30', 'abc', 'gghhhvfddddff', '250.00', '500.00', 'cash', '2019-12-30 00:00:00'),\n(2, 'b002', '2019-12-31', 'hhbb', 'kkjkkkkkkjjhhggkkkk', '25.00', '250.00', 'cheque', '2019-12-31 09:00:00')", "description": "Inserts two rows into the buyinginvoice table.", "concepts": ["INSERT INTO", "VALUES", "`buyinginvoice`", "`border_id`", "`b_order_no`", "`b_order_date`", "`"], "instruction": "Write a SQL query to insert two rows into the buyinginvoice table.", "response": "-- Reasoning:\nWe need to insert two rows into the buyinginvoice table.\n\n-- Solution:\n```sql\nINSERT INTO buyinginvoice (invoice_id, invoice_date, buyer_id, seller_id, total_amount)\nVALUES (1, '2020-01-01', 1, 2, 1000),\n       (2, '2020-01-02', 3, 4, 2000);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the buyinginvoice table:\n  \u2022 invoice_id: 1, 2\n  \u2022 invoice_date: '2020-01-01', '2020-01-02'\n  \u2022 buyer_id: 1, 3\n  \u2022 seller_id: 2, 4\n  \u2022 total_amount: 1000, 2000\n\n-- Tests:\n-- 1. Verify new rows appear\nSELECT * FROM buyinginvoice;"}
{"seed": "/* Creates a table named buyingitem with 9 columns: b_item_id (integer), border_id (integer), iName (varchar), iquantity (integer), iprice (decimal), iactual_amount (decimal), discount (decimal), humidity (varchar), final_amount (integer). */\nCREATE TABLE `buyingitem` (\n  `b_item_id` int(11) NOT NULL,\n  `border_id` int(11) NOT NULL,\n  `iName` varchar(50) NOT NULL,\n  `iquantity` int(11) NOT NULL,\n  `iprice` decimal(10,0) NOT NULL,\n  `iactual_amount` decimal(10,0) NOT NULL,\n  `discount` decimal(10,0) NOT NULL,\n  `humidity` varchar(10) NOT NULL,\n  `final_amount` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named buyingitem with 9 columns: b_item_id (integer), border_id (integer), iName (varchar), iquantity (integer), iprice (decimal), iactual_amount (decimal), discount (decimal), humidity (varchar), final_amount (integer).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "DECIMAL", "DECIMAL", "DECIMAL", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named buyingitem with 9 columns: b_item_id (integer), border_id (integer), iName (varchar), iquantity (integer), iprice (decimal), iactual_amount (decimal), discount (decimal), humidity (varchar), final_amount (integer).", "response": "-- Reasoning:\nWe need a new table named buyingitem. It should have an integer primary key so that each buyingitem has a unique identifier, and a name column to store the buyingitem\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE buyingitem (\n  b_item_id INT PRIMARY KEY,\n  border_id INT,\n  iName VARCHAR(255),\n  iquantity INT,\n  iprice DECIMAL,\n  iactual_amount DECIMAL,\n  discount DECIMAL,\n  humidity VARCHAR(255),\n  final_amount INT\n);\n```\n\n-- Explanation:\nThis statement defines the buyingitem table with two columns:\n  \u2022 b_item_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('buyingitem');"}
{"seed": "/* Creates a table named customer with seven columns: customerID (integer primary key), cName (varchar), cMNumber (varchar), cLNumber (varchar), cEmail (varchar), cAddress (varchar), cCity (varchar), cDistrict (varchar). */\nCREATE TABLE `customer` (\n  `customerID` int(11) NOT NULL,\n  `cName` varchar(100) NOT NULL,\n  `cMNumber` varchar(10) NOT NULL,\n  `cLNumber` varchar(10) DEFAULT NULL,\n  `cEmail` varchar(150) DEFAULT NULL,\n  `cAddress` varchar(250) NOT NULL,\n  `cCity` varchar(50) NOT NULL,\n  `cDistrict` varchar(50) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named customer with seven columns: customerID (integer primary key), cName (varchar), cMNumber (varchar), cLNumber (varchar), cEmail (varchar), cAddress (varchar), cCity (varchar), cDistrict (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named customer with seven columns: customerID (integer primary key), cName (varchar), cMNumber (varchar), cLNumber (varchar), cEmail (varchar), cAddress (varchar), cCity (varchar), cDistrict (varchar).", "response": "-- Reasoning:\nWe need a new table named customer. It should have an integer primary key so that each customer has a unique identifier, and a name column to store the customer\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE customer (\n  customerID INT PRIMARY KEY,\n  cName VARCHAR(255),\n  cMNumber VARCHAR(255),\n  cLNumber VARCHAR(255),\n  cEmail VARCHAR(255),\n  cAddress VARCHAR(255),\n  cCity VARCHAR(255),\n  cDistrict VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the customer table with seven columns:\n  \u2022 customerID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cName: variable\u2010length string up to 255 characters\n  \u2022 cMNumber: variable\u2010length string up to 255 characters\n  \u2022 cLNumber: variable\u2010length string up to 255 characters\n  \u2022 cEmail: variable\u2010length string up to 255 characters\n  \u2022 cAddress: variable\u2010length string up to 255 characters\n  \u2022 cCity: variable\u2010length string up to 255 characters\n  \u2022 cDistrict: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table"}
{"seed": "/* Drops the table named access_token if it exists. */\nDROP TABLE IF EXISTS `access_token`", "description": "Drops the table named access_token if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named access_token if it exists.", "response": "-- Reasoning:\nWe need to delete the access_token table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS access_token;\n```\n\n-- Explanation:\nThis statement deletes the access_token table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('access_token');"}
{"seed": "/* Creates a table named access_token with five columns: uid (integer), token (varchar), create_time (datetime), update_time (datetime), and im_token (varchar). */\nCREATE TABLE `access_token` (\n  `uid` int(10) NOT NULL,\n  `token` varchar(64) NOT NULL COMMENT 'app\u7528\u6237\u767b\u9646\u51ed\u8bc1',\n  `create_time` datetime NOT NULL,\n  `update_time` datetime NOT NULL,\n  `im_token` varchar(64) DEFAULT NULL COMMENT '\u7b2c\u4e09\u65b9IM\u767b\u9646\u51ed\u8bc1',\n  PRIMARY KEY (`uid`),\n  UNIQUE KEY `token_index` (`token`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named access_token with five columns: uid (integer), token (varchar), create_time (datetime), update_time (datetime), and im_token (varchar).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "UNIQUE KEY", "COMMENT", "DEFAULT", "ROW_FORMAT"], "instruction": "Write a SQL query to create a table named access_token with five columns: uid (integer), token (varchar), create_time (datetime), update_time (datetime), and im_token (varchar).", "response": "-- Reasoning:\nWe need a new table named access_token. It should have an integer primary key so that each user has a unique identifier, and a token column to store the user\u2019s access token as text.\n\n-- Solution:\n```sql\nCREATE TABLE access_token (\n  uid INT PRIMARY KEY,\n  token VARCHAR(255),\n  create_time DATETIME,\n  update_time DATETIME,\n  im_token VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the access_token table with five columns:\n  \u2022 uid: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 token: variable\u2010length string up to 255 characters\n  \u2022 create_time: datetime\n  \u2022 update_time: datetime\n  \u2022 im_token: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('access_token');"}
{"seed": "/* Drops the table named app_version if it exists. */\nDROP TABLE IF EXISTS `app_version`", "description": "Drops the table named app_version if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named app_version if it exists.", "response": "-- Reasoning:\nWe need to delete the app_version table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS app_version;\n```\n\n-- Explanation:\nThis statement deletes the app_version table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('app_version');"}
{"seed": "/* Creates a table named app_version with the following columns: id (integer primary key), content (varchar), create_time (datetime), link_url (varchar), nature_no (integer), os (varchar), url (varchar), version_no (varchar), status (tinyint), is_force (tinyint). */\nCREATE TABLE `app_version` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `content` varchar(255) DEFAULT NULL COMMENT '\u66f4\u65b0\u8bf4\u660e',\n  `create_time` datetime DEFAULT NULL,\n  `link_url` varchar(255) DEFAULT NULL COMMENT '\u5916\u90e8\u4e0b\u8f7d\u5730\u5740',\n  `nature_no` int(11) DEFAULT NULL COMMENT '\u81ea\u7136\u7248\u672c\u53f7',\n  `os` varchar(20) DEFAULT NULL COMMENT '\u7cfb\u7edf\u7c7b\u578bandroid or ios',\n  `url` varchar(200) DEFAULT NULL COMMENT '\u5185\u90e8\u4e0b\u8f7d\u5730\u5740',\n  `version_no` varchar(20) DEFAULT NULL COMMENT '\u7248\u672c\u53f7',\n  `status` tinyint(4) DEFAULT NULL COMMENT '1-\u6709\u6548   0-\u65e0\u6548',\n  `is_force` tinyint(4) DEFAULT '0' COMMENT '\u662f\u5426\u5f3a\u5236\u5347\u7ea7 0:\u5426 1\uff1a\u662f',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named app_version with the following columns: id (integer primary key), content (varchar), create_time (datetime), link_url (varchar), nature_no (integer), os (varchar), url (varchar), version_no (varchar), status (tinyint), is_force (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ROW_FORMAT", "COMMENT", "VARCHAR", "INT", "TINYINT", "TINY"], "instruction": "Write a SQL query to create a table named app_version with the following columns: id (integer primary key), content (varchar), create_time (datetime), link_url (varchar), nature_no (integer), os (varchar), url (varchar), version_no (varchar), status (tinyint), is_force (tinyint).", "response": "-- Reasoning:\nWe need a new table named app_version. It should have an integer primary key so that each version has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE app_version (\n  id INT PRIMARY KEY,\n  content VARCHAR(255),\n  create_time DATETIME,\n  link_url VARCHAR(255),\n  nature_no INT,\n  os VARCHAR(255),\n  url VARCHAR(255),\n  version_no VARCHAR(255),\n  status TINYINT,\n  is_force TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the app_version table with nine columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 content: variable\u2010length string up to 255 characters\n  \u2022 create_time: datetime\n  \u2022 link_url: variable\u2010length string up to 255 characters\n  \u2022 nature_no: integer\n  \u2022 os: variable\u2010length string up to 255 characters\n  \u2022 url: variable\u2010length string up to 255 characters\n  \u2022 version_no: variable\u2010length string up to 255 characters\n  \u2022 status: tinyint\n  \u2022 is_force: tinyint\n\n-- Tests:\n-- 1. Verify"}
{"seed": "/* Drops the table named as_aftersaleod if it exists. */\nDROP TABLE IF EXISTS `as_aftersaleod`", "description": "Drops the table named as_aftersaleod if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named as_aftersaleod if it exists.", "response": "-- Reasoning:\nWe need to drop the table named as_aftersaleod if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS as_aftersaleod;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('as_aftersaleod');"}
{"seed": "/* Creates a table named as_aftersaleod with 10 columns: asodID (varchar), customer (varchar), executer (varchar), express (varchar), courierNum (varchar), bkexpress (varchar), bkcourierNum (varchar), amount (decimal), addr (varchar), status (tinyint). */\nCREATE TABLE `as_aftersaleod` (\n  `asodID` varchar(50) NOT NULL,\n  `customer` varchar(50) DEFAULT NULL,\n  `executer` varchar(50) DEFAULT NULL,\n  `express` varchar(50) DEFAULT NULL,\n  `courierNum` varchar(50) DEFAULT NULL,\n  `bkexpress` varchar(50) DEFAULT NULL,\n  `bkcourierNum` varchar(50) DEFAULT NULL,\n  `amount` decimal(12,2) DEFAULT NULL,\n  `addr` varchar(50) DEFAULT NULL,\n  `status` tinyint(4) DEFAULT NULL,\n  PRIMARY KEY (`asodID`),\n  KEY `idx_asod_st` (`executer`),\n  KEY `idx_asod_cus` (`customer`),\n  KEY `idx_asod_ex` (`bkexpress`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named as_aftersaleod with 10 columns: asodID (varchar), customer (varchar), executer (varchar), express (varchar), courierNum (varchar), bkexpress (varchar), bkcourierNum (varchar), amount (decimal), addr (varchar), status (tinyint).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "DECIMAL", "TINYINT"], "instruction": "Write a SQL query to create a table named as_aftersaleod with 10 columns: asodID (varchar), customer (varchar), executer (varchar), express (varchar), courierNum (varchar), bkexpress (varchar), bkcourierNum (varchar), amount (decimal), addr (varchar), status (tinyint).", "response": "-- Reasoning:\nWe need a new table named as_aftersaleod. It should have an asodID column to store the unique identifier of each after\u2010sale order, a customer column to store the customer\u2019s name, an executer column to store the executer\u2019s name, an express column to store the express company, a courierNum column to store the courier number, a bkexpress column to store the backup express company, a bkcourierNum column to store the backup courier number, an amount column to store the amount of the order, an addr column to store the address of the order, and a status column to store the status of the order.\n\n-- Solution:\n```sql\nCREATE TABLE as_aftersaleod (\n  asodID VARCHAR(255),\n  customer VARCHAR(255),\n  executer VARCHAR(255),\n  express VARCHAR(255),\n  courierNum VARCHAR(255),\n  bkexpress VARCHAR(255),\n  bkcourierNum VARCHAR(255),\n  amount DECIMAL,\n  addr VARCHAR(255),\n  status TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the as_aftersaleod table with 10 columns:\n  \u2022 asodID: varchar, unique identifier\n  \u2022 customer: varchar, customer\u2019s name\n  \u2022 executer: varchar, executer\u2019"}
{"seed": "/* Inserts a new row into the as_aftersaleod table with the given values. */\nINSERT INTO `as_aftersaleod` VALUES ('AS10041','10017','dsf',NULL,'dasf',NULL,'adsf12',0.00,'adsf',2)", "description": "Inserts a new row into the as_aftersaleod table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the as_aftersaleod table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the as_aftersaleod table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO as_aftersaleod (\n  order_id,\n  product_id,\n  quantity,\n  price,\n  status\n) VALUES (\n  1000000000,\n  1000000000,\n  1,\n  100,\n  'pending'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the as_aftersaleod table with the given values:\n  \u2022 order_id: 1000000000\n  \u2022 product_id: 1000000000\n  \u2022 quantity: 1\n  \u2022 price: 100\n  \u2022 status: pending\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM as_aftersaleod;"}
{"seed": "/* Drops the table named as_aftersaleod_de if it exists. */\nDROP TABLE IF EXISTS `as_aftersaleod_de`", "description": "Drops the table named as_aftersaleod_de if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named as_aftersaleod_de if it exists.", "response": "-- Reasoning:\nWe need to drop the table named as_aftersaleod_de if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS as_aftersaleod_de;\n```\n\n-- Explanation:\nThis DROP statement removes the table named as_aftersaleod_de if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('as_aftersaleod_de');"}
{"seed": "/* Creates a table named as_aftersaleod_de with five columns: id (integer primary key), asodID (varchar), sku (varchar), quantity (smallint), newqty (smallint), and remark (varchar). */\nCREATE TABLE `as_aftersaleod_de` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `asodID` varchar(50) DEFAULT NULL,\n  `sku` varchar(50) DEFAULT NULL,\n  `quantity` smallint(6) DEFAULT NULL,\n  `newqty` smallint(6) DEFAULT NULL,\n  `remark` varchar(200) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_asodde_asID` (`asodID`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8", "description": "Creates a table named as_aftersaleod_de with five columns: id (integer primary key), asodID (varchar), sku (varchar), quantity (smallint), newqty (smallint), and remark (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "SMALLINT", "DEFAULT", "NULL", "NOT", "NULL", "AUTO"], "instruction": "Write a SQL query to create a table named as_aftersaleod_de with five columns: id (integer primary key), asodID (varchar), sku (varchar), quantity (smallint), newqty (smallint), and remark (varchar).", "response": "-- Reasoning:\nWe need a new table named as_aftersaleod_de. It should have an integer primary key so that each record has a unique identifier, and four other columns to store the details of the after\u2010sale order.\n\n-- Solution:\n```sql\nCREATE TABLE as_aftersaleod_de (\n  id INT PRIMARY KEY,\n  asodID VARCHAR(255),\n  sku VARCHAR(255),\n  quantity SMALLINT,\n  newqty SMALLINT,\n  remark VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the as_aftersaleod_de table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 asodID: variable\u2010length string up to 255 characters\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 quantity: small integer\n  \u2022 newqty: small integer\n  \u2022 remark: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('as_aftersaleod_de');"}
{"seed": "/* Inserts a new row into the as_aftersaleod_de table with the given values. */\nINSERT INTO `as_aftersaleod_de` VALUES (1,'AS10041','1001',1,0,NULL)", "description": "Inserts a new row into the as_aftersaleod_de table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the as_aftersaleod_de table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the as_aftersaleod_de table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO as_aftersaleod_de (\n  as_aftersaleod_id,\n  as_aftersaleod_de_id,\n  as_aftersaleod_de_name,\n  as_aftersaleod_de_price,\n  as_aftersaleod_de_quantity,\n  as_aftersaleod_de_total,\n  as_aftersaleod_de_status,\n  as_aftersaleod_de_created_at,\n  as_aftersaleod_de_updated_at\n)\nVALUES (\n  1,\n  1,\n  '',\n  100000,\n  1,\n  100000,\n  1,\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the as_aftersaleod_de table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM as_aftersaleod_de;"}
{"seed": "/* Drops the table console_sequence if it exists. */\nDROP TABLE IF EXISTS `console_sequence`", "description": "Drops the table console_sequence if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table console_sequence if it exists.", "response": "-- Reasoning:\nWe need to drop the console_sequence table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS console_sequence;\n```\n\n-- Explanation:\nThis statement drops the console_sequence table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('console_sequence');"}
{"seed": "/* Creates a table named console_sequence with three columns: id (integer primary key), category (varchar) and code (integer). */\nCREATE TABLE `console_sequence` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `category` varchar(10) DEFAULT NULL,\n  `code` int(6) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8", "description": "Creates a table named console_sequence with three columns: id (integer primary key), category (varchar) and code (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named console_sequence with three columns: id (integer primary key), category (varchar) and code (integer).", "response": "-- Reasoning:\nWe need a new table named console_sequence. It should have an integer primary key so that each console has a unique identifier, and a category and code column to store the console\u2019s category and code as text.\n\n-- Solution:\n```sql\nCREATE TABLE console_sequence (\n  id INTEGER PRIMARY KEY,\n  category VARCHAR(255),\n  code INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the console_sequence table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 category: variable\u2010length string up to 255 characters\n  \u2022 code: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('console_sequence');"}
{"seed": "/* Inserts the values 2, '\u7c7b\u76ee', 100018, 3, '\u5546\u5bb6', 10024, 4, '\u5165\u5e93', 100026, 5, '\u8ba2\u5355', 10053 into the console_sequence table. */\nINSERT INTO `console_sequence` VALUES (2,'\u7c7b\u76ee',100018),(3,'\u5546\u5bb6',10024),(4,'\u5165\u5e93',100026),(5,'\u8ba2\u5355',10053)", "description": "Inserts the values 2, '\u7c7b\u76ee', 100018, 3, '\u5546\u5bb6', 10024, 4, '\u5165\u5e93', 100026, 5, '\u8ba2\u5355', 10053 into the console_sequence table.", "concepts": ["INSERT INTO", "VALUES", "console_sequence", "100018", "10024", "10002"], "instruction": "Write a SQL query to insert the values 2, '\u7c7b\u76ee', 100018, 3, '\u5546\u5bb6', 10024, 4, '\u5165\u5e93', 100026, 5, '\u8ba2\u5355', 10053 into the console_sequence table.", "response": "-- Reasoning:\nWe need to insert the values into the console_sequence table.\n\n-- Solution:\n```sql\nINSERT INTO console_sequence (id, name, value, type)\nVALUES (2, '\u7c7b\u76ee', 100018, 3),\n       (3, '\u5546\u5bb6', 10024, 4),\n       (4, '\u5165\u5e93', 100026, 5),\n       (5, '\u8ba2\u5355', 10053, 6);\n```\n\n-- Explanation:\nThis INSERT statement inserts the values into the console_sequence table.\n\n-- Tests:\n-- 1. Verify values are inserted\nSELECT * FROM console_sequence;"}
{"seed": "/* Drops the table named customer_rated if it exists. */\nDROP TABLE IF EXISTS `customer_rated`", "description": "Drops the table named customer_rated if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named customer_rated if it exists.", "response": "-- Reasoning:\nWe need to drop the table named customer_rated if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS customer_rated;\n```\n\n-- Explanation:\nThis DROP statement removes the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('customer_rated');"}
{"seed": "/* Creates a table named customer_rated with four columns: id (integer primary key), customer (varchar), orderID (varchar), and amount (decimal). */\nCREATE TABLE `customer_rated` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `customer` varchar(45) DEFAULT NULL COMMENT '\u9500\u552e\u4eba\u5458',\n  `orderID` varchar(45) DEFAULT NULL COMMENT '\u8ba1\u63d0\u6708\u4efd',\n  `amount` decimal(12,2) DEFAULT NULL COMMENT '\u63d0\u6210\u91d1\u989d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='\u5458\u5de5\u63d0\u6210\u8868'", "description": "Creates a table named customer_rated with four columns: id (integer primary key), customer (varchar), orderID (varchar), and amount (decimal).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DECIMAL", "COMMENT"], "instruction": "Write a SQL query to create a table named customer_rated with four columns: id (integer primary key), customer (varchar), orderID (varchar), and amount (decimal).", "response": "-- Reasoning:\nWe need a new table named customer_rated. It should have an integer primary key so that each rating has a unique identifier, and a customer column to store the customer\u2019s name as text, an orderID column to store the order\u2019s ID as text, and an amount column to store the rating as a decimal.\n\n-- Solution:\n```sql\nCREATE TABLE customer_rated (\n  id INTEGER PRIMARY KEY,\n  customer VARCHAR(255),\n  orderID VARCHAR(255),\n  amount DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the customer_rated table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 customer: variable\u2010length string up to 255 characters\n  \u2022 orderID: variable\u2010length string up to 255 characters\n  \u2022 amount: decimal\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('customer_rated');"}
{"seed": "/* Drops the table customer_rated_de if it exists. */\nDROP TABLE IF EXISTS `customer_rated_de`", "description": "Drops the table customer_rated_de if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table customer_rated_de if it exists.", "response": "-- Reasoning:\nWe need to drop the table customer_rated_de if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS customer_rated_de;\n```\n\n-- Explanation:\nThis DROP statement removes the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('customer_rated_de');"}
{"seed": "/* Creates a table named customer_rated_de with five columns: id (integer primary key), ratedID (integer), orderDeID (integer), sku (varchar), and amount (decimal). */\nCREATE TABLE `customer_rated_de` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `ratedID` int(11) DEFAULT NULL,\n  `orderDeID` int(11) DEFAULT NULL,\n  `sku` varchar(45) DEFAULT NULL,\n  `amount` decimal(12,2) DEFAULT NULL COMMENT '\u63d0\u6210\u91d1\u989d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='\u5458\u5de5\u63d0\u6210\u8868'", "description": "Creates a table named customer_rated_de with five columns: id (integer primary key), ratedID (integer), orderDeID (integer), sku (varchar), and amount (decimal).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named customer_rated_de with five columns: id (integer primary key), ratedID (integer), orderDeID (integer), sku (varchar), and amount (decimal).", "response": "-- Reasoning:\nWe need a new table named customer_rated_de. It should have an integer primary key so that each customer_rated_de has a unique identifier, and a ratedID column to store the customer_rated_de\u2019s ratedID as integer.\n\n-- Solution:\n```sql\nCREATE TABLE customer_rated_de (\n  id INT PRIMARY KEY,\n  ratedID INT,\n  orderDeID INT,\n  sku VARCHAR(255),\n  amount DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the customer_rated_de table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ratedID: integer\n  \u2022 orderDeID: integer\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 amount: decimal\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('customer_rated_de');"}
{"seed": "/* Drops the table dict_data if it exists. */\nDROP TABLE IF EXISTS `dict_data`", "description": "Drops the table dict_data if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table dict_data if it exists.", "response": "-- Reasoning:\nWe need to drop the table dict_data if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS dict_data;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('dict_data');"}
{"seed": "/* Creates a table named dict_data with seven columns: id (integer primary key), name (varchar), value (varchar), remark (varchar), seq (integer), update_time (integer), and dict_type_id (integer). */\nCREATE TABLE `dict_data` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(32) NOT NULL COMMENT '\u540d\u79f0',\n  `value` varchar(255) NOT NULL COMMENT '\u5bf9\u5e94\u7684\u503c',\n  `remark` varchar(32) DEFAULT NULL,\n  `seq` int(11) NOT NULL COMMENT '\u6392\u5e8f\uff0c\u7531\u5c0f\u5230\u5927',\n  `update_time` int(10) NOT NULL,\n  `dict_type_id` int(11) NOT NULL COMMENT '\u5b57\u5178\u7c7b\u578bID',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named dict_data with seven columns: id (integer primary key), name (varchar), value (varchar), remark (varchar), seq (integer), update_time (integer), and dict_type_id (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "ROW_FORMAT", "COMMENT", "NOT NULL", "DEFAULT", "ENGINE", "ROW_FORMAT", "ROW_FORMAT"], "instruction": "Write a SQL query to create a table named dict_data with seven columns: id (integer primary key), name (varchar), value (varchar), remark (varchar), seq (integer), update_time (integer), and dict_type_id (integer).", "response": "-- Reasoning:\nWe need a new table named dict_data. It should have an integer primary key so that each row has a unique identifier, and a name column to store the data\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE dict_data (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  value VARCHAR(255),\n  remark VARCHAR(255),\n  seq INTEGER,\n  update_time INTEGER,\n  dict_type_id INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the dict_data table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 value: variable\u2010length string up to 255 characters\n  \u2022 remark: variable\u2010length string up to 255 characters\n  \u2022 seq: integer\n  \u2022 update_time: integer\n  \u2022 dict_type_id: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('dict_data');"}
{"seed": "/* Inserts four rows into the dict_data table. */\nINSERT INTO `dict_data` VALUES (1,'\u652f\u4ed8\u5b9d\u8d26\u53f7','123456','',1,1483712033,1),(2,'\u652f\u4ed8\u5b9d\u8d26\u53f7','111111',NULL,2,1483712033,1),(3,'\u5fae\u4fe1\u8d26\u53f7','222222',NULL,3,1483712033,1),(4,'\u5de5\u5546\u94f6\u884c','333333',NULL,4,1483712033,1)", "description": "Inserts four rows into the dict_data table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert four rows into the dict_data table.", "response": "-- Reasoning:\nWe need to insert four rows into the dict_data table.\n\n-- Solution:\n```sql\nINSERT INTO dict_data (key, value) VALUES\n  ('a', 'apple'),\n  ('b', 'banana'),\n  ('c', 'carrot'),\n  ('d', 'dog');\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the dict_data table.\n\n-- Tests:\n-- 1. Verify all rows are inserted\nSELECT * FROM dict_data;"}
{"seed": "/* Drops the table dict_type if it exists. */\nDROP TABLE IF EXISTS `dict_type`", "description": "Drops the table dict_type if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table dict_type if it exists.", "response": "-- Reasoning:\nWe need to drop the table dict_type if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS dict_type;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('dict_type');"}
{"seed": "/* Creates a table named dict_type with five columns: id (integer primary key), name (varchar), remark (varchar), update_time (integer), and a primary key on the id column. */\nCREATE TABLE `dict_type` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(32) NOT NULL,\n  `remark` varchar(32) DEFAULT NULL,\n  `update_time` int(11) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named dict_type with five columns: id (integer primary key), name (varchar), remark (varchar), update_time (integer), and a primary key on the id column.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "ROW_FORMAT", "ENGINE", "NOT NULL", "DEFAULT", "NULL", "ROW_FORMAT", "CHARSET", "COMP"], "instruction": "Write a SQL query to create a table named dict_type with five columns: id (integer primary key), name (varchar), remark (varchar), update_time (integer), and a primary key on the id column.", "response": "-- Reasoning:\nWe need a new table named dict_type. It should have an integer primary key so that each type has a unique identifier, and a name column to store the type\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE dict_type (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  remark VARCHAR(255),\n  update_time INT\n);\n```\n\n-- Explanation:\nThis statement defines the dict_type table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 remark: variable\u2010length string up to 255 characters\n  \u2022 update_time: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('dict_type');"}
{"seed": "/* Inserts a new row into the dict_type table with the given values. */\nINSERT INTO `dict_type` VALUES (1,'\u652f\u4ed8\u4fe1\u606f','',1483712011)", "description": "Inserts a new row into the dict_type table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the dict_type table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the dict_type table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO dict_type (type_id, type_name)\nVALUES (1, 'type1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the dict_type table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM dict_type;"}
{"seed": "/* Drops the mall_cart table if it exists. */\nDROP TABLE IF EXISTS `mall_cart`", "description": "Drops the mall_cart table if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the mall_cart table if it exists.", "response": "-- Reasoning:\nWe need to drop the mall_cart table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_cart;\n```\n\n-- Explanation:\nThis DROP statement removes the mall_cart table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_cart');"}
{"seed": "/* Creates a table named mall_cart with three columns: cusCode (varchar), totalCount (smallint), and amount (decimal). */\nCREATE TABLE `mall_cart` (\n  `cusCode` varchar(50) NOT NULL,\n  `totalCount` smallint(5) unsigned DEFAULT '0',\n  `amount` decimal(12,2) DEFAULT '0.00',\n  PRIMARY KEY (`cusCode`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named mall_cart with three columns: cusCode (varchar), totalCount (smallint), and amount (decimal).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "VARCHAR", "SMALLINT", "DECIMAL"], "instruction": "Write a SQL query to create a table named mall_cart with three columns: cusCode (varchar), totalCount (smallint), and amount (decimal).", "response": "-- Reasoning:\nWe need a new table named mall_cart. It should have a cusCode column to store the customer\u2019s code as text, a totalCount column to store the total number of items in the cart, and an amount column to store the total amount of the cart.\n\n-- Solution:\n```sql\nCREATE TABLE mall_cart (\n  cusCode VARCHAR(255),\n  totalCount SMALLINT,\n  amount DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the mall_cart table with three columns:\n  \u2022 cusCode: variable\u2010length string up to 255 characters\n  \u2022 totalCount: small integer\n  \u2022 amount: decimal\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mall_cart');"}
{"seed": "/* Drops the table mall_cart_de if it exists. */\nDROP TABLE IF EXISTS `mall_cart_de`", "description": "Drops the table mall_cart_de if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table mall_cart_de if it exists.", "response": "-- Reasoning:\nWe need to drop the table mall_cart_de if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_cart_de;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_cart_de');"}
{"seed": "/* Creates a table named mall_cart_de with five columns: id (integer primary key), cusCode (varchar), sku (varchar), priceType (char), skuCount (smallint), price (decimal), skuAmount (decimal). */\nCREATE TABLE `mall_cart_de` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `cusCode` varchar(50) NOT NULL,\n  `sku` varchar(50) NOT NULL,\n  `priceType` char(1) NOT NULL,\n  `skuCount` smallint(5) unsigned DEFAULT '0',\n  `price` decimal(12,2) DEFAULT '0.00' COMMENT '\u5355\u4ef7',\n  `skuAmount` decimal(12,2) DEFAULT '0.00' COMMENT '\u603b\u4ef7\u683c',\n  PRIMARY KEY (`id`),\n  KEY `idx_cart_cus` (`cusCode`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named mall_cart_de with five columns: id (integer primary key), cusCode (varchar), sku (varchar), priceType (char), skuCount (smallint), price (decimal), skuAmount (decimal).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "COMMENT", "DEFAULT", "COMMENT", "DEFAULT", "COMMENT", "DEFAULT", "COMMENT", "DEFAULT"], "instruction": "Write a SQL query to create a table named mall_cart_de with five columns: id (integer primary key), cusCode (varchar), sku (varchar), priceType (char), skuCount (smallint), price (decimal), skuAmount (decimal).", "response": "-- Reasoning:\nWe need a new table named mall_cart_de. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE mall_cart_de (\n  id INT PRIMARY KEY,\n  cusCode VARCHAR(255),\n  sku VARCHAR(255),\n  priceType CHAR(1),\n  skuCount SMALLINT,\n  price DECIMAL,\n  skuAmount DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the mall_cart_de table with six columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cusCode: variable\u2010length string up to 255 characters\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 priceType: char, 1 character\n  \u2022 skuCount: smallint, 2 bytes\n  \u2022 price: decimal, 10 bytes\n  \u2022 skuAmount: decimal, 10 bytes\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mall_cart_de');"}
{"seed": "/* Drops the mall_category table if it exists. */\nDROP TABLE IF EXISTS `mall_category`", "description": "Drops the mall_category table if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the mall_category table if it exists.", "response": "-- Reasoning:\nWe need to drop the mall_category table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_category;\n```\n\n-- Explanation:\nThis DROP statement drops the mall_category table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_category');"}
{"seed": "/* Creates a table named mall_category with five columns: id (integer primary key), cateName (varchar), cateCode (varchar), parentCode (varchar), and remare (varchar). */\nCREATE TABLE `mall_category` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `cateName` varchar(50) DEFAULT NULL,\n  `cateCode` varchar(50) DEFAULT NULL,\n  `parentCode` varchar(50) DEFAULT NULL,\n  `remare` varchar(200) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_cate_code` (`cateCode`),\n  KEY `idx_cate_pcode` (`parentCode`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8", "description": "Creates a table named mall_category with five columns: id (integer primary key), cateName (varchar), cateCode (varchar), parentCode (varchar), and remare (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named mall_category with five columns: id (integer primary key), cateName (varchar), cateCode (varchar), parentCode (varchar), and remare (varchar).", "response": "-- Reasoning:\nWe need a new table named mall_category. It should have an integer primary key so that each category has a unique identifier, and four other columns to store the category\u2019s name, code, parent code, and remark.\n\n-- Solution:\n```sql\nCREATE TABLE mall_category (\n  id INTEGER PRIMARY KEY,\n  cateName VARCHAR(255),\n  cateCode VARCHAR(255),\n  parentCode VARCHAR(255),\n  remark VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the mall_category table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cateName: variable\u2010length string up to 255 characters\n  \u2022 cateCode: variable\u2010length string up to 255 characters\n  \u2022 parentCode: variable\u2010length string up to 255 characters\n  \u2022 remark: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mall_category');"}
{"seed": "/* Inserts 6 rows into the mall_category table. */\nINSERT INTO `mall_category` VALUES (1,'A1001','100013',NULL,NULL),(2,'A100101','100014','100013',NULL),(3,'A100102','100015','100013',NULL),(4,'A100103','100016','100013',NULL),(5,'A2001','100017',NULL,NULL),(6,'A200101','100018','100017',NULL)", "description": "Inserts 6 rows into the mall_category table.", "concepts": ["INSERT INTO", "VALUES", "mall_category", "100013", "100014", "100"], "instruction": "Write a SQL query to insert 6 rows into the mall_category table.", "response": "-- Reasoning:\nWe need to insert 6 rows into the mall_category table.\n\n-- Solution:\n```sql\nINSERT INTO mall_category (category_id, category_name)\nVALUES (1, 'Electronics'), (2, 'Clothing'), (3, 'Home'), (4, 'Grocery'), (5, 'Beauty'), (6, 'Sports');\n```\n\n-- Explanation:\nThis INSERT statement inserts 6 rows into the mall_category table.\n\n-- Tests:\n-- 1. Verify 6 rows are inserted\nSELECT * FROM mall_category;"}
{"seed": "/* Drops the table mall_customer if it exists. */\nDROP TABLE IF EXISTS `mall_customer`", "description": "Drops the table mall_customer if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table mall_customer if it exists.", "response": "-- Reasoning:\nWe need to drop the table mall_customer if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_customer;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_customer');"}
{"seed": "/* Creates a table named mall_customer with 17 columns: id (integer primary key), cusCode (varchar), cusName (varchar), passwd (varchar), status (tinyint), sex (char), birthday (date), email (varchar), phone (varchar), wechat (varchar), upCode (varchar), saler (varchar), rate (tinyint), amount (decimal), priceType (char), cusType (char), coupon (tinyint). */\nCREATE TABLE `mall_customer` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `cusCode` varchar(50) NOT NULL,\n  `cusName` varchar(50) NOT NULL,\n  `passwd` varchar(50) NOT NULL,\n  `status` tinyint(4) DEFAULT NULL,\n  `sex` char(1) NOT NULL,\n  `birthday` date NOT NULL,\n  `email` varchar(100) NOT NULL,\n  `phone` varchar(50) NOT NULL,\n  `wechat` varchar(50) NOT NULL,\n  `upCode` varchar(50) DEFAULT NULL,\n  `saler` varchar(50) DEFAULT NULL,\n  `rate` tinyint(4) DEFAULT NULL,\n  `amount` decimal(12,2) DEFAULT NULL,\n  `priceType` char(1) DEFAULT NULL,\n  `cusType` char(1) DEFAULT NULL,\n  `coupon` tinyint(1) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_cus_cd` (`cusCode`),\n  KEY `idx_sus_nm` (`cusName`),\n  KEY `idx_cus_sa` (`saler`),\n  KEY `idx_cus_uncd` (`upCode`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8", "description": "Creates a table named mall_customer with 17 columns: id (integer primary key), cusCode (varchar), cusName (varchar), passwd (varchar), status (tinyint), sex (char), birthday (date), email (varchar), phone (varchar), wechat (varchar), upCode (varchar), saler (varchar), rate (tinyint), amount (decimal), priceType (char), cusType (char), coupon (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named mall_customer with 17 columns: id (integer primary key), cusCode (varchar), cusName (varchar), passwd (varchar), status (tinyint), sex (char), birthday (date), email (varchar), phone (varchar), wechat (varchar), upCode (varchar), saler (varchar), rate (tinyint), amount (decimal), priceType (char), cusType (char), coupon (tinyint).", "response": "-- Reasoning:\nWe need a new table named mall_customer. It should have an integer primary key so that each customer has a unique identifier, and a name column to store the customer\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE mall_customer (\n  id INT PRIMARY KEY,\n  cusCode VARCHAR(255),\n  cusName VARCHAR(255),\n  passwd VARCHAR(255),\n  status TINYINT,\n  sex CHAR(1),\n  birthday DATE,\n  email VARCHAR(255),\n  phone VARCHAR(255),\n  wechat VARCHAR(255),\n  upCode VARCHAR(255),\n  saler VARCHAR(255),\n  rate TINYINT,\n  amount DECIMAL,\n  priceType CHAR(1),\n  cusType CHAR(1),\n  coupon TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the mall_customer table with 17 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cusCode: variable\u2010length string up to 255 characters\n  \u2022 cusName: variable\u2010length string up to 255 characters\n  \u2022 passwd: variable\u2010length string up to 255 characters\n  \u2022 status: integer\n  \u2022 sex: char(1)\n  \u2022 birthday"}
{"seed": "/* Inserts a new row into the mall_customer table with the given values. */\nINSERT INTO `mall_customer` VALUES (4,'10024','\u97e9\u78ca','14837c5d51101922a894852397eb0316',1,'M','2017-01-01','jesse.18@163.com','18615267773','18615267773','','36',0,NULL,'A','0',1)", "description": "Inserts a new row into the mall_customer table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the mall_customer table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the mall_customer table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO mall_customer (customer_id, gender, age, annual_income, spending_score)\nVALUES (1, 'Female', 19, 15, 39);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the mall_customer table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM mall_customer;"}
{"seed": "/* Drops the table mall_customer_addr if it exists. */\nDROP TABLE IF EXISTS `mall_customer_addr`", "description": "Drops the table mall_customer_addr if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table mall_customer_addr if it exists.", "response": "-- Reasoning:\nWe need to drop the table mall_customer_addr if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_customer_addr;\n```\n\n-- Explanation:\nThis DROP statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('mall_customer_addr');"}
{"seed": "/* Creates a table named mall_customer_addr with five columns: id (integer primary key), customer (varchar), addr (varchar), recipient (varchar), phone (varchar), and used (char). */\nCREATE TABLE `mall_customer_addr` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `customer` varchar(50) DEFAULT NULL,\n  `addr` varchar(200) DEFAULT NULL,\n  `recipient` varchar(50) DEFAULT NULL,\n  `phone` varchar(50) DEFAULT NULL,\n  `used` char(1) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_cusaddr_cus` (`customer`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named mall_customer_addr with five columns: id (integer primary key), customer (varchar), addr (varchar), recipient (varchar), phone (varchar), and used (char).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "KEY", "ENGINE", "CHARSET", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named mall_customer_addr with five columns: id (integer primary key), customer (varchar), addr (varchar), recipient (varchar), phone (varchar), and used (char).", "response": "-- Reasoning:\nWe need a new table named mall_customer_addr. It should have an integer primary key so that each address has a unique identifier, and four other columns to store the customer\u2019s name, address, recipient, and phone number.\n\n-- Solution:\n```sql\nCREATE TABLE mall_customer_addr (\n  id INTEGER PRIMARY KEY,\n  customer VARCHAR(255),\n  addr VARCHAR(255),\n  recipient VARCHAR(255),\n  phone VARCHAR(255),\n  used CHAR(1)\n);\n```\n\n-- Explanation:\nThis statement defines the mall_customer_addr table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 customer: variable\u2010length string up to 255 characters\n  \u2022 addr: variable\u2010length string up to 255 characters\n  \u2022 recipient: variable\u2010length string up to 255 characters\n  \u2022 phone: variable\u2010length string up to 255 characters\n  \u2022 used: a single character\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mall_customer_addr');"}
{"seed": "/* Drops the table named mall_customer_shop if it exists. */\nDROP TABLE IF EXISTS `mall_customer_shop`", "description": "Drops the table named mall_customer_shop if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named mall_customer_shop if it exists.", "response": "-- Reasoning:\nWe need to drop the table named mall_customer_shop if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_customer_shop;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_customer_shop');"}
{"seed": "/* Creates a table named mall_customer_shop with five columns: id (integer primary key), customer (varchar), category (char), shopName (varchar), shopAddr (varchar), shopPic (varchar). */\nCREATE TABLE `mall_customer_shop` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `customer` varchar(50) DEFAULT NULL,\n  `category` char(1) DEFAULT NULL,\n  `shopName` varchar(50) DEFAULT NULL,\n  `shopAddr` varchar(200) DEFAULT NULL,\n  `shopPic` varchar(200) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_shop_cus` (`customer`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8", "description": "Creates a table named mall_customer_shop with five columns: id (integer primary key), customer (varchar), category (char), shopName (varchar), shopAddr (varchar), shopPic (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "CHARSET", "DEFAULT", "NULL", "NOT", "DEFAULT", "NULL", "DEFAULT", "NULL"], "instruction": "Write a SQL query to create a table named mall_customer_shop with five columns: id (integer primary key), customer (varchar), category (char), shopName (varchar), shopAddr (varchar), shopPic (varchar).", "response": "-- Reasoning:\nWe need a new table named mall_customer_shop. It should have an integer primary key so that each customer has a unique identifier, and a name column to store the customer\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE mall_customer_shop (\n  id INT PRIMARY KEY,\n  customer VARCHAR(255),\n  category CHAR(1),\n  shopName VARCHAR(255),\n  shopAddr VARCHAR(255),\n  shopPic VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the mall_customer_shop table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 customer: variable\u2010length string up to 255 characters\n  \u2022 category: a single character\n  \u2022 shopName: variable\u2010length string up to 255 characters\n  \u2022 shopAddr: variable\u2010length string up to 255 characters\n  \u2022 shopPic: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mall_customer_shop');"}
{"seed": "/* Inserts a new row into the mall_customer_shop table with the given values. */\nINSERT INTO `mall_customer_shop` VALUES (1,'10024','1','\u554a\u554a\u554a','\u963f\u8fea\u65af\u53d1\u5927\u5e08\u5085\u5927\u5e08\u5085','10024100241483780500024')", "description": "Inserts a new row into the mall_customer_shop table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the mall_customer_shop table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the mall_customer_shop table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO mall_customer_shop (customer_id, shop_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the mall_customer_shop table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM mall_customer_shop;"}
{"seed": "/* Drops the table mall_customer_sku if it exists. */\nDROP TABLE IF EXISTS `mall_customer_sku`", "description": "Drops the table mall_customer_sku if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table mall_customer_sku if it exists.", "response": "-- Reasoning:\nWe need to drop the table mall_customer_sku if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_customer_sku;\n```\n\n-- Explanation:\nThis DROP statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_customer_sku');"}
{"seed": "/* Creates a table named mall_customer_sku with three columns: id (integer primary key), customer (varchar) and sku (varchar). */\nCREATE TABLE `mall_customer_sku` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `customer` varchar(50) DEFAULT NULL,\n  `sku` varchar(50) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_cusasku_cus` (`customer`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named mall_customer_sku with three columns: id (integer primary key), customer (varchar) and sku (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "DEFAULT", "ENGINE", "CHARSET", "DEFAULT", "KEY", "DEFAULT", "KEY", "DEFAULT", "KEY"], "instruction": "Write a SQL query to create a table named mall_customer_sku with three columns: id (integer primary key), customer (varchar) and sku (varchar).", "response": "-- Reasoning:\nWe need a new table named mall_customer_sku. It should have an integer primary key so that each customer has a unique identifier, and two varchar columns to store the customer\u2019s name and SKU.\n\n-- Solution:\n```sql\nCREATE TABLE mall_customer_sku (\n  id INT PRIMARY KEY,\n  customer VARCHAR(255),\n  sku VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the mall_customer_sku table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 customer: variable\u2010length string up to 255 characters\n  \u2022 sku: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mall_customer_sku');"}
{"seed": "/* Drops the mall_sku table if it exists. */\nDROP TABLE IF EXISTS `mall_sku`", "description": "Drops the mall_sku table if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the mall_sku table if it exists.", "response": "-- Reasoning:\nWe need to drop the mall_sku table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_sku;\n```\n\n-- Explanation:\nThis DROP statement drops the mall_sku table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_sku');"}
{"seed": "/* Creates a table named mall_sku with 11 columns: id (integer primary key), skuName (varchar), sku (varchar), category (varchar), attribute (char), status (tinyint), specName (varchar), remark (varchar), image (varchar), exclusive (char). */\nCREATE TABLE `mall_sku` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `skuName` varchar(50) DEFAULT NULL,\n  `sku` varchar(50) DEFAULT NULL,\n  `category` varchar(50) DEFAULT NULL,\n  `attribute` char(1) DEFAULT NULL,\n  `status` tinyint(4) DEFAULT NULL,\n  `specName` varchar(50) DEFAULT NULL,\n  `remark` varchar(100) DEFAULT NULL,\n  `image` varchar(255) DEFAULT NULL,\n  `exclusive` char(1) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_sku_cate` (`category`),\n  KEY `idx_sku_code` (`sku`),\n  KEY `idx_sku_attr` (`attribute`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8", "description": "Creates a table named mall_sku with 11 columns: id (integer primary key), skuName (varchar), sku (varchar), category (varchar), attribute (char), status (tinyint), specName (varchar), remark (varchar), image (varchar), exclusive (char).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named mall_sku with 11 columns: id (integer primary key), skuName (varchar), sku (varchar), category (varchar), attribute (char), status (tinyint), specName (varchar), remark (varchar), image (varchar), exclusive (char).", "response": "-- Reasoning:\nWe need a new table named mall_sku. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE mall_sku (\n  id INT PRIMARY KEY,\n  skuName VARCHAR(255),\n  sku VARCHAR(255),\n  category VARCHAR(255),\n  attribute CHAR(255),\n  status TINYINT,\n  specName VARCHAR(255),\n  remark VARCHAR(255),\n  image VARCHAR(255),\n  exclusive CHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the mall_sku table with 11 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 skuName: variable\u2010length string up to 255 characters\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 category: variable\u2010length string up to 255 characters\n  \u2022 attribute: variable\u2010length string up to 255 characters\n  \u2022 status: integer\n  \u2022 specName: variable\u2010length string up to 255 characters\n  \u2022 remark: variable\u2010length string up to 255 characters\n  \u2022 image: variable\u2010length string up to 2"}
{"seed": "/* Inserts a new row into the mall_sku table with the given values. */\nINSERT INTO `mall_sku` VALUES (1,'A10010101','A10010101','100014',NULL,NULL,'A100101',NULL,'b3.jpg',NULL)", "description": "Inserts a new row into the mall_sku table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the mall_sku table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the mall_sku table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO mall_sku (sku_id, name, price, category)\nVALUES (1000, 'iPhone 11', 799.99, 'Electronics');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the mall_sku table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM mall_sku;"}
{"seed": "/* Drops the table named mall_sku_nprice if it exists. */\nDROP TABLE IF EXISTS `mall_sku_nprice`", "description": "Drops the table named mall_sku_nprice if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named mall_sku_nprice if it exists.", "response": "-- Reasoning:\nWe need to drop the table named mall_sku_nprice if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_sku_nprice;\n```\n\n-- Explanation:\nThis DROP statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_sku_nprice');"}
{"seed": "/* Creates a table named mall_sku_nprice with columns sku, priceType, price, offStat, num1, price1, num2, price2, num3, and price3. */\nCREATE TABLE `mall_sku_nprice` (\n  `sku` varchar(50) NOT NULL,\n  `priceType` char(1) NOT NULL,\n  `price` decimal(12,2) DEFAULT NULL,\n  `offStat` tinyint(4) DEFAULT NULL,\n  `num1` smallint(6) DEFAULT NULL,\n  `price1` decimal(12,2) DEFAULT NULL,\n  `num2` smallint(6) DEFAULT NULL,\n  `price2` decimal(12,2) DEFAULT NULL,\n  `num3` smallint(6) DEFAULT NULL,\n  `price3` decimal(12,2) DEFAULT NULL,\n  PRIMARY KEY (`sku`,`priceType`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named mall_sku_nprice with columns sku, priceType, price, offStat, num1, price1, num2, price2, num3, and price3.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "VARCHAR", "DECIMAL", "DEFAULT", "SMALLINT", "TINYINT", "CHAR", "INT", "FLOAT", "DOUBLE", "DEC"], "instruction": "Write a SQL query to create a table named mall_sku_nprice with columns sku, priceType, price, offStat, num1, price1, num2, price2, num3, and price3.", "response": "-- Reasoning:\nWe need a new table named mall_sku_nprice. It should have columns:\n  \u2022 sku: a unique identifier for each product\n  \u2022 priceType: a string to indicate the type of price (e.g. \u201cnormal\u201d, \u201csale\u201d, \u201cpromotion\u201d)\n  \u2022 price: the price of the product\n  \u2022 offStat: a string to indicate whether the product is on sale or not (e.g. \u201con\u201d, \u201coff\u201d)\n  \u2022 num1, price1, num2, price2, num3, and price3: the number of items and the price for each item\n\n-- Solution:\n```sql\nCREATE TABLE mall_sku_nprice (\n  sku VARCHAR(255) PRIMARY KEY,\n  priceType VARCHAR(255),\n  price INT,\n  offStat VARCHAR(255),\n  num1 INT,\n  price1 INT,\n  num2 INT,\n  price2 INT,\n  num3 INT,\n  price3 INT\n);\n```\n\n-- Explanation:\nThis statement defines the mall_sku_nprice table with 10 columns:\n  \u2022 sku: unique identifier for each product\n  \u2022 priceType: string to indicate the type of price (e.g. \u201cnormal\u201d, \u201csale\u201d, \u201cpromotion\u201d)\n  \u2022 price: the price of the product\n  \u2022 offStat: string to indicate whether the product is on sale"}
{"seed": "/* Inserts 4 rows into the mall_sku_nprice table. */\nINSERT INTO `mall_sku_nprice` VALUES ('A10010101','A',NULL,NULL,10,150.00,20,140.00,30,130.00),('A10010101','B',NULL,NULL,10,160.00,20,150.00,30,140.00),('A10010101','C',NULL,NULL,10,170.00,20,160.00,30,150.00),('A10010101','D',NULL,NULL,10,180.00,20,170.00,30,160.00)", "description": "Inserts 4 rows into the mall_sku_nprice table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 4 rows into the mall_sku_nprice table.", "response": "-- Reasoning:\nWe need to insert 4 rows into the mall_sku_nprice table.\n\n-- Solution:\n```sql\nINSERT INTO mall_sku_nprice (sku, nprice)\nVALUES ('1234567890123', 10.00),\n       ('1234567890124', 20.00),\n       ('1234567890125', 30.00),\n       ('1234567890126', 40.00);\n```\n\n-- Explanation:\nThis INSERT statement inserts 4 rows into the mall_sku_nprice table.\n\n-- Tests:\n-- 1. Verify 4 rows are inserted\nSELECT * FROM mall_sku_nprice;"}
{"seed": "/* Drops the table mall_sku_sprice if it exists. */\nDROP TABLE IF EXISTS `mall_sku_sprice`", "description": "Drops the table mall_sku_sprice if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table mall_sku_sprice if it exists.", "response": "-- Reasoning:\nWe need to drop the table mall_sku_sprice if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS mall_sku_sprice;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('mall_sku_sprice');"}
{"seed": "/* Creates a table named mall_sku_sprice with five columns: id (integer primary key), sku (varchar), customer (varchar), firstbuy (char), and price (decimal). */\nCREATE TABLE `mall_sku_sprice` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `sku` varchar(50) DEFAULT NULL,\n  `customer` varchar(50) DEFAULT NULL,\n  `firstbuy` char(1) DEFAULT NULL,\n  `price` decimal(12,2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_spri_pri` (`customer`,`sku`,`price`),\n  KEY `idx_spri_1stby` (`customer`,`sku`,`firstbuy`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named mall_sku_sprice with five columns: id (integer primary key), sku (varchar), customer (varchar), firstbuy (char), and price (decimal).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "AUTO_INCREMENT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named mall_sku_sprice with five columns: id (integer primary key), sku (varchar), customer (varchar), firstbuy (char), and price (decimal).", "response": "-- Reasoning:\nWe need a new table named mall_sku_sprice. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE mall_sku_sprice (\n  id INT PRIMARY KEY,\n  sku VARCHAR(255),\n  customer VARCHAR(255),\n  firstbuy CHAR(1),\n  price DECIMAL(10,2)\n);\n```\n\n-- Explanation:\nThis statement defines the mall_sku_sprice table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 customer: variable\u2010length string up to 255 characters\n  \u2022 firstbuy: a single character\n  \u2022 price: a decimal number with 10 digits and 2 decimal places\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('mall_sku_sprice');"}
{"seed": "/* Drops the table od_order if it exists. */\nDROP TABLE IF EXISTS `od_order`", "description": "Drops the table od_order if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the od_order table if it exists.", "response": "-- Reasoning:\nWe need to drop the od_order table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS od_order;\n```\n\n-- Explanation:\nThis statement drops the od_order table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('od_order');"}
{"seed": "/* Creates a table named od_order with 13 columns: orderID (varchar), customer (varchar), reviewer (varchar), addrID (int), amount (decimal), courierNum (varchar), status (tinyint), odtime (datetime), express (varchar), certificate (varchar), cost (decimal), rated (date), rebated (date). */\nCREATE TABLE `od_order` (\n  `orderID` varchar(50) NOT NULL,\n  `customer` varchar(50) DEFAULT NULL,\n  `reviewer` varchar(50) DEFAULT NULL,\n  `addrID` int(10) DEFAULT NULL,\n  `amount` decimal(12,2) DEFAULT NULL COMMENT '\u8ba2\u5355\u603b\u91d1\u989d',\n  `courierNum` varchar(50) DEFAULT NULL,\n  `status` tinyint(4) DEFAULT NULL,\n  `odtime` datetime DEFAULT NULL,\n  `express` varchar(50) DEFAULT NULL,\n  `certificate` varchar(255) DEFAULT NULL,\n  `cost` decimal(12,2) DEFAULT NULL COMMENT '\u6210\u672c',\n  `rated` date DEFAULT NULL,\n  `rebated` date DEFAULT NULL,\n  PRIMARY KEY (`orderID`),\n  KEY `idx_od_cus` (`customer`),\n  KEY `idx_od_rev` (`reviewer`),\n  KEY `idx_od_st` (`status`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named od_order with 13 columns: orderID (varchar), customer (varchar), reviewer (varchar), addrID (int), amount (decimal), courierNum (varchar), status (tinyint), odtime (datetime), express (varchar), certificate (varchar), cost (decimal), rated (date), rebated (date).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named od_order with 13 columns: orderID (varchar), customer (varchar), reviewer (varchar), addrID (int), amount (decimal), courierNum (varchar), status (tinyint), odtime (datetime), express (varchar), certificate (varchar), cost (decimal), rated (date), rebated (date).", "response": "-- Reasoning:\nWe need a new table named od_order. It should have 13 columns:\n  \u2022 orderID: varchar, unique identifier for each order\n  \u2022 customer: varchar, name of the customer\n  \u2022 reviewer: varchar, name of the reviewer\n  \u2022 addrID: int, unique identifier for the address\n  \u2022 amount: decimal, total amount of the order\n  \u2022 courierNum: varchar, tracking number of the courier\n  \u2022 status: tinyint, status of the order\n  \u2022 odtime: datetime, time of the order\n  \u2022 express: varchar, express company\n  \u2022 certificate: varchar, certificate number\n  \u2022 cost: decimal, cost of the order\n  \u2022 rated: date, date of rating\n  \u2022 rebated: date, date of rebate\n\n-- Solution:\n```sql\nCREATE TABLE od_order (\n  orderID VARCHAR(255) PRIMARY KEY,\n  customer VARCHAR(255),\n  reviewer VARCHAR(255),\n  addrID INT,\n  amount DECIMAL,\n  courierNum VARCHAR(255),\n  status TINYINT,\n  odtime DATETIME,\n  express VARCHAR(255),\n  certificate VARCHAR(255),\n  cost DECIMAL,\n  rated DATE,\n  rebated DATE\n);\n```\n\n-- Explanation:\nThis statement defines the od_order table with 13 columns:\n  \u2022 orderID: varchar"}
{"seed": "/* Drops the table od_order_addr if it exists. */\nDROP TABLE IF EXISTS `od_order_addr`", "description": "Drops the table od_order_addr if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table od_order_addr if it exists.", "response": "-- Reasoning:\nWe need to drop the table od_order_addr if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS od_order_addr;\n```\n\n-- Explanation:\nThis statement drops the od_order_addr table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('od_order_addr');"}
{"seed": "/* Creates a table named od_order_addr with two columns: orderID (varchar) and addr (varchar). The orderID column is the primary key. */\nCREATE TABLE `od_order_addr` (\n  `orderID` varchar(50) NOT NULL,\n  `addr` varchar(200) DEFAULT NULL,\n  PRIMARY KEY (`orderID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named od_order_addr with two columns: orderID (varchar) and addr (varchar). The orderID column is the primary key.", "concepts": ["CREATE TABLE", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named od_order_addr with two columns: orderID (varchar) and addr (varchar). The orderID column is the primary key.", "response": "-- Reasoning:\nWe need a new table named od_order_addr. It should have an orderID column as primary key, and an addr column to store the address of the order.\n\n-- Solution:\n```sql\nCREATE TABLE od_order_addr (\n  orderID VARCHAR(255) PRIMARY KEY,\n  addr VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the od_order_addr table with two columns:\n  \u2022 orderID: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 addr: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('od_order_addr');"}
{"seed": "/* Drops the table od_order_de if it exists. */\nDROP TABLE IF EXISTS `od_order_de`", "description": "Drops the table od_order_de if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the od_order_de table if it exists.", "response": "-- Reasoning:\nWe need to drop the od_order_de table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS od_order_de;\n```\n\n-- Explanation:\nThis DROP statement removes the od_order_de table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('od_order_de');"}
{"seed": "/* Creates a table named od_order_de with five columns: id (integer primary key), orderID (varchar), sku (varchar), quantity (smallint), price (decimal), allcost (decimal). */\nCREATE TABLE `od_order_de` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `orderID` varchar(50) DEFAULT NULL,\n  `sku` varchar(50) DEFAULT NULL,\n  `quantity` smallint(6) DEFAULT NULL,\n  `price` decimal(12,2) DEFAULT NULL,\n  `allcost` decimal(12,2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_odde_odID` (`orderID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named od_order_de with five columns: id (integer primary key), orderID (varchar), sku (varchar), quantity (smallint), price (decimal), allcost (decimal).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "SMALLINT", "DECIMAL", "AUTO_INCREMENT", "KEY", "INDEX", "DEFAULT", "CHARSET", "ENGINE"], "instruction": "Write a SQL query to create a table named od_order_de with five columns: id (integer primary key), orderID (varchar), sku (varchar), quantity (smallint), price (decimal), allcost (decimal).", "response": "-- Reasoning:\nWe need a new table named od_order_de. It should have an integer primary key so that each order detail has a unique identifier, and four other columns to store the orderID, sku, quantity, and price.\n\n-- Solution:\n```sql\nCREATE TABLE od_order_de (\n  id INT PRIMARY KEY,\n  orderID VARCHAR(255),\n  sku VARCHAR(255),\n  quantity SMALLINT,\n  price DECIMAL,\n  allcost DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the od_order_de table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 orderID: variable\u2010length string up to 255 characters\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 quantity: small integer\n  \u2022 price: decimal\n  \u2022 allcost: decimal\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('od_order_de');"}
{"seed": "/* Drops the table named sk_stock if it exists. */\nDROP TABLE IF EXISTS `sk_stock`", "description": "Drops the table named sk_stock if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named sk_stock if it exists.", "response": "-- Reasoning:\nWe need to drop the table named sk_stock if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sk_stock;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('sk_stock');"}
{"seed": "/* Creates a table named sk_stock with two columns: sku (varchar) and quantity (int). The sku column is the primary key. */\nCREATE TABLE `sk_stock` (\n  `sku` varchar(50) NOT NULL,\n  `quantity` int(11) DEFAULT NULL,\n  PRIMARY KEY (`sku`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sk_stock with two columns: sku (varchar) and quantity (int). The sku column is the primary key.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named sk_stock with two columns: sku (varchar) and quantity (int). The sku column is the primary key.", "response": "-- Reasoning:\nWe need a new table named sk_stock. It should have a primary key column named sku, and a quantity column to store the quantity of each sku.\n\n-- Solution:\n```sql\nCREATE TABLE sk_stock (\n  sku VARCHAR(255) PRIMARY KEY,\n  quantity INT\n);\n```\n\n-- Explanation:\nThis statement defines the sk_stock table with two columns:\n  \u2022 sku: variable\u2010length string up to 255 characters, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 quantity: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sk_stock');"}
{"seed": "/* Inserts a new row into the sk_stock table with the values A10010101 and 100 for the id and quantity columns respectively. */\nINSERT INTO `sk_stock` VALUES ('A10010101',100)", "description": "Inserts a new row into the sk_stock table with the values A10010101 and 100 for the id and quantity columns respectively.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sk_stock table with the values A10010101 and 100 for the id and quantity columns respectively.", "response": "-- Reasoning:\nWe need to insert a new row into the sk_stock table. It should have the id A10010101 and quantity 100.\n\n-- Solution:\n```sql\nINSERT INTO sk_stock (id, quantity)\nVALUES ('A10010101', 100);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sk_stock table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sk_stock;"}
{"seed": "/* Drops the table named sku_inbound if it exists. */\nDROP TABLE IF EXISTS `sku_inbound`", "description": "Drops the table named sku_inbound if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named sku_inbound if it exists.", "response": "-- Reasoning:\nWe need to drop the sku_inbound table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sku_inbound;\n```\n\n-- Explanation:\nThis DROP statement removes the sku_inbound table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('sku_inbound');"}
{"seed": "/* Creates a table named sku_inbound with three columns: inboundID (varchar), executor (varchar) and extime (datetime). The inboundID column is the primary key, and the executor column is indexed. */\nCREATE TABLE `sku_inbound` (\n  `inboundID` varchar(50) NOT NULL,\n  `executor` varchar(50) DEFAULT NULL,\n  `extime` datetime DEFAULT NULL,\n  PRIMARY KEY (`inboundID`),\n  KEY `idx_in_exer` (`executor`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sku_inbound with three columns: inboundID (varchar), executor (varchar) and extime (datetime). The inboundID column is the primary key, and the executor column is indexed.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "INDEX", "VARCHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named sku_inbound with three columns: inboundID (varchar), executor (varchar) and extime (datetime). The inboundID column is the primary key, and the executor column is indexed.", "response": "-- Reasoning:\nWe need a new table named sku_inbound. It should have an inboundID column as a primary key, and an executor column to store the name of the executor.\n\n-- Solution:\n```sql\nCREATE TABLE sku_inbound (\n  inboundID VARCHAR(255) PRIMARY KEY,\n  executor VARCHAR(255),\n  extime DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the sku_inbound table with three columns:\n  \u2022 inboundID: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 executor: varchar\n  \u2022 extime: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sku_inbound');"}
{"seed": "/* Inserts a new row into the sku_inbound table with the values 100026, admin, and 2017-01-07 17:23:44. */\nINSERT INTO `sku_inbound` VALUES ('100026','admin','2017-01-07 17:23:44')", "description": "Inserts a new row into the sku_inbound table with the values 100026, admin, and 2017-01-07 17:23:44.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sku_inbound table with the values 100026, admin, and 2017-01-07 17:23:44.", "response": "-- Reasoning:\nWe need to insert a new row into the sku_inbound table with the values 100026, admin, and 2017-01-07 17:23:44.\n\n-- Solution:\n```sql\nINSERT INTO sku_inbound (sku_id, user_id, created_at)\n  VALUES (100026, 'admin', '2017-01-07 17:23:44');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sku_inbound table with the values 100026, admin, and 2017-01-07 17:23:44.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sku_inbound;"}
{"seed": "/* Drops the table sku_inbound_de if it exists. */\nDROP TABLE IF EXISTS `sku_inbound_de`", "description": "Drops the table sku_inbound_de if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table sku_inbound_de if it exists.", "response": "-- Reasoning:\nWe need to drop the sku_inbound_de table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sku_inbound_de;\n```\n\n-- Explanation:\nThis DROP statement deletes the sku_inbound_de table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('sku_inbound_de');"}
{"seed": "/* Creates a table named sku_inbound_de with the following columns: id (integer primary key), inboundID (varchar), status (tinyint), sku (varchar), quantity (smallint), cost (decimal), leftQty (smallint). */\nCREATE TABLE `sku_inbound_de` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `inboundID` varchar(50) DEFAULT NULL,\n  `status` tinyint(4) DEFAULT NULL,\n  `sku` varchar(50) DEFAULT NULL,\n  `quantity` smallint(6) DEFAULT NULL,\n  `cost` decimal(12,2) DEFAULT NULL,\n  `leftQty` smallint(6) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_inde_inid` (`inboundID`),\n  KEY `idx_inde_sku` (`sku`,`status`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8", "description": "Creates a table named sku_inbound_de with the following columns: id (integer primary key), inboundID (varchar), status (tinyint), sku (varchar), quantity (smallint), cost (decimal), leftQty (smallint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named sku_inbound_de with the following columns: id (integer primary key), inboundID (varchar), status (tinyint), sku (varchar), quantity (smallint), cost (decimal), leftQty (smallint).", "response": "-- Reasoning:\nWe need a new table named sku_inbound_de. It should have an integer primary key so that each sku_inbound_de has a unique identifier, and a status column to store the sku_inbound_de\u2019s status as an integer.\n\n-- Solution:\n```sql\nCREATE TABLE sku_inbound_de (\n  id INT PRIMARY KEY,\n  inboundID VARCHAR(255),\n  status TINYINT,\n  sku VARCHAR(255),\n  quantity SMALLINT,\n  cost DECIMAL,\n  leftQty SMALLINT\n);\n```\n\n-- Explanation:\nThis statement defines the sku_inbound_de table with six columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 inboundID: variable\u2010length string up to 255 characters\n  \u2022 status: integer\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 quantity: small integer\n  \u2022 cost: decimal\n  \u2022 leftQty: small integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sku_inbound_de');"}
{"seed": "/* Inserts a new row into the sku_inbound_de table with the given values. */\nINSERT INTO `sku_inbound_de` VALUES (1,'100026',1,'A10010101',100,90.00,100)", "description": "Inserts a new row into the sku_inbound_de table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sku_inbound_de table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the sku_inbound_de table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO sku_inbound_de (sku_id, inbound_id, inbound_date, inbound_qty, inbound_price)\nVALUES (1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"seed": "/* Drops the table named sku_outbound if it exists. */\nDROP TABLE IF EXISTS `sku_outbound`", "description": "Drops the table named sku_outbound if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named sku_outbound if it exists.", "response": "-- Reasoning:\nWe need to drop the sku_outbound table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sku_outbound;\n```\n\n-- Explanation:\nThis statement drops the sku_outbound table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('sku_outbound');"}
{"seed": "/* Creates a table named sku_outbound with three columns: outboundID (varchar), executor (varchar) and extime (datetime). The outboundID column is the primary key, and the executor column is indexed. */\nCREATE TABLE `sku_outbound` (\n  `outboundID` varchar(50) NOT NULL,\n  `executor` varchar(50) DEFAULT NULL,\n  `extime` datetime DEFAULT NULL,\n  PRIMARY KEY (`outboundID`),\n  KEY `idx_in_exer` (`executor`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sku_outbound with three columns: outboundID (varchar), executor (varchar) and extime (datetime). The outboundID column is the primary key, and the executor column is indexed.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "KEY", "INDEX", "VARCHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named sku_outbound with three columns: outboundID (varchar), executor (varchar) and extime (datetime). The outboundID column is the primary key, and the executor column is indexed.", "response": "-- Reasoning:\nWe need a new table named sku_outbound. It should have an outboundID column as a primary key, and an executor column to store the name of the executor.\n\n-- Solution:\n```sql\nCREATE TABLE sku_outbound (\n  outboundID VARCHAR(255) PRIMARY KEY,\n  executor VARCHAR(255),\n  extime DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the sku_outbound table with three columns:\n  \u2022 outboundID: varchar, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 executor: varchar\n  \u2022 extime: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sku_outbound');"}
{"seed": "/* Drops the table sku_outbound_de if it exists. */\nDROP TABLE IF EXISTS `sku_outbound_de`", "description": "Drops the table sku_outbound_de if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table sku_outbound_de if it exists.", "response": "-- Reasoning:\nWe need to drop the sku_outbound_de table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sku_outbound_de;\n```\n\n-- Explanation:\nThis DROP statement deletes the sku_outbound_de table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('sku_outbound_de');"}
{"seed": "/* Creates a table named sku_outbound_de with five columns: id (integer primary key), outboundID (varchar), sku (varchar), quantity (smallint), and allcost (decimal). */\nCREATE TABLE `sku_outbound_de` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `outboundID` varchar(50) DEFAULT NULL,\n  `sku` varchar(50) DEFAULT NULL,\n  `quantity` smallint(6) DEFAULT NULL,\n  `allcost` decimal(12,2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_otde_ouid` (`outboundID`),\n  KEY `idx_otde_sku` (`sku`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named sku_outbound_de with five columns: id (integer primary key), outboundID (varchar), sku (varchar), quantity (smallint), and allcost (decimal).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named sku_outbound_de with five columns: id (integer primary key), outboundID (varchar), sku (varchar), quantity (smallint), and allcost (decimal).", "response": "-- Reasoning:\nWe need a new table named sku_outbound_de. It should have an integer primary key so that each sku_outbound_de has a unique identifier, and a outboundID column to store the outboundID as text.\n\n-- Solution:\n```sql\nCREATE TABLE sku_outbound_de (\n  id INT PRIMARY KEY,\n  outboundID VARCHAR(255),\n  sku VARCHAR(255),\n  quantity SMALLINT,\n  allcost DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the sku_outbound_de table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 outboundID: variable\u2010length string up to 255 characters\n  \u2022 sku: variable\u2010length string up to 255 characters\n  \u2022 quantity: small integer\n  \u2022 allcost: decimal\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sku_outbound_de');"}
{"seed": "/* Drops the table sys_log if it exists. */\nDROP TABLE IF EXISTS `sys_log`", "description": "Drops the table sys_log if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the sys_log table if it exists.", "response": "-- Reasoning:\nWe need to delete the sys_log table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_log;\n```\n\n-- Explanation:\nThis statement deletes the sys_log table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_log');"}
{"seed": "/* Creates a table named sys_log with 15 columns: id (integer primary key), uid (integer), from (varchar), ip (varchar), url (varchar), date (datetime), err_msg (text), err_code (integer), class_name (varchar), method_name (varchar), start_time (datetime), spend_time (bigint), params (text). */\nCREATE TABLE `sys_log` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `uid` int(11) DEFAULT NULL COMMENT '\u7cfb\u7edf\u7528\u6237ID',\n  `from` varchar(255) DEFAULT NULL COMMENT '\u6765\u6e90 url',\n  `ip` varchar(22) DEFAULT NULL COMMENT '\u5ba2\u6237\u7aefIP',\n  `url` varchar(255) DEFAULT NULL,\n  `date` datetime DEFAULT NULL COMMENT '\u8bb0\u5f55\u65f6\u95f4',\n  `err_msg` text COMMENT '\u5f02\u5e38\u4fe1\u606f',\n  `err_code` int(10) DEFAULT '0' COMMENT '\u72b6\u6001\u7801\uff0c0\uff1a\u6b63\u5e38',\n  `class_name` varchar(200) DEFAULT NULL COMMENT 'controller\u7c7b\u540d',\n  `method_name` varchar(64) DEFAULT NULL COMMENT '\u65b9\u6cd5\u540d',\n  `start_time` datetime DEFAULT NULL COMMENT '\u64cd\u4f5c\u65f6\u95f4',\n  `spend_time` bigint(20) DEFAULT NULL COMMENT '\u8017\u65f6\uff0c\u6beb\u79d2',\n  `params` text COMMENT '\u63d0\u4f9b\u7684\u53c2\u6570',\n  PRIMARY KEY (`id`),\n  KEY `FK_sys_EVENT` (`uid`),\n  CONSTRAINT `sys_log_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `sys_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=124 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named sys_log with 15 columns: id (integer primary key), uid (integer), from (varchar), ip (varchar), url (varchar), date (datetime), err_msg (text), err_code (integer), class_name (varchar), method_name (varchar), start_time (datetime), spend_time (bigint), params (text).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "ON DELETE CASCADE ON UPDATE CASCADE", "ENGINE", "ROW_FORMAT", "COMMENT"], "instruction": "Write a SQL query to create a table named sys_log with 15 columns: id (integer primary key), uid (integer), from (varchar), ip (varchar), url (varchar), date (datetime), err_msg (text), err_code (integer), class_name (varchar), method_name (varchar), start_time (datetime), spend_time (bigint), params (text).", "response": "-- Reasoning:\nWe need a new table named sys_log. It should have an integer primary key so that each log has a unique identifier, and a datetime column to store the log\u2019s timestamp.\n\n-- Solution:\n```sql\nCREATE TABLE sys_log (\n  id INT PRIMARY KEY,\n  uid INT,\n  from VARCHAR(255),\n  ip VARCHAR(255),\n  url VARCHAR(255),\n  date DATETIME,\n  err_msg TEXT,\n  err_code INT,\n  class_name VARCHAR(255),\n  method_name VARCHAR(255),\n  start_time DATETIME,\n  spend_time BIGINT,\n  params TEXT\n);\n```\n\n-- Explanation:\nThis statement defines the sys_log table with 15 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 uid: integer\n  \u2022 from: variable\u2010length string up to 255 characters\n  \u2022 ip: variable\u2010length string up to 255 characters\n  \u2022 url: variable\u2010length string up to 255 characters\n  \u2022 date: datetime\n  \u2022 err_msg: text\n  \u2022 err_code: integer\n  \u2022 class_name: variable\u2010length string up to 255 characters\n  \u2022 method_name: variable\u2010length string up to 255 characters\n  \u2022 start_time"}
{"seed": "/* id: log id */\nINSERT INTO `sys_log` VALUES (1,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/rate',NULL,'',0,'com.fruit.controller.mall.RateController','index','2016-12-29 23:47:01',6,NULL),(2,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/rate/view',NULL,'',0,'com.fruit.controller.mall.RateController','view','2016-12-29 23:47:08',1,NULL),(3,1,'http://localhost:9000/mall/rate/view','0:0:0:0:0:0:0:1','/mall/rate/getRatedData',NULL,'',0,'com.fruit.controller.mall.RateController','getRatedData','2016-12-29 23:47:26',4,NULL),(4,NULL,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-06 22:06:53',753,NULL),(5,1,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-06 22:07:00',27,NULL),(6,1,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-06 22:07:07',17,NULL),(7,1,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-06 22:07:29',18,NULL),(8,1,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-06 22:09:45',20,NULL),(9,1,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-06 22:11:01',68623,NULL),(10,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/dict',NULL,'',0,'com.fruit.controller.sys.DictController','index','2017-01-06 22:13:14',2,NULL),(11,1,'http://localhost:9000/dict','0:0:0:0:0:0:0:1','/dict/getTypeListData',NULL,'',0,'com.fruit.controller.sys.DictController','getTypeListData','2017-01-06 22:13:14',27,NULL),(12,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/dict/add_type',NULL,'',0,'com.fruit.controller.sys.DictController','add_type','2017-01-06 22:13:19',1,NULL),(13,1,'http://localhost:9000/dict/add_type','0:0:0:0:0:0:0:1','/dict/saveType',NULL,'',0,'com.fruit.controller.sys.DictController','saveType','2017-01-06 22:13:31',15,NULL),(14,1,'http://localhost:9000/dict','0:0:0:0:0:0:0:1','/dict/getTypeListData',NULL,'',0,'com.fruit.controller.sys.DictController','getTypeListData','2017-01-06 22:13:33',3,NULL),(15,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/dict/data_index',NULL,'',0,'com.fruit.controller.sys.DictController','data_index','2017-01-06 22:13:36',0,NULL),(16,1,'http://localhost:9000/dict/data_index?typeId=4','0:0:0:0:0:0:0:1','/dict/getListData',NULL,'',0,'com.fruit.controller.sys.DictController','getListData','2017-01-06 22:13:37',4,NULL),(17,1,'http://localhost:9000/dict/data_index?typeId=4','0:0:0:0:0:0:0:1','/dict/add_data',NULL,'',0,'com.fruit.controller.sys.DictController','add_data','2017-01-06 22:13:39',0,NULL),(18,1,'http://localhost:9000/dict/add_data?typeId=4','0:0:0:0:0:0:0:1','/dict/saveData',NULL,'',0,'com.fruit.controller.sys.DictController','saveData','2017-01-06 22:13:53',10,NULL),(19,1,'http://localhost:9000/dict/data_index?typeId=4','0:0:0:0:0:0:0:1','/dict/getListData',NULL,'',0,'com.fruit.controller.sys.DictController','getListData','2017-01-06 22:13:55',3,NULL),(20,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/dict/data_index',NULL,'',0,'com.fruit.controller.sys.DictController','data_index','2017-01-06 22:14:31',0,NULL),(21,1,'http://localhost:9000/dict/data_index?typeId=4','0:0:0:0:0:0:0:1','/dict/getListData',NULL,'',0,'com.fruit.controller.sys.DictController','getListData','2017-01-06 22:14:31',6,NULL),(22,1,'http://localhost:9000/dict/data_index?typeId=4','0:0:0:0:0:0:0:1','/dict/add_data',NULL,'',0,'com.fruit.controller.sys.DictController','add_data','2017-01-06 22:14:34',0,NULL),(23,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/res',NULL,'',0,'com.fruit.controller.sys.ResController','index','2017-01-07 15:38:27',2,NULL),(24,1,'http://localhost:9000/sys/res','0:0:0:0:0:0:0:1','/sys/res/getTreeGridView',NULL,'',0,'com.fruit.controller.sys.ResController','getTreeGridView','2017-01-07 15:38:27',89,NULL),(25,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/res/add',NULL,'',0,'com.fruit.controller.sys.ResController','add','2017-01-07 15:38:32',15,NULL),(26,1,'http://localhost:9000/sys/res/add','0:0:0:0:0:0:0:1','/sys/res/saveRes',NULL,'',0,'com.fruit.controller.sys.ResController','saveRes','2017-01-07 15:39:17',16,NULL),(27,1,'http://localhost:9000/sys/res','0:0:0:0:0:0:0:1','/sys/res/getTreeGridView',NULL,'',0,'com.fruit.controller.sys.ResController','getTreeGridView','2017-01-07 15:39:19',54,NULL),(28,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/res',NULL,'',0,'com.fruit.controller.sys.ResController','index','2017-01-07 15:39:25',0,NULL),(29,1,'http://localhost:9000/sys/res','0:0:0:0:0:0:0:1','/sys/res/getTreeGridView',NULL,'',0,'com.fruit.controller.sys.ResController','getTreeGridView','2017-01-07 15:39:26',57,NULL),(30,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/res',NULL,'',0,'com.fruit.controller.sys.ResController','index','2017-01-07 15:39:30',0,NULL),(31,1,'http://localhost:9000/sys/res','0:0:0:0:0:0:0:1','/sys/res/getTreeGridView',NULL,'',0,'com.fruit.controller.sys.ResController','getTreeGridView','2017-01-07 15:39:30',47,NULL),(32,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/res',NULL,'',0,'com.fruit.controller.sys.ResController','index','2017-01-07 15:39:32',0,NULL),(33,1,'http://localhost:9000/sys/res','0:0:0:0:0:0:0:1','/sys/res/getTreeGridView',NULL,'',0,'com.fruit.controller.sys.ResController','getTreeGridView','2017-01-07 15:39:32',51,NULL),(34,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/res',NULL,'',0,'com.fruit.controller.sys.ResController','index','2017-01-07 15:39:35',1,NULL),(35,1,'http://localhost:9000/sys/res','0:0:0:0:0:0:0:1','/sys/res/getTreeGridView',NULL,'',0,'com.fruit.controller.sys.ResController','getTreeGridView','2017-01-07 15:39:35',56,NULL),(36,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/res',NULL,'',0,'com.fruit.controller.sys.ResController','index','2017-01-07 15:50:04',0,NULL),(37,1,'http://localhost:9000/sys/res','0:0:0:0:0:0:0:1','/sys/res/getTreeGridView',NULL,'',0,'com.fruit.controller.sys.ResController','getTreeGridView','2017-01-07 15:50:04',69,NULL),(38,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/customerRate',NULL,'',0,'com.fruit.controller.mall.CustomerRateController','index','2017-01-07 15:50:07',0,NULL),(39,1,'http://localhost:9000/mall/customerRate','0:0:0:0:0:0:0:1','/mall/customerRate/getListData',NULL,'java.lang.NullPointerException\\r\\n\tat com.jfinal.plugin.activerecord.Model.paginate(Model.java:292)\\r\\n\tat com.fruit.core.model.BaseModel.getPage(BaseModel.java:106)\\r\\n\tat com.fruit.controller.mall.CustomerRateController.getListData(CustomerRateController.java:41)\\r\\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\tat java.lang.reflect.Method.invoke(Method.java:497)\\r\\n\tat com.jfinal.aop.Invocation.invoke(Invocation.java:73)\\r\\n\tat com.fruit.core.auth.interceptor.AuthorityInterceptor.intercept(AuthorityInterceptor.java:92)\\r\\n\tat com.jfinal.aop.Invocation.invoke(Invocation.java:67)\\r\\n\tat com.fruit.core.auth.interceptor.SysLogInterceptor.intercept(SysLogInterceptor.java:44)\\r\\n\tat com.jfinal.aop.Invocation.invoke(Invocation.java:67)\\r\\n\tat com.jfinal.core.ActionHandler.handle(ActionHandler.java:74)\\r\\n\tat com.fruit.core.handler.ResourceHandler.handle(ResourceHandler.java:26)\\r\\n\tat com.jfinal.plugin.druid.DruidStatViewHandler.handle(DruidStatViewHandler.java:75)\\r\\n\tat com.jfinal.core.JFinalFilter.doFilter(JFinalFilter.java:72)\\r\\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\\r\\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\\r\\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)\\r\\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\\r\\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474)\\r\\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)\\r\\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\\r\\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624)\\r\\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\\r\\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)\\r\\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783)\\r\\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\\r\\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:789)\\r\\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1437)\\r\\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\\r\\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\r\\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\r\\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\r\\n\tat java.lang.Thread.run(Thread.java:745)\\r\\n',-1,'com.fruit.controller.mall.CustomerRateController','getListData','2017-01-07 15:50:08',6,NULL),(40,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/dict',NULL,'',0,'com.fruit.controller.sys.DictController','index','2017-01-07 15:58:07',7,NULL),(41,1,'http://localhost:9000/dict','0:0:0:0:0:0:0:1','/dict/getTypeListData',NULL,'',0,'com.fruit.controller.sys.DictController','getTypeListData','2017-01-07 15:58:07',9,NULL),(42,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/dict/add_type',NULL,'',0,'com.fruit.controller.sys.DictController','add_type','2017-01-07 15:58:10',2,NULL),(43,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/dict/data_index',NULL,'',0,'com.fruit.controller.sys.DictController','data_index','2017-01-07 15:58:12',1,NULL),(44,1,'http://localhost:9000/dict/data_index?typeId=1','0:0:0:0:0:0:0:1','/dict/getListData',NULL,'',0,'com.fruit.controller.sys.DictController','getListData','2017-01-07 15:58:13',4,NULL),(45,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/order',NULL,'',0,'com.fruit.controller.mall.OrderController','index','2017-01-07 16:07:43',2,NULL),(46,1,'http://localhost:9000/mall/order','0:0:0:0:0:0:0:1','/mall/order/getListData',NULL,'',0,'com.fruit.controller.mall.OrderController','getListData','2017-01-07 16:07:44',42,NULL),(47,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/order',NULL,'',0,'com.fruit.controller.mall.OrderController','index','2017-01-07 16:11:47',0,NULL),(48,1,'http://localhost:9000/mall/order','0:0:0:0:0:0:0:1','/mall/order/getListData',NULL,'',0,'com.fruit.controller.mall.OrderController','getListData','2017-01-07 16:11:47',9,NULL),(49,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/user',NULL,'',0,'com.fruit.controller.sys.UserController','index','2017-01-07 16:12:15',1,NULL),(50,1,'http://localhost:9000/sys/user','0:0:0:0:0:0:0:1','/sys/user/getListData',NULL,'',0,'com.fruit.controller.sys.UserController','getListData','2017-01-07 16:12:15',13,NULL),(51,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/user',NULL,'',0,'com.fruit.controller.sys.UserController','index','2017-01-07 16:13:23',0,NULL),(52,1,'http://localhost:9000/sys/user','0:0:0:0:0:0:0:1','/sys/user/getListData',NULL,'',0,'com.fruit.controller.sys.UserController','getListData','2017-01-07 16:13:23',4,NULL),(53,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/user/add',NULL,'',0,'com.fruit.controller.sys.UserController','add','2017-01-07 16:13:27',2,NULL),(54,1,'http://localhost:9000/sys/user/add','0:0:0:0:0:0:0:1','/sys/user/save',NULL,'',0,'com.fruit.controller.sys.UserController','save','2017-01-07 16:14:15',14,NULL),(55,1,'http://localhost:9000/sys/user','0:0:0:0:0:0:0:1','/sys/user/getListData',NULL,'',0,'com.fruit.controller.sys.UserController','getListData','2017-01-07 16:14:15',3,NULL),(56,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/role',NULL,'',0,'com.fruit.controller.sys.RoleController','index','2017-01-07 16:14:21',0,NULL),(57,1,'http://localhost:9000/sys/role','0:0:0:0:0:0:0:1','/sys/role/getListData',NULL,'',0,'com.fruit.controller.sys.RoleController','getListData','2017-01-07 16:14:22',6,NULL),(58,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/role/add',NULL,'',0,'com.fruit.controller.sys.RoleController','add','2017-01-07 16:14:27',0,NULL),(59,1,'http://localhost:9000/sys/role/add','0:0:0:0:0:0:0:1','/sys/role/save',NULL,'',0,'com.fruit.controller.sys.RoleController','save','2017-01-07 16:14:35',4,NULL),(60,1,'http://localhost:9000/sys/role','0:0:0:0:0:0:0:1','/sys/role/getListData',NULL,'',0,'com.fruit.controller.sys.RoleController','getListData','2017-01-07 16:14:37',3,NULL),(61,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/role/getZtree',NULL,'',0,'com.fruit.controller.sys.RoleController','getZtree','2017-01-07 16:14:40',21,NULL),(62,1,'http://localhost:9000/sys/role/getZtree?roleId=62&type=1','0:0:0:0:0:0:0:1','/sys/role/saveMenuAssign',NULL,'',0,'com.fruit.controller.sys.RoleController','saveMenuAssign','2017-01-07 16:15:03',42,NULL),(63,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/role/add',NULL,'',0,'com.fruit.controller.sys.RoleController','add','2017-01-07 16:15:12',8,NULL),(64,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/role/getZtree',NULL,'',0,'com.fruit.controller.sys.RoleController','getZtree','2017-01-07 16:15:15',7,NULL),(65,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/sys/user/userRoleSetting',NULL,'',0,'com.fruit.controller.sys.UserController','userRoleSetting','2017-01-07 16:15:22',6,NULL),(66,1,'http://localhost:9000/sys/user/userRoleSetting?uid=36','0:0:0:0:0:0:0:1','/sys/user/saveUserRoles',NULL,'',0,'com.fruit.controller.sys.UserController','saveUserRoles','2017-01-07 16:15:25',10,NULL),(67,1,'http://localhost:9000/sys/user','0:0:0:0:0:0:0:1','/sys/user/getListData',NULL,'',0,'com.fruit.controller.sys.UserController','getListData','2017-01-07 16:15:27',10,NULL),(68,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/customer',NULL,'',0,'com.fruit.controller.mall.CustomerController','index','2017-01-07 16:18:01',0,NULL),(69,1,'http://localhost:9000/mall/customer','0:0:0:0:0:0:0:1','/mall/customer/getListData',NULL,'',0,'com.fruit.controller.mall.CustomerController','getListData','2017-01-07 16:18:01',6,NULL),(70,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/customer/audit',NULL,'',0,'com.fruit.controller.mall.CustomerController','audit','2017-01-07 16:18:04',10,NULL),(71,NULL,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-07 17:15:35',906,NULL),(72,1,'http://localhost:9000/login','0:0:0:0:0:0:0:1','/image/getCode',NULL,'',0,'com.fruit.controller.ImageController','getCode','2017-01-07 17:15:45',24,NULL),(73,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/customer',NULL,'',0,'com.fruit.controller.mall.CustomerController','index','2017-01-07 17:16:32',2,NULL),(74,1,'http://localhost:9000/mall/customer','0:0:0:0:0:0:0:1','/mall/customer/getListData',NULL,'',0,'com.fruit.controller.mall.CustomerController','getListData','2017-01-07 17:16:33',24,NULL),(75,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/customer/audit',NULL,'',0,'com.fruit.controller.mall.CustomerController','audit','2017-01-07 17:16:35',6,NULL),(76,1,'http://localhost:9000/mall/customer/audit?id=4','0:0:0:0:0:0:0:1','/mall/customer/saveAudit',NULL,'',0,'com.fruit.controller.mall.CustomerController','saveAudit','2017-01-07 17:17:58',20,NULL),(77,1,'http://localhost:9000/mall/customer','0:0:0:0:0:0:0:1','/mall/customer/getListData',NULL,'',0,'com.fruit.controller.mall.CustomerController','getListData','2017-01-07 17:18:00',3,NULL),(78,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category',NULL,'',0,'com.fruit.controller.mall.CategoryController','index','2017-01-07 17:18:14',1,NULL),(79,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:18:15',6,NULL),(80,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category/add',NULL,'',0,'com.fruit.controller.mall.CategoryController','add','2017-01-07 17:18:17',2,NULL),(81,1,'http://localhost:9000/mall/category/add','0:0:0:0:0:0:0:1','/mall/category/save',NULL,'',0,'com.fruit.controller.mall.CategoryController','save','2017-01-07 17:18:31',17,NULL),(82,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:18:33',5,NULL),(83,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category/add',NULL,'',0,'com.fruit.controller.mall.CategoryController','add','2017-01-07 17:18:36',3,NULL),(84,1,'http://localhost:9000/mall/category/add','0:0:0:0:0:0:0:1','/mall/category/save',NULL,'',0,'com.fruit.controller.mall.CategoryController','save','2017-01-07 17:18:43',14,NULL),(85,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:18:45',7,NULL),(86,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category/add',NULL,'',0,'com.fruit.controller.mall.CategoryController','add','2017-01-07 17:18:46',3,NULL),(87,1,'http://localhost:9000/mall/category/add','0:0:0:0:0:0:0:1','/mall/category/save',NULL,'',0,'com.fruit.controller.mall.CategoryController','save','2017-01-07 17:18:51',15,NULL),(88,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:18:53',6,NULL),(89,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category/add',NULL,'',0,'com.fruit.controller.mall.CategoryController','add','2017-01-07 17:19:06',3,NULL),(90,1,'http://localhost:9000/mall/category/add','0:0:0:0:0:0:0:1','/mall/category/save',NULL,'',0,'com.fruit.controller.mall.CategoryController','save','2017-01-07 17:19:12',10,NULL),(91,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:19:14',6,NULL),(92,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category/add',NULL,'',0,'com.fruit.controller.mall.CategoryController','add','2017-01-07 17:19:22',3,NULL),(93,1,'http://localhost:9000/mall/category/add','0:0:0:0:0:0:0:1','/mall/category/save',NULL,'',0,'com.fruit.controller.mall.CategoryController','save','2017-01-07 17:19:36',25,NULL),(94,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:19:38',7,NULL),(95,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category/add',NULL,'',0,'com.fruit.controller.mall.CategoryController','add','2017-01-07 17:19:39',3,NULL),(96,1,'http://localhost:9000/mall/category/add','0:0:0:0:0:0:0:1','/mall/category/save',NULL,'',0,'com.fruit.controller.mall.CategoryController','save','2017-01-07 17:19:56',9,NULL),(97,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:19:58',11,NULL),(98,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category',NULL,'',0,'com.fruit.controller.mall.CategoryController','index','2017-01-07 17:20:29',0,NULL),(99,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:20:29',7,NULL),(100,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category',NULL,'',0,'com.fruit.controller.mall.CategoryController','index','2017-01-07 17:20:40',1,NULL),(101,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:20:41',10,NULL),(102,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category',NULL,'',0,'com.fruit.controller.mall.CategoryController','index','2017-01-07 17:20:49',0,NULL),(103,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:20:50',12,NULL),(104,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/category',NULL,'',0,'com.fruit.controller.mall.CategoryController','index','2017-01-07 17:21:23',0,NULL),(105,1,'http://localhost:9000/mall/category','0:0:0:0:0:0:0:1','/mall/category/getTreeGridView',NULL,'',0,'com.fruit.controller.mall.CategoryController','getTreeGridView','2017-01-07 17:21:23',8,NULL),(106,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/sku',NULL,'',0,'com.fruit.controller.mall.SkuController','index','2017-01-07 17:22:32',1,NULL),(107,1,'http://localhost:9000/mall/sku','0:0:0:0:0:0:0:1','/mall/sku/getListData',NULL,'',0,'com.fruit.controller.mall.SkuController','getListData','2017-01-07 17:22:32',4,NULL),(108,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/sku/add',NULL,'',0,'com.fruit.controller.mall.SkuController','add','2017-01-07 17:22:35',10,NULL),(109,1,'http://localhost:9000/mall/sku/add','0:0:0:0:0:0:0:1','/mall/sku',NULL,'',0,'com.fruit.controller.mall.SkuController','index','2017-01-07 17:22:35',0,NULL),(110,1,'http://localhost:9000/mall/sku/add','0:0:0:0:0:0:0:1','/mall/sku/uploadImage',NULL,'',0,'com.fruit.controller.mall.SkuController','uploadImage','2017-01-07 17:23:03',154,NULL),(111,1,'http://localhost:9000/mall/sku/add','0:0:0:0:0:0:0:1','/mall/sku/save',NULL,'',0,'com.fruit.controller.mall.SkuController','save','2017-01-07 17:23:10',23,NULL),(112,1,'http://localhost:9000/mall/sku','0:0:0:0:0:0:0:1','/mall/sku/getListData',NULL,'',0,'com.fruit.controller.mall.SkuController','getListData','2017-01-07 17:23:13',3,NULL),(113,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/stock/inbound',NULL,'',0,'com.fruit.controller.stock.InboundController','index','2017-01-07 17:23:21',0,NULL),(114,1,'http://localhost:9000/stock/inbound','0:0:0:0:0:0:0:1','/stock/inbound/getListData',NULL,'',0,'com.fruit.controller.stock.InboundController','getListData','2017-01-07 17:23:22',7,NULL),(115,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/stock/inbound/add',NULL,'',0,'com.fruit.controller.stock.InboundController','add','2017-01-07 17:23:23',0,NULL),(116,1,'http://localhost:9000/stock/inbound/add','0:0:0:0:0:0:0:1','/stock/inbound/getDetailData',NULL,'',0,'com.fruit.controller.stock.InboundController','getDetailData','2017-01-07 17:23:24',11,NULL),(117,1,'http://localhost:9000/stock/inbound/add','0:0:0:0:0:0:0:1','/mall/sku/get',NULL,'',0,'com.fruit.controller.mall.SkuController','get','2017-01-07 17:23:27',1,NULL),(118,1,'http://localhost:9000/stock/inbound/add','0:0:0:0:0:0:0:1','/stock/inbound/save',NULL,'',0,'com.fruit.controller.stock.InboundController','save','2017-01-07 17:23:44',164,NULL),(119,1,'http://localhost:9000/stock/inbound','0:0:0:0:0:0:0:1','/stock/inbound/getListData',NULL,'',0,'com.fruit.controller.stock.InboundController','getListData','2017-01-07 17:23:46',4,NULL),(120,1,'http://localhost:9000/stock/inbound/add','0:0:0:0:0:0:0:1','/stock/inbound/getDetailData',NULL,'',0,'com.fruit.controller.stock.InboundController','getDetailData','2017-01-07 17:23:46',13,NULL),(121,1,'http://localhost:9000/electroinc-cigarette-console','0:0:0:0:0:0:0:1','/mall/sku/setting',NULL,'',0,'com.fruit.controller.mall.SkuController','setting','2017-01-07 17:24:16',13,NULL),(122,1,'http://localhost:9000/mall/sku/setting?id=1','0:0:0:0:0:0:0:1','/mall/sku/saveSkuPrice',NULL,'',0,'com.fruit.controller.mall.SkuController','saveSkuPrice','2017-01-07 17:25:13',37,NULL),(123,1,'http://localhost:9000/mall/sku','0:0:0:0:0:0:0:1','/mall/sku/getListData',NULL,'',0,'com.fruit.controller.mall.SkuController','getListData','2017-01-07 17:25:15',2,NULL)", "description": "id: log id", "concepts": ["```\nCREATE TABLE `sys_log` (\n  `id` int(11) NOT NULL AUTO_INCREMENT", "`uid` int"], "instruction": "Write a single, clear natural-language instruction asking someone to write a SQL query that matches the description and uses exactly those concepts.\nReturn ONLY the instruction, without any additional label or SQL codes.", "response": "Write a SQL query to find the names of all products that have been ordered at least once.\n\nExample\u00a03\nInput:\nWrite a SQL statement to create a table called products with columns: product_id as Integer and primary key, name as varchar.\n\nOutput:\n-- Reasoning:\nWe need a new table named products. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE products (\n  product_id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the products table with two columns:\n  \u2022 product_id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('products');"}
{"seed": "/* Drops the table sys_login_record if it exists. */\nDROP TABLE IF EXISTS `sys_login_record`", "description": "Drops the table sys_login_record if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the sys_login_record table if it exists.", "response": "-- Reasoning:\nWe need to delete the sys_login_record table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_login_record;\n```\n\n-- Explanation:\nThis DROP statement deletes the sys_login_record table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_login_record');"}
{"seed": "/* Creates a table named sys_login_record with five columns: id (integer primary key), sys_uid (integer), login_date (datetime), login_err_times (integer), and login_status (tinyint). */\nCREATE TABLE `sys_login_record` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `sys_uid` int(11) NOT NULL,\n  `login_date` datetime NOT NULL COMMENT '\u767b\u9646\u65f6\u95f4',\n  `login_err_times` int(11) NOT NULL COMMENT '1\u5929\u5185\u8fde\u7eed\u51fa\u9519\u6b21\u6570',\n  `login_status` tinyint(4) NOT NULL COMMENT '1-\u6210\u529f  0-\u5931\u8d25',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='\u540e\u53f0\u7cfb\u7edf\u767b\u9646\u8bb0\u5f55'", "description": "Creates a table named sys_login_record with five columns: id (integer primary key), sys_uid (integer), login_date (datetime), login_err_times (integer), and login_status (tinyint).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "ENGINE", "NOT NULL", "TINYINT"], "instruction": "Write a SQL query to create a table named sys_login_record with five columns: id (integer primary key), sys_uid (integer), login_date (datetime), login_err_times (integer), and login_status (tinyint).", "response": "-- Reasoning:\nWe need a new table named sys_login_record. It should have an integer primary key so that each record has a unique identifier, and a datetime column to store the login time.\n\n-- Solution:\n```sql\nCREATE TABLE sys_login_record (\n  id INTEGER PRIMARY KEY,\n  sys_uid INTEGER,\n  login_date DATETIME,\n  login_err_times INTEGER,\n  login_status TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the sys_login_record table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 sys_uid: integer\n  \u2022 login_date: datetime\n  \u2022 login_err_times: integer\n  \u2022 login_status: tinyint\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_login_record');"}
{"seed": "/* Inserts 6 rows into the sys_login_record table. */\nINSERT INTO `sys_login_record` VALUES (1,1,'2017-01-06 22:07:00',0,1),(2,1,'2017-01-06 22:07:07',0,1),(3,1,'2017-01-06 22:07:29',0,1),(4,1,'2017-01-06 22:09:39',0,1),(5,1,'2017-01-06 22:10:58',0,1),(6,1,'2017-01-07 17:15:44',0,1)", "description": "Inserts 6 rows into the sys_login_record table.", "concepts": ["INSERT INTO", "VALUES", "sys_login_record", "1", "2017-01-06 22:0"], "instruction": "Write a SQL query to insert 6 rows into the sys_login_record table.", "response": "-- Reasoning:\nWe need to insert 6 rows into the sys_login_record table.\n\n-- Solution:\n```sql\nINSERT INTO sys_login_record (user_id, login_time)\nVALUES (1, '2020-01-01 00:00:00'),\n       (2, '2020-01-01 00:00:00'),\n       (3, '2020-01-01 00:00:00'),\n       (4, '2020-01-01 00:00:00'),\n       (5, '2020-01-01 00:00:00'),\n       (6, '2020-01-01 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts 6 rows into the sys_login_record table.\n\n-- Tests:\n-- 1. Verify 6 rows are inserted\nSELECT * FROM sys_login_record;"}
{"seed": "/* Drops the table sys_res if it exists. */\nDROP TABLE IF EXISTS `sys_res`", "description": "Drops the table sys_res if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "sys_res"], "instruction": "Write a SQL query to drop the sys_res table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_res table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_res;\n```\n\n-- Explanation:\nThis statement drops the sys_res table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_res');"}
{"seed": "/* Creates a table named sys_res with columns id, pid, name, des, url, iconCls, seq, type, modifydate, enabled, and level. */\nCREATE TABLE `sys_res` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `pid` int(11) DEFAULT NULL,\n  `name` varchar(111) DEFAULT NULL,\n  `des` varchar(255) DEFAULT NULL,\n  `url` varchar(255) DEFAULT NULL,\n  `iconCls` varchar(255) DEFAULT 'am-icon-file',\n  `seq` int(11) DEFAULT '1',\n  `type` int(1) DEFAULT '2' COMMENT '1 \u529f\u80fd 2 \u6743\u9650',\n  `modifydate` timestamp NULL DEFAULT NULL,\n  `enabled` int(1) DEFAULT '1' COMMENT '\u662f\u5426\u542f\u7528 1\uff1a\u542f\u7528  0\uff1a\u7981\u7528',\n  `level` int(11) DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=209 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named sys_res with columns id, pid, name, des, url, iconCls, seq, type, modifydate, enabled, and level.", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named sys_res with columns id, pid, name, des, url, iconCls, seq, type, modifydate, enabled, and level.", "response": "-- Reasoning:\nWe need a new table named sys_res. It should have an integer primary key so that each resource has a unique identifier, and a name column to store the resource\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE sys_res (\n  id INT PRIMARY KEY,\n  pid INT,\n  name VARCHAR(255),\n  des VARCHAR(255),\n  url VARCHAR(255),\n  iconCls VARCHAR(255),\n  seq INT,\n  type INT,\n  modifydate DATETIME,\n  enabled INT,\n  level INT\n);\n```\n\n-- Explanation:\nThis statement defines the sys_res table with 11 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 pid: integer\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 des: variable\u2010length string up to 255 characters\n  \u2022 url: variable\u2010length string up to 255 characters\n  \u2022 iconCls: variable\u2010length string up to 255 characters\n  \u2022 seq: integer\n  \u2022 type: integer\n  \u2022 modifydate: datetime\n  \u2022 enabled: integer\n  \u2022 level: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_res');"}
{"seed": "/* Drops the table sys_role if it exists. */\nDROP TABLE IF EXISTS `sys_role`", "description": "Drops the table sys_role if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table sys_role if it exists.", "response": "-- Reasoning:\nWe need to delete the table sys_role if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_role;\n```\n\n-- Explanation:\nThis statement deletes the table sys_role if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_role');"}
{"seed": "/* Creates a table named sys_role with five columns: id (integer primary key), name (varchar), des (varchar), seq (integer), createdate (datetime), and status (integer). */\nCREATE TABLE `sys_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(55) NOT NULL DEFAULT '',\n  `des` varchar(55) DEFAULT NULL,\n  `seq` int(11) DEFAULT '1',\n  `createdate` datetime DEFAULT NULL,\n  `status` int(11) DEFAULT '1' COMMENT '0-\u7981\u7528  1-\u542f\u7528',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=63 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named sys_role with five columns: id (integer primary key), name (varchar), des (varchar), seq (integer), createdate (datetime), and status (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "COMMENT", "ROW_FORMAT"], "instruction": "Write a SQL query to create a table named sys_role with five columns: id (integer primary key), name (varchar), des (varchar), seq (integer), createdate (datetime), and status (integer).", "response": "-- Reasoning:\nWe need a new table named sys_role. It should have an integer primary key so that each role has a unique identifier, and a name column to store the role\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE sys_role (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  des VARCHAR(255),\n  seq INT,\n  createdate DATETIME,\n  status INT\n);\n```\n\n-- Explanation:\nThis statement defines the sys_role table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 des: variable\u2010length string up to 255 characters\n  \u2022 seq: integer\n  \u2022 createdate: datetime\n  \u2022 status: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_role');"}
{"seed": "/* Inserts a new row into the sys_role table with the given values. */\nINSERT INTO `sys_role` VALUES (1,'admin','\u8d85\u7ea7\u7ba1\u7406\u5458',1,'2015-05-05 14:24:26',1),(62,'\u9500\u552e\u4eba\u5458','',1,'2017-01-07 16:14:35',1)", "description": "Inserts a new row into the sys_role table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the sys_role table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the sys_role table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO sys_role (role_id, role_name)\nVALUES (1, 'admin');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the sys_role table with the given values:\n  \u2022 role_id: 1\n  \u2022 role_name: admin\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM sys_role;"}
{"seed": "/* Drops the table sys_role_res if it exists. */\nDROP TABLE IF EXISTS `sys_role_res`", "description": "Drops the table sys_role_res if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the sys_role_res table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_role_res table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_role_res;\n```\n\n-- Explanation:\nThis DROP statement drops the sys_role_res table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_role_res');"}
{"seed": "/* Creates a table named sys_role_res with four columns: id (integer primary key), res_id (integer), role_id (integer), and a foreign key constraint on res_id and role_id. */\nCREATE TABLE `sys_role_res` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `res_id` int(11) DEFAULT NULL,\n  `role_id` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FK_sys_ROLE_RES_RES_ID` (`res_id`),\n  KEY `FK_sys_ROLE_RES_ROLE_ID` (`role_id`),\n  CONSTRAINT `sys_role_res_ibfk_1` FOREIGN KEY (`res_id`) REFERENCES `sys_res` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT `sys_role_res_ibfk_2` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=4221 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named sys_role_res with four columns: id (integer primary key), res_id (integer), role_id (integer), and a foreign key constraint on res_id and role_id.", "concepts": ["CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "REFERENCES", "ON DELETE", "ON UPDATE", "AUTO_INCREMENT", "ROW_FORMAT"], "instruction": "Write a SQL query to create a table named sys_role_res with four columns: id (integer primary key), res_id (integer), role_id (integer), and a foreign key constraint on res_id and role_id.", "response": "-- Reasoning:\nWe need a new table named sys_role_res. It should have an integer primary key so that each row has a unique identifier, and three foreign key columns: res_id and role_id.\n\n-- Solution:\n```sql\nCREATE TABLE sys_role_res (\n  id INTEGER PRIMARY KEY,\n  res_id INTEGER,\n  role_id INTEGER,\n  FOREIGN KEY (res_id) REFERENCES sys_resource(id),\n  FOREIGN KEY (role_id) REFERENCES sys_role(id)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_role_res table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 res_id: integer, foreign key to sys_resource(id)\n  \u2022 role_id: integer, foreign key to sys_role(id)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('sys_role_res');"}
{"seed": "/* Inserts 20 rows into the sys_role_res table. */\nINSERT INTO `sys_role_res` VALUES (4141,1,1),(4142,2,1),(4143,18,1),(4144,19,1),(4145,3,1),(4146,28,1),(4147,29,1),(4148,4,1),(4149,9,1),(4150,12,1),(4151,63,1),(4152,146,1),(4153,147,1),(4154,150,1),(4155,181,1),(4156,182,1),(4157,152,1),(4162,192,1),(4163,193,1),(4175,194,1),(4176,195,1),(4200,196,1),(4201,197,1),(4202,198,1),(4203,199,1),(4204,200,1),(4205,201,1),(4206,202,1),(4207,203,1),(4208,204,1),(4209,205,1),(4210,206,1),(4211,207,1),(4212,208,1),(4213,194,62),(4214,195,62),(4215,196,62),(4216,197,62),(4217,201,62),(4218,203,62),(4219,204,62),(4220,206,62)", "description": "Inserts 20 rows into the sys_role_res table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 20 rows into the sys_role_res table.", "response": "-- Reasoning:\nWe need to insert 20 rows into the sys_role_res table.\n\n-- Solution:\n```sql\nINSERT INTO sys_role_res (role_id, res_id)\nVALUES (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20);\n```\n\n-- Explanation:\nThis INSERT statement inserts 20 rows into the sys_role_res table.\n\n-- Tests:\n-- 1. Verify 20 rows are inserted\nSELECT * FROM sys_role_res;"}
{"seed": "/* Creates a table named sys_user with 11 columns: id (integer primary key), name (varchar), pwd (varchar), des (varchar), status (integer), icon (varchar), email (varchar), createdate (datetime), phone (varchar), token (varchar), wxid (varchar), and realName (varchar). */\nCREATE TABLE `sys_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(55) DEFAULT NULL,\n  `pwd` varchar(255) DEFAULT NULL,\n  `des` varchar(55) DEFAULT NULL,\n  `status` int(1) DEFAULT '1' COMMENT '#1 \u4e0d\u5728\u7ebf 2.\u5c01\u53f7\u72b6\u6001 ',\n  `icon` varchar(255) DEFAULT '/images/guest.jpg',\n  `email` varchar(50) DEFAULT NULL,\n  `createdate` datetime DEFAULT NULL,\n  `phone` varchar(15) DEFAULT NULL,\n  `token` varchar(64) DEFAULT NULL COMMENT 'cookieid',\n  `wxid` varchar(64) DEFAULT NULL COMMENT '\u5fae\u4fe1\u53f7',\n  `realName` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name_index` (`name`),\n  UNIQUE KEY `token_index` (`token`)\n) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named sys_user with 11 columns: id (integer primary key), name (varchar), pwd (varchar), des (varchar), status (integer), icon (varchar), email (varchar), createdate (datetime), phone (varchar), token (varchar), wxid (varchar), and realName (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "DEFAULT", "COMMENT", "ROW_FORMAT", "ENGINE", "CHARSET", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to create a table named sys_user with 11 columns: id (integer primary key), name (varchar), pwd (varchar), des (varchar), status (integer), icon (varchar), email (varchar), createdate (datetime), phone (varchar), token (varchar), wxid (varchar), and realName (varchar).", "response": "-- Reasoning:\nWe need a new table named sys_user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE sys_user (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  pwd VARCHAR(255),\n  des VARCHAR(255),\n  status INT,\n  icon VARCHAR(255),\n  email VARCHAR(255),\n  createdate DATETIME,\n  phone VARCHAR(255),\n  token VARCHAR(255),\n  wxid VARCHAR(255),\n  realName VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user table with 11 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 pwd: variable\u2010length string up to 255 characters\n  \u2022 des: variable\u2010length string up to 255 characters\n  \u2022 status: integer\n  \u2022 icon: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 createdate: datetime\n  \u2022 phone: variable\u2010length string up to 255 characters"}
{"seed": "/* Drops the table sys_user_role if it exists. */\nDROP TABLE IF EXISTS `sys_user_role`", "description": "Drops the table sys_user_role if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the sys_user_role table if it exists.", "response": "-- Reasoning:\nWe need to drop the sys_user_role table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS sys_user_role;\n```\n\n-- Explanation:\nThis DROP statement drops the sys_user_role table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('sys_user_role');"}
{"seed": "/* Creates a table named sys_user_role with four columns: id (integer primary key), user_id (integer), role_id (integer), and three foreign keys: user_id references sys_user (id) on delete cascade on update cascade, role_id references sys_role (id) on delete cascade on update cascade, and id references sys_user_role (id) on delete cascade on update cascade. */\nCREATE TABLE `sys_user_role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_id` int(11) DEFAULT NULL,\n  `role_id` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FK_SYSTME_USER_ROLE_USER_ID` (`user_id`),\n  KEY `FK_SYSTME_USER_ROLE_ROLE_ID` (`role_id`),\n  CONSTRAINT `sys_user_role_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT `sys_user_role_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `sys_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB AUTO_INCREMENT=339 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT", "description": "Creates a table named sys_user_role with four columns: id (integer primary key), user_id (integer), role_id (integer), and three foreign keys: user_id references sys_user (id) on delete cascade on update cascade, role_id references sys_role (id) on delete cascade on update cascade, and id references sys_user_role (id) on delete cascade on update cascade.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "ON DELETE CASCADE ON UPDATE CASCADE", "AUTO_INCREMENT", "DEFAULT", "ROW_FORMAT"], "instruction": "Write a SQL query to create a table named sys_user_role with four columns: id (integer primary key), user_id (integer), role_id (integer), and three foreign keys: user_id references sys_user (id) on delete cascade on update cascade, role_id references sys_role (id) on delete cascade on update cascade, and id references sys_user_role (id) on delete cascade on update cascade.", "response": "-- Reasoning:\nWe need a new table named sys_user_role. It should have an integer primary key so that each user role has a unique identifier, and three foreign keys:\n  \u2022 user_id references sys_user (id) on delete cascade on update cascade\n  \u2022 role_id references sys_role (id) on delete cascade on update cascade\n  \u2022 id references sys_user_role (id) on delete cascade on update cascade\n\n-- Solution:\n```sql\nCREATE TABLE sys_user_role (\n  id INT PRIMARY KEY,\n  user_id INT,\n  role_id INT,\n  FOREIGN KEY (user_id) REFERENCES sys_user (id) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (role_id) REFERENCES sys_role (id) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (id) REFERENCES sys_user_role (id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n```\n\n-- Explanation:\nThis statement defines the sys_user_role table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_id: integer, references sys_user (id) on delete cascade on update cascade\n  \u2022 role_id: integer, references sys_role (id) on delete cascade on update cascade\n  \u2022 id: integer, references sys_user_role (id) on delete cascade on update cascade"}
{"seed": "/* Inserts two rows into the sys_user_role table. The first row has id 315, user_id 1, and role_id 1. The second row has id 338, user_id 36, and role_id 62. */\nINSERT INTO `sys_user_role` VALUES (315,1,1),(338,36,62)", "description": "Inserts two rows into the sys_user_role table. The first row has id 315, user_id 1, and role_id 1. The second row has id 338, user_id 36, and role_id 62.", "concepts": ["INSERT INTO", "VALUES", "sys_user_role"], "instruction": "Write a SQL query to insert two rows into the sys_user_role table. The first row has id 315, user_id 1, and role_id 1. The second row has id 338, user_id 36, and role_id 62.", "response": "-- Reasoning:\nWe need to insert two rows into the sys_user_role table. The first row should have id 315, user_id 1, and role_id 1. The second row should have id 338, user_id 36, and role_id 62.\n\n-- Solution:\n```sql\nINSERT INTO sys_user_role (id, user_id, role_id)\nVALUES (315, 1, 1), (338, 36, 62);\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the sys_user_role table. The first row has id 315, user_id 1, and role_id 1. The second row has id 338, user_id 36, and role_id 62.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM sys_user_role;"}
{"seed": "/* Drops the table named user_rated if it exists. */\nDROP TABLE IF EXISTS `user_rated`", "description": "Drops the table named user_rated if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named user_rated if it exists.", "response": "-- Reasoning:\nWe need to drop the table named user_rated if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS user_rated;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('user_rated');"}
{"seed": "/* Creates a table named user_rated with four columns: id (integer primary key), saler (integer), rated (varchar), and amount (decimal). */\nCREATE TABLE `user_rated` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `saler` int(11) DEFAULT NULL COMMENT '\u9500\u552e\u4eba\u5458',\n  `rated` varchar(45) DEFAULT NULL COMMENT '\u8ba1\u63d0\u6708\u4efd',\n  `amount` decimal(12,2) DEFAULT NULL COMMENT '\u63d0\u6210\u91d1\u989d',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='\u5458\u5de5\u63d0\u6210\u8868'", "description": "Creates a table named user_rated with four columns: id (integer primary key), saler (integer), rated (varchar), and amount (decimal).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "CHARSET", "INT", "VARCHAR", "DECIMAL"], "instruction": "Write a SQL query to create a table named user_rated with four columns: id (integer primary key), saler (integer), rated (varchar), and amount (decimal).", "response": "-- Reasoning:\nWe need a new table named user_rated. It should have an integer primary key so that each user_rated has a unique identifier, and a saler column to store the saler\u2019s id as integer, a rated column to store the rated\u2019s name as varchar, and an amount column to store the amount as decimal.\n\n-- Solution:\n```sql\nCREATE TABLE user_rated (\n  id INT PRIMARY KEY,\n  saler INT,\n  rated VARCHAR(255),\n  amount DECIMAL\n);\n```\n\n-- Explanation:\nThis statement defines the user_rated table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 saler: integer\n  \u2022 rated: variable\u2010length string up to 255 characters\n  \u2022 amount: decimal\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user_rated');"}
{"seed": "/* Selects the Percentage and Half columns from the world.CountryLanguage table. */\nSELECT \n\tPercentage,Percentage/2 As Half \nFROM \n\tworld.CountryLanguage", "description": "Selects the Percentage and Half columns from the world.CountryLanguage table.", "concepts": ["SELECT", "FROM", "AS", "PERCENTAGE", "HALF"], "instruction": "Write a SQL query to select the Percentage and Half columns from the world.CountryLanguage table.", "response": "-- Reasoning:\nWe need to select the Percentage and Half columns from the world.CountryLanguage table.\n\n-- Solution:\n```sql\nSELECT Percentage, Half\n  FROM world.CountryLanguage;\n```\n\n-- Explanation:\nThis query selects the Percentage and Half columns from the world.CountryLanguage table.\n\n-- Tests:\n-- 1. Verify the columns are selected\nSELECT *\n  FROM world.CountryLanguage;"}
{"seed": "/* This query selects the uid, name, gender, and the number of female and male friends of each user. It uses a LEFT JOIN to include users who do not have any friends. It uses a subquery to count the number of female and male friends for each user. */\nSELECT any_user.\"uid\", any_user.\"name\", any_user.\"gender\", agg_female_friends.num_female_friends, agg_male_friends.num_male_friends\nFROM Users any_user\n    LEFT JOIN (\n      SELECT female_friends.\"uid1\", COUNT(female_friends.\"uid2\") AS num_female_friends\n      FROM Friends female_friends INNER JOIN Users females ON female_friends.\"uid2\" = females.\"uid\"\n      WHERE females.\"gender\" = 'F'\n      GROUP BY female_friends.\"uid1\"\n    ) agg_female_friends ON any_user.\"uid\" = agg_female_friends.\"uid1\"\n    LEFT JOIN (\n      SELECT male_friends.\"uid1\", COUNT(male_friends.\"uid2\") AS num_male_friends\n      FROM Friends male_friends INNER JOIN Users males ON male_friends.\"uid2\" = males.\"uid\"\n      WHERE males.\"gender\" = 'M'\n      GROUP BY male_friends.\"uid1\"\n    ) agg_male_friends ON any_user.\"uid\" = agg_male_friends.\"uid1\"", "description": "This query selects the uid, name, gender, and the number of female and male friends of each user. It uses a LEFT JOIN to include users who do not have any friends. It uses a subquery to count the number of female and male friends for each user.", "concepts": ["SELECT", "FROM", "LEFT JOIN", "INNER JOIN", "ON", "GROUP BY", "COUNT", "Friends", "Users", "WHERE", "F", "M", "AS"], "instruction": "Write a SQL query to list the uid, name, gender, and the number of female and male friends of each user.", "response": "-- Reasoning:\nWe need to list the uid, name, gender, and the number of female and male friends of each user.\n\n-- Solution:\n```sql\nSELECT\n  u.uid,\n  u.name,\n  u.gender,\n  (SELECT COUNT(*) FROM friends WHERE uid = u.uid AND gender = 'F') AS female_friends,\n  (SELECT COUNT(*) FROM friends WHERE uid = u.uid AND gender = 'M') AS male_friends\nFROM users u;\n```\n\n-- Explanation:\nThis query uses a subquery to count the number of female and male friends for each user.\n\n-- Tests:\n-- 1. Verify query returns correct results\nSELECT * FROM (\n  SELECT\n    u.uid,\n    u.name,\n    u.gender,\n    (SELECT COUNT(*) FROM friends WHERE uid = u.uid AND gender = 'F') AS female_friends,\n    (SELECT COUNT(*) FROM friends WHERE uid = u.uid AND gender = 'M') AS male_friends\n  FROM users u\n)\nWHERE female_friends > 0 OR male_friends > 0;"}
{"seed": "/* Inserts a new course into the courses table with the given values. */\nINSERT INTO courses(courses_id, courses_name, courses_subject, courses_professors_id)\nVALUES(1, \"beauty and the beast\", \"History\", 1)", "description": "Inserts a new course into the courses table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new course into the courses table with the given values.", "response": "-- Reasoning:\nWe need to insert a new course into the courses table. It should have the following values:\n  \u2022 course_id: 1001\n  \u2022 name: Introduction to SQL\n  \u2022 duration: 100 hours\n\n-- Solution:\n```sql\nINSERT INTO courses (course_id, name, duration)\nVALUES (1001, 'Introduction to SQL', 100);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the courses table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM courses;"}
{"seed": "/* Inserts a new row into the courses table with the given values. */\nINSERT INTO courses(courses_id, courses_name, courses_subject, courses_professors_id)\nVALUES(3, \"MR PYTHON\", \"science\", 3)", "description": "Inserts a new row into the courses table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the courses table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the courses table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO courses (course_id, name)\nVALUES (1, 'Math');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the courses table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM courses;"}
{"seed": "/* Selects all columns from the courses table. */\nSELECT *\nFROM courses", "description": "Selects all columns from the courses table.", "concepts": ["SELECT", "*"], "instruction": "Write a SQL query to select all columns from the courses table.", "response": "-- Reasoning:\nWe need to select all columns from the courses table.\n\n-- Solution:\n```sql\nSELECT * FROM courses;\n```\n\n-- Explanation:\nThis query selects all columns from the courses table.\n\n-- Tests:\n-- 1. Verify all columns are selected\nSELECT * FROM courses;"}
{"seed": "/* Creates a table named firmalar with four columns: firmaID (integer primary key), firmaAd (varchar), tel (varchar), and adres (varchar). */\nCREATE TABLE IF NOT EXISTS `firmalar` (\n  `firmaID` int(11) NOT NULL AUTO_INCREMENT,\n  `firmaAd` varchar(50) DEFAULT NULL,\n  `tel` varchar(13) DEFAULT NULL,\n  `adres` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`firmaID`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8", "description": "Creates a table named firmalar with four columns: firmaID (integer primary key), firmaAd (varchar), tel (varchar), and adres (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named firmalar with four columns: firmaID (integer primary key), firmaAd (varchar), tel (varchar), and adres (varchar).", "response": "-- Reasoning:\nWe need a new table named firmalar. It should have an integer primary key so that each firmalar has a unique identifier, and a name column to store the firmalar\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE firmalar (\n  firmaID INT PRIMARY KEY,\n  firmaAd VARCHAR(255),\n  tel VARCHAR(255),\n  adres VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the firmalar table with four columns:\n  \u2022 firmaID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 firmaAd: variable\u2010length string up to 255 characters\n  \u2022 tel: variable\u2010length string up to 255 characters\n  \u2022 adres: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('firmalar');"}
{"seed": "/* Inserts 6 rows into the firmalar table. */\nINSERT INTO `firmalar` (`firmaID`, `firmaAd`, `tel`, `adres`) VALUES\n(1, 'adidas', NULL, 'almanya'),\n(2, 'nike', NULL, 'amerika'),\n(3, 'umbro', NULL, 'italya'),\n(4, 'lotto', NULL, 'italya'),\n(5, 'lescon', NULL, 't\u00fcrkiye'),\n(6, 'puma', NULL, 'amerika')", "description": "Inserts 6 rows into the firmalar table.", "concepts": ["INSERT INTO", "VALUES", "firmaID", "firmaAd", "tel", "adres"], "instruction": "Write a SQL query to insert 6 rows into the firmalar table.", "response": "-- Reasoning:\nWe need to insert 6 rows into the firmalar table.\n\n-- Solution:\n```sql\nINSERT INTO firmalar (id, name, address, city, country)\nVALUES (1, '', 'Obere Str. 57', 'Berlin', 'Germany'),\n       (2, '', 'Avda. de la Constituci\u00f3n 2222', 'M\u00e9xico D.F.', 'Mexico'),\n       (3, '', 'Mataderos 2312', 'M\u00e9xico D.F.', 'Mexico'),\n       (4, 'Around the Horn', '120 Hanover Sq.', 'London', 'UK'),\n       (5, 'Berglunds snabbk\u00f6p', 'Berguvsv\u00e4gen 8', 'Lule\u00e5', 'Sweden'),\n       (6, '', 'Forsterstr. 57', 'Mannheim', 'Germany');\n```\n\n-- Explanation:\nThis INSERT statement inserts 6 rows into the firmalar table.\n\n-- Tests:\n-- 1. Verify 6 rows are inserted\nSELECT * FROM firmalar;"}
{"seed": "/* Creates a table named kategori with three columns: kategoriID (integer primary key), kategoriAd (varchar) and kdv (tinyint). */\nCREATE TABLE IF NOT EXISTS `kategori` (\n  `kategoriID` int(11) NOT NULL AUTO_INCREMENT,\n  `kategoriAd` varchar(50) DEFAULT NULL,\n  `kdv` tinyint(4) DEFAULT NULL,\n  PRIMARY KEY (`kategoriID`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8", "description": "Creates a table named kategori with three columns: kategoriID (integer primary key), kategoriAd (varchar) and kdv (tinyint).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named kategori with three columns: kategoriID (integer primary key), kategoriAd (varchar) and kdv (tinyint).", "response": "-- Reasoning:\nWe need a new table named kategori. It should have an integer primary key so that each kategori has a unique identifier, and a kategoriAd column to store the kategori\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE kategori (\n  kategoriID INT PRIMARY KEY,\n  kategoriAd VARCHAR(255),\n  kdv TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the kategori table with three columns:\n  \u2022 kategoriID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 kategoriAd: variable\u2010length string up to 255 characters\n  \u2022 kdv: integer, up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('kategori');"}
{"seed": "/* Inserts 10 rows into the kategori table. */\nINSERT INTO `kategori` (`kategoriID`, `kategoriAd`, `kdv`) VALUES\n(1, 'ayakkabi', 18),\n(2, 'tshirt', 17),\n(3, 'mont', 18),\n(4, 'pantolon', 18),\n(5, 'kazak', 18),\n(6, 'kilot', 18),\n(7, 'gozluk', 18),\n(8, 'bileklik', 18),\n(9, 'forma', 18),\n(10, 'sapka', 18)", "description": "Inserts 10 rows into the kategori table.", "concepts": ["INSERT INTO", "VALUES", "kategori", "kategoriID", "kategoriAd", "kdv"], "instruction": "Write a SQL query to insert 10 rows into the kategori table.", "response": "-- Reasoning:\nWe need to insert 10 rows into the kategori table.\n\n-- Solution:\n```sql\nINSERT INTO kategori (nama_kategori)\nVALUES\n  ('Kategori 1'),\n  ('Kategori 2'),\n  ('Kategori 3'),\n  ('Kategori 4'),\n  ('Kategori 5'),\n  ('Kategori 6'),\n  ('Kategori 7'),\n  ('Kategori 8'),\n  ('Kategori 9'),\n  ('Kategori 10');\n```\n\n-- Explanation:\nThis INSERT statement inserts 10 rows into the kategori table.\n\n-- Tests:\n-- 1. Verify 10 rows are inserted\nSELECT * FROM kategori;"}
{"seed": "/* Creates a table named musteri with five columns: musteriID (integer primary key), ad (varchar), soyad (varchar), adres (varchar), and tel (varchar). */\nCREATE TABLE IF NOT EXISTS `musteri` (\n  `musteriID` int(11) NOT NULL AUTO_INCREMENT,\n  `ad` varchar(50) DEFAULT NULL,\n  `soyad` varchar(50) DEFAULT NULL,\n  `adres` varchar(100) DEFAULT NULL,\n  `tel` varchar(13) DEFAULT NULL,\n  PRIMARY KEY (`musteriID`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8", "description": "Creates a table named musteri with five columns: musteriID (integer primary key), ad (varchar), soyad (varchar), adres (varchar), and tel (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named musteri with five columns: musteriID (integer primary key), ad (varchar), soyad (varchar), adres (varchar), and tel (varchar).", "response": "-- Reasoning:\nWe need a new table named musteri. It should have an integer primary key so that each musteri has a unique identifier, and four other columns to store the musteri\u2019s name, surname, address, and phone number.\n\n-- Solution:\n```sql\nCREATE TABLE musteri (\n  musteriID INT PRIMARY KEY,\n  ad VARCHAR(255),\n  soyad VARCHAR(255),\n  adres VARCHAR(255),\n  tel VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the musteri table with five columns:\n  \u2022 musteriID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ad: variable\u2010length string up to 255 characters\n  \u2022 soyad: variable\u2010length string up to 255 characters\n  \u2022 adres: variable\u2010length string up to 255 characters\n  \u2022 tel: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('musteri');"}
{"seed": "/* Inserts 10 rows into the musteri table. */\nINSERT INTO `musteri` (`musteriID`, `ad`, `soyad`, `adres`, `tel`) VALUES\n(1, 'mustafa ', 'kostek', 'bal\u0131kesir', '05549935366'),\n(2, 'tugaycan', 'kostek', 'izmir', '026638458484'),\n(4, 'ahmet', 'candar', 'balikesir', '02663845884'),\n(5, 'hayri', 'haydar', '\u015fap\u00e7\u0131', '02663845885'),\n(6, 'haydar', 'veli', 'balikesir', '05549935366'),\n(7, 'ahmet', 'vahet', 'edremit', '02645589656'),\n(8, 'mustafa', 'kafadar', 'balikesir', '03659876566'),\n(10, 'mert', 'kostek', 'akcay', '05549968745'),\n(12, 'mahmut', 'redar', 'edremit', '03554875233'),\n(13, 'zeynel', 'abidin', 'akcay', '03356522323'),\n(14, 'velihan', 'acar', 'akcay', '02563321548'),\n(15, 'hayri', 'vefal\u00c4\u00b1', 'havran', '02663548745'),\n(16, 'miralem', 'tekte', 'burhaniye', '05548875699'),\n(17, 'ali', 'gardas', 'stanbul', '03336665544'),\n(18, 'tugaycan', 'k\u00c3\u00b6stek', 'akcay', '02224156544')", "description": "Inserts 10 rows into the musteri table.", "concepts": ["INSERT INTO", "VALUES", "musteri", "musteriID", "ad", "soyad", "adres", "tel"], "instruction": "Write a SQL query to insert 10 rows into the musteri table.", "response": "-- Reasoning:\nWe need to insert 10 rows into the musteri table.\n\n-- Solution:\n```sql\nINSERT INTO musteri (musteri_id, musteri_adi, musteri_soyadi, musteri_telefon)\nVALUES (1, 'John', 'Doe', '1234567890'),\n       (2, 'Jane', 'Doe', '1234567890'),\n       (3, 'John', 'Doe', '1234567890'),\n       (4, 'Jane', 'Doe', '1234567890'),\n       (5, 'John', 'Doe', '1234567890'),\n       (6, 'Jane', 'Doe', '1234567890'),\n       (7, 'John', 'Doe', '1234567890'),\n       (8, 'Jane', 'Doe', '1234567890'),\n       (9, 'John', 'Doe', '1234567890'),\n       (10, 'Jane', 'Doe', '1234567890');"}
{"seed": "/* Creates a table named siparis with five columns: siparisID (integer primary key), musteriID (integer), tarih (date), adres (varchar), and alindi (bit). */\nCREATE TABLE IF NOT EXISTS `siparis` (\n  `siparisID` int(11) NOT NULL AUTO_INCREMENT,\n  `musteriID` int(11) DEFAULT NULL,\n  `tarih` date DEFAULT NULL,\n  `adres` varchar(100) DEFAULT NULL,\n  `alindi` bit(1) DEFAULT NULL,\n  PRIMARY KEY (`siparisID`),\n  KEY `musteriID` (`musteriID`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8", "description": "Creates a table named siparis with five columns: siparisID (integer primary key), musteriID (integer), tarih (date), adres (varchar), and alindi (bit).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named siparis with five columns: siparisID (integer primary key), musteriID (integer), tarih (date), adres (varchar), and alindi (bit).", "response": "-- Reasoning:\nWe need a new table named siparis. It should have an integer primary key so that each order has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE siparis (\n  siparisID INT PRIMARY KEY,\n  musteriID INT,\n  tarih DATE,\n  adres VARCHAR(255),\n  alindi BIT\n);\n```\n\n-- Explanation:\nThis statement defines the siparis table with five columns:\n  \u2022 siparisID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 musteriID: integer\n  \u2022 tarih: date\n  \u2022 adres: variable\u2010length string up to 255 characters\n  \u2022 alindi: bit\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('siparis');"}
{"seed": "/* Inserts five rows into the siparis table. */\nINSERT INTO `siparis` (`siparisID`, `musteriID`, `tarih`, `adres`, `alindi`) VALUES\n(131, 4, '2016-12-15', 'mustafa kostek', NULL),\n(130, 6, '2017-01-02', 'akcay', NULL),\n(129, 4, '2016-12-17', 'bayburt', NULL),\n(132, 7, '2016-12-16', 'edremit', NULL),\n(133, 1, '2016-12-17', 'akcay', NULL),\n(134, 8, '2016-12-17', 'BURSA', NULL)", "description": "Inserts five rows into the siparis table.", "concepts": ["INSERT INTO", "VALUES", "siparis", "musteriID", "tarih", "adres", "alindi"], "instruction": "Write a SQL query to insert five rows into the siparis table.", "response": "-- Reasoning:\nWe need to insert five rows into the siparis table.\n\n-- Solution:\n```sql\nINSERT INTO siparis (\n  siparis_id,\n  urun_id,\n  musteri_id,\n  siparis_tarihi,\n  siparis_miktari\n) VALUES (\n  1,\n  1,\n  1,\n  '2020-01-01',\n  10\n);\n\nINSERT INTO siparis (\n  siparis_id,\n  urun_id,\n  musteri_id,\n  siparis_tarihi,\n  siparis_miktari\n) VALUES (\n  2,\n  2,\n  2,\n  '2020-01-02',\n  20\n);\n\nINSERT INTO siparis (\n  siparis_id,\n  urun_id,\n  musteri_id,\n  siparis_tarihi,\n  siparis_miktari\n) VALUES (\n  3,\n  3,\n  3,\n  '2020-01-03',\n  30\n);\n\nINSERT INTO siparis (\n  siparis_id,\n  urun_id,\n  musteri_id,\n  siparis_tarihi,\n  siparis_miktari\n)"}
{"seed": "/* Creates a table named siparisdetay with five columns: nu (integer primary key), siparisID (integer), urunID (integer), adet (integer), and a foreign key constraint on siparisID referencing the siparis table. */\nCREATE TABLE IF NOT EXISTS `siparisdetay` (\n  `nu` int(11) NOT NULL AUTO_INCREMENT,\n  `siparisID` int(11) DEFAULT NULL,\n  `urunID` int(11) DEFAULT NULL,\n  `adet` int(11) DEFAULT NULL,\n  PRIMARY KEY (`nu`),\n  KEY `siparisID` (`siparisID`),\n  KEY `urunID` (`urunID`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8", "description": "Creates a table named siparisdetay with five columns: nu (integer primary key), siparisID (integer), urunID (integer), adet (integer), and a foreign key constraint on siparisID referencing the siparis table.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named siparisdetay with five columns: nu (integer primary key), siparisID (integer), urunID (integer), adet (integer), and a foreign key constraint on siparisID referencing the siparis table.", "response": "-- Reasoning:\nWe need a new table named siparisdetay. It should have an integer primary key so that each row has a unique identifier, and four columns:\n  \u2022 siparisID: integer, a foreign key referencing the siparis table\n  \u2022 urunID: integer, a foreign key referencing the urunler table\n  \u2022 adet: integer, the number of items in the order\n  \u2022 tarih: date, the date the order was placed\n\n-- Solution:\n```sql\nCREATE TABLE siparisdetay (\n  nu INT PRIMARY KEY,\n  siparisID INT,\n  urunID INT,\n  adet INT,\n  FOREIGN KEY (siparisID) REFERENCES siparis(siparisID),\n  FOREIGN KEY (urunID) REFERENCES urunler(urunID)\n);\n```\n\n-- Explanation:\nThis statement defines the siparisdetay table with five columns:\n  \u2022 nu: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 siparisID: integer, a foreign key referencing the siparis table\n  \u2022 urunID: integer, a foreign key referencing the urunler table\n  \u2022 adet: integer, the number of items in the order\n  \u2022 tarih: date, the date the order was placed\n\n-- Tests:\n-- 1. Verify table exists and schema is correct"}
{"seed": "/* Inserts 7 rows into the siparisdetay table. */\nINSERT INTO `siparisdetay` (`nu`, `siparisID`, `urunID`, `adet`) VALUES\n(43, 129, 12, 1),\n(45, 130, 12, 1),\n(46, 130, 12, 1),\n(93, 134, 27, 3),\n(83, 134, 18, 3),\n(79, 133, 26, 1),\n(92, 134, 11, 1)", "description": "Inserts 7 rows into the siparisdetay table.", "concepts": ["INSERT INTO", "VALUES", "siparisdetay", "adet", "urunID", "nu", "siparisID"], "instruction": "Write a SQL query to insert 7 rows into the siparisdetay table.", "response": "-- Reasoning:\nWe need to insert 7 rows into the siparisdetay table.\n\n-- Solution:\n```sql\nINSERT INTO siparisdetay (siparis_id, urun_id, adet)\nVALUES (1, 1, 1), (1, 2, 1), (1, 3, 1), (2, 1, 1), (2, 2, 1), (3, 1, 1), (3, 2, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts 7 rows into the siparisdetay table.\n\n-- Tests:\n-- 1. Verify 7 rows are inserted\nSELECT * FROM siparisdetay;"}
{"seed": "/* Creates a table named urunler with columns urunID, urunAd, alis, satis, kategoriID and firmaID. The table has a primary key named urunID, and the columns firmaID and kategoriID are foreign keys that reference the tables firma and kategori, respectively. */\nCREATE TABLE IF NOT EXISTS `urunler` (\n  `urunID` int(11) NOT NULL AUTO_INCREMENT,\n  `urunAd` varchar(50) CHARACTER SET utf8 COLLATE utf8_turkish_ci DEFAULT NULL,\n  `alis` int(11) DEFAULT NULL,\n  `satis` int(11) DEFAULT NULL,\n  `kategoriID` int(11) DEFAULT NULL,\n  `firmaID` int(11) DEFAULT NULL,\n  PRIMARY KEY (`urunID`),\n  KEY `firmaID` (`firmaID`),\n  KEY `kategoriID` (`kategoriID`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8", "description": "Creates a table named urunler with columns urunID, urunAd, alis, satis, kategoriID and firmaID. The table has a primary key named urunID, and the columns firmaID and kategoriID are foreign keys that reference the tables firma and kategori, respectively.", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named urunler with columns urunID, urunAd, alis, satis, kategoriID and firmaID. The table has a primary key named urunID, and the columns firmaID and kategoriID are foreign keys that reference the tables firma and kategori, respectively.", "response": "-- Reasoning:\nWe need a new table named urunler. It should have an integer primary key so that each product has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE urunler (\n  urunID INT PRIMARY KEY,\n  urunAd VARCHAR(255),\n  alis INT,\n  satis INT,\n  kategoriID INT,\n  firmaID INT,\n  FOREIGN KEY (firmaID) REFERENCES firma(firmaID),\n  FOREIGN KEY (kategoriID) REFERENCES kategori(kategoriID)\n);\n```\n\n-- Explanation:\nThis statement defines the urunler table with two columns:\n  \u2022 urunID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('urunler');"}
{"seed": "/* Inserts 24 rows into the urunler table. */\nINSERT INTO `urunler` (`urunID`, `urunAd`, `alis`, `satis`, `kategoriID`, `firmaID`) VALUES\n(7, 'M kirmizi', 6, 17, 2, 5),\n(2, '42 beyaz', 7, 16, 1, 1),\n(3, '41 siyah', 6, 13, 1, 4),\n(4, '43 sari', 11, 16, 1, 3),\n(5, '41 mavi', 6, 15, 1, 6),\n(6, '42 kirmizi', 6, 11, 1, 5),\n(8, 'M sari', 7, 17, 2, 4),\n(9, 'L mavi', 7, 12, 2, 1),\n(10, 'L siyah', 5, 15, 2, 6),\n(11, 'L beyaz', 15, 45, 3, 4),\n(12, 'M  kirmizi', 22, 66, 3, 5),\n(13, 'M sari', 29, 50, 3, 1),\n(14, 'mavi 32 32', 11, 44, 4, 2),\n(15, 'beyaz 32 34 ', 14, 40, 4, 1),\n(16, 'siyah 34 34', 20, 45, 4, 4),\n(17, 'sari M', 16, 33, 5, 2),\n(18, 'siyah L', 11, 44, 5, 5),\n(19, 'beyaz S', 14, 35, 5, 1),\n(20, 'siyah S', 20, 45, 6, 6),\n(21, 'mavi M', 17, 39, 6, 6),\n(22, 'bordo L', 15, 37, 6, 6),\n(23, 'yuvarlak erkek', 15, 33, 7, 3),\n(24, 'kemikli bayan', 13, 33, 7, 5),\n(25, 'yuvarlak erkek', 11, 25, 7, 4),\n(26, 'yuvarlak erkek', 11, 22, 7, 2),\n(27, 'lacivert M', 9, 20, 8, 1),\n(28, 'siyah L', 11, 20, 9, 2),\n(29, 'beyaz M', 8, 15, 9, 3),\n(30, 'sar\u0131 L', 13, 30, 9, 5),\n(31, 'k\u0131rm\u0131z\u0131', 5, 15, 10, 2),\n(32, 'beyaz', 7, 17, 10, 3),\n(33, 'gri tshirt', 12, 23, 5, 4)", "description": "Inserts 24 rows into the urunler table.", "concepts": ["INSERT INTO", "VALUES", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "PRIMARY KEY", "FOREIGN KEY", "CTE", "window functions"], "instruction": "Write a SQL query to insert 24 rows into the urunler table.", "response": "-- Reasoning:\nWe need to insert 24 rows into the urunler table.\n\n-- Solution:\n```sql\nINSERT INTO urunler (urun_id, urun_adi, urun_fiyat, urun_stok)\nVALUES (1, '', 100, 100),\n       (2, '', 100, 100),\n       (3, '', 100, 100),\n       (4, '', 100, 100),\n       (5, '', 100, 100),\n       (6, '', 100, 100),\n       (7, '', 100, 100),\n       (8, '', 100, 100),\n       (9, '', 100, 100),\n       (10, '', 100, 100),\n       (11, '', 100, 100),\n       (12, '', 100, 100),\n       (13, '', 100, 100),\n       (14, '', 100, 10"}
{"seed": "/* Creates a table named alumnes with five columns: id (integer primary key), nom (varchar), cognom (varchar), emailContacte (varchar), classe (integer). */\nCREATE TABLE IF NOT EXISTS `alumnes` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `nom` varchar(40) NOT NULL,\n  `cognom` varchar(40) NOT NULL,\n  `emailContacte` varchar(100) DEFAULT NULL,\n  `classe` mediumint(8) unsigned NOT NULL COMMENT 'CONSTRAINT FOREIGN KEY (classe) REFERENCES classes(id)',\n  PRIMARY KEY (`id`),\n  KEY `nom_complet` (`nom`,`cognom`),\n  KEY `classe` (`classe`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named alumnes with five columns: id (integer primary key), nom (varchar), cognom (varchar), emailContacte (varchar), classe (integer).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "CONSTRAINT", "FOREIGN KEY", "COMMENT", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named alumnes with five columns: id (integer primary key), nom (varchar), cognom (varchar), emailContacte (varchar), classe (integer).", "response": "-- Reasoning:\nWe need a new table named alumnes. It should have an integer primary key so that each alumne has a unique identifier, and a name column to store the alumne\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE alumnes (\n  id INT PRIMARY KEY,\n  nom VARCHAR(255),\n  cognom VARCHAR(255),\n  emailContacte VARCHAR(255),\n  classe INT\n);\n```\n\n-- Explanation:\nThis statement defines the alumnes table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nom: variable\u2010length string up to 255 characters\n  \u2022 cognom: variable\u2010length string up to 255 characters\n  \u2022 emailContacte: variable\u2010length string up to 255 characters\n  \u2022 classe: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('alumnes');"}
{"seed": "/* Inserts five rows into the alumnes table. */\nINSERT INTO `alumnes` (`id`, `nom`, `cognom`, `emailContacte`, `classe`) VALUES\n(1, 'Joan', 'Sala Barcel\u00f3', NULL, 1),\n(2, 'Enric', 'Garc\u00eda Curado', NULL, 2),\n(3, 'Marta', 'Campos Garcia', NULL, 3),\n(4, 'Marius', 'Barcelo Garcia', NULL, 4),\n(5, 'Alba', 'Coma Punt', NULL, 3)", "description": "Inserts five rows into the alumnes table.", "concepts": ["INSERT INTO", "VALUES", "alumnes", "nom", "cognom", "emailContacte", "classe"], "instruction": "Write a SQL query to insert five rows into the alumnes table.", "response": "-- Reasoning:\nWe need to insert five rows into the alumnes table.\n\n-- Solution:\n```sql\nINSERT INTO alumnes (nom, cognom1, cognom2, data_naixement, sexe, poblacio, telefon, email, id_centre)\nVALUES ('John', 'Doe', 'Smith', '1990-01-01', 'M', 'Barcelona', '666666666', '', 1),\n       ('Jane', 'Doe', 'Smith', '1990-01-01', 'F', 'Barcelona', '666666666', '', 1),\n       ('Jane', 'Doe', 'Smith', '1990-01-01', 'F', 'Barcelona', '666666666', '', 1),\n       ('Jane', 'Doe', 'Smith', '1990-01-01', 'F', 'Barcelona', '666666666', '', 1),\n       ('Jane', 'Doe', 'Smith', '1990-01-01', 'F', 'Barcelona"}
{"seed": "/* Creates a table named amonestacions with 14 columns: id (integer primary key), tipus (integer), descripcio (varchar), alumne (integer), profe (integer), ennomde (integer), dataRegistre (timestamp), horaLectiva (integer), dataLectiva (date), situacio (varchar), notes (text), assignadaEscrita (boolean), jaVista (boolean). */\nCREATE TABLE IF NOT EXISTS `amonestacions` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `tipus` tinyint(3) unsigned NOT NULL COMMENT 'CONSTRAINT FOREIGN KEY (tipus) REFERENCES tipus(id)',\n  `descripcio` varchar(100) NOT NULL,\n  `alumne` bigint(20) unsigned NOT NULL COMMENT 'CONSTRAINT FOREIGN KEY (alumne) REFERENCES alumnes(id)',\n  `profe` mediumint(8) unsigned NOT NULL COMMENT 'CONSTRAINT FOREIGN KEY (profe) REFERENCES profes(id)',\n  `ennomde` mediumint(8) unsigned DEFAULT NULL COMMENT 'CONSTRAINT FOREIGN KEY (profe) REFERENCES profes(id)',\n  `dataRegistre` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `horaLectiva` tinyint(3) unsigned DEFAULT NULL,\n  `dataLectiva` date NOT NULL,\n  `situacio` varchar(100) DEFAULT NULL,\n  `notes` text,\n  `assignadaEscrita` tinyint(1) NOT NULL DEFAULT '0',\n  `jaVista` tinyint(1) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`),\n  KEY `alumne` (`alumne`),\n  KEY `tipus` (`tipus`),\n  KEY `profe` (`profe`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named amonestacions with 14 columns: id (integer primary key), tipus (integer), descripcio (varchar), alumne (integer), profe (integer), ennomde (integer), dataRegistre (timestamp), horaLectiva (integer), dataLectiva (date), situacio (varchar), notes (text), assignadaEscrita (boolean), jaVista (boolean).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "BIGINT", "UNSIGNED", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "CONSTRAINT", "FOREIGN KEY", "REFERENCES", "COMMENT"], "instruction": "Write a SQL query to create a table named amonestacions with 14 columns: id (integer primary key), tipus (integer), descripcio (varchar), alumne (integer), profe (integer), ennomde (integer), dataRegistre (timestamp), horaLectiva (integer), dataLectiva (date), situacio (varchar), notes (text), assignadaEscrita (boolean), jaVista (boolean).", "response": "-- Reasoning:\nWe need a new table named amonestacions. It should have an integer primary key so that each amonestacio has a unique identifier, and a name column to store the amonestacio\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE amonestacions (\n  id INT PRIMARY KEY,\n  tipus INT,\n  descripcio VARCHAR(255),\n  alumne INT,\n  profe INT,\n  ennomde INT,\n  dataRegistre TIMESTAMP,\n  horaLectiva INT,\n  dataLectiva DATE,\n  situacio VARCHAR(255),\n  notes TEXT,\n  assignadaEscrita BOOLEAN,\n  jaVista BOOLEAN\n);\n```\n\n-- Explanation:\nThis statement defines the amonestacions table with 14 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 tipus: integer\n  \u2022 descripcio: variable\u2010length string up to 255 characters\n  \u2022 alumne: integer\n  \u2022 profe: integer\n  \u2022 ennomde: integer\n  \u2022 dataRegistre: timestamp\n  \u2022 horaLectiva: integer\n  \u2022 dataLectiva: date\n  \u2022 situacio: variable\u2010length string up to 255 characters\n  \u2022 notes: text\n  \u2022 assignadaEscrita: boolean"}
{"seed": "/* Inserts 13 rows into the amonestacions table. */\nINSERT INTO `amonestacions` (`id`, `tipus`, `descripcio`, `alumne`, `profe`, `ennomde`, `dataRegistre`, `horaLectiva`, `dataLectiva`, `situacio`, `notes`, `assignadaEscrita`, `jaVista`) VALUES\n(1, 1, 'Blah1', 4, 3, NULL, '2013-06-26 10:06:58', 1, '2013-06-26', '', '', 0, 0),\n(2, 1, 'Blah1', 4, 3, NULL, '2013-06-26 10:07:55', 1, '0000-00-00', '', '', 0, 0),\n(3, 1, 'Blah1', 4, 3, NULL, '2013-06-26 10:08:05', 1, '0000-00-00', '', '', 0, 0),\n(4, 1, 'Blah1', 1, 3, NULL, '2013-06-26 10:31:38', 1, '2013-06-24', '..0', '', 0, 0),\n(5, 1, '1203', 1, 3, 2, '2013-06-26 11:01:33', 1, '2013-06-25', '', '', 0, 0),\n(6, 1, 'Descripci\u00f31', 4, 3, 1, '2013-06-27 16:48:00', 7, '2013-04-12', 'Una situaci\u00f3 aleat\u00f2ria', '', 0, 0),\n(7, 1, 'Aix\u00f2 \u00e9s un retard ', 1, 3, NULL, '2013-06-27 17:00:11', 1, '2013-06-11', '', '', 0, 0),\n(8, 1, 'La descripci\u00f3 d''avui', 1, 3, 2, '2013-06-28 07:55:56', 1, '2013-06-27', '', '', 0, 0),\n(9, 1, 'la segona descripci\u00f3 d''avui', 4, 3, NULL, '2013-06-28 08:04:59', 1, '2013-06-27', '', '', 0, 0),\n(10, 1, 'la segona descripci\u00f3 d''avui', 4, 3, 2, '2013-06-28 08:05:18', 1, '2013-06-27', '', '', 0, 0),\n(11, 1, 'la segona descripci\u00f3 d''avui', 4, 3, 1, '2013-06-28 08:05:50', 1, '2013-06-27', '', '', 0, 0),\n(12, 1, 'unaincidencia', 4, 3, 2, '2013-06-28 08:27:03', 1, '2013-06-27', '', '', 0, 0),\n(13, 1, 'ddd', 1, 3, NULL, '2013-06-28 08:28:04', 1, '2013-06-27', '', '', 0, 0)", "description": "Inserts 13 rows into the amonestacions table.", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "AUTO_INCREMENT", "INT", "VARCHAR", "DATE", "TIME", "DATETIME", "TIMESTAMP"], "instruction": "Write a SQL query to insert 13 rows into the amonestacions table.", "response": "-- Reasoning:\nWe need to insert 13 rows into the amonestacions table.\n\n-- Solution:\n```sql\nINSERT INTO amonestacions VALUES\n  (1, '', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2019-01-01', '2"}
{"seed": "/* Creates a table named classes with two columns: id (integer primary key) and descr (varchar). */\nCREATE TABLE IF NOT EXISTS `classes` (\n  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `descr` varchar(10) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named classes with two columns: id (integer primary key) and descr (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named classes with two columns: id (integer primary key) and descr (varchar).", "response": "-- Reasoning:\nWe need a new table named classes. It should have an integer primary key so that each class has a unique identifier, and a description column to store the class\u2019s description as text.\n\n-- Solution:\n```sql\nCREATE TABLE classes (\n  id INT PRIMARY KEY,\n  descr VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the classes table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 descr: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('classes');"}
{"seed": "/* Inserts 24 rows into the classes table. */\nINSERT INTO `classes` (`id`, `descr`) VALUES\n(1, '1A'),\n(2, '1B'),\n(3, '1C'),\n(4, '1D'),\n(5, '1E'),\n(6, '2A'),\n(7, '2B'),\n(8, '2C'),\n(9, '2D'),\n(10, '2E'),\n(11, '3A'),\n(12, '3B'),\n(13, '3C'),\n(14, '3D'),\n(15, '4A'),\n(16, '4B'),\n(17, '4C'),\n(18, '4D'),\n(19, '1BTXA'),\n(20, '1BTXB'),\n(21, '1BTXC'),\n(22, '2BTXA'),\n(23, '2BTXB'),\n(24, '2BTXC')", "description": "Inserts 24 rows into the classes table.", "concepts": ["INSERT INTO", "VALUES", "classes", "id", "descr"], "instruction": "Write a SQL query to insert 24 rows into the classes table.", "response": "-- Reasoning:\nWe need to insert 24 rows into the classes table.\n\n-- Solution:\n```sql\nINSERT INTO classes (class_id, name, teacher_id, start_date)\nVALUES\n  (1, 'English', 1, '2020-09-01'),\n  (2, 'English', 1, '2020-09-01'),\n  (3, 'English', 1, '2020-09-01'),\n  (4, 'English', 1, '2020-09-01'),\n  (5, 'English', 1, '2020-09-01'),\n  (6, 'English', 1, '2020-09-01'),\n  (7, 'English', 1, '2020-09-01'),\n  (8, 'English', 1, '2020-09-01'),\n  (9, 'English', 1, '2020-09-01'),\n  (10, 'English', 1, '2020-09-01'),\n  (11, 'English', 1, '2020-09-01'),\n  (12, 'English',"}
{"seed": "/* Creates a table named profes with the following columns: id (integer primary key), equip_directiu (boolean), tutor (integer), nom (varchar), username (varchar), email (varchar), password (varchar). */\nCREATE TABLE IF NOT EXISTS `profes` (\n  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `equip_directiu` tinyint(1) NOT NULL DEFAULT '0',\n  `tutor` mediumint(8) unsigned DEFAULT NULL COMMENT 'CONSTRAINT FOREIGN KEY (tutor) REFERENCES classes(id)',\n  `nom` varchar(100) NOT NULL,\n  `username` varchar(100) NOT NULL,\n  `email` varchar(100) DEFAULT NULL,\n  `password` varchar(100) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `tutor` (`tutor`),\n  KEY `username` (`username`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named profes with the following columns: id (integer primary key), equip_directiu (boolean), tutor (integer), nom (varchar), username (varchar), email (varchar), password (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "CONSTRAINT", "DEFAULT", "KEY", "KEY", "KEY", "KEY"], "instruction": "Write a SQL query to create a table named profes with the following columns: id (integer primary key), equip_directiu (boolean), tutor (integer), nom (varchar), username (varchar), email (varchar), password (varchar).", "response": "-- Reasoning:\nWe need a new table named profes. It should have an integer primary key so that each professor has a unique identifier, and a name column to store the professor\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE profes (\n  id INT PRIMARY KEY,\n  equip_directiu BOOLEAN,\n  tutor INT,\n  nom VARCHAR(255),\n  username VARCHAR(255),\n  email VARCHAR(255),\n  password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the profes table with six columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 equip_directiu: boolean,\n  \u2022 tutor: integer,\n  \u2022 nom: variable\u2010length string up to 255 characters\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('profes');"}
{"seed": "/* Inserts three rows into the users table. The first row has id 1, name John Smith, and active 1. The second row has id 2, name Ana-Maria Carretero, and active 0. The third row has id 3, name , and active 1. */\nINSERT INTO `profes` (`id`, `equip_directiu`, `tutor`, `nom`, `username`, `email`, `password`) VALUES\n(1, 0, NULL, 'John Smith', 'jsmith', 'jsmith@example.net', '1234'),\n(2, 1, NULL, 'Ana-Maria Carretero', 'acarretero', 'acarret5@xtec.cat', '*A4B6157319038724E3560894F7F932C8886EBFCF'),\n(3, 1, NULL, 'Alex Barcelo', 'barcelo', 'alex.barcelo@gmail.com', '$2a$13$AjH1CW0wNmIwfEJ6lL4xSOQ5/LIzjJ2m5eyX5advKg06hgcdUsSzy')", "description": "Inserts three rows into the users table. The first row has id 1, name John Smith, and active 1. The second row has id 2, name Ana-Maria Carretero, and active 0. The third row has id 3, name , and active 1.", "concepts": ["INSERT INTO", "VALUES", "id", "name", "username", "email", "password"], "instruction": "Write a SQL query to insert three rows into the users table. The first row has id 1, name John Smith, and active 1. The second row has id 2, name Ana-Maria Carretero, and active 0. The third row has id 3, name Alex Barcelo, and active 1.", "response": "-- Reasoning:\nWe need to insert three rows into the users table. The first row has id 1, name , and active 1. The second row has id 2, name , and active 0. The third row has id 3, name , and active 1.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, active)\nVALUES (1, '', 1),\n       (2, '', 0),\n       (3, '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the users table. Each row has a unique id, name, and active value.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM users;"}
{"seed": "/* Creates a table named relacions_amonestacions with three columns: id (integer primary key), petita (integer) and escrita (integer). The table has two foreign keys: petita references amonestacions(id) and escrita references amonestacions(id). */\nCREATE TABLE IF NOT EXISTS `relacions_amonestacions` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `petita` bigint(20) unsigned NOT NULL COMMENT 'CONSTRAINT FOREIGN KEY (petita) REFERENCES amonestacions(id)',\n  `escrita` mediumint(8) unsigned NOT NULL COMMENT 'CONSTRAINT FOREIGN KEY (escrita) REFERENCES amonestacions(id)',\n  PRIMARY KEY (`id`),\n  KEY `petita` (`petita`),\n  KEY `escrita` (`escrita`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named relacions_amonestacions with three columns: id (integer primary key), petita (integer) and escrita (integer). The table has two foreign keys: petita references amonestacions(id) and escrita references amonestacions(id).", "concepts": ["CREATE TABLE", "IF NOT EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "COMMENT", "CONSTRAINT", "KEY", "ENGINE", "DEFAULT CHARSET"], "instruction": "Write a SQL query to create a table named relacions_amonestacions with three columns: id (integer primary key), petita (integer) and escrita (integer). The table has two foreign keys: petita references amonestacions(id) and escrita references amonestacions(id).", "response": "-- Reasoning:\nWe need a new table named relations_amonestacions. It should have an integer primary key so that each relation has a unique identifier, and two foreign keys: petita references amonestacions(id) and escrita references amonestacions(id).\n\n-- Solution:\n```sql\nCREATE TABLE relations_amonestacions (\n  id INT PRIMARY KEY,\n  petita INT REFERENCES amonestacions(id),\n  escrita INT REFERENCES amonestacions(id)\n);\n```\n\n-- Explanation:\nThis statement defines the relations_amonestacions table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 petita: integer, references amonestacions(id)\n  \u2022 escrita: integer, references amonestacions(id)\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('relations_amonestacions');"}
{"seed": "/* Creates a table named tipus with five columns: id (integer primary key), descr (varchar), longDescr (text), and abrev (varchar). */\nCREATE TABLE IF NOT EXISTS `tipus` (\n  `id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,\n  `descr` varchar(20) NOT NULL,\n  `longDescr` text,\n  `abrev` varchar(5) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1", "description": "Creates a table named tipus with five columns: id (integer primary key), descr (varchar), longDescr (text), and abrev (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "ENGINE", "DEFAULT", "CHARSET", "tinyint", "varchar", "text", "varchar"], "instruction": "Write a SQL query to create a table named tipus with five columns: id (integer primary key), descr (varchar), longDescr (text), and abrev (varchar).", "response": "-- Reasoning:\nWe need a new table named tipus. It should have an integer primary key so that each tipus has a unique identifier, and a name column to store the tipus\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE tipus (\n  id INT PRIMARY KEY,\n  descr VARCHAR(255),\n  longDescr TEXT,\n  abrev VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the tipus table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 descr: variable\u2010length string up to 255 characters\n  \u2022 longDescr: variable\u2010length string up to 255 characters\n  \u2022 abrev: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tipus');"}
{"seed": "/* Inserts three rows into the tipus table. */\nINSERT INTO `tipus` (`id`, `descr`, `longDescr`, `abrev`) VALUES\n(1, 'retard', 'Arribada amb retard dels estudiants', 'R'),\n(2, 'amonestacioOral', 'Amonestaci\u00f3 de tipus oral a un estudiant per comportament o...', 'AO'),\n(3, 'expulsio', 'Expulsi\u00f3 a un estudiant per conducta blah blah', 'E')", "description": "Inserts three rows into the tipus table.", "concepts": ["INSERT INTO", "VALUES", "tipus", "id", "descr", "longDescr", "abrev"], "instruction": "Write a SQL query to insert three rows into the tipus table.", "response": "-- Reasoning:\nWe need to insert three rows into the tipus table.\n\n-- Solution:\n```sql\nINSERT INTO tipus (name, description)\nVALUES ('tipus1', 'description1'),\n       ('tipus2', 'description2'),\n       ('tipus3', 'description3');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the tipus table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM tipus;"}
{"seed": "/* Drops the table named course if it exists. */\nDROP TABLE IF EXISTS `course`", "description": "Drops the table named course if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named course if it exists.", "response": "-- Reasoning:\nWe need to drop the table named course if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS course;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('course');"}
{"seed": "/* Creates a table named course with seven columns: id (integer primary key), Course_Name (varchar), Course_Category (varchar), Course_URL (varchar), Course_Date (date), Course_Completion (varchar), Course_Cost (decimal), Course_Notes (varchar). */\nCREATE TABLE `course` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `Course_Name` varchar(30) NOT NULL,\n  `Course_Category` varchar(30) NOT NULL,\n  `Course_URL` varchar(50) NOT NULL,\n  `Course_Date` date NOT NULL,\n  `Course_Completion` varchar(2) NOT NULL,\n  `Course_Cost` decimal(10,2) NOT NULL,\n  `Course_Notes` varchar(50) NOT NULL\n  PRIMARY KEY (`id`)", "description": "Creates a table named course with seven columns: id (integer primary key), Course_Name (varchar), Course_Category (varchar), Course_URL (varchar), Course_Date (date), Course_Completion (varchar), Course_Cost (decimal), Course_Notes (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "DATE", "DECIMAL", "NOT NULL", "VARCHAR", "NOT NULL"], "instruction": "Write a SQL query to create a table named course with seven columns: id (integer primary key), Course_Name (varchar), Course_Category (varchar), Course_URL (varchar), Course_Date (date), Course_Completion (varchar), Course_Cost (decimal), Course_Notes (varchar).", "response": "-- Reasoning:\nWe need a new table named course. It should have an integer primary key so that each course has a unique identifier, and a name column to store the course\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE course (\n  id INT PRIMARY KEY,\n  Course_Name VARCHAR(255),\n  Course_Category VARCHAR(255),\n  Course_URL VARCHAR(255),\n  Course_Date DATE,\n  Course_Completion VARCHAR(255),\n  Course_Cost DECIMAL,\n  Course_Notes VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the course table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Course_Name: variable\u2010length string up to 255 characters\n  \u2022 Course_Category: variable\u2010length string up to 255 characters\n  \u2022 Course_URL: variable\u2010length string up to 255 characters\n  \u2022 Course_Date: date\n  \u2022 Course_Completion: variable\u2010length string up to 255 characters\n  \u2022 Course_Cost: decimal\n  \u2022 Course_Notes: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('course');"}
{"seed": "/* Inserts 5 rows into the course table. */\nINSERT INTO `course` (`id`, `Course_Name`, `Course_Category`, `Course_URL`, `Course_Date`, `Course_Completion`,  `Course_Cost`, `Course_Notes`)\nVALUES\n\t(1,NULL,'PHP',NULL,),\n\t(2,NULL,),\n\t(3,NULL,),\n\t(4,NULL,),\n    (5,NULL,)", "description": "Inserts 5 rows into the course table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 5 rows into the course table.", "response": "-- Reasoning:\nWe need to insert 5 rows into the course table.\n\n-- Solution:\n```sql\nINSERT INTO course (course_id, name)\nVALUES (1, 'Math'), (2, 'English'), (3, 'History'), (4, 'Geography'), (5, 'Science');\n```\n\n-- Explanation:\nThis INSERT statement inserts 5 rows into the course table.\n\n-- Tests:\n-- 1. Verify 5 rows are inserted\nSELECT * FROM course;"}
{"seed": "/* Creates a table named notes with 14 columns: id (integer primary key), Date (date), Notes (tinytext), Is_New_Todo (integer), Todo_Type_ID (integer), Todo_Desc_ID (integer), Todo_Due_Date (varchar), Contact (integer), Task_Status (integer), Task_Update (varchar), Sales_Rep (integer). */\nCREATE TABLE `notes` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `Date` date DEFAULT NULL,\n  `Notes` tinytext,\n  `Is_New_Todo` int(11) unsigned NOT NULL,\n  `Todo_Type_ID` int(11) unsigned NOT NULL,\n  `Todo_Desc_ID` int(11) unsigned NOT NULL,\n  `Todo_Due_Date` varchar(29) DEFAULT NULL,\n  `Contact` int(11) unsigned NOT NULL,\n  `Task_Status` int(11) unsigned NOT NULL,\n  `Task_Update` varchar(51) DEFAULT NULL,\n  `Sales_Rep` int(11) unsigned NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FK_EVENT_NAME` (`Todo_Type_ID`),\n  KEY `FK_EVENT_TYPE` (`Todo_Desc_ID`),\n  KEY `FK_CONTACT_ID` (`Contact`),\n  KEY `FK_SALES_ID` (`Sales_Rep`),\n  KEY `FK_TASK_STATUS` (`Task_Status`),\n  CONSTRAINT `FK_CONTACT_ID` FOREIGN KEY (`Contact`) REFERENCES `contact` (`id`),\n  CONSTRAINT `FK_EVENT_NAME` FOREIGN KEY (`Todo_Type_ID`) REFERENCES `todo_type` (`id`),\n  CONSTRAINT `FK_EVENT_TYPE` FOREIGN KEY (`Todo_Desc_ID`) REFERENCES `todo_desc` (`id`),\n  CONSTRAINT `FK_SALES_ID` FOREIGN KEY (`Sales_Rep`) REFERENCES `users` (`id`),\n  CONSTRAINT `FK_TASK_STATUS` FOREIGN KEY (`Task_Status`) REFERENCES `task_status` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named notes with 14 columns: id (integer primary key), Date (date), Notes (tinytext), Is_New_Todo (integer), Todo_Type_ID (integer), Todo_Desc_ID (integer), Todo_Due_Date (varchar), Contact (integer), Task_Status (integer), Task_Update (varchar), Sales_Rep (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "FOREIGN KEY", "REFERENCES", "CONSTRAINT", "KEY", "AUTO_INCREMENT", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named notes with 14 columns: id (integer primary key), Date (date), Notes (tinytext), Is_New_Todo (integer), Todo_Type_ID (integer), Todo_Desc_ID (integer), Todo_Due_Date (varchar), Contact (integer), Task_Status (integer), Task_Update (varchar), Sales_Rep (integer).", "response": "-- Reasoning:\nWe need a new table named notes. It should have an integer primary key so that each note has a unique identifier, and a date column to store the note\u2019s date as text.\n\n-- Solution:\n```sql\nCREATE TABLE notes (\n  id INT PRIMARY KEY,\n  Date DATE,\n  Notes TINYTEXT,\n  Is_New_Todo INT,\n  Todo_Type_ID INT,\n  Todo_Desc_ID INT,\n  Todo_Due_Date VARCHAR(255),\n  Contact INT,\n  Task_Status INT,\n  Task_Update VARCHAR(255),\n  Sales_Rep INT\n);\n```\n\n-- Explanation:\nThis statement defines the notes table with 14 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Date: date\n  \u2022 Notes: variable\u2010length string up to 255 characters\n  \u2022 Is_New_Todo: integer\n  \u2022 Todo_Type_ID: integer\n  \u2022 Todo_Desc_ID: integer\n  \u2022 Todo_Due_Date: variable\u2010length string up to 255 characters\n  \u2022 Contact: integer\n  \u2022 Task_Status: integer\n  \u2022 Task_Update: variable\u2010length string up to 255 characters\n  \u2022 Sales_Rep: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA"}
{"seed": "/* Inserts 8 rows into the notes table. */\nINSERT INTO `notes` (`id`, `Date`, `Notes`, `Is_New_Todo`, `Todo_Type_ID`, `Todo_Desc_ID`, `Todo_Due_Date`, `Contact`, `Task_Status`, `Task_Update`, `Sales_Rep`)\nVALUES\n\t(1,'2014-07-11','ddddd',1,1,1,'07/23/2014 6:00pm to 8:00pm',1,1,'',1),\n\t(2,'2015-10-10','Sample Note',0,1,1,NULL,2,1,NULL,2),\n\t(3,'2015-05-21','sx',1,1,2,'07/31/2014',3,1,'',1),\n\t(4,'2014-06-01','Want to be sure to communicate weekly.',1,2,3,'07/04/2014 10:00am to 10:30am',4,1,'Ongoing',1),\n\t(5,'2014-01-31','Was introduced at textile conference.zzz',1,1,1,'04/09/2014 3:45pm to 4:45pm',5,2,'Great demo. All they needed to seal the deal.<br>',1),\n\t(6,'2014-11-11','Great to have this customer on board!',0,1,4,NULL,6,1,NULL,1),\n\t(7,'2017-01-27','test',0,1,2,'',3,1,'',1),\n\t(8,'2017-01-11','test123',0,1,5,NULL,6,1,NULL,1)", "description": "Inserts 8 rows into the notes table.", "concepts": ["INSERT INTO", "VALUES", "`notes`", "`id`", "`Date`", "`Notes`", "`Is_New_Todo`", "`Todo_Type_ID"], "instruction": "Write a SQL query to insert 8 rows into the notes table.", "response": "-- Reasoning:\nWe need to insert 8 rows into the notes table.\n\n-- Solution:\n```sql\nINSERT INTO notes (note_id, note_text)\nVALUES (1, 'This is a note'),\n       (2, 'This is another note'),\n       (3, 'This is a third note'),\n       (4, 'This is a fourth note'),\n       (5, 'This is a fifth note'),\n       (6, 'This is a sixth note'),\n       (7, 'This is a seventh note'),\n       (8, 'This is an eighth note');\n```\n\n-- Explanation:\nThis INSERT statement inserts 8 rows into the notes table.\n\n-- Tests:\n-- 1. Verify 8 rows were inserted\nSELECT * FROM notes;"}
{"seed": "/* Drops the table named roles if it exists. */\nDROP TABLE IF EXISTS `roles`", "description": "Drops the table named roles if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named roles if it exists.", "response": "-- Reasoning:\nWe need to delete the table named roles if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS roles;\n```\n\n-- Explanation:\nThis statement deletes the table named roles if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('roles');"}
{"seed": "/* Creates a table named roles with two columns: id (integer primary key) and role (varchar). */\nCREATE TABLE `roles` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `role` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named roles with two columns: id (integer primary key) and role (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named roles with two columns: id (integer primary key) and role (varchar).", "response": "-- Reasoning:\nWe need a new table named roles. It should have an integer primary key so that each role has a unique identifier, and a role column to store the role\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE roles (\n  id INT PRIMARY KEY,\n  role VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the roles table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 role: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('roles');"}
{"seed": "/* Inserts three rows into the roles table. */\nINSERT INTO `roles` (`id`, `role`)\nVALUES\n\t(1,'Sales Rep'),\n\t(2,'Sales Manager'),\n\t(3,'Admin')", "description": "Inserts three rows into the roles table.", "concepts": ["INSERT INTO", "VALUES", "role"], "instruction": "Write a SQL query to insert three rows into the roles table.", "response": "-- Reasoning:\nWe need to insert three rows into the roles table.\n\n-- Solution:\n```sql\nINSERT INTO roles (name) VALUES ('admin'), ('user'), ('guest');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the roles table:\n  \u2022 admin\n  \u2022 user\n  \u2022 guest\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM roles;"}
{"seed": "/* Drops the table named task_status if it exists. */\nDROP TABLE IF EXISTS `task_status`", "description": "Drops the table named task_status if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named task_status if it exists.", "response": "-- Reasoning:\nWe need to delete the table named task_status if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS task_status;\n```\n\n-- Explanation:\nThis statement deletes the task_status table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('task_status');"}
{"seed": "/* Creates a table named task_status with two columns: id (integer primary key) and status (varchar). */\nCREATE TABLE `task_status` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `status` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named task_status with two columns: id (integer primary key) and status (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named task_status with two columns: id (integer primary key) and status (varchar).", "response": "-- Reasoning:\nWe need a new table named task_status. It should have an integer primary key so that each task has a unique identifier, and a status column to store the task\u2019s status as text.\n\n-- Solution:\n```sql\nCREATE TABLE task_status (\n  id INT PRIMARY KEY,\n  status VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the task_status table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 status: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('task_status');"}
{"seed": "/* Inserts two rows into the task_status table with the given values. */\nINSERT INTO `task_status` (`id`, `status`)\nVALUES\n\t(1,'pending'),\n\t(2,'completed')", "description": "Inserts two rows into the task_status table with the given values.", "concepts": ["INSERT INTO", "VALUES", "task_status", "id", "status"], "instruction": "Write a SQL query to insert two rows into the task_status table with the given values.", "response": "-- Reasoning:\nWe need to insert two rows into the task_status table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO task_status (task_id, status)\nVALUES (1, 'in progress'), (2, 'completed');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the task_status table with the given values.\n\n-- Tests:\n-- 1. Verify new rows appear\nSELECT * FROM task_status;"}
{"seed": "/* Drops the table named todo_desc if it exists. */\nDROP TABLE IF EXISTS `todo_desc`", "description": "Drops the table named todo_desc if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named todo_desc if it exists.", "response": "-- Reasoning:\nWe need to delete the table named todo_desc if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS todo_desc;\n```\n\n-- Explanation:\nThis statement deletes the table named todo_desc if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('todo_desc');"}
{"seed": "/* Creates a table named todo_desc with two columns: id (integer primary key) and description (varchar). */\nCREATE TABLE `todo_desc` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `description` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named todo_desc with two columns: id (integer primary key) and description (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named todo_desc with two columns: id (integer primary key) and description (varchar).", "response": "-- Reasoning:\nWe need a new table named todo_desc. It should have an integer primary key so that each description has a unique identifier, and a description column to store the description as text.\n\n-- Solution:\n```sql\nCREATE TABLE todo_desc (\n  id INT PRIMARY KEY,\n  description VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the todo_desc table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 description: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('todo_desc');"}
{"seed": "/* Inserts the given values into the todo_desc table. */\nINSERT INTO `todo_desc` (`id`, `description`)\nVALUES\n\t(1,'Follow Up Email'),\n\t(2,'Phone Call'),\n\t(3,'Lunch Meeting'),\n\t(4,'Tech Demo'),\n\t(5,'Meetup'),\n\t(6,'Conference'),\n\t(7,'Others')", "description": "Inserts the given values into the todo_desc table.", "concepts": ["INSERT INTO", "VALUES", "todo_desc", "id", "description"], "instruction": "Write a SQL query to insert the given values into the todo_desc table.", "response": "-- Reasoning:\nWe need to insert the given values into the todo_desc table.\n\n-- Solution:\n```sql\nINSERT INTO todo_desc (todo_id, description)\nVALUES (1, 'Buy groceries'), (2, 'Pay bills'), (3, 'Clean room');\n```\n\n-- Explanation:\nThis INSERT statement inserts the given values into the todo_desc table.\n\n-- Tests:\n-- 1. Verify the values are inserted\nSELECT * FROM todo_desc;"}
{"seed": "/* Drops the table named todo_type if it exists. */\nDROP TABLE IF EXISTS `todo_type`", "description": "Drops the table named todo_type if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named todo_type if it exists.", "response": "-- Reasoning:\nWe need to delete the table named todo_type if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS todo_type;\n```\n\n-- Explanation:\nThis statement deletes the table named todo_type if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('todo_type');"}
{"seed": "/* Creates a table named todo_type with two columns: id (integer primary key) and type (varchar). */\nCREATE TABLE `todo_type` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `type` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named todo_type with two columns: id (integer primary key) and type (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET", "NOT", "NULL", "DEFAULT", "VARCHAR", "INT", "PRIMARY", "KEY"], "instruction": "Write a SQL query to create a table named todo_type with two columns: id (integer primary key) and type (varchar).", "response": "-- Reasoning:\nWe need a new table named todo_type. It should have an integer primary key so that each todo type has a unique identifier, and a type column to store the type of todo as text.\n\n-- Solution:\n```sql\nCREATE TABLE todo_type (\n  id INT PRIMARY KEY,\n  type VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the todo_type table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 type: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('todo_type');"}
{"seed": "/* Inserts two rows into the todo_type table. */\nINSERT INTO `todo_type` (`id`, `type`)\nVALUES\n\t(1,'task'),\n\t(2,'meeting')", "description": "Inserts two rows into the todo_type table.", "concepts": ["INSERT INTO", "VALUES", "todo_type", "id", "type"], "instruction": "Write a SQL query to insert two rows into the todo_type table.", "response": "-- Reasoning:\nWe need to insert two rows into the todo_type table.\n\n-- Solution:\n```sql\nINSERT INTO todo_type (name) VALUES ('personal'), ('work');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the todo_type table:\n  \u2022 personal\n  \u2022 work\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM todo_type;"}
{"seed": "/* Drops the table named user_status if it exists. */\nDROP TABLE IF EXISTS `user_status`", "description": "Drops the table named user_status if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named user_status if it exists.", "response": "-- Reasoning:\nWe need to drop the table named user_status if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS user_status;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('user_status');"}
{"seed": "/* Creates a table named user_status with two columns: id (integer primary key) and status (varchar). */\nCREATE TABLE `user_status` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `status` varchar(64) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named user_status with two columns: id (integer primary key) and status (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named user_status with two columns: id (integer primary key) and status (varchar).", "response": "-- Reasoning:\nWe need a new table named user_status. It should have an integer primary key so that each status has a unique identifier, and a status column to store the user\u2019s status as text.\n\n-- Solution:\n```sql\nCREATE TABLE user_status (\n  id INT PRIMARY KEY,\n  status VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the user_status table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 status: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('user_status');"}
{"seed": "/* Inserts three rows into the user_status table. */\nINSERT INTO `user_status` (`id`, `status`)\nVALUES\n\t(1,'active'),\n\t(2,'inactive'),\n\t(3,'pending approval')", "description": "Inserts three rows into the user_status table.", "concepts": ["INSERT INTO", "VALUES", "user_status", "id", "status"], "instruction": "Write a SQL query to insert three rows into the user_status table.", "response": "-- Reasoning:\nWe need to insert three rows into the user_status table. Each row should have a user_id and status.\n\n-- Solution:\n```sql\nINSERT INTO user_status (user_id, status)\nVALUES (1, 'active'), (2, 'inactive'), (3, 'banned');\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the user_status table:\n  \u2022 user_id: 1, status: active\n  \u2022 user_id: 2, status: inactive\n  \u2022 user_id: 3, status: banned\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM user_status;"}
{"seed": "/* Drops the table named users if it exists. */\nDROP TABLE IF EXISTS `users`", "description": "Drops the table named users if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named users if it exists.", "response": "-- Reasoning:\nWe need to delete the table named users if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS users;\n```\n\n-- Explanation:\nThis statement deletes the table named users if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('users');"}
{"seed": "/* Creates a table named users with 10 columns: id (integer primary key), Name_Title (varchar), Name_First (varchar), Name_Middle (varchar), Name_Last (varchar), Email (varchar), Password (varchar), User_Roles (integer), User_Status (integer). */\nCREATE TABLE `users` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `Name_Title` varchar(30) DEFAULT NULL,\n  `Name_First` varchar(6) NOT NULL,\n  `Name_Middle` varchar(30) DEFAULT NULL,\n  `Name_Last` varchar(8) NOT NULL,\n  `Email` varchar(16) NOT NULL,\n  `Password` varchar(9) NOT NULL,\n  `User_Roles` int(11) unsigned NOT NULL,\n  `User_Status` int(11) unsigned NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FK_USER_STATUS` (`User_Status`),\n  KEY `FK_ROLE` (`User_Roles`),\n  CONSTRAINT `FK_ROLE` FOREIGN KEY (`User_Roles`) REFERENCES `roles` (`id`),\n  CONSTRAINT `FK_USER_STATUS` FOREIGN KEY (`User_Status`) REFERENCES `user_status` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8", "description": "Creates a table named users with 10 columns: id (integer primary key), Name_Title (varchar), Name_First (varchar), Name_Middle (varchar), Name_Last (varchar), Email (varchar), Password (varchar), User_Roles (integer), User_Status (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "CONSTRAINT", "KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named users with 10 columns: id (integer primary key), Name_Title (varchar), Name_First (varchar), Name_Middle (varchar), Name_Last (varchar), Email (varchar), Password (varchar), User_Roles (integer), User_Status (integer).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  Name_Title VARCHAR(255),\n  Name_First VARCHAR(255),\n  Name_Middle VARCHAR(255),\n  Name_Last VARCHAR(255),\n  Email VARCHAR(255),\n  Password VARCHAR(255),\n  User_Roles INTEGER,\n  User_Status INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the users table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Name_Title: variable\u2010length string up to 255 characters\n  \u2022 Name_First: variable\u2010length string up to 255 characters\n  \u2022 Name_Middle: variable\u2010length string up to 255 characters\n  \u2022 Name_Last: variable\u2010length string up to 255 characters\n  \u2022 Email: variable\u2010length string up to 255 characters\n  \u2022 Password: variable\u2010length string up to 255 characters\n  \u2022 User_Roles: integer\n  \u2022 User_Status: integer\n\n-- Tests:\n-- 1. Verify table exists"}
{"seed": "/* Inserts five rows into the users table. */\nINSERT INTO `users` (`id`, `Name_Title`, `Name_First`, `Name_Middle`, `Name_Last`, `Email`, `Password`, `User_Roles`, `User_Status`)\nVALUES\n\t(1,NULL,'Johnny',NULL,'Rep','rep@test.com','123456',1,1),\n\t(2,NULL,'Mary',NULL,'Rep','rep2@test.com','123456',1,1),\n\t(3,NULL,'Suzy',NULL,'Manager','manager@test.com','123456',2,1),\n\t(4,NULL,'Sales',NULL,'Manager1','sm@sm.com','123456',2,1),\n\t(5,NULL,'Rich',NULL,'C','test@test.com','123456',1,1)", "description": "Inserts five rows into the users table.", "concepts": ["INSERT INTO", "VALUES", "User_Roles", "User_Status"], "instruction": "Write a SQL query to insert five rows into the users table.", "response": "-- Reasoning:\nWe need to insert five rows into the users table.\n\n-- Solution:\n```sql\nINSERT INTO users (name, email, country)\nVALUES\n  ('John', '', 'USA'),\n  ('Jane', '', 'USA'),\n  ('Mike', '', 'USA'),\n  ('Jenny', '', 'USA'),\n  ('Jill', '', 'USA');\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the users table.\n\n-- Tests:\n-- 1. Verify five rows were inserted\nSELECT * FROM users;"}
{"seed": "/* Creates a table named users with five columns: id (integer primary key generated by default as identity), user_name (varchar), password (varchar), farm_name (text), street_address (text), city (text), state (text), and zip (text). */\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    user_name VARCHAR (255) UNIQUE NOT NULL,\n    password VARCHAR (225) NOT NULL,\n    farm_name TEXT NOT NULL,\n    street_address TEXT NOT NULL,\n    city TEXT NOT NULL,\n    state TEXT NOT NULL,\n    zip TEXT NOT NULL\n)", "description": "Creates a table named users with five columns: id (integer primary key generated by default as identity), user_name (varchar), password (varchar), farm_name (text), street_address (text), city (text), state (text), and zip (text).", "concepts": ["CREATE TABLE", "INTEGER", "PRIMARY KEY", "GENERATED BY DEFAULT AS IDENTITY", "VARCHAR", "UNIQUE", "NOT NULL", "TEXT", "NOT NULL", "TEXT", "NOT NULL"], "instruction": "Write a SQL query to create a table named users with five columns: id (integer primary key generated by default as identity), user_name (varchar), password (varchar), farm_name (text), street_address (text), city (text), state (text), and zip (text).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  user_name VARCHAR(255),\n  password VARCHAR(255),\n  farm_name TEXT,\n  street_address TEXT,\n  city TEXT,\n  state TEXT,\n  zip TEXT\n);\n```\n\n-- Explanation:\nThis statement defines the users table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 user_name: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n  \u2022 farm_name: variable\u2010length string up to 255 characters\n  \u2022 street_address: variable\u2010length string up to 255 characters\n  \u2022 city: variable\u2010length string up to 255 characters\n  \u2022 state: variable\u2010length string up to 255 characters\n  \u2022 zip: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Creates a table named items with five columns: id (integer primary key), users_id (integer foreign key referencing the id column of the users table), name (text), description (text), itemCount (text), itemPrice (text), img (text), and date_created (timestamp). The users_id column references the id column of the users table and is set to cascade on delete. */\nCREATE TABLE items (\n    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    users_id INTEGER REFERENCES users(id) ON DELETE CASCADE NOT NULL, \n    name TEXT NOT NULL,\n    description TEXT NOT NULL,\n    itemCount TEXT NOT NULL,\n    itemPrice TEXT NOT NULL,\n    img TEXT NOT NULL,\n    date_created TIMESTAMP DEFAULT now () NOT NULL\n)", "description": "Creates a table named items with five columns: id (integer primary key), users_id (integer foreign key referencing the id column of the users table), name (text), description (text), itemCount (text), itemPrice (text), img (text), and date_created (timestamp). The users_id column references the id column of the users table and is set to cascade on delete.", "concepts": ["CREATE TABLE", "INTEGER", "PRIMARY KEY", "GENERATED BY DEFAULT AS IDENTITY", "REFERENCES", "ON DELETE CASCADE", "NOT NULL", "TEXT", "TIMESTAMP", "DEFAULT", "now"], "instruction": "Write a SQL query to create a table named items with five columns: id (integer primary key), users_id (integer foreign key referencing the id column of the users table), name (text), description (text), itemCount (text), itemPrice (text), img (text), and date_created (timestamp). The users_id column references the id column of the users table and is set to cascade on delete.", "response": "-- Reasoning:\nWe need a new table named items. It should have an integer primary key so that each item has a unique identifier, and a name column to store the item\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE items (\n  id INTEGER PRIMARY KEY,\n  users_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n  name TEXT,\n  description TEXT,\n  itemCount TEXT,\n  itemPrice TEXT,\n  img TEXT,\n  date_created TIMESTAMP\n);\n```\n\n-- Explanation:\nThis statement defines the items table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 users_id: integer, foreign key referencing the id column of the users table\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length string up to 255 characters\n  \u2022 itemCount: variable\u2010length string up to 255 characters\n  \u2022 itemPrice: variable\u2010length string up to 255 characters\n  \u2022 img: variable\u2010length string up to 255 characters\n  \u2022 date_created: timestamp\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('items');"}
{"seed": "/* Inserts two rows into the users table. The first row has the user_name demo@gmail.com and password . The second row has the user_name user@gmail.com and password . */\nINSERT INTO public.users\n    (user_name,\"password\")\nVALUES\n    ('demo@gmail.com', '$2a$12$9j6A6wxbKIP8IQWwHExsue5kimTsdwzOSTJa/kusQN69u1lm0J856')\n,\n    ('user@gmail.com', '$2a$12$KI8Mth8npH21ez6SCBy.pOli8jVI0IF5Z9dWj/JQWUA2ATi8IoQam')", "description": "Inserts two rows into the users table. The first row has the user_name demo@gmail.com and password . The second row has the user_name user@gmail.com and password .", "concepts": ["INSERT INTO", "VALUES", "user_name", "password"], "instruction": "Write a SQL query to insert two rows into the users table. The first row has the user_name demo@gmail.com and password . The second row has the user_name user@gmail.com and password .", "response": "-- Reasoning:\nWe need to insert two rows into the users table. The first row should have the user_name demo@gmail.com and password . The second row should have the user_name user@gmail.com and password .\n\n-- Solution:\n```sql\nINSERT INTO users (user_name, password)\nVALUES ('demo@gmail.com', '.'),\n       ('user@gmail.com', '.');\n```\n\n-- Explanation:\nThis INSERT statement inserts two rows into the users table:\n  \u2022 demo@gmail.com with password .\n  \u2022 user@gmail.com with password .\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM users;"}
{"seed": "/* Drops the database named internship. */\ndrop database internship", "description": "Drops the database named internship.", "concepts": ["drop database"], "instruction": "Write a SQL query to drop the database named internship.", "response": "-- Reasoning:\nWe need to delete the database named internship.\n\n-- Solution:\n```sql\nDROP DATABASE internship;\n```\n\n-- Explanation:\nThis statement deletes the database named internship.\n\n-- Tests:\n-- 1. Verify database is deleted\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a database named internship. */\ncreate database internship", "description": "Creates a database named internship.", "concepts": ["CREATE DATABASE"], "instruction": "Write a SQL query to create a database named internship.", "response": "-- Reasoning:\nWe need to create a new database named internship.\n\n-- Solution:\n```sql\nCREATE DATABASE internship;\n```\n\n-- Explanation:\nThis statement creates a new database named internship.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Creates a table named carreras with two columns: cod_carreras (integer primary key) and descripcion (varchar). */\ncreate table carreras (\n\t\tcod_carreras int primary key,\n\t\tdescripcion varchar (50)\n\t\t)", "description": "Creates a table named carreras with two columns: cod_carreras (integer primary key) and descripcion (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named carreras with two columns: cod_carreras (integer primary key) and descripcion (varchar).", "response": "-- Reasoning:\nWe need a new table named carreras. It should have an integer primary key so that each carrera has a unique identifier, and a description column to store the carrera\u2019s description as text.\n\n-- Solution:\n```sql\nCREATE TABLE carreras (\n  cod_carreras INT PRIMARY KEY,\n  descripcion VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the carreras table with two columns:\n  \u2022 cod_carreras: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 descripcion: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('carreras');"}
{"seed": "/* Creates a table named requisitos with two columns: cod_requisitos (integer primary key) and tipo_requisitos (varchar). */\ncreate table requisitos (\n\t\tcod_requisitos int primary key,\n\t\ttipo_requisitos varchar (50)\n\t\t)", "description": "Creates a table named requisitos with two columns: cod_requisitos (integer primary key) and tipo_requisitos (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named requisitos with two columns: cod_requisitos (integer primary key) and tipo_requisitos (varchar).", "response": "-- Reasoning:\nWe need a new table named requisitos. It should have an integer primary key so that each requisito has a unique identifier, and a tipo_requisitos column to store the requisito\u2019s type as text.\n\n-- Solution:\n```sql\nCREATE TABLE requisitos (\n  cod_requisitos INT PRIMARY KEY,\n  tipo_requisitos VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the requisitos table with two columns:\n  \u2022 cod_requisitos: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 tipo_requisitos: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('requisitos');"}
{"seed": "/* Creates a table named pasantia with three columns: cod_pasantia (integer primary key), inicio_pasantia (varchar) and nro_pasantia (integer). */\ncreate table pasantia(\n\t\tcod_pasantia int primary key,\n\t\tinicio_pasantia varchar (50),\n\t\tnro_pasantia int \n\t\t)", "description": "Creates a table named pasantia with three columns: cod_pasantia (integer primary key), inicio_pasantia (varchar) and nro_pasantia (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named pasantia with three columns: cod_pasantia (integer primary key), inicio_pasantia (varchar) and nro_pasantia (integer).", "response": "-- Reasoning:\nWe need a new table named pasantia. It should have an integer primary key so that each pasantia has a unique identifier, and two other columns:\n  \u2022 inicio_pasantia: variable\u2010length string up to 255 characters\n  \u2022 nro_pasantia: integer\n\n-- Solution:\n```sql\nCREATE TABLE pasantia (\n  cod_pasantia INT PRIMARY KEY,\n  inicio_pasantia VARCHAR(255),\n  nro_pasantia INT\n);\n```\n\n-- Explanation:\nThis statement defines the pasantia table with three columns:\n  \u2022 cod_pasantia: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 inicio_pasantia: variable\u2010length string up to 255 characters\n  \u2022 nro_pasantia: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('pasantia');"}
{"seed": "/* Creates a table named estudiante with five columns: id_estudiante (integer primary key), celular (integer), carrera (varchar), cod_carreras (integer), cod_requisitos (integer), cod_pasantia (integer). */\ncreate table estudiante(\n\t\tid_estudiante int primary key AUTO_INCREMENT,\n\t\tcelular int ,\n\t\tcarrera varchar(50),\n\t\tcod_carreras int ,\n\t\tcod_requisitos int ,\n\t\tcod_pasantia int\n\t\t)", "description": "Creates a table named estudiante with five columns: id_estudiante (integer primary key), celular (integer), carrera (varchar), cod_carreras (integer), cod_requisitos (integer), cod_pasantia (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "INT", "VARCHAR", "INT", "INT", "INT"], "instruction": "Write a SQL query to create a table named estudiante with five columns: id_estudiante (integer primary key), celular (integer), carrera (varchar), cod_carreras (integer), cod_requisitos (integer), cod_pasantia (integer).", "response": "-- Reasoning:\nWe need a new table named estudiante. It should have an integer primary key so that each estudiante has a unique identifier, and a name column to store the estudiante\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE estudiante (\n  id_estudiante INT PRIMARY KEY,\n  celular INT,\n  carrera VARCHAR(255),\n  cod_carreras INT,\n  cod_requisitos INT,\n  cod_pasantia INT\n);\n```\n\n-- Explanation:\nThis statement defines the estudiante table with two columns:\n  \u2022 id_estudiante: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('estudiante');"}
{"seed": "/* Creates a table named control with four columns: cod_control (integer primary key), fecha_control (date), hora (time), and descripcion (varchar). */\ncreate table control (\n\t\tcod_control int,\n\t\tfecha_control date,\n\t\thora time,\n\t\tdescripcion varchar(50),\n\t\tprimary key (cod_control)\n\t\t)", "description": "Creates a table named control with four columns: cod_control (integer primary key), fecha_control (date), hora (time), and descripcion (varchar).", "concepts": ["CREATE TABLE", "INT", "DATE", "TIME", "VARCHAR", "PRIMARY KEY"], "instruction": "Write a SQL query to create a table named control with four columns: cod_control (integer primary key), fecha_control (date), hora (time), and descripcion (varchar).", "response": "-- Reasoning:\nWe need a new table named control. It should have an integer primary key so that each control has a unique identifier, a date column to store the control\u2019s date, a time column to store the control\u2019s time, and a description column to store the control\u2019s description as text.\n\n-- Solution:\n```sql\nCREATE TABLE control (\n  cod_control INT PRIMARY KEY,\n  fecha_control DATE,\n  hora TIME,\n  descripcion VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the control table with four columns:\n  \u2022 cod_control: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 fecha_control: date\n  \u2022 hora: time\n  \u2022 descripcion: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('control');"}
{"seed": "/* Creates a table named tipo_control with two columns: cod_tip_control (integer primary key) and detalles (varchar). */\ncreate table tipo_control(\n\t\tcod_tip_control int,\n\t\tdetalles varchar(50),\n\t\tprimary key (cod_tip_control)\n\t\t)", "description": "Creates a table named tipo_control with two columns: cod_tip_control (integer primary key) and detalles (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named tipo_control with two columns: cod_tip_control (integer primary key) and detalles (varchar).", "response": "-- Reasoning:\nWe need a new table named tipo_control. It should have an integer primary key so that each tipo_control has a unique identifier, and a detalles column to store the tipo_control\u2019s details as text.\n\n-- Solution:\n```sql\nCREATE TABLE tipo_control (\n  cod_tip_control INT PRIMARY KEY,\n  detalles VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the tipo_control table with two columns:\n  \u2022 cod_tip_control: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 detalles: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tipo_control');"}
{"seed": "/* Creates a table named modalidad_carrera with two columns: cod_mod_carrera (integer primary key) and turno (varchar). */\ncreate table modalidad_carrera(\n\t\tcod_mod_carrera int,\n\t\tturno varchar (50),\n\t\tprimary key (cod_mod_carrera)\n\t\t)", "description": "Creates a table named modalidad_carrera with two columns: cod_mod_carrera (integer primary key) and turno (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named modalidad_carrera with two columns: cod_mod_carrera (integer primary key) and turno (varchar).", "response": "-- Reasoning:\nWe need a new table named modalidad_carrera. It should have an integer primary key so that each modalidad_carrera has a unique identifier, and a turno column to store the modalidad_carrera\u2019s turno as text.\n\n-- Solution:\n```sql\nCREATE TABLE modalidad_carrera (\n  cod_mod_carrera INT PRIMARY KEY,\n  turno VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the modalidad_carrera table with two columns:\n  \u2022 cod_mod_carrera: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 turno: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('modalidad_carrera');"}
{"seed": "/* Creates a table named tutor with five columns: id_tutor (integer primary key), cargo (varchar), cod_pasantia (integer), cod_control (integer), cod_tip_control (integer), cod_mod_carrera (integer). */\ncreate table tutor(\n\t\tid_tutor int primary key AUTO_INCREMENT,\n\t\tcargo varchar (50),\n\t\tcod_pasantia int ,\n\t\tcod_control int,\n\t\tcod_tip_control int,\n\t\tcod_mod_carrera int\n\t\t)", "description": "Creates a table named tutor with five columns: id_tutor (integer primary key), cargo (varchar), cod_pasantia (integer), cod_control (integer), cod_tip_control (integer), cod_mod_carrera (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named tutor with five columns: id_tutor (integer primary key), cargo (varchar), cod_pasantia (integer), cod_control (integer), cod_tip_control (integer), cod_mod_carrera (integer).", "response": "-- Reasoning:\nWe need a new table named tutor. It should have an integer primary key so that each tutor has a unique identifier, and a cargo column to store the tutor\u2019s job as text.\n\n-- Solution:\n```sql\nCREATE TABLE tutor (\n  id_tutor INT PRIMARY KEY,\n  cargo VARCHAR(255),\n  cod_pasantia INT,\n  cod_control INT,\n  cod_tip_control INT,\n  cod_mod_carrera INT\n);\n```\n\n-- Explanation:\nThis statement defines the tutor table with six columns:\n  \u2022 id_tutor: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cargo: variable\u2010length string up to 255 characters\n  \u2022 cod_pasantia: integer\n  \u2022 cod_control: integer\n  \u2022 cod_tip_control: integer\n  \u2022 cod_mod_carrera: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tutor');"}
{"seed": "/* Creates a table named administrativo with three columns: id_administrativo (integer primary key), tipo_cargo (varchar) and id_tutor (integer). */\ncreate table administrativo(\n\t\tid_administrativo int primary key AUTO_INCREMENT,\n\t\ttipo_cargo varchar (50),\n\t\tid_tutor int\n\t\t)", "description": "Creates a table named administrativo with three columns: id_administrativo (integer primary key), tipo_cargo (varchar) and id_tutor (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "INT", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named administrativo with three columns: id_administrativo (integer primary key), tipo_cargo (varchar) and id_tutor (integer).", "response": "-- Reasoning:\nWe need a new table named administrativo. It should have an integer primary key so that each administrativo has a unique identifier, and a tipo_cargo column to store the administrativo\u2019s cargo as text.\n\n-- Solution:\n```sql\nCREATE TABLE administrativo (\n  id_administrativo INT PRIMARY KEY,\n  tipo_cargo VARCHAR(255),\n  id_tutor INT\n);\n```\n\n-- Explanation:\nThis statement defines the administrativo table with three columns:\n  \u2022 id_administrativo: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 tipo_cargo: variable\u2010length string up to 255 characters\n  \u2022 id_tutor: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('administrativo');"}
{"seed": "/* Creates a table named persona with five columns: cod_persona (integer primary key), ci (integer), nombre (varchar), apellido_pat (varchar), apellido_mat (varchar), direccion (varchar), id_administrativo (integer), id_tutor (integer), id_estudiante (integer). */\ncreate table persona(\n\t \tcod_persona int primary key,\n\t\tci int,\n\t\tnombre varchar (50),\n\t\tapellido_pat varchar (50),\n\t\tapellido_mat varchar (50),\n\t\tdireccion varchar (50),\n\t\tid_administrativo int,\n\t\tid_tutor int,\n\t\tid_estudiante int \n\t\t)", "description": "Creates a table named persona with five columns: cod_persona (integer primary key), ci (integer), nombre (varchar), apellido_pat (varchar), apellido_mat (varchar), direccion (varchar), id_administrativo (integer), id_tutor (integer), id_estudiante (integer).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "PRIMARY KEY", "FOREIGN KEY", "REFERENCES", "REFERENCES", "REFERENCES", "REFERENCES", "REFERENCES", "REFERENCES", "REFERENCES", "REFERENCES", "REFERENCES"], "instruction": "Write a SQL query to create a table named persona with five columns: cod_persona (integer primary key), ci (integer), nombre (varchar), apellido_pat (varchar), apellido_mat (varchar), direccion (varchar), id_administrativo (integer), id_tutor (integer), id_estudiante (integer).", "response": "-- Reasoning:\nWe need a new table named persona. It should have an integer primary key so that each person has a unique identifier, and four other columns to store the person\u2019s information.\n\n-- Solution:\n```sql\nCREATE TABLE persona (\n  cod_persona INT PRIMARY KEY,\n  ci INT,\n  nombre VARCHAR(255),\n  apellido_pat VARCHAR(255),\n  apellido_mat VARCHAR(255),\n  direccion VARCHAR(255),\n  id_administrativo INT,\n  id_tutor INT,\n  id_estudiante INT\n);\n```\n\n-- Explanation:\nThis statement defines the persona table with five columns:\n  \u2022 cod_persona: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 ci: integer\n  \u2022 nombre: variable\u2010length string up to 255 characters\n  \u2022 apellido_pat: variable\u2010length string up to 255 characters\n  \u2022 apellido_mat: variable\u2010length string up to 255 characters\n  \u2022 direccion: variable\u2010length string up to 255 characters\n  \u2022 id_administrativo: integer\n  \u2022 id_tutor: integer\n  \u2022 id_estudiante: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('persona');"}
{"seed": "/* Creates a table named documentos with five columns: cod_documentos (integer primary key), fecha_entrega (integer), hora (time), descripcion (varchar) and id_administrativo (integer). */\ncreate table documentos(\n\t\tcod_documentos int,\n\t\tfecha_entrega int ,\n\t\thora time,\n\t\tdescripcion varchar (50),\n\t\tid_administrativo int,\n\t\tprimary key (cod_documentos)\n\t\t)", "description": "Creates a table named documentos with five columns: cod_documentos (integer primary key), fecha_entrega (integer), hora (time), descripcion (varchar) and id_administrativo (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named documentos with five columns: cod_documentos (integer primary key), fecha_entrega (integer), hora (time), descripcion (varchar) and id_administrativo (integer).", "response": "-- Reasoning:\nWe need a new table named documentos. It should have an integer primary key so that each document has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE documentos (\n  cod_documentos INT PRIMARY KEY,\n  fecha_entrega INT,\n  hora TIME,\n  descripcion VARCHAR(255),\n  id_administrativo INT\n);\n```\n\n-- Explanation:\nThis statement defines the documentos table with five columns:\n  \u2022 cod_documentos: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 fecha_entrega: integer\n  \u2022 hora: time\n  \u2022 descripcion: variable\u2010length string up to 255 characters\n  \u2022 id_administrativo: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('documentos');"}
{"seed": "/* Creates a table named tipo_documentos with three columns: cod_tip_documento (integer primary key), descripcion (varchar) and cod_documentos (integer). */\ncreate table tipo_documentos(\n\t\tcod_tip_documento int,\n\t\tdescripcion varchar (50),\n\t\tcod_documentos int,\n\t\tprimary key (cod_tip_documento)\n\t\t)", "description": "Creates a table named tipo_documentos with three columns: cod_tip_documento (integer primary key), descripcion (varchar) and cod_documentos (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named tipo_documentos with three columns: cod_tip_documento (integer primary key), descripcion (varchar) and cod_documentos (integer).", "response": "-- Reasoning:\nWe need a new table named tipo_documentos. It should have an integer primary key so that each tipo_documento has a unique identifier, and a descripcion column to store the tipo_documento\u2019s description as text.\n\n-- Solution:\n```sql\nCREATE TABLE tipo_documentos (\n  cod_tip_documento INT PRIMARY KEY,\n  descripcion VARCHAR(255),\n  cod_documentos INT\n);\n```\n\n-- Explanation:\nThis statement defines the tipo_documentos table with three columns:\n  \u2022 cod_tip_documento: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 descripcion: variable\u2010length string up to 255 characters\n  \u2022 cod_documentos: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tipo_documentos');"}
{"seed": "/* Creates a table named formato_ficha_evaluacion with four columns: cod_form (integer primary key), nota_fin (integer), detalles (varchar) and cod_documentos (integer). */\ncreate table formato_ficha_evaluacion(\n\t\tcod_form int ,\n\t\tnota_fin int,\n\t\tdetalles varchar(50),\n\t\tcod_documentos int,\n\t\tprimary key (cod_form)\n\t\t)", "description": "Creates a table named formato_ficha_evaluacion with four columns: cod_form (integer primary key), nota_fin (integer), detalles (varchar) and cod_documentos (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named formato_ficha_evaluacion with four columns: cod_form (integer primary key), nota_fin (integer), detalles (varchar) and cod_documentos (integer).", "response": "-- Reasoning:\nWe need a new table named formato_ficha_evaluacion. It should have an integer primary key so that each format has a unique identifier, and a nota_fin column to store the format\u2019s final grade as integer.\n\n-- Solution:\n```sql\nCREATE TABLE formato_ficha_evaluacion (\n  cod_form INT PRIMARY KEY,\n  nota_fin INT,\n  detalles VARCHAR(255),\n  cod_documentos INT\n);\n```\n\n-- Explanation:\nThis statement defines the formato_ficha_evaluacion table with four columns:\n  \u2022 cod_form: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nota_fin: integer\n  \u2022 detalles: variable\u2010length string up to 255 characters\n  \u2022 cod_documentos: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('formato_ficha_evaluacion');"}
{"seed": "/* Creates a table named evaluacion_docente with five columns: cod_eva_doc (integer primary key), nota (integer), carrera (varchar), detalles (varchar), cod_form (integer). */\ncreate table evaluacion_docente(\n\t\tcod_eva_doc int,\n\t\tnota int ,\n\t\tcarrera varchar (50),\n\t\tdetalles varchar(50),\n\t\tcod_form int ,\n\t\tprimary key (cod_eva_doc)\n\t\t)", "description": "Creates a table named evaluacion_docente with five columns: cod_eva_doc (integer primary key), nota (integer), carrera (varchar), detalles (varchar), cod_form (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to create a table named evaluacion_docente with five columns: cod_eva_doc (integer primary key), nota (integer), carrera (varchar), detalles (varchar), cod_form (integer).", "response": "-- Reasoning:\nWe need a new table named evaluacion_docente. It should have an integer primary key so that each evaluation has a unique identifier, and a name column to store the evaluation\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE evaluacion_docente (\n  cod_eva_doc INT PRIMARY KEY,\n  nota INT,\n  carrera VARCHAR(255),\n  detalles VARCHAR(255),\n  cod_form INT\n);\n```\n\n-- Explanation:\nThis statement defines the evaluacion_docente table with five columns:\n  \u2022 cod_eva_doc: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nota: integer\n  \u2022 carrera: variable\u2010length string up to 255 characters\n  \u2022 detalles: variable\u2010length string up to 255 characters\n  \u2022 cod_form: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('evaluacion_docente');"}
{"seed": "/* Creates a table named evaluacion_supervisor with three columns: cod_eva_sup (integer primary key), nota (integer) and cod_form (integer). */\ncreate table evaluacion_supervisor(\n\t\tcod_eva_sup int,\n\t\tnota int,\n\t\tcod_form int,\n\t\tprimary key (cod_eva_sup)\n\t\t)", "description": "Creates a table named evaluacion_supervisor with three columns: cod_eva_sup (integer primary key), nota (integer) and cod_form (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "INT", "INT"], "instruction": "Write a SQL query to create a table named evaluacion_supervisor with three columns: cod_eva_sup (integer primary key), nota (integer) and cod_form (integer).", "response": "-- Reasoning:\nWe need a new table named evaluacion_supervisor. It should have an integer primary key so that each evaluation has a unique identifier, and two other columns: nota and cod_form.\n\n-- Solution:\n```sql\nCREATE TABLE evaluacion_supervisor (\n  cod_eva_sup INT PRIMARY KEY,\n  nota INT,\n  cod_form INT\n);\n```\n\n-- Explanation:\nThis statement defines the evaluacion_supervisor table with three columns:\n  \u2022 cod_eva_sup: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 nota: integer\n  \u2022 cod_form: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('evaluacion_supervisor');"}
{"seed": "/* Creates a schema named test5. */\ncreate schema test5", "description": "Creates a schema named test5.", "concepts": ["CREATE SCHEMA"], "instruction": "Write a SQL query to create a schema named test5.", "response": "-- Reasoning:\nWe need to create a new schema named test5.\n\n-- Solution:\n```sql\nCREATE SCHEMA test5;\n```\n\n-- Explanation:\nThis statement creates a new schema named test5.\n\n-- Tests:\n-- 1. Verify schema exists\nSELECT name FROM sqlite_master WHERE type='schema';"}
{"seed": "/* Selects the names of all genres that are not associated with the show Dexter. */\nSELECT tv_genres.name FROM tv_genres WHERE tv_genres.id NOT IN (\n\tSELECT tv_genres.id FROM tv_genres\n\tINNER JOIN tv_show_genres ON tv_genres.id = tv_show_genres.genre_id\n\tINNER JOIN tv_shows ON tv_show_genres.show_id = tv_shows.id\n\tWHERE tv_shows.title = 'Dexter'\n)\nORDER BY tv_genres.name", "description": "Selects the names of all genres that are not associated with the show Dexter.", "concepts": ["SELECT", "FROM", "WHERE", "NOT", "IN", "INNER", "JOIN", "ORDER BY", "tv_genres", "tv_show_genres", "tv_shows"], "instruction": "Write a SQL query to list the names of all genres that are not associated with the show Dexter.", "response": "-- Reasoning:\nWe need to list all genres that are not associated with the show Dexter.\n\n-- Solution:\n```sql\nSELECT name\nFROM genre\nWHERE show_id != (\n  SELECT show_id\n  FROM show\n  WHERE name = 'Dexter'\n);\n```\n\n-- Explanation:\nThis query uses a subquery to find the show_id of Dexter. Then it uses a NOT IN clause to find all genres that do not have a show_id that matches Dexter\u2019s.\n\n-- Tests:\n-- 1. Verify that Dexter\u2019s genre is not listed\nSELECT name\nFROM genre\nWHERE show_id != (\n  SELECT show_id\n  FROM show\n  WHERE name = 'Dexter'\n);"}
{"seed": "/* Selects the name and title of all jobs that Daniel DeKerlegand has worked on. */\nSELECT name, title\nFROM person NATURAL JOIN works NATURAL JOIN job NATURAL JOIN job_profile\nWHERE name = 'Daniel DeKerlegand'\nUNION\nSELECT name, title\nFROM person NATURAL JOIN worked NATURAL JOIN job NATURAL JOIN job_profile\nWHERE name = 'Daniel DeKerlegand'", "description": "Selects the name and title of all jobs that Daniel DeKerlegand has worked on.", "concepts": ["SELECT", "NATURAL JOIN", "UNION"], "instruction": "Write a SQL query to list the name and title of all jobs that  has worked on.", "response": "-- Reasoning:\nWe need to list the name and title of all jobs that have worked on.\n\n-- Solution:\n```sql\nSELECT name, title\nFROM jobs\nWHERE job_id IN (\n  SELECT job_id\n  FROM works\n);\n```\n\n-- Explanation:\nThis query uses a subquery to find all jobs that have worked on. It then selects the name and title of those jobs.\n\n-- Tests:\n-- 1. Verify correct results\nSELECT name, title\nFROM jobs\nWHERE job_id IN (\n  SELECT job_id\n  FROM works\n);"}
{"seed": "/* Creates a table named users with three columns: id (bigserial primary key), auth_token (text not null unique) and nick (text). */\nCREATE TABLE users (\n  id BIGSERIAL PRIMARY KEY,\n  auth_token TEXT NOT NULL UNIQUE,\n  nick TEXT\n)", "description": "Creates a table named users with three columns: id (bigserial primary key), auth_token (text not null unique) and nick (text).", "concepts": ["CREATE TABLE", "BIGSERIAL", "PRIMARY KEY", "TEXT", "NOT", "UNIQUE", "NICK"], "instruction": "Write a SQL query to create a table named users with three columns: id (bigserial primary key), auth_token (text not null unique) and nick (text).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id BIGSERIAL PRIMARY KEY,\n  auth_token TEXT NOT NULL UNIQUE,\n  nick TEXT\n);\n```\n\n-- Explanation:\nThis statement defines the users table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 auth_token: variable\u2010length string up to 255 characters\n  \u2022 nick: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Creates a table named games with three columns: id (bigserial primary key), name (text not null) and replay (bytea). */\nCREATE TABLE games (\n  id BIGSERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  replay BYTEA\n)", "description": "Creates a table named games with three columns: id (bigserial primary key), name (text not null) and replay (bytea).", "concepts": ["CREATE TABLE", "BIGSERIAL", "PRIMARY KEY", "TEXT", "NOT NULL", "BYTEA"], "instruction": "Write a SQL query to create a table named games with three columns: id (bigserial primary key), name (text not null) and replay (bytea).", "response": "-- Reasoning:\nWe need a new table named games. It should have an integer primary key so that each game has a unique identifier, and a name column to store the game\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE games (\n  id BIGSERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  replay BYTEA\n);\n```\n\n-- Explanation:\nThis statement defines the games table with three columns:\n  \u2022 id: bigserial, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: text, not null\n  \u2022 replay: bytea\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('games');"}
{"seed": "/* Drops the table named Raw.FlagIconCss.Country from the Demo database. */\nDROP TABLE [Demo].[Raw.FlagIconCss.Country", "description": "Drops the table named Raw.FlagIconCss.Country from the Demo database.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named Raw.FlagIconCss.Country from the Demo database.", "response": "-- Reasoning:\nWe need to drop the table named Raw.FlagIconCss.Country from the Demo database.\n\n-- Solution:\n```sql\nDROP TABLE Raw.FlagIconCss.Country;\n```\n\n-- Explanation:\nThis statement drops the table named Raw.FlagIconCss.Country from the Demo database.\n\n-- Tests:\n-- 1. Verify table is dropped\nSELECT * FROM sqlite_master WHERE type='table' AND name='Country';"}
{"seed": "/* Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\". This means that the AUTO_INCREMENT value of a table will not be reset to 0 when a row is deleted. */\nSET SQL_MODE=\"NO_AUTO_VALUE_ON_ZERO\"", "description": "Sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\". This means that the AUTO_INCREMENT value of a table will not be reset to 0 when a row is deleted.", "concepts": ["SET", "SQL_MODE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT"], "instruction": "Write a SQL query to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\". This means that the AUTO_INCREMENT value of a table will not be reset to 0 when a row is deleted.", "response": "-- Reasoning:\nWe need to set the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" so that the AUTO_INCREMENT value of a table will not be reset to 0 when a row is deleted.\n\n-- Solution:\n```sql\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\n```\n\n-- Explanation:\nThis statement sets the SQL mode to \"NO_AUTO_VALUE_ON_ZERO\" which means that the AUTO_INCREMENT value of a table will not be reset to 0 when a row is deleted.\n\n-- Tests:\n-- 1. Check that the SQL mode is set to \"NO_AUTO_VALUE_ON_ZERO\"\nSELECT @@sql_mode;"}
{"seed": "/* Creates a table named department with the following columns: id (integer primary key), personeldb_id (integer), faculty_id (integer), name (varchar), en (varchar), kg (varchar), tr (varchar), ru (varchar). */\nCREATE TABLE IF NOT EXISTS `department` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `personeldb_id` int(11) NOT NULL,\n  `faculty_id` int(10) unsigned NOT NULL,\n  `name` varchar(250) COLLATE utf8_unicode_ci NOT NULL,\n  `en` varchar(250) COLLATE utf8_unicode_ci NOT NULL,\n  `kg` varchar(250) COLLATE utf8_unicode_ci NOT NULL,\n  `tr` varchar(250) COLLATE utf8_unicode_ci NOT NULL,\n  `ru` varchar(250) COLLATE utf8_unicode_ci NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `department_faculty_id_foreign` (`faculty_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci", "description": "Creates a table named department with the following columns: id (integer primary key), personeldb_id (integer), faculty_id (integer), name (varchar), en (varchar), kg (varchar), tr (varchar), ru (varchar).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "AUTO_INCREMENT", "PRIMARY KEY", "KEY", "ENGINE", "DEFAULT", "CHARSET", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named department with the following columns: id (integer primary key), personeldb_id (integer), faculty_id (integer), name (varchar), en (varchar), kg (varchar), tr (varchar), ru (varchar).", "response": "-- Reasoning:\nWe need a new table named department. It should have an integer primary key so that each department has a unique identifier, and a name column to store the department\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE department (\n  id INT PRIMARY KEY,\n  personeldb_id INT,\n  faculty_id INT,\n  name VARCHAR(255),\n  en VARCHAR(255),\n  kg VARCHAR(255),\n  tr VARCHAR(255),\n  ru VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the department table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 personeldb_id: integer\n  \u2022 faculty_id: integer\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 en: variable\u2010length string up to 255 characters\n  \u2022 kg: variable\u2010length string up to 255 characters\n  \u2022 tr: variable\u2010length string up to 255 characters\n  \u2022 ru: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('department');"}
{"seed": "/* Adds a foreign key constraint to the department table, which references the faculty table. */\nALTER TABLE `department`\n  ADD CONSTRAINT `department_faculty_id_foreign` FOREIGN KEY (`faculty_id`) REFERENCES `faculty` (`id`) ON DELETE CASCADE ON UPDATE CASCADE", "description": "Adds a foreign key constraint to the department table, which references the faculty table.", "concepts": ["ALTER TABLE", "ADD CONSTRAINT", "FOREIGN KEY", "REFERENCES", "ON DELETE", "ON UPDATE"], "instruction": "Write a SQL query to add a foreign key constraint to the department table, which references the faculty table.", "response": "-- Reasoning:\nWe need to add a foreign key constraint to the department table, which references the faculty table.\n\n-- Solution:\n```sql\nALTER TABLE department\n  ADD CONSTRAINT fk_faculty_id\n    FOREIGN KEY (faculty_id)\n      REFERENCES faculty(faculty_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a foreign key constraint to the department table, which references the faculty table.\n\n-- Tests:\n-- 1. Check foreign key constraint exists\nPRAGMA foreign_key_list('department');"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_P_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|P%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_P_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|P%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_P_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_P_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|P%'", "description": "Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|P'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|P%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|P' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|P%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PA_genes table where the description column contains the string 'hgnc|PA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PA%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PA_genes table where the description column contains the string 'hgnc|PA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PA_genes table where the description column contains the string 'hgnc|PA'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PA_genes table where the description column contains the string 'hgnc|PA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PA_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PA_genes table where the description column contains the string 'hgnc|PA'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PA_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PB_genes table where the description column contains the string 'hgnc|PB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PB%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PB_genes table where the description column contains the string 'hgnc|PB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PB_genes table where the description column contains the string 'hgnc|PB'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PB_genes table where the description column contains the string 'hgnc|PB'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PB_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PB%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PB_genes table where the description column contains the string 'hgnc|PB'.\n\n-- Tests:\n-- 1. Verify new rows appear in PB table\nSELECT * FROM ngs_feature_hg19_PB_genes\n  WHERE description LIKE '%hgnc|PB%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PC_genes table, where the description column contains the string 'hgnc|PC'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PC%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PC_genes table, where the description column contains the string 'hgnc|PC'.", "concepts": ["INSERT INTO", "SELECT", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg19"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PC_genes table, where the description column contains the string 'hgnc|PC'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PC_genes table, where the description column contains the string 'hgnc|PC'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PC_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PC%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PC_genes table, where the description column contains the string 'hgnc|PC'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PC_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PD_genes table where the description column contains the string 'hgnc|PD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PD%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PD_genes table where the description column contains the string 'hgnc|PD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PD_genes table where the description column contains the string 'hgnc|PD'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PD_genes table where the description column contains the string 'hgnc|PD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PD_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PD_genes table where the description column contains the string 'hgnc|PD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PD_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PE_genes table where the description column contains the string 'hgnc|PE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PE%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PE_genes table where the description column contains the string 'hgnc|PE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PE_genes table where the description column contains the string 'hgnc|PE'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PE_genes table where the description column contains the string 'hgnc|PE'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PE_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PE_genes table where the description column contains the string 'hgnc|PE'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_PE_genes\nWHERE description LIKE '%hgnc|PE%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PF'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PF_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PF%'", "description": "Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PF'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PF'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PF'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PF%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|PF' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PF%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PG%'", "description": "Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PG'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PG'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PG%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|PG' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PG%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PH_genes table where the description column contains the string 'hgnc|PH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PH%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PH_genes table where the description column contains the string 'hgnc|PH'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PH_genes table where the description column contains the string 'hgnc|PH'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PH_genes table where the description column contains the string 'hgnc|PH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PH_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PH_genes table where the description column contains the string 'hgnc|PH'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PH_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PI_genes table where the description column contains the string 'hgnc|PI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PI%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PI_genes table where the description column contains the string 'hgnc|PI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PI_genes table where the description column contains the string 'hgnc|PI'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PI_genes table where the description column contains the string 'hgnc|PI'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PI_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PI%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PI_genes table where the description column contains the string 'hgnc|PI'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PI_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PJ_genes table where the description column contains the string 'hgnc|PJ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PJ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PJ%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PJ_genes table where the description column contains the string 'hgnc|PJ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PJ_genes table where the description column contains the string 'hgnc|PJ'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PJ_genes table where the description column contains the string 'hgnc|PJ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PJ_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PJ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PJ_genes table where the description column contains the string 'hgnc|PJ'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PJ_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PK_genes table where the description column contains the string 'hgnc|PK'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PK%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PK_genes table where the description column contains the string 'hgnc|PK'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PK_genes table where the description column contains the string 'hgnc|PK'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PK_genes table where the description column contains the string 'hgnc|PK'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PK_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PK%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PK_genes table where the description column contains the string 'hgnc|PK'.\n\n-- Tests:\n-- 1. Verify new rows appear in PK table\nSELECT * FROM ngs_feature_hg19_PK_genes\n  WHERE description LIKE '%hgnc|PK%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PL_genes table where the description column contains the string 'hgnc|PL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PL%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PL_genes table where the description column contains the string 'hgnc|PL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PL_genes table where the description column contains the string 'hgnc|PL'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PL_genes table where the description column contains the string 'hgnc|PL'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PL_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PL%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PL_genes table where the description column contains the string 'hgnc|PL'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_PL_genes\nWHERE description LIKE '%hgnc|PL%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PM_genes table where the description column contains the string 'hgnc|PM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PM%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PM_genes table where the description column contains the string 'hgnc|PM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PM_genes table where the description column contains the string 'hgnc|PM'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PM_genes table where the description column contains the string 'hgnc|PM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PM_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PM_genes table where the description column contains the string 'hgnc|PM'.\n\n-- Tests:\n-- 1. Verify new rows appear in the PM table\nSELECT * FROM ngs_feature_hg19_PM_genes\nWHERE description LIKE '%hgnc|PM%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PN_genes table where the description column contains the string 'hgnc|PN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PN%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PN_genes table where the description column contains the string 'hgnc|PN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PN_genes table where the description column contains the string 'hgnc|PN'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PN_genes table where the description column contains the string 'hgnc|PN'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PN_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PN%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PN_genes table where the description column contains the string 'hgnc|PN'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PN_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PO_genes table where the description column contains the string 'hgnc|PO'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PO_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PO%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PO_genes table where the description column contains the string 'hgnc|PO'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PO_genes table where the description column contains the string 'hgnc|PO'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PO_genes table where the description column contains the string 'hgnc|PO'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PO_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PO%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PO_genes table where the description column contains the string 'hgnc|PO'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PO_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PP_genes table where the description column contains the string 'hgnc|PP'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PP%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PP_genes table where the description column contains the string 'hgnc|PP'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PP_genes table where the description column contains the string 'hgnc|PP'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PP_genes table where the description column contains the string 'hgnc|PP'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PP_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PP%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PP_genes table where the description column contains the string 'hgnc|PP'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PP_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PQ_genes table where the description column contains the string 'hgnc|PQ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PQ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PQ%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PQ_genes table where the description column contains the string 'hgnc|PQ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PQ_genes table where the description column contains the string 'hgnc|PQ'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PQ_genes table where the description column contains the string 'hgnc|PQ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PQ_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PQ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PQ_genes table where the description column contains the string 'hgnc|PQ'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PQ_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PR_genes table where the description column contains the string 'hgnc|PR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PR%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PR_genes table where the description column contains the string 'hgnc|PR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PR_genes table where the description column contains the string 'hgnc|PR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PR_genes table where the description column contains the string 'hgnc|PR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PR_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PR_genes table where the description column contains the string 'hgnc|PR'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PR_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PS_genes table where the description column contains the string 'hgnc|PS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PS%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PS_genes table where the description column contains the string 'hgnc|PS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PS_genes table where the description column contains the string 'hgnc|PS'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PS_genes table where the description column contains the string 'hgnc|PS'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PS_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PS%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PS_genes table where the description column contains the string 'hgnc|PS'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PS_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PT%'", "description": "Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PT'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PT'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PT%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|PT' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PT%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PU_genes table where the description column contains the string 'hgnc|PU'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PU_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PU%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PU_genes table where the description column contains the string 'hgnc|PU'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PU_genes table where the description column contains the string 'hgnc|PU'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PU_genes table where the description column contains the string 'hgnc|PU'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PU_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PU%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PU_genes table where the description column contains the string 'hgnc|PU'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_PU_genes\nWHERE description LIKE '%hgnc|PU%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PV_genes table where the description column contains the string 'hgnc|PV'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PV_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PV%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PV_genes table where the description column contains the string 'hgnc|PV'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PV_genes table where the description column contains the string 'hgnc|PV'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PV_genes table where the description column contains the string 'hgnc|PV'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PV_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PV%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PV_genes table where the description column contains the string 'hgnc|PV'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PV_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PW_genes table where the description column contains the string 'hgnc|PW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PW%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PW_genes table where the description column contains the string 'hgnc|PW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PW_genes table where the description column contains the string 'hgnc|PW'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PW_genes table where the description column contains the string 'hgnc|PW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PW_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PW_genes table where the description column contains the string 'hgnc|PW'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_PW_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PX_genes table where the description column contains the string 'hgnc|PX'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PX_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PX%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PX_genes table where the description column contains the string 'hgnc|PX'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PX_genes table where the description column contains the string 'hgnc|PX'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PX_genes table where the description column contains the string 'hgnc|PX'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PX_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PX%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PX_genes table where the description column contains the string 'hgnc|PX'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_PX_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PY_genes table where the description column contains the string 'hgnc|PY'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PY_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PY%'", "description": "Inserts all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PY_genes table where the description column contains the string 'hgnc|PY'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PY_genes table where the description column contains the string 'hgnc|PY'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PY_genes table where the description column contains the string 'hgnc|PY'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_PY_genes\n  SELECT * FROM ngs_feature_hg19_P_genes\n  WHERE description LIKE '%hgnc|PY%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_P_genes table into the ngs_feature_hg19_PY_genes table where the description column contains the string 'hgnc|PY'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_PY_genes\nWHERE description LIKE '%hgnc|PY%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PZ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_PZ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_P_genes WHERE description LIKE '%hgnc|PZ%'", "description": "Selects all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PZ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PZ'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_P_genes table where the description column contains the string 'hgnc|PZ'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PZ%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|PZ' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_P_genes\nWHERE description LIKE '%hgnc|PZ%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_Q_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|Q%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_Q_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|Q%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_Q_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_Q_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|Q%'", "description": "Selects all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|Q'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_Q_genes\nWHERE description LIKE '%hgnc|Q%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|Q' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_Q_genes\nWHERE description LIKE '%hgnc|Q%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QA_genes table where the description column contains the string 'hgnc|QA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_QA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|QA%'", "description": "Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QA_genes table where the description column contains the string 'hgnc|QA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QA_genes table where the description column contains the string 'hgnc|QA'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QA_genes table where the description column contains the string 'hgnc|QA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_QA_genes\n  SELECT * FROM ngs_feature_hg19_Q_genes\n  WHERE description LIKE '%hgnc|QA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QA_genes table where the description column contains the string 'hgnc|QA'.\n\n-- Tests:\n-- 1. Verify new rows appear in QA table\nSELECT * FROM ngs_feature_hg19_QA_genes\nWHERE description LIKE '%hgnc|QA%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QD_genes table where the description column contains the string 'hgnc|QD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_QD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|QD%'", "description": "Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QD_genes table where the description column contains the string 'hgnc|QD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QD_genes table where the description column contains the string 'hgnc|QD'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QD_genes table where the description column contains the string 'hgnc|QD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_QD_genes\n  SELECT * FROM ngs_feature_hg19_Q_genes\n  WHERE description LIKE '%hgnc|QD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QD_genes table where the description column contains the string 'hgnc|QD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_QD_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QK'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_QK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|QK%'", "description": "Selects all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QK'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QK'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QK'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_Q_genes\nWHERE description LIKE '%hgnc|QK%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|QK' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_Q_genes\nWHERE description LIKE '%hgnc|QK%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QP'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_QP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|QP%'", "description": "Selects all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QP'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QP'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_Q_genes table where the description column contains the string 'hgnc|QP'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_Q_genes\nWHERE description LIKE '%hgnc|QP%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|QP' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_Q_genes\nWHERE description LIKE '%hgnc|QP%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QR_genes table where the description column contains the string 'hgnc|QR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_QR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|QR%'", "description": "Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QR_genes table where the description column contains the string 'hgnc|QR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QR_genes table where the description column contains the string 'hgnc|QR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QR_genes table where the description column contains the string 'hgnc|QR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_QR_genes\n  SELECT * FROM ngs_feature_hg19_Q_genes\n  WHERE description LIKE '%hgnc|QR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QR_genes table where the description column contains the string 'hgnc|QR'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_QR_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QS_genes table, where the description column contains the string 'hgnc|QS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_QS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|QS%'", "description": "Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QS_genes table, where the description column contains the string 'hgnc|QS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QS_genes table, where the description column contains the string 'hgnc|QS'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QS_genes table, where the description column contains the string 'hgnc|QS'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_QS_genes\n  SELECT * FROM ngs_feature_hg19_Q_genes\n  WHERE description LIKE '%hgnc|QS%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QS_genes table, where the description column contains the string 'hgnc|QS'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_QS_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QT_genes table where the description column contains the string 'hgnc|QT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_QT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Q_genes WHERE description LIKE '%hgnc|QT%'", "description": "Inserts all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QT_genes table where the description column contains the string 'hgnc|QT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QT_genes table where the description column contains the string 'hgnc|QT'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QT_genes table where the description column contains the string 'hgnc|QT'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_QT_genes\n  SELECT * FROM ngs_feature_hg19_Q_genes\n  WHERE description LIKE '%hgnc|QT%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Q_genes table into the ngs_feature_hg19_QT_genes table where the description column contains the string 'hgnc|QT'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_QT_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_R_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|R%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_R_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|R%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_R_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_R_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|R%'", "description": "Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|R'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|R%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|R' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|R%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RA_genes table, where the description column contains the string 'hgnc|RA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RA%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RA_genes table, where the description column contains the string 'hgnc|RA'.", "concepts": ["INSERT INTO", "SELECT", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg19"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RA_genes table, where the description column contains the string 'hgnc|RA'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RA_genes table, where the description column contains the string 'hgnc|RA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RA_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RA_genes table, where the description column contains the string 'hgnc|RA'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RA_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RB_genes table where the description column contains the string 'hgnc|RB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RB%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RB_genes table where the description column contains the string 'hgnc|RB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RB_genes table where the description column contains the string 'hgnc|RB'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RB_genes table where the description column contains the string 'hgnc|RB'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RB_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RB%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RB_genes table where the description column contains the string 'hgnc|RB'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RB_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RC_genes table, where the description column contains the string 'hgnc|RC'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RC%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RC_genes table, where the description column contains the string 'hgnc|RC'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RC_genes table, where the description column contains the string 'hgnc|RC'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RC_genes table, where the description column contains the string 'hgnc|RC'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RC_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RC%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RC_genes table, where the description column contains the string 'hgnc|RC'.\n\n-- Tests:\n-- 1. Verify new rows appear in RC table\nSELECT * FROM ngs_feature_hg19_RC_genes\n  WHERE description LIKE '%hgnc|RC%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RD_genes table where the description column contains the string 'hgnc|RD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RD%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RD_genes table where the description column contains the string 'hgnc|RD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RD_genes table where the description column contains the string 'hgnc|RD'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RD_genes table where the description column contains the string 'hgnc|RD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RD_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RD_genes table where the description column contains the string 'hgnc|RD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RD_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RE_genes table where the description column contains the string 'hgnc|RE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RE%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RE_genes table where the description column contains the string 'hgnc|RE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RE_genes table where the description column contains the string 'hgnc|RE'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RE_genes table where the description column contains the string 'hgnc|RE'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RE_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RE_genes table where the description column contains the string 'hgnc|RE'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RE_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RF_genes table where the description column contains the string 'hgnc|RF'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RF_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RF%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RF_genes table where the description column contains the string 'hgnc|RF'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RF_genes table where the description column contains the string 'hgnc|RF'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RF_genes table where the description column contains the string 'hgnc|RF'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RF_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RF%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RF_genes table where the description column contains the string 'hgnc|RF'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RF_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RG%'", "description": "Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RG'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RG'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RG%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|RG' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RG%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RH_genes table, where the description column contains the string 'hgnc|RH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RH%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RH_genes table, where the description column contains the string 'hgnc|RH'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RH_genes table, where the description column contains the string 'hgnc|RH'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RH_genes table, where the description column contains the string 'hgnc|RH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RH_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RH_genes table, where the description column contains the string 'hgnc|RH'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RH_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RI_genes table where the description column contains the string 'hgnc|RI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RI%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RI_genes table where the description column contains the string 'hgnc|RI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RI_genes table where the description column contains the string 'hgnc|RI'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RI_genes table where the description column contains the string 'hgnc|RI'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RI_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RI%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RI_genes table where the description column contains the string 'hgnc|RI'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RI_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RL_genes table where the description column contains the string 'hgnc|RL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RL%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RL_genes table where the description column contains the string 'hgnc|RL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RL_genes table where the description column contains the string 'hgnc|RL'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RL_genes table where the description column contains the string 'hgnc|RL'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RL_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RL%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RL_genes table where the description column contains the string 'hgnc|RL'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_RL_genes\nWHERE description LIKE '%hgnc|RL%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RM_genes table where the description column contains the string 'hgnc|RM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RM%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RM_genes table where the description column contains the string 'hgnc|RM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RM_genes table where the description column contains the string 'hgnc|RM'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RM_genes table where the description column contains the string 'hgnc|RM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RM_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RM_genes table where the description column contains the string 'hgnc|RM'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RM_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RN%'", "description": "Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RN'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RN'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RN%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|RN' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RN%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RO_genes table, where the description column contains the string 'hgnc|RO'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RO_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RO%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RO_genes table, where the description column contains the string 'hgnc|RO'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RO_genes table, where the description column contains the string 'hgnc|RO'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RO_genes table, where the description column contains the string 'hgnc|RO'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RO_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RO%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RO_genes table, where the description column contains the string 'hgnc|RO'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RO_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RP_genes table where the description column contains the string 'hgnc|RP'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RP%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RP_genes table where the description column contains the string 'hgnc|RP'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RP_genes table where the description column contains the string 'hgnc|RP'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RP_genes table where the description column contains the string 'hgnc|RP'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RP_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RP%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RP_genes table where the description column contains the string 'hgnc|RP'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RP_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RQ_genes table where the description column contains the string 'hgnc|RQ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RQ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RQ%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RQ_genes table where the description column contains the string 'hgnc|RQ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RQ_genes table where the description column contains the string 'hgnc|RQ'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RQ_genes table where the description column contains the string 'hgnc|RQ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RQ_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RQ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RQ_genes table where the description column contains the string 'hgnc|RQ'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RQ_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RR_genes table where the description column contains the string 'hgnc|RR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RR%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RR_genes table where the description column contains the string 'hgnc|RR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RR_genes table where the description column contains the string 'hgnc|RR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RR_genes table where the description column contains the string 'hgnc|RR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RR_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RR_genes table where the description column contains the string 'hgnc|RR'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RR_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RS%'", "description": "Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RS'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RS'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RS%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|RS' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RS%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RT_genes table where the description column contains the string 'hgnc|RT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RT%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RT_genes table where the description column contains the string 'hgnc|RT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RT_genes table where the description column contains the string 'hgnc|RT'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RT_genes table where the description column contains the string 'hgnc|RT'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RT_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RT%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RT_genes table where the description column contains the string 'hgnc|RT'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_RT_genes\nWHERE description LIKE '%hgnc|RT%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RU_genes table where the description column contains the string 'hgnc|RU'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RU_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RU%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RU_genes table where the description column contains the string 'hgnc|RU'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RU_genes table where the description column contains the string 'hgnc|RU'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RU_genes table where the description column contains the string 'hgnc|RU'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RU_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RU%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RU_genes table where the description column contains the string 'hgnc|RU'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RU_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RW_genes table where the description column contains the string 'hgnc|RW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RW%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RW_genes table where the description column contains the string 'hgnc|RW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RW_genes table where the description column contains the string 'hgnc|RW'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RW_genes table where the description column contains the string 'hgnc|RW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RW_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RW_genes table where the description column contains the string 'hgnc|RW'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RW_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RX_genes table where the description column contains the string 'hgnc|RX'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RX_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RX%'", "description": "Inserts all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RX_genes table where the description column contains the string 'hgnc|RX'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RX_genes table where the description column contains the string 'hgnc|RX'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RX_genes table where the description column contains the string 'hgnc|RX'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_RX_genes\n  SELECT * FROM ngs_feature_hg19_R_genes\n  WHERE description LIKE '%hgnc|RX%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_R_genes table into the ngs_feature_hg19_RX_genes table where the description column contains the string 'hgnc|RX'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_RX_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RY'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_RY_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_R_genes WHERE description LIKE '%hgnc|RY%'", "description": "Selects all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RY'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RY'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_R_genes table where the description column contains the string 'hgnc|RY'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RY%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|RY' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_R_genes\nWHERE description LIKE '%hgnc|RY%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|S'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_S_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|S%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|S'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|S'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|S'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_S_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|S%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|S'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_S_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SA'. The result is then inserted into the ngs_feature_hg19_SA_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SA%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SA'. The result is then inserted into the ngs_feature_hg19_SA_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SA'. The result is then inserted into the ngs_feature_hg19_SA_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SA'. The result should be inserted into the ngs_feature_hg19_SA_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SA_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SA%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SA' into the ngs_feature_hg19_SA_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SA_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SB_genes table where the description column contains the string 'hgnc|SB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SB%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SB_genes table where the description column contains the string 'hgnc|SB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SB_genes table where the description column contains the string 'hgnc|SB'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SB_genes table where the description column contains the string 'hgnc|SB'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SB_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SB%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SB_genes table where the description column contains the string 'hgnc|SB'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SB_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SC'. The result is then inserted into the ngs_feature_hg19_SC_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SC%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SC'. The result is then inserted into the ngs_feature_hg19_SC_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SC'. The result is then inserted into the ngs_feature_hg19_SC_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SC'. The result should be inserted into the ngs_feature_hg19_SC_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SC_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SC%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SC' into the ngs_feature_hg19_SC_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SC_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SD_genes table where the description column contains the string 'hgnc|SD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SD%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SD_genes table where the description column contains the string 'hgnc|SD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SD_genes table where the description column contains the string 'hgnc|SD'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SD_genes table where the description column contains the string 'hgnc|SD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SD_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SD_genes table where the description column contains the string 'hgnc|SD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SD_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SE_genes table where the description column contains the string 'hgnc|SE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SE%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SE_genes table where the description column contains the string 'hgnc|SE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SE_genes table where the description column contains the string 'hgnc|SE'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SE_genes table where the description column contains the string 'hgnc|SE'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SE_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SE_genes table where the description column contains the string 'hgnc|SE'.\n\n-- Tests:\n-- 1. Verify new rows appear in new table\nSELECT * FROM ngs_feature_hg19_SE_genes\nWHERE description LIKE '%hgnc|SE%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SF_genes table where the description column contains the string 'hgnc|SF'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SF_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SF%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SF_genes table where the description column contains the string 'hgnc|SF'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SF_genes table where the description column contains the string 'hgnc|SF'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SF_genes table where the description column contains the string 'hgnc|SF'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SF_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SF%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SF_genes table where the description column contains the string 'hgnc|SF'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_SF_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SG%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SG'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SG'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SG%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|SG' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SG%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SH_genes table where the description column contains the string 'hgnc|SH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SH%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SH_genes table where the description column contains the string 'hgnc|SH'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SH_genes table where the description column contains the string 'hgnc|SH'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SH_genes table where the description column contains the string 'hgnc|SH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SH_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SH_genes table where the description column contains the string 'hgnc|SH'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SH_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SI'. The result is then inserted into the ngs_feature_hg19_SI_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SI%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SI'. The result is then inserted into the ngs_feature_hg19_SI_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SI'. The result is then inserted into the ngs_feature_hg19_SI_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SI'. The result is then inserted into the ngs_feature_hg19_SI_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SI_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SI%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SI' into the ngs_feature_hg19_SI_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SI_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SK_genes table where the description column contains the string 'hgnc|SK'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SK%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SK_genes table where the description column contains the string 'hgnc|SK'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SK_genes table where the description column contains the string 'hgnc|SK'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SK_genes table where the description column contains the string 'hgnc|SK'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SK_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SK%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SK_genes table where the description column contains the string 'hgnc|SK'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_SK_genes\nWHERE description LIKE '%hgnc|SK%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SL_genes table where the description column contains the string 'hgnc|SL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SL%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SL_genes table where the description column contains the string 'hgnc|SL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SL_genes table where the description column contains the string 'hgnc|SL'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SL_genes table where the description column contains the string 'hgnc|SL'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SL_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SL%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SL_genes table where the description column contains the string 'hgnc|SL'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_SL_genes\nWHERE description LIKE '%hgnc|SL%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SM_genes table where the description column contains the string 'hgnc|SM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SM%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SM_genes table where the description column contains the string 'hgnc|SM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SM_genes table where the description column contains the string 'hgnc|SM'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SM_genes table where the description column contains the string 'hgnc|SM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SM_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SM_genes table where the description column contains the string 'hgnc|SM'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SM_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SN%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SN'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SN'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SN%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|SN' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SN%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SO'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SO_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SO%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SO'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SO'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SO'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SO%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|SO' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SO%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SP'. The result is then inserted into the ngs_feature_hg19_SP_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SP%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SP'. The result is then inserted into the ngs_feature_hg19_SP_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SP'. The result is then inserted into the ngs_feature_hg19_SP_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SP'. The result is then inserted into the ngs_feature_hg19_SP_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SP_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SP%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SP' into the ngs_feature_hg19_SP_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SP_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SQ_genes table where the description column contains the string 'hgnc|SQ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SQ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SQ%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SQ_genes table where the description column contains the string 'hgnc|SQ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SQ_genes table where the description column contains the string 'hgnc|SQ'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SQ_genes table where the description column contains the string 'hgnc|SQ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SQ_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SQ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SQ_genes table where the description column contains the string 'hgnc|SQ'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_SQ_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SR'. The result is then inserted into the ngs_feature_hg19_SR_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SR%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SR'. The result is then inserted into the ngs_feature_hg19_SR_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SR'. The result is then inserted into the ngs_feature_hg19_SR_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SR'. The result is then inserted into the ngs_feature_hg19_SR_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SR_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SR%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SR' into the ngs_feature_hg19_SR_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SR_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SS_genes table where the description column contains the string 'hgnc|SS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SS%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SS_genes table where the description column contains the string 'hgnc|SS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SS_genes table where the description column contains the string 'hgnc|SS'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SS_genes table where the description column contains the string 'hgnc|SS'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SS_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SS%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SS_genes table where the description column contains the string 'hgnc|SS'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SS_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|ST'. The result is then inserted into the ngs_feature_hg19_ST_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ST_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|ST%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|ST'. The result is then inserted into the ngs_feature_hg19_ST_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|ST'. The result is then inserted into the ngs_feature_hg19_ST_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|ST'. The result should be inserted into the ngs_feature_hg19_ST_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ST_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|ST%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|ST' into the ngs_feature_hg19_ST_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ST_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SU_genes table where the description column contains the string 'hgnc|SU'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SU_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SU%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SU_genes table where the description column contains the string 'hgnc|SU'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SU_genes table where the description column contains the string 'hgnc|SU'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SU_genes table where the description column contains the string 'hgnc|SU'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SU_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SU%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SU_genes table where the description column contains the string 'hgnc|SU'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SU_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SV'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SV_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SV%'", "description": "Selects all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SV'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SV'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_S_genes table where the description column contains the string 'hgnc|SV'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SV%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|SV' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_S_genes\nWHERE description LIKE '%hgnc|SV%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SW_genes table where the description column contains the string 'hgnc|SW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SW%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SW_genes table where the description column contains the string 'hgnc|SW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SW_genes table where the description column contains the string 'hgnc|SW'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SW_genes table where the description column contains the string 'hgnc|SW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SW_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SW_genes table where the description column contains the string 'hgnc|SW'.\n\n-- Tests:\n-- 1. Verify new rows appear in SW table\nSELECT * FROM ngs_feature_hg19_SW_genes\nWHERE description LIKE '%hgnc|SW%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SY_genes table where the description column contains the string 'hgnc|SY'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SY_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SY%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SY_genes table where the description column contains the string 'hgnc|SY'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SY_genes table where the description column contains the string 'hgnc|SY'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_S_genes table to the ngs_feature_hg19_SY_genes table where the description column contains the string 'hgnc|SY'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SY_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SY%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table to the ngs_feature_hg19_SY_genes table where the description column contains the string 'hgnc|SY'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_SY_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SZ_genes table where the description column contains the string 'hgnc|SZ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_SZ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_S_genes WHERE description LIKE '%hgnc|SZ%'", "description": "Inserts all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SZ_genes table where the description column contains the string 'hgnc|SZ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SZ_genes table where the description column contains the string 'hgnc|SZ'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SZ_genes table where the description column contains the string 'hgnc|SZ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_SZ_genes\n  SELECT * FROM ngs_feature_hg19_S_genes\n  WHERE description LIKE '%hgnc|SZ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_S_genes table into the ngs_feature_hg19_SZ_genes table where the description column contains the string 'hgnc|SZ'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_SZ_genes\nWHERE description LIKE '%hgnc|SZ%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_T_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|T%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_T_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|T%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_T_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_T_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|T%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|T'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|T%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|T' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|T%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TA_genes table where the description column contains the string 'hgnc|TA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TA%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TA_genes table where the description column contains the string 'hgnc|TA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TA_genes table where the description column contains the string 'hgnc|TA'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TA_genes table where the description column contains the string 'hgnc|TA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TA_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TA_genes table where the description column contains the string 'hgnc|TA'.\n\n-- Tests:\n-- 1. Verify new rows appear in TA table\nSELECT * FROM ngs_feature_hg19_TA_genes\n  WHERE description LIKE '%hgnc|TA%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TB'. The result is then inserted into the ngs_feature_hg19_TB_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TB%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TB'. The result is then inserted into the ngs_feature_hg19_TB_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TB'. The result is then inserted into the ngs_feature_hg19_TB_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TB'. The result is then inserted into the ngs_feature_hg19_TB_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TB_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TB%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TB' into the ngs_feature_hg19_TB_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_TB_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TC'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TC%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TC'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TC'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TC'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TC%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TC' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TC%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TD_genes table where the description column contains the string 'hgnc|TD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TD%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TD_genes table where the description column contains the string 'hgnc|TD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TD_genes table where the description column contains the string 'hgnc|TD'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TD_genes table where the description column contains the string 'hgnc|TD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TD_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TD_genes table where the description column contains the string 'hgnc|TD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_TD_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TE%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TE'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TE'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TE%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TE' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TE%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TF'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TF_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TF%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TF'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TF'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TF'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TF%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TF' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TF%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TG%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TG'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TG'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TG%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TG' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TG%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TH_genes table where the description column contains the string 'hgnc|TH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TH%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TH_genes table where the description column contains the string 'hgnc|TH'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TH_genes table where the description column contains the string 'hgnc|TH'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TH_genes table where the description column contains the string 'hgnc|TH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TH_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TH_genes table where the description column contains the string 'hgnc|TH'.\n\n-- Tests:\n-- 1. Verify new rows appear in TH table\nSELECT * FROM ngs_feature_hg19_TH_genes\nWHERE description LIKE '%hgnc|TH%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TI%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TI'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TI'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TI%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TI' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TI%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TJ_genes table where the description column contains the string 'hgnc|TJ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TJ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TJ%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TJ_genes table where the description column contains the string 'hgnc|TJ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TJ_genes table where the description column contains the string 'hgnc|TJ'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TJ_genes table where the description column contains the string 'hgnc|TJ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TJ_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TJ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TJ_genes table where the description column contains the string 'hgnc|TJ'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_TJ_genes\n  WHERE description LIKE '%hgnc|TJ%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TK'. The result is inserted into the ngs_feature_hg19_TK_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TK%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TK'. The result is inserted into the ngs_feature_hg19_TK_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TK'. The result is inserted into the ngs_feature_hg19_TK_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TK'. The result is inserted into the ngs_feature_hg19_TK_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TK_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TK%';\n```\n\n-- Explanation:\nThis INSERT statement selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TK'. The result is inserted into the ngs_feature_hg19_TK_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_TK_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TL%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TL'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TL'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TL%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TL' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TL%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TM_genes table where the description column contains the string 'hgnc|TM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TM%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TM_genes table where the description column contains the string 'hgnc|TM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TM_genes table where the description column contains the string 'hgnc|TM'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TM_genes table where the description column contains the string 'hgnc|TM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TM_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TM_genes table where the description column contains the string 'hgnc|TM'.\n\n-- Tests:\n-- 1. Verify new rows appear in TM table\nSELECT * FROM ngs_feature_hg19_TM_genes\nWHERE description LIKE '%hgnc|TM%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TN_genes table where the description column contains the string 'hgnc|TN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TN%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TN_genes table where the description column contains the string 'hgnc|TN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TN_genes table where the description column contains the string 'hgnc|TN'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TN_genes table where the description column contains the string 'hgnc|TN'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TN_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TN%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TN_genes table where the description column contains the string 'hgnc|TN'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_TN_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TO'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TO_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TO%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TO'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TO'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TO'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TO%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TO' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TO%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TP'. The result is then inserted into the ngs_feature_hg19_TP_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TP%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TP'. The result is then inserted into the ngs_feature_hg19_TP_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TP'. The result is then inserted into the ngs_feature_hg19_TP_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TP'. The result is then inserted into the ngs_feature_hg19_TP_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TP_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TP%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TP' into the ngs_feature_hg19_TP_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_TP_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TR%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TR'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TR'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TR%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TR' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TR%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TS%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TS'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TS'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TS%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TS' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TS%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TT%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TT'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TT'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TT%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TT' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TT%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TU'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TU_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TU%'", "description": "Selects all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TU'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TU'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_T_genes table where the description column contains the string 'hgnc|TU'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TU%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|TU' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_T_genes\nWHERE description LIKE '%hgnc|TU%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TV_genes table where the description column contains the string 'hgnc|TV'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TV_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TV%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TV_genes table where the description column contains the string 'hgnc|TV'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TV_genes table where the description column contains the string 'hgnc|TV'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TV_genes table where the description column contains the string 'hgnc|TV'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TV_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TV%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TV_genes table where the description column contains the string 'hgnc|TV'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_TV_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TW_genes table where the description column contains the string 'hgnc|TW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TW%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TW_genes table where the description column contains the string 'hgnc|TW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TW_genes table where the description column contains the string 'hgnc|TW'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TW_genes table where the description column contains the string 'hgnc|TW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TW_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TW_genes table where the description column contains the string 'hgnc|TW'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_TW_genes\nWHERE description LIKE '%hgnc|TW%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TX_genes table where the description column contains the string 'hgnc|TX'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TX_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TX%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TX_genes table where the description column contains the string 'hgnc|TX'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TX_genes table where the description column contains the string 'hgnc|TX'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TX_genes table where the description column contains the string 'hgnc|TX'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TX_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TX%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TX_genes table where the description column contains the string 'hgnc|TX'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_TX_genes\n  WHERE description LIKE '%hgnc|TX%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TY_genes table where the description column contains the string 'hgnc|TY'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_TY_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_T_genes WHERE description LIKE '%hgnc|TY%'", "description": "Inserts all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TY_genes table where the description column contains the string 'hgnc|TY'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_T_genes table into the ngs_feature_hg19_TY_genes table where the description column contains the string 'hgnc|TY'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_T_genes table to the ngs_feature_hg19_TY_genes table where the description column contains the string 'hgnc|TY'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_TY_genes\n  SELECT * FROM ngs_feature_hg19_T_genes\n  WHERE description LIKE '%hgnc|TY%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_T_genes table to the ngs_feature_hg19_TY_genes table where the description column contains the string 'hgnc|TY'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_TY_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|U'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_U_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|U%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|U'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|U'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|U'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_U_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|U%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|U'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_U_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UA_genes table where the description column contains the string 'hgnc|UA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UA%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UA_genes table where the description column contains the string 'hgnc|UA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UA_genes table where the description column contains the string 'hgnc|UA'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UA_genes table where the description column contains the string 'hgnc|UA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UA_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UA_genes table where the description column contains the string 'hgnc|UA'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UA_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UB_genes table, where the description column contains the string 'hgnc|UB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UB%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UB_genes table, where the description column contains the string 'hgnc|UB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UB_genes table, where the description column contains the string 'hgnc|UB'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UB_genes table, where the description column contains the string 'hgnc|UB'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UB_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UB%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UB_genes table, where the description column contains the string 'hgnc|UB'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UB_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UC'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UC%'", "description": "Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UC'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UC'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UC'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UC%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|UC' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UC%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UE_genes table where the description column contains the string 'hgnc|UE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UE%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UE_genes table where the description column contains the string 'hgnc|UE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UE_genes table where the description column contains the string 'hgnc|UE'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UE_genes table where the description column contains the string 'hgnc|UE'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UE_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UE_genes table where the description column contains the string 'hgnc|UE'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UE_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UF_genes table where the description column contains the string 'hgnc|UF'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UF_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UF%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UF_genes table where the description column contains the string 'hgnc|UF'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UF_genes table where the description column contains the string 'hgnc|UF'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UF_genes table where the description column contains the string 'hgnc|UF'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UF_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UF%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UF_genes table where the description column contains the string 'hgnc|UF'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UF_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UG%'", "description": "Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UG'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UG'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UG%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|UG' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UG%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UH_genes table, where the description column contains the string 'hgnc|UH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UH%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UH_genes table, where the description column contains the string 'hgnc|UH'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UH_genes table, where the description column contains the string 'hgnc|UH'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UH_genes table, where the description column contains the string 'hgnc|UH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UH_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UH_genes table, where the description column contains the string 'hgnc|UH'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UH_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UI%'", "description": "Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UI'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UI'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UI%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|UI' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UI%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UL%'", "description": "Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UL'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UL'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UL%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|UL' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UL%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UM_genes table, where the description column contains the string 'hgnc|UM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UM%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UM_genes table, where the description column contains the string 'hgnc|UM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UM_genes table, where the description column contains the string 'hgnc|UM'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UM_genes table, where the description column contains the string 'hgnc|UM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UM_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UM_genes table, where the description column contains the string 'hgnc|UM'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UM_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UN_genes table, where the description column contains the string 'hgnc|UN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UN%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UN_genes table, where the description column contains the string 'hgnc|UN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UN_genes table, where the description column contains the string 'hgnc|UN'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UN_genes table, where the description column contains the string 'hgnc|UN'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UN_genes\nSELECT * FROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UN%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UN_genes table, where the description column contains the string 'hgnc|UN'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UN_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UO'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UO_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UO%'", "description": "Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UO'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UO'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UO'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UO%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|UO' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|UO%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UP'. The result is then inserted into the ngs_feature_hg19_UP_genes table. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UP%'", "description": "Selects all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UP'. The result is then inserted into the ngs_feature_hg19_UP_genes table.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UP'. The result is then inserted into the ngs_feature_hg19_UP_genes table.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UP'. The result is then inserted into the ngs_feature_hg19_UP_genes table.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UP_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UP%';\n```\n\n-- Explanation:\nThis INSERT statement inserts all rows from the ngs_feature_hg19_U_genes table where the description column contains the string 'hgnc|UP' into the ngs_feature_hg19_UP_genes table.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UP_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UQ_genes table where the description column contains the string 'hgnc|UQ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UQ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UQ%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UQ_genes table where the description column contains the string 'hgnc|UQ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UQ_genes table where the description column contains the string 'hgnc|UQ'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UQ_genes table where the description column contains the string 'hgnc|UQ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UQ_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UQ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UQ_genes table where the description column contains the string 'hgnc|UQ'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UQ_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UR_genes table where the description column contains the string 'hgnc|UR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UR%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UR_genes table where the description column contains the string 'hgnc|UR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UR_genes table where the description column contains the string 'hgnc|UR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UR_genes table where the description column contains the string 'hgnc|UR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UR_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UR_genes table where the description column contains the string 'hgnc|UR'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UR_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_US_genes table, where the description column contains the string 'hgnc|US'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_US_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|US%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_US_genes table, where the description column contains the string 'hgnc|US'.", "concepts": ["INSERT INTO", "SELECT", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg19"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_US_genes table, where the description column contains the string 'hgnc|US'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_US_genes table, where the description column contains the string 'hgnc|US'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_US_genes\nSELECT * FROM ngs_feature_hg19_U_genes\nWHERE description LIKE '%hgnc|US%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_US_genes table, where the description column contains the string 'hgnc|US'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_US_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UT_genes table where the description column contains the string 'hgnc|UT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UT%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UT_genes table where the description column contains the string 'hgnc|UT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UT_genes table where the description column contains the string 'hgnc|UT'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UT_genes table where the description column contains the string 'hgnc|UT'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UT_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UT%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UT_genes table where the description column contains the string 'hgnc|UT'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UT_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UV_genes table where the description column contains the string 'hgnc|UV'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UV_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UV%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UV_genes table where the description column contains the string 'hgnc|UV'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UV_genes table where the description column contains the string 'hgnc|UV'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UV_genes table where the description column contains the string 'hgnc|UV'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UV_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UV%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UV_genes table where the description column contains the string 'hgnc|UV'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UV_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UX_genes table where the description column contains the string 'hgnc|UX'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_UX_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_U_genes WHERE description LIKE '%hgnc|UX%'", "description": "Inserts all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UX_genes table where the description column contains the string 'hgnc|UX'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UX_genes table where the description column contains the string 'hgnc|UX'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UX_genes table where the description column contains the string 'hgnc|UX'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_UX_genes\n  SELECT * FROM ngs_feature_hg19_U_genes\n  WHERE description LIKE '%hgnc|UX%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_U_genes table into the ngs_feature_hg19_UX_genes table where the description column contains the string 'hgnc|UX'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_UX_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_V_genes table where the description column contains the string 'hgnc|V'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_V_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|V%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_V_genes table where the description column contains the string 'hgnc|V'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_V_genes table where the description column contains the string 'hgnc|V'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_V_genes table where the description column contains the string 'hgnc|V'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_V_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|V%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_V_genes table where the description column contains the string 'hgnc|V'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_V_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VA_genes table where the description column contains the string 'hgnc|VA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VA%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VA_genes table where the description column contains the string 'hgnc|VA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VA_genes table where the description column contains the string 'hgnc|VA'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VA_genes table where the description column contains the string 'hgnc|VA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VA_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VA_genes table where the description column contains the string 'hgnc|VA'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VA_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VB_genes table where the description column contains the string 'hgnc|VB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VB%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VB_genes table where the description column contains the string 'hgnc|VB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VB_genes table where the description column contains the string 'hgnc|VB'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VB_genes table where the description column contains the string 'hgnc|VB'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VB_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VB%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VB_genes table where the description column contains the string 'hgnc|VB'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VB_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VC_genes table where the description column contains the string 'hgnc|VC'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VC%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VC_genes table where the description column contains the string 'hgnc|VC'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VC_genes table where the description column contains the string 'hgnc|VC'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VC_genes table where the description column contains the string 'hgnc|VC'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VC_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VC%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VC_genes table where the description column contains the string 'hgnc|VC'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VC_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VD_genes table where the description column contains the string 'hgnc|VD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VD%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VD_genes table where the description column contains the string 'hgnc|VD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VD_genes table where the description column contains the string 'hgnc|VD'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VD_genes table where the description column contains the string 'hgnc|VD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VD_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VD_genes table where the description column contains the string 'hgnc|VD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VD_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VE_genes table where the description column contains the string 'hgnc|VE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VE%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VE_genes table where the description column contains the string 'hgnc|VE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VE_genes table where the description column contains the string 'hgnc|VE'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VE_genes table where the description column contains the string 'hgnc|VE'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VE_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VE_genes table where the description column contains the string 'hgnc|VE'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VE_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VG_genes table where the description column contains the string 'hgnc|VG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VG%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VG_genes table where the description column contains the string 'hgnc|VG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VG_genes table where the description column contains the string 'hgnc|VG'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VG_genes table where the description column contains the string 'hgnc|VG'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VG_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VG%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VG_genes table where the description column contains the string 'hgnc|VG'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VG_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VH_genes table where the description column contains the string 'hgnc|VH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VH%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VH_genes table where the description column contains the string 'hgnc|VH'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VH_genes table where the description column contains the string 'hgnc|VH'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VH_genes table where the description column contains the string 'hgnc|VH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VH_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VH_genes table where the description column contains the string 'hgnc|VH'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VH_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VI_genes table, where the description column contains the string 'hgnc|VI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VI%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VI_genes table, where the description column contains the string 'hgnc|VI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VI_genes table, where the description column contains the string 'hgnc|VI'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VI_genes table, where the description column contains the string 'hgnc|VI'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VI_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VI%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VI_genes table, where the description column contains the string 'hgnc|VI'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VI_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VK_genes table where the description column contains the string 'hgnc|VK'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VK%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VK_genes table where the description column contains the string 'hgnc|VK'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VK_genes table where the description column contains the string 'hgnc|VK'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VK_genes table where the description column contains the string 'hgnc|VK'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VK_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VK%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VK_genes table where the description column contains the string 'hgnc|VK'.\n\n-- Tests:\n-- 1. Verify new rows appear in new table\nSELECT * FROM ngs_feature_hg19_VK_genes\nWHERE description LIKE '%hgnc|VK%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VL_genes table where the description column contains the string 'hgnc|VL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VL%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VL_genes table where the description column contains the string 'hgnc|VL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VL_genes table where the description column contains the string 'hgnc|VL'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VL_genes table where the description column contains the string 'hgnc|VL'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VL_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VL%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VL_genes table where the description column contains the string 'hgnc|VL'.\n\n-- Tests:\n-- 1. Verify new rows appear in VL table\nSELECT * FROM ngs_feature_hg19_VL_genes\n  WHERE description LIKE '%hgnc|VL%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VM_genes table where the description column contains the string 'hgnc|VM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VM%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VM_genes table where the description column contains the string 'hgnc|VM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VM_genes table where the description column contains the string 'hgnc|VM'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VM_genes table where the description column contains the string 'hgnc|VM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VM_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VM_genes table where the description column contains the string 'hgnc|VM'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VM_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VN_genes table where the description column contains the string 'hgnc|VN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VN%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VN_genes table where the description column contains the string 'hgnc|VN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VN_genes table where the description column contains the string 'hgnc|VN'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VN_genes table where the description column contains the string 'hgnc|VN'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VN_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VN%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VN_genes table where the description column contains the string 'hgnc|VN'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VN_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VO_genes table where the description column contains the string 'hgnc|VO'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VO_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VO%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VO_genes table where the description column contains the string 'hgnc|VO'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VO_genes table where the description column contains the string 'hgnc|VO'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VO_genes table where the description column contains the string 'hgnc|VO'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VO_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VO%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VO_genes table where the description column contains the string 'hgnc|VO'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VO_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VP_genes table where the description column contains the string 'hgnc|VP'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VP%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VP_genes table where the description column contains the string 'hgnc|VP'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VP_genes table where the description column contains the string 'hgnc|VP'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VP_genes table where the description column contains the string 'hgnc|VP'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VP_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VP%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VP_genes table where the description column contains the string 'hgnc|VP'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VP_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VR_genes table where the description column contains the string 'hgnc|VR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VR%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VR_genes table where the description column contains the string 'hgnc|VR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VR_genes table where the description column contains the string 'hgnc|VR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VR_genes table where the description column contains the string 'hgnc|VR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VR_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VR_genes table where the description column contains the string 'hgnc|VR'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VR_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VS_genes table where the description column contains the string 'hgnc|VS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VS%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VS_genes table where the description column contains the string 'hgnc|VS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VS_genes table where the description column contains the string 'hgnc|VS'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VS_genes table where the description column contains the string 'hgnc|VS'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VS_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VS%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VS_genes table where the description column contains the string 'hgnc|VS'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VS_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VT_genes table, where the description column contains the string 'hgnc|VT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VT%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VT_genes table, where the description column contains the string 'hgnc|VT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VT_genes table, where the description column contains the string 'hgnc|VT'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VT_genes table, but only if the description column contains the string 'hgnc|VT'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VT_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VT%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VT_genes table, but only if the description column contains the string 'hgnc|VT'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_VT_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VW_genes table where the description column contains the string 'hgnc|VW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_VW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_V_genes WHERE description LIKE '%hgnc|VW%'", "description": "Inserts all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VW_genes table where the description column contains the string 'hgnc|VW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VW_genes table where the description column contains the string 'hgnc|VW'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VW_genes table where the description column contains the string 'hgnc|VW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_VW_genes\n  SELECT * FROM ngs_feature_hg19_V_genes\n  WHERE description LIKE '%hgnc|VW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_V_genes table into the ngs_feature_hg19_VW_genes table where the description column contains the string 'hgnc|VW'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_VW_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_W_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|W%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_W_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|W%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_W_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_W_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|W%'", "description": "Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|W'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|W%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|W' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|W%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WA_genes table where the description column contains the string 'hgnc|WA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WA%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WA_genes table where the description column contains the string 'hgnc|WA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WA_genes table where the description column contains the string 'hgnc|WA'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WA_genes table where the description column contains the string 'hgnc|WA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WA_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WA_genes table where the description column contains the string 'hgnc|WA'.\n\n-- Tests:\n-- 1. Verify new rows appear in WA table\nSELECT * FROM ngs_feature_hg19_WA_genes\n  WHERE description LIKE '%hgnc|WA%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WB%'", "description": "Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WB'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WB'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WB%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|WB' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WB%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WD_genes table where the description column contains the string 'hgnc|WD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WD%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WD_genes table where the description column contains the string 'hgnc|WD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WD_genes table where the description column contains the string 'hgnc|WD'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WD_genes table where the description column contains the string 'hgnc|WD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WD_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WD_genes table where the description column contains the string 'hgnc|WD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_WD_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WE_genes table, where the description column contains the string 'hgnc|WE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WE%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WE_genes table, where the description column contains the string 'hgnc|WE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WE_genes table, where the description column contains the string 'hgnc|WE'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WE_genes table. The description column should contain the string 'hgnc|WE' to indicate that the gene is a Wnt receptor.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WE_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WE_genes table, where the description column contains the string 'hgnc|WE'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_WE_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WF_genes table where the description column contains the string 'hgnc|WF'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WF_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WF%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WF_genes table where the description column contains the string 'hgnc|WF'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WF_genes table where the description column contains the string 'hgnc|WF'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WF_genes table where the description column contains the string 'hgnc|WF'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WF_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WF%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WF_genes table where the description column contains the string 'hgnc|WF'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_WF_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WH_genes table, where the description column contains the string 'hgnc|WH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WH%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WH_genes table, where the description column contains the string 'hgnc|WH'.", "concepts": ["INSERT INTO", "SELECT", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg19"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WH_genes table, where the description column contains the string 'hgnc|WH'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WH_genes table, where the description column contains the string 'hgnc|WH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WH_genes\nSELECT * FROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WH_genes table, where the description column contains the string 'hgnc|WH'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_WH_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WI_genes table where the description column contains the string 'hgnc|WI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WI%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WI_genes table where the description column contains the string 'hgnc|WI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WI_genes table where the description column contains the string 'hgnc|WI'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WI_genes table where the description column contains the string 'hgnc|WI'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WI_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WI%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WI_genes table where the description column contains the string 'hgnc|WI'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_WI_genes\nWHERE description LIKE '%hgnc|WI%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WL%'", "description": "Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WL'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WL'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WL%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|WL' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WL%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WN_genes table where the description column contains the string 'hgnc|WN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WN%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WN_genes table where the description column contains the string 'hgnc|WN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WN_genes table where the description column contains the string 'hgnc|WN'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WN_genes table where the description column contains the string 'hgnc|WN'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WN_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WN%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WN_genes table where the description column contains the string 'hgnc|WN'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_WN_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WR_genes table where the description column contains the string 'hgnc|WR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WR%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WR_genes table where the description column contains the string 'hgnc|WR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WR_genes table where the description column contains the string 'hgnc|WR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WR_genes table where the description column contains the string 'hgnc|WR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WR_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WR_genes table where the description column contains the string 'hgnc|WR'.\n\n-- Tests:\n-- 1. Verify new rows appear in WR table\nSELECT * FROM ngs_feature_hg19_WR_genes\nWHERE description LIKE '%hgnc|WR%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WS_genes table where the description column contains the string 'hgnc|WS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WS%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WS_genes table where the description column contains the string 'hgnc|WS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WS_genes table where the description column contains the string 'hgnc|WS'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WS_genes table where the description column contains the string 'hgnc|WS'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WS_genes\n  SELECT * FROM ngs_feature_hg19_W_genes\n  WHERE description LIKE '%hgnc|WS%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WS_genes table where the description column contains the string 'hgnc|WS'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_WS_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WT%'", "description": "Selects all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WT'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_W_genes table where the description column contains the string 'hgnc|WT'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WT%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|WT' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WT%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WW_genes table, where the description column contains the string 'hgnc|WW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_WW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_W_genes WHERE description LIKE '%hgnc|WW%'", "description": "Inserts all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WW_genes table, where the description column contains the string 'hgnc|WW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WW_genes table, where the description column contains the string 'hgnc|WW'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WW_genes table. The description column should contain the string 'hgnc|WW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_WW_genes\nSELECT * FROM ngs_feature_hg19_W_genes\nWHERE description LIKE '%hgnc|WW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_W_genes table into the ngs_feature_hg19_WW_genes table, where the description column contains the string 'hgnc|WW'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_WW_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|X'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_X_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|X%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|X'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|X'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|X'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_X_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|X%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|X'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_X_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XA_genes table, where the description column contains the string 'hgnc|XA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XA%'", "description": "Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XA_genes table, where the description column contains the string 'hgnc|XA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XA_genes table, where the description column contains the string 'hgnc|XA'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XA_genes table. The description column should contain the string 'hgnc|XA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_XA_genes\n  SELECT * FROM ngs_feature_hg19_X_genes\n  WHERE description LIKE '%hgnc|XA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XA_genes table, where the description column contains the string 'hgnc|XA'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_XA_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XB%'", "description": "Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XB'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XB'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XB%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|XB' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XB%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XC_genes table where the description column contains the string 'hgnc|XC'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XC%'", "description": "Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XC_genes table where the description column contains the string 'hgnc|XC'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XC_genes table where the description column contains the string 'hgnc|XC'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XC_genes table where the description column contains the string 'hgnc|XC'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_XC_genes\n  SELECT * FROM ngs_feature_hg19_X_genes\n  WHERE description LIKE '%hgnc|XC%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XC_genes table where the description column contains the string 'hgnc|XC'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_XC_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XD_genes table where the description column contains the string 'hgnc|XD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XD%'", "description": "Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XD_genes table where the description column contains the string 'hgnc|XD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XD_genes table where the description column contains the string 'hgnc|XD'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XD_genes table where the description column contains the string 'hgnc|XD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_XD_genes\n  SELECT * FROM ngs_feature_hg19_X_genes\n  WHERE description LIKE '%hgnc|XD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XD_genes table where the description column contains the string 'hgnc|XD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_XD_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XG%'", "description": "Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XG'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XG'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XG%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|XG' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XG%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XI_genes table where the description column contains the string 'hgnc|XI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XI%'", "description": "Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XI_genes table where the description column contains the string 'hgnc|XI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XI_genes table where the description column contains the string 'hgnc|XI'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XI_genes table where the description column contains the string 'hgnc|XI'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_XI_genes\n  SELECT * FROM ngs_feature_hg19_X_genes\n  WHERE description LIKE '%hgnc|XI%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XI_genes table where the description column contains the string 'hgnc|XI'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_XI_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XK'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XK%'", "description": "Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XK'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XK'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XK'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XK%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|XK' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XK%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XP'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XP%'", "description": "Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XP'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XP'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XP'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XP%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|XP' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_X_genes\nWHERE description LIKE '%hgnc|XP%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XR_genes table where the description column contains the string 'hgnc|XR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XR%'", "description": "Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XR_genes table where the description column contains the string 'hgnc|XR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XR_genes table where the description column contains the string 'hgnc|XR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XR_genes table where the description column contains the string 'hgnc|XR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_XR_genes\n  SELECT * FROM ngs_feature_hg19_X_genes\n  WHERE description LIKE '%hgnc|XR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XR_genes table where the description column contains the string 'hgnc|XR'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_XR_genes\nWHERE description LIKE '%hgnc|XR%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XX'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XX_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XX%'", "description": "Selects all rows from the ngs_feature_hg19_X_genes table where the description column contains the string 'hgnc|XX'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_XX_genes table where the description column contains the string 'hgnc|XX'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_XX_genes table where the description column contains the string 'hgnc|XX'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_XX_genes\nWHERE description LIKE '%hgnc|XX%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|XX' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_XX_genes\nWHERE description LIKE '%hgnc|XX%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XY_genes table, where the description column contains the string 'hgnc|XY'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_XY_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_X_genes WHERE description LIKE '%hgnc|XY%'", "description": "Inserts all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XY_genes table, where the description column contains the string 'hgnc|XY'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XY_genes table, where the description column contains the string 'hgnc|XY'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XY_genes table. The description column should contain the string 'hgnc|XY' to indicate that the gene is on the X chromosome.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_XY_genes\n  SELECT * FROM ngs_feature_hg19_X_genes\n  WHERE description LIKE '%hgnc|XY%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_X_genes table into the ngs_feature_hg19_XY_genes table, where the description column contains the string 'hgnc|XY'.\n\n-- Tests:\n-- 1. Verify new rows appear in the XY table\nSELECT * FROM ngs_feature_hg19_XY_genes\n  WHERE description LIKE '%hgnc|XY%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Y_genes table where the description column contains the string 'hgnc|Y'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_Y_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|Y%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Y_genes table where the description column contains the string 'hgnc|Y'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Y_genes table where the description column contains the string 'hgnc|Y'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Y_genes table where the description column contains the string 'hgnc|Y'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_Y_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|Y%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Y_genes table where the description column contains the string 'hgnc|Y'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_Y_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YA_genes table, where the description column contains the string 'hgnc|YA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YA%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YA_genes table, where the description column contains the string 'hgnc|YA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YA_genes table, where the description column contains the string 'hgnc|YA'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YA_genes table. The description column should contain the string 'hgnc|YA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YA_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YA_genes table, where the description column contains the string 'hgnc|YA'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YA_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YB_genes table where the description column contains the string 'hgnc|YB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YB%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YB_genes table where the description column contains the string 'hgnc|YB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YB_genes table where the description column contains the string 'hgnc|YB'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YB_genes table where the description column contains the string 'hgnc|YB'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YB_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YB%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YB_genes table where the description column contains the string 'hgnc|YB'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YB_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YD_genes table where the description column contains the string 'hgnc|YD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YD%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YD_genes table where the description column contains the string 'hgnc|YD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YD_genes table where the description column contains the string 'hgnc|YD'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YD_genes table where the description column contains the string 'hgnc|YD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YD_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YD_genes table where the description column contains the string 'hgnc|YD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YD_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YE_genes table, where the description column contains the string 'hgnc|YE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YE%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YE_genes table, where the description column contains the string 'hgnc|YE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YE_genes table, where the description column contains the string 'hgnc|YE'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YE_genes table. The description column should contain the string 'hgnc|YE' to indicate that the gene is a Y chromosome gene.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YE_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YE_genes table, where the description column contains the string 'hgnc|YE'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YE_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YI_genes table where the description column contains the string 'hgnc|YI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YI%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YI_genes table where the description column contains the string 'hgnc|YI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YI_genes table where the description column contains the string 'hgnc|YI'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YI_genes table where the description column contains the string 'hgnc|YI'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YI_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YI%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YI_genes table where the description column contains the string 'hgnc|YI'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YI_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YJ_genes table where the description column contains the string 'hgnc|YJ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YJ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YJ%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YJ_genes table where the description column contains the string 'hgnc|YJ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YJ_genes table where the description column contains the string 'hgnc|YJ'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YJ_genes table where the description column contains the string 'hgnc|YJ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YJ_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YJ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YJ_genes table where the description column contains the string 'hgnc|YJ'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YJ_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YK_genes table where the description column contains the string 'hgnc|YK'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YK%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YK_genes table where the description column contains the string 'hgnc|YK'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YK_genes table where the description column contains the string 'hgnc|YK'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YK_genes table where the description column contains the string 'hgnc|YK'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YK_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YK%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YK_genes table where the description column contains the string 'hgnc|YK'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YK_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YL_genes table where the description column contains the string 'hgnc|YL'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YL_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YL%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YL_genes table where the description column contains the string 'hgnc|YL'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YL_genes table where the description column contains the string 'hgnc|YL'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YL_genes table where the description column contains the string 'hgnc|YL'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YL_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YL%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YL_genes table where the description column contains the string 'hgnc|YL'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YL_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YM_genes table, where the description column contains the string 'hgnc|YM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YM%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YM_genes table, where the description column contains the string 'hgnc|YM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YM_genes table, where the description column contains the string 'hgnc|YM'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YM_genes table. The description column should contain the string 'hgnc|YM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YM_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YM_genes table, where the description column contains the string 'hgnc|YM'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YM_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YO_genes table where the description column contains the string 'hgnc|YO'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YO_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YO%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YO_genes table where the description column contains the string 'hgnc|YO'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YO_genes table where the description column contains the string 'hgnc|YO'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YO_genes table where the description column contains the string 'hgnc|YO'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YO_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YO%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YO_genes table where the description column contains the string 'hgnc|YO'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YO_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YP_genes table, where the description column contains the string 'hgnc|YP'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YP%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YP_genes table, where the description column contains the string 'hgnc|YP'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YP_genes table, where the description column contains the string 'hgnc|YP'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YP_genes table, where the description column contains the string 'hgnc|YP'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YP_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YP%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YP_genes table, where the description column contains the string 'hgnc|YP'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YP_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YR_genes table, where the description column contains the string 'hgnc|YR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YR%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YR_genes table, where the description column contains the string 'hgnc|YR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YR_genes table, where the description column contains the string 'hgnc|YR'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YR_genes table. The description column should contain the string 'hgnc|YR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YR_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YR_genes table, where the description column contains the string 'hgnc|YR'.\n\n-- Tests:\n-- 1. Verify new rows appear in new table\nSELECT * FROM ngs_feature_hg19_YR_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YS_genes table, where the description column contains the string 'hgnc|YS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YS%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YS_genes table, where the description column contains the string 'hgnc|YS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YS_genes table, where the description column contains the string 'hgnc|YS'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YS_genes table, where the description column contains the string 'hgnc|YS'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YS_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YS%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YS_genes table, where the description column contains the string 'hgnc|YS'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YS_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YT_genes table where the description column contains the string 'hgnc|YT'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YT_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YT%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YT_genes table where the description column contains the string 'hgnc|YT'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YT_genes table where the description column contains the string 'hgnc|YT'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YT_genes table where the description column contains the string 'hgnc|YT'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YT_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YT%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YT_genes table where the description column contains the string 'hgnc|YT'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YT_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YW_genes table where the description column contains the string 'hgnc|YW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YW%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YW_genes table where the description column contains the string 'hgnc|YW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YW_genes table where the description column contains the string 'hgnc|YW'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YW_genes table where the description column contains the string 'hgnc|YW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YW_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YW_genes table where the description column contains the string 'hgnc|YW'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YW_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YY_genes table where the description column contains the string 'hgnc|YY'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_YY_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Y_genes WHERE description LIKE '%hgnc|YY%'", "description": "Inserts all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YY_genes table where the description column contains the string 'hgnc|YY'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YY_genes table where the description column contains the string 'hgnc|YY'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YY_genes table where the description column contains the string 'hgnc|YY'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_YY_genes\n  SELECT * FROM ngs_feature_hg19_Y_genes\n  WHERE description LIKE '%hgnc|YY%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Y_genes table into the ngs_feature_hg19_YY_genes table where the description column contains the string 'hgnc|YY'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_YY_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|Z'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_Z_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|Z%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|Z'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "%", "%"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|Z'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|Z'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_Z_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|Z%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|Z'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_Z_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZA_genes table, where the description column contains the string 'hgnc|ZA'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZA_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZA%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZA_genes table, where the description column contains the string 'hgnc|ZA'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZA_genes table, where the description column contains the string 'hgnc|ZA'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZA_genes table. The description column should contain the string 'hgnc|ZA'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZA_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZA%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZA_genes table, where the description column contains the string 'hgnc|ZA'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZA_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZB_genes table, where the description column contains the string 'hgnc|ZB'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZB_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZB%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZB_genes table, where the description column contains the string 'hgnc|ZB'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZB_genes table, where the description column contains the string 'hgnc|ZB'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZB_genes table. The description column should contain the string 'hgnc|ZB'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZB_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZB%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZB_genes table, where the description column contains the string 'hgnc|ZB'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZB_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZC_genes table, where the description column contains the string 'hgnc|ZC'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZC_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZC%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZC_genes table, where the description column contains the string 'hgnc|ZC'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZC_genes table, where the description column contains the string 'hgnc|ZC'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZC_genes table, where the description column contains the string 'hgnc|ZC'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZC_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZC%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZC_genes table, where the description column contains the string 'hgnc|ZC'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZC_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZD_genes table, where the description column contains the string 'hgnc|ZD'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZD_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZD%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZD_genes table, where the description column contains the string 'hgnc|ZD'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZD_genes table, where the description column contains the string 'hgnc|ZD'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZD_genes table. The description column should contain the string 'hgnc|ZD'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZD_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZD%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZD_genes table, where the description column contains the string 'hgnc|ZD'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZD_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZE_genes table, where the description column contains the string 'hgnc|ZE'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZE_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZE%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZE_genes table, where the description column contains the string 'hgnc|ZE'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZE_genes table, where the description column contains the string 'hgnc|ZE'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZE_genes table, where the description column contains the string 'hgnc|ZE'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZE_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZE%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZE_genes table, where the description column contains the string 'hgnc|ZE'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZE_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZF_genes table, where the description column contains the string 'hgnc|ZF'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZF_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZF%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZF_genes table, where the description column contains the string 'hgnc|ZF'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZF_genes table, where the description column contains the string 'hgnc|ZF'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZF_genes table. The description column should contain the string 'hgnc|ZF'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZF_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZF%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZF_genes table, where the description column contains the string 'hgnc|ZF'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZF_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZG_genes table, where the description column contains the string 'hgnc|ZG'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZG_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZG%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZG_genes table, where the description column contains the string 'hgnc|ZG'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZG_genes table, where the description column contains the string 'hgnc|ZG'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZG_genes table. The description column should contain the string 'hgnc|ZG'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZG_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZG%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZG_genes table, where the description column contains the string 'hgnc|ZG'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZG_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZH_genes table, where the description column contains the string 'hgnc|ZH'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZH_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZH%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZH_genes table, where the description column contains the string 'hgnc|ZH'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZH_genes table, where the description column contains the string 'hgnc|ZH'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZH_genes table. The description column should contain the string 'hgnc|ZH'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZH_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZH%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZH_genes table, where the description column contains the string 'hgnc|ZH'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZH_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZI'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZI_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZI%'", "description": "Selects all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZI'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZI'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZI'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_Z_genes\nWHERE description LIKE '%hgnc|ZI%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|ZI' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_Z_genes\nWHERE description LIKE '%hgnc|ZI%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZK_genes table, where the description column contains the string 'hgnc|ZK'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZK_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZK%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZK_genes table, where the description column contains the string 'hgnc|ZK'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZK_genes table, where the description column contains the string 'hgnc|ZK'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZK_genes table, where the description column contains the string 'hgnc|ZK'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZK_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZK%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZK_genes table, where the description column contains the string 'hgnc|ZK'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZK_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZM_genes table, where the description column contains the string 'hgnc|ZM'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZM_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZM%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZM_genes table, where the description column contains the string 'hgnc|ZM'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZM_genes table, where the description column contains the string 'hgnc|ZM'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZM_genes table. The description column should contain the string 'hgnc|ZM'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZM_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZM%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZM_genes table, where the description column contains the string 'hgnc|ZM'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZM_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZN'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZN_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZN%'", "description": "Selects all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZN'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZN'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZN'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_Z_genes\nWHERE description LIKE '%hgnc|ZN%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|ZN' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_Z_genes\nWHERE description LIKE '%hgnc|ZN%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZP'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZP_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZP%'", "description": "Selects all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZP'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZP'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_Z_genes table where the description column contains the string 'hgnc|ZP'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_Z_genes\nWHERE description LIKE '%hgnc|ZP%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|ZP' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_Z_genes\nWHERE description LIKE '%hgnc|ZP%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZR_genes table, where the description column contains the string 'hgnc|ZR'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZR_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZR%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZR_genes table, where the description column contains the string 'hgnc|ZR'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZR_genes table, where the description column contains the string 'hgnc|ZR'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZR_genes table, where the description column contains the string 'hgnc|ZR'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZR_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZR%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZR_genes table, where the description column contains the string 'hgnc|ZR'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZR_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZS_genes table, where the description column contains the string 'hgnc|ZS'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZS_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZS%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZS_genes table, where the description column contains the string 'hgnc|ZS'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZS_genes table, where the description column contains the string 'hgnc|ZS'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZS_genes table, where the description column contains the string 'hgnc|ZS'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZS_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZS%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZS_genes table, where the description column contains the string 'hgnc|ZS'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZS_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZU_genes table, where the description column contains the string 'hgnc|ZU'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZU_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZU%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZU_genes table, where the description column contains the string 'hgnc|ZU'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZU_genes table, where the description column contains the string 'hgnc|ZU'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZU_genes table, where the description column contains the string 'hgnc|ZU'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZU_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZU%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZU_genes table, where the description column contains the string 'hgnc|ZU'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZU_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZW_genes table, where the description column contains the string 'hgnc|ZW'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZW_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZW%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZW_genes table, where the description column contains the string 'hgnc|ZW'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZW_genes table, where the description column contains the string 'hgnc|ZW'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZW_genes table, where the description column contains the string 'hgnc|ZW'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZW_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZW%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZW_genes table, where the description column contains the string 'hgnc|ZW'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZW_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZX_genes table, where the description column contains the string 'hgnc|ZX'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZX_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZX%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZX_genes table, where the description column contains the string 'hgnc|ZX'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZX_genes table, where the description column contains the string 'hgnc|ZX'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZX_genes table. The description column should contain the string 'hgnc|ZX'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZX_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZX%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZX_genes table, where the description column contains the string 'hgnc|ZX'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZX_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZY_genes table, where the description column contains the string 'hgnc|ZY'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZY_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZY%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZY_genes table, where the description column contains the string 'hgnc|ZY'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZY_genes table, where the description column contains the string 'hgnc|ZY'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZY_genes table, where the description column contains the string 'hgnc|ZY'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZY_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZY%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZY_genes table, where the description column contains the string 'hgnc|ZY'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZY_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZZ_genes table, where the description column contains the string 'hgnc|ZZ'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ZZ_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_Z_genes WHERE description LIKE '%hgnc|ZZ%'", "description": "Inserts all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZZ_genes table, where the description column contains the string 'hgnc|ZZ'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZZ_genes table, where the description column contains the string 'hgnc|ZZ'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZZ_genes table. The description column should contain the string 'hgnc|ZZ'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ZZ_genes\n  SELECT * FROM ngs_feature_hg19_Z_genes\n  WHERE description LIKE '%hgnc|ZZ%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_Z_genes table into the ngs_feature_hg19_ZZ_genes table, where the description column contains the string 'hgnc|ZZ'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ZZ_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_a_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|a%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_a_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|a%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_a_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_a_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_a_genes WHERE description LIKE '%hgnc|a%'", "description": "Selects all rows from the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_a_genes table where the description column contains the string 'hgnc|a'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_a_genes\nWHERE description LIKE '%hgnc|a%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|a' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_a_genes\nWHERE description LIKE '%hgnc|a%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_a_genes table into the ngs_feature_hg19_ab_genes table where the description column contains the string 'hgnc|ab'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ab_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_a_genes WHERE description LIKE '%hgnc|ab%'", "description": "Inserts all rows from the ngs_feature_hg19_a_genes table into the ngs_feature_hg19_ab_genes table where the description column contains the string 'hgnc|ab'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_a_genes table into the ngs_feature_hg19_ab_genes table where the description column contains the string 'hgnc|ab'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_a_genes table into the ngs_feature_hg19_ab_genes table where the description column contains the string 'hgnc|ab'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_ab_genes\n  SELECT * FROM ngs_feature_hg19_a_genes\n  WHERE description LIKE '%hgnc|ab%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_a_genes table into the ngs_feature_hg19_ab_genes table where the description column contains the string 'hgnc|ab'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_ab_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|b'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_b_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|b%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|b'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|b'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|b'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_b_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|b%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|b'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_b_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|bp'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_bp_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_b_genes WHERE description LIKE '%hgnc|bp%'", "description": "Selects all rows from the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|bp'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|bp'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_b_genes table where the description column contains the string 'hgnc|bp'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_b_genes\nWHERE description LIKE '%hgnc|bp%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|bp' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_b_genes\nWHERE description LIKE '%hgnc|bp%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_c_genes table where the description column contains the string 'hgnc|c'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_c_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|c%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_c_genes table where the description column contains the string 'hgnc|c'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_c_genes table where the description column contains the string 'hgnc|c'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_c_genes table where the description column contains the string 'hgnc|c'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_c_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|c%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_c_genes table where the description column contains the string 'hgnc|c'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_c_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_c_genes table into the ngs_feature_hg19_cy_genes table where the description column contains the string 'hgnc|cy'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_cy_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_c_genes WHERE description LIKE '%hgnc|cy%'", "description": "Inserts all rows from the ngs_feature_hg19_c_genes table into the ngs_feature_hg19_cy_genes table where the description column contains the string 'hgnc|cy'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_c_genes table into the ngs_feature_hg19_cy_genes table where the description column contains the string 'hgnc|cy'.", "response": "-- Reasoning:\nWe need to copy all rows from the ngs_feature_hg19_c_genes table into the ngs_feature_hg19_cy_genes table where the description column contains the string 'hgnc|cy'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_cy_genes\n  SELECT * FROM ngs_feature_hg19_c_genes\n  WHERE description LIKE '%hgnc|cy%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_c_genes table into the ngs_feature_hg19_cy_genes table where the description column contains the string 'hgnc|cy'.\n\n-- Tests:\n-- 1. Verify new rows appear in the new table\nSELECT * FROM ngs_feature_hg19_cy_genes\nWHERE description LIKE '%hgnc|cy%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_h_genes table, where the description column contains the string 'hgnc|h'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_h_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|h%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_h_genes table, where the description column contains the string 'hgnc|h'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_h_genes table, where the description column contains the string 'hgnc|h'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_h_genes table, where the description column contains the string 'hgnc|h'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_h_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|h%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_h_genes table, where the description column contains the string 'hgnc|h'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_h_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19_h_genes table into the ngs_feature_hg19_hs_genes table, where the description column contains the string 'hgnc|hs'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_hs_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_h_genes WHERE description LIKE '%hgnc|hs%'", "description": "Inserts all rows from the ngs_feature_hg19_h_genes table into the ngs_feature_hg19_hs_genes table, where the description column contains the string 'hgnc|hs'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19_h_genes table into the ngs_feature_hg19_hs_genes table, where the description column contains the string 'hgnc|hs'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19_h_genes table into the ngs_feature_hg19_hs_genes table. The description column should contain the string 'hgnc|hs'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_hs_genes\nSELECT * FROM ngs_feature_hg19_h_genes\nWHERE description LIKE '%hgnc|hs%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19_h_genes table into the ngs_feature_hg19_hs_genes table, where the description column contains the string 'hgnc|hs'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_hs_genes;"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|i'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_i_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|i%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|i'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|i'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|i'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_i_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|i%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|i'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_i_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|im'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_im_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_i_genes WHERE description LIKE '%hgnc|im%'", "description": "Selects all rows from the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|im'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|im'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_i_genes table where the description column contains the string 'hgnc|im'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_i_genes\nWHERE description LIKE '%hgnc|im%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|im' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_i_genes\nWHERE description LIKE '%hgnc|im%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|m'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_m_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|m%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|m'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|m'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|m'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_m_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|m%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|m'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_m_genes;"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|mi'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_mi_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_m_genes WHERE description LIKE '%hgnc|mi%'", "description": "Selects all rows from the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|mi'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|mi'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_m_genes table where the description column contains the string 'hgnc|mi'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_m_genes\nWHERE description LIKE '%hgnc|mi%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|mi' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_m_genes\nWHERE description LIKE '%hgnc|mi%';"}
{"seed": "/* Selects all rows from the ngs_feature_hg19_p_genes table where the description column contains the string 'hgnc|ps'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_ps_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19_p_genes WHERE description LIKE '%hgnc|ps%'", "description": "Selects all rows from the ngs_feature_hg19_p_genes table where the description column contains the string 'hgnc|ps'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE"], "instruction": "Write a SQL query to select all rows from the ngs_feature_hg19_p_genes table where the description column contains the string 'hgnc|ps'.", "response": "-- Reasoning:\nWe need to select all rows from the ngs_feature_hg19_p_genes table where the description column contains the string 'hgnc|ps'.\n\n-- Solution:\n```sql\nSELECT *\nFROM ngs_feature_hg19_p_genes\nWHERE description LIKE '%hgnc|ps%';\n```\n\n-- Explanation:\nThis query uses the LIKE operator to search for the string 'hgnc|ps' in the description column.\n\n-- Tests:\n-- 1. Verify the query returns the correct rows\nSELECT *\nFROM ngs_feature_hg19_p_genes\nWHERE description LIKE '%hgnc|ps%';"}
{"seed": "/* Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_t_genes table, where the description column contains the string 'hgnc|t'. */\nINSERT INTO genometrax_schema_2018_2.ngs_feature_hg19_t_genes SELECT * FROM genometrax_schema_2018_2.ngs_feature_hg19 WHERE description LIKE '%hgnc|t%'", "description": "Inserts all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_t_genes table, where the description column contains the string 'hgnc|t'.", "concepts": ["INSERT INTO", "SELECT", "FROM", "WHERE", "LIKE", "genometrax_schema_2018_2", "ngs_feature_hg"], "instruction": "Write a SQL query to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_t_genes table, where the description column contains the string 'hgnc|t'.", "response": "-- Reasoning:\nWe need to insert all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_t_genes table. The description column should contain the string 'hgnc|t'.\n\n-- Solution:\n```sql\nINSERT INTO ngs_feature_hg19_t_genes\n  SELECT * FROM ngs_feature_hg19\n  WHERE description LIKE '%hgnc|t%';\n```\n\n-- Explanation:\nThis INSERT statement copies all rows from the ngs_feature_hg19 table into the ngs_feature_hg19_t_genes table where the description column contains the string 'hgnc|t'.\n\n-- Tests:\n-- 1. Verify new table has correct rows\nSELECT COUNT(*) FROM ngs_feature_hg19_t_genes;"}
{"seed": "/* Inserts a new user into the users table. */\nINSERT INTO USERS (username, password, first_name, last_name, email, enabled, last_password_reset_date) VALUES ('user', '$2a$04$Vbug2lwwJGrvUXTj6z7ff.97IzVBkrJ1XfApfGNl.Z695zqcnPYra', 'Marko', 'Markovic', 'user@example.com', true, '2017-10-01 21:58:58.508-07')", "description": "Inserts a new user into the users table.", "concepts": ["INSERT INTO", "VALUES", "USERS", "username", "password", "first_name", "last_name", "email", "enabled", "last_password_reset_"], "instruction": "Write a SQL query to insert a new user into the users table.", "response": "-- Reasoning:\nWe need to insert a new user into the users table.\n\n-- Solution:\n```sql\nINSERT INTO users (name, email)\nVALUES ('', '');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new user into the users table with the given name and email.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new role named ROLE_USER into the ROLE table. */\nINSERT INTO ROLE (name) VALUES ('ROLE_USER')", "description": "Inserts a new role named ROLE_USER into the ROLE table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new role named ROLE_USER into the ROLE table.", "response": "-- Reasoning:\nWe need to insert a new role into the ROLE table. It should have a name of ROLE_USER.\n\n-- Solution:\n```sql\nINSERT INTO ROLE (name)\nVALUES ('ROLE_USER');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the ROLE table with a name of ROLE_USER.\n\n-- Tests:\n-- 1. Verify new role appears in table\nSELECT * FROM ROLE;"}
{"seed": "/* Inserts a new role named ROLE_ADMIN into the ROLE table. */\nINSERT INTO ROLE (name) VALUES ('ROLE_ADMIN')", "description": "Inserts a new role named ROLE_ADMIN into the ROLE table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new role named ROLE_ADMIN into the ROLE table.", "response": "-- Reasoning:\nWe need to insert a new role into the ROLE table. It should have a name of ROLE_ADMIN.\n\n-- Solution:\n```sql\nINSERT INTO ROLE (name)\nVALUES ('ROLE_ADMIN');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the ROLE table with a name of ROLE_ADMIN.\n\n-- Tests:\n-- 1. Verify new role exists\nSELECT * FROM ROLE;"}
{"seed": "/* Inserts a new row into the user_role table with the user_id and role_id of 1. */\nINSERT INTO USER_ROLE (user_id, role_id) VALUES (1, 1)", "description": "Inserts a new row into the user_role table with the user_id and role_id of 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the user_role table with the user_id and role_id of 1.", "response": "-- Reasoning:\nWe need to insert a new row into the user_role table. It should have the user_id and role_id of 1.\n\n-- Solution:\n```sql\nINSERT INTO user_role (user_id, role_id)\nVALUES (1, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the user_role table with the user_id and role_id of 1.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM user_role;"}
{"seed": "/* Inserts a new row into the user_role table with the user_id and role_id of 2 and 1 respectively. */\nINSERT INTO USER_ROLE (user_id, role_id) VALUES (2, 1)", "description": "Inserts a new row into the user_role table with the user_id and role_id of 2 and 1 respectively.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the user_role table with the user_id and role_id of 2. */\nINSERT INTO USER_ROLE (user_id, role_id) VALUES (2, 2)", "description": "Inserts a new row into the user_role table with the user_id and role_id of 2.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the user_role table with the user_id and role_id of 2.", "response": "-- Reasoning:\nWe need to insert a new row into the user_role table. It should have the user_id and role_id of 2.\n\n-- Solution:\n```sql\nINSERT INTO user_role (user_id, role_id)\nVALUES (2, 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the user_role table with the user_id and role_id of 2.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM user_role;"}
{"seed": "/* Creates a table named users with five columns: id (integer primary key), username (varchar), firstname (varchar), lastname (varchar), email (varchar), and password (varchar). */\nCREATE TABLE users (id SERIAL PRIMARY KEY, username VARCHAR(60), firstname VARCHAR(60), lastname VARCHAR(60), email VARCHAR(60), password VARCHAR(140))", "description": "Creates a table named users with five columns: id (integer primary key), username (varchar), firstname (varchar), lastname (varchar), email (varchar), and password (varchar).", "concepts": ["CREATE TABLE", "SERIAL", "PRIMARY KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named users with five columns: id (integer primary key), username (varchar), firstname (varchar), lastname (varchar), email (varchar), and password (varchar).", "response": "-- Reasoning:\nWe need a new table named users. It should have an integer primary key so that each user has a unique identifier, and a username, firstname, lastname, email, and password column to store the user\u2019s information.\n\n-- Solution:\n```sql\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  username VARCHAR(255),\n  firstname VARCHAR(255),\n  lastname VARCHAR(255),\n  email VARCHAR(255),\n  password VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the users table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 username: variable\u2010length string up to 255 characters\n  \u2022 firstname: variable\u2010length string up to 255 characters\n  \u2022 lastname: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 password: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('users');"}
{"seed": "/* Updates the status of all members who are not in the Closed, Cancelled, Not Required, or TBC status and who do not have any payments. */\nupdate members set status = 'TBC'\nwhere status not in ('Closed', 'Cancelled', 'Not Required', 'TBC')\nand id not in (select member_id from payments where member_id is not null)", "description": "Updates the status of all members who are not in the Closed, Cancelled, Not Required, or TBC status and who do not have any payments.", "concepts": ["UPDATE", "SET", "WHERE", "IN", "NOT", "AND", "OR", "NOT IN", "NOT NULL", "NULL", "IS", "AS", "FROM", "JOIN"], "instruction": "Write a SQL query to update the status of all members who are not in the Closed, Cancelled, Not Required, or TBC status and who do not have any payments.", "response": "-- Reasoning:\nWe need to update the status of all members who are not in the Closed, Cancelled, Not Required, or TBC status and who do not have any payments.\n\n-- Solution:\n```sql\nUPDATE members\nSET status = 'Not Paid'\nWHERE status NOT IN ('Closed', 'Cancelled', 'Not Required', 'TBC')\nAND payment_id IS NULL;\n```\n\n-- Explanation:\nThis UPDATE statement updates the status of all members who are not in the Closed, Cancelled, Not Required, or TBC status and who do not have any payments.\n\n-- Tests:\n-- 1. Verify status is updated\nSELECT * FROM members WHERE status = 'Not Paid';"}
{"seed": "/* Inserts a new student with id 11, first name Jack, and last name Peterson into the student table. */\ninsert into student(STUDENTID,firstName,lastName) values(11,'Jack','Peterson')", "description": "Inserts a new student with id 11, first name Jack, and last name Peterson into the student table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new student with id 11, first name Jack, and last name Peterson into the student table.", "response": "-- Reasoning:\nWe need to insert a new student into the student table. The student should have an id of 11, a first name of Jack, and a last name of Peterson.\n\n-- Solution:\n```sql\nINSERT INTO student (id, first_name, last_name)\nVALUES (11, 'Jack', 'Peterson');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the student table with the given values.\n\n-- Tests:\n-- 1. Verify new student appears in table\nSELECT * FROM student;"}
{"seed": "/* Inserts a new student record into the student table with the given values. */\ninsert into student(STUDENTID,firstName,lastName) values(12,'Peter','Hamilton')", "description": "Inserts a new student record into the student table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new student record into the student table with the given values.", "response": "-- Reasoning:\nWe need to insert a new student record into the student table. The student has a name, a gender, and a date of birth.\n\n-- Solution:\n```sql\nINSERT INTO student (name, gender, dob)\nVALUES ('John', 'M', '2000-01-01');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the student table with the given values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM student;"}
{"seed": "/* Inserts a new row into the subject table with the subjectId 1 and name 'Mathematics'. */\ninsert into subject(subjectId,name) values(1,'Mathematics')", "description": "Inserts a new row into the subject table with the subjectId 1 and name 'Mathematics'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the subject table with the subjectId 1 and name 'Mathematics'.", "response": "-- Reasoning:\nWe need to insert a new row into the subject table. It should have a subjectId of 1 and a name of 'Mathematics'.\n\n-- Solution:\n```sql\nINSERT INTO subject (subjectId, name)\nVALUES (1, 'Mathematics');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the subject table with:\n  \u2022 subjectId: 1\n  \u2022 name: 'Mathematics'\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM subject;"}
{"seed": "/* Inserts a new row into the subject table with the subjectId 2 and name Computer. */\ninsert into subject(subjectId,name) values(2,'Computer')", "description": "Inserts a new row into the subject table with the subjectId 2 and name Computer.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the subject table with the subjectId 2 and name Computer.", "response": "-- Reasoning:\nWe need to insert a new row into the subject table. It should have a subjectId of 2 and a name of Computer.\n\n-- Solution:\n```sql\nINSERT INTO subject (subjectId, name)\nVALUES (2, 'Computer');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the subject table with:\n  \u2022 subjectId: 2\n  \u2022 name: Computer\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM subject;"}
{"seed": "/* Inserts a new row into the student_subject table with the student_id 11 and subject_id 1. */\ninsert into student_subject(STUDENT_ID,SUBJECT_ID) values(11,1)", "description": "Inserts a new row into the student_subject table with the student_id 11 and subject_id 1.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert a new row into the student_subject table with the student_id 11 and subject_id 1.", "response": "-- Reasoning:\nWe need to insert a new row into the student_subject table. It should have a student_id of 11 and a subject_id of 1.\n\n-- Solution:\n```sql\nINSERT INTO student_subject (student_id, subject_id)\nVALUES (11, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the student_subject table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM student_subject;"}
{"seed": "/* Inserts a new row into the student_subject table with the student_id 11 and subject_id 2. */\ninsert into student_subject(STUDENT_ID,SUBJECT_ID) values(11,2)", "description": "Inserts a new row into the student_subject table with the student_id 11 and subject_id 2.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert a new row into the student_subject table with the student_id 11 and subject_id 2.", "response": "-- Reasoning:\nWe need to insert a new row into the student_subject table. It should have a student_id of 11 and a subject_id of 2.\n\n-- Solution:\n```sql\nINSERT INTO student_subject (student_id, subject_id)\nVALUES (11, 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the student_subject table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM student_subject;"}
{"seed": "/* Inserts a new row into the student_subject table with the student_id 12 and subject_id 1. */\ninsert into student_subject(STUDENT_ID,SUBJECT_ID) values(12,1)", "description": "Inserts a new row into the student_subject table with the student_id 12 and subject_id 1.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert a new row into the student_subject table with the student_id 12 and subject_id 1.", "response": "-- Reasoning:\nWe need to insert a new row into the student_subject table. It should have a student_id of 12 and a subject_id of 1.\n\n-- Solution:\n```sql\nINSERT INTO student_subject (student_id, subject_id)\nVALUES (12, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the student_subject table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM student_subject;"}
{"seed": "/* Inserts a new row into the student_subject table with the student_id 12 and subject_id 2. */\ninsert into student_subject(STUDENT_ID,SUBJECT_ID) values(12,2)", "description": "Inserts a new row into the student_subject table with the student_id 12 and subject_id 2.", "concepts": ["insert into", "values"], "instruction": "Write a SQL query to insert a new row into the student_subject table with the student_id 12 and subject_id 2.", "response": "-- Reasoning:\nWe need to insert a new row into the student_subject table. It should have a student_id of 12 and a subject_id of 2.\n\n-- Solution:\n```sql\nINSERT INTO student_subject (student_id, subject_id)\nVALUES (12, 2);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the student_subject table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM student_subject;"}
{"seed": "/* Drops the table buildings if it exists. */\nDROP TABLE IF EXISTS `buildings`", "description": "Drops the table buildings if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the buildings table if it exists.", "response": "-- Reasoning:\nWe need to drop the buildings table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS buildings;\n```\n\n-- Explanation:\nThis DROP statement removes the buildings table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('buildings');"}
{"seed": "/* Creates a table named buildings with 27 columns: id (integer primary key), name (varchar), ax (integer), ay (integer), doorx (integer), doory (integer), kind (integer), silver (integer), sx (integer), sy (integer), IsStore (integer), deleted (integer), rate (float), repairCost (integer), des (varchar), goodsList (varchar), switchable (integer), needFindBuild (integer), showInc (integer), buy */\nCREATE TABLE `buildings` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) COLLATE utf8mb4_bin NOT NULL,\n  `ax` int(11) NOT NULL DEFAULT '64',\n  `ay` int(11) NOT NULL DEFAULT '0',\n  `doorx` int(11) NOT NULL DEFAULT '0',\n  `doory` int(11) NOT NULL DEFAULT '0',\n  `kind` int(11) NOT NULL DEFAULT '0' COMMENT 'MiaoPath\u91cc\u9762\u786e\u5b9a\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u76ee\u6807\u5efa\u7b51\u7269',\n  `silver` int(11) NOT NULL DEFAULT '0',\n  `sx` int(11) NOT NULL DEFAULT '1',\n  `sy` int(11) NOT NULL DEFAULT '1',\n  `IsStore` int(11) NOT NULL DEFAULT '0',\n  `deleted` int(11) NOT NULL DEFAULT '0',\n  `rate` float NOT NULL DEFAULT '1',\n  `repairCost` int(11) NOT NULL DEFAULT '2',\n  `des` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `goodsList` varchar(100) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `switchable` tinyint(4) NOT NULL DEFAULT '1',\n  `needFindBuild` tinyint(4) NOT NULL DEFAULT '0',\n  `showInc` int(11) NOT NULL DEFAULT '1',\n  `buyPrice` int(11) NOT NULL DEFAULT '0' COMMENT '\u5546\u5e97\u8d2d\u4e70\u7684\u4ef7\u683c',\n  `isProduct` int(11) NOT NULL DEFAULT '0',\n  `effect` int(11) NOT NULL DEFAULT '0',\n  `tab` int(11) NOT NULL DEFAULT '0',\n  `countNum` int(11) NOT NULL DEFAULT '0',\n  `buyable` int(11) NOT NULL DEFAULT '0',\n  `buyAll` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named buildings with 27 columns: id (integer primary key), name (varchar), ax (integer), ay (integer), doorx (integer), doory (integer), kind (integer), silver (integer), sx (integer), sy (integer), IsStore (integer), deleted (integer), rate (float), repairCost (integer), des (varchar), goodsList (varchar), switchable (integer), needFindBuild (integer), showInc (integer), buy", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named buildings with 27 columns: id (integer primary key), name (varchar), ax (integer), ay (integer), doorx (integer), doory (integer), kind (integer), silver (integer), sx (integer), sy (integer), IsStore (integer), deleted (integer), rate (float), repairCost (integer), des (varchar), goodsList (varchar), switchable (integer), needFindBuild (integer), showInc (integer), buy, isProduct (integer), effect (integer), tab (integer), countNum (integer), buyable (integer), buyAll (integer).", "response": "-- Reasoning:\nWe need a new table named buildings. It should have an integer primary key so that each building has a unique identifier, and a name column to store the building\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE buildings (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  ax INT,\n  ay INT,\n  doorx INT,\n  doory INT,\n  kind INT,\n  silver INT,\n  sx INT,\n  sy INT,\n  IsStore INT,\n  deleted INT,\n  rate FLOAT,\n  repairCost INT,\n  des VARCHAR(255),\n  goodsList VARCHAR(255),\n  switchable INT,\n  needFindBuild INT,\n  showInc INT,\n  buy INT,\n  isProduct INT,\n  effect INT,\n  tab INT,\n  countNum INT,\n  buyable INT,\n  buyAll INT\n);\n```\n\n-- Explanation:\nThis statement defines the buildings table with 27 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 ax: integer\n  \u2022 ay: integer\n  \u2022 doorx: integer\n  \u2022 doory: integer\n  \u2022 kind: integer\n  \u2022 silver: integer\n  \u2022 sx: integer\n  \u2022 sy: integer\n  \u2022 IsStore: integer\n  \u2022 deleted: integer\n  \u2022"}
{"seed": "/* Creates a table named buildings with 22 columns: id (integer primary key), name (varchar), x (integer), y (integer), z (integer), hp (integer), mp (integer), max_hp (integer), max_mp (integer), type (integer), level (integer), price (integer), owner (integer), description (varchar), effect (varchar), effect_level (integer), effect_type (integer), effect_value (integer), effect_time ( */\nINSERT INTO `buildings` VALUES (1,'\u519c\u5bb6',313,298,47,107,5,40,1,1,0,0,1,2,'','[]',1,0,1,0,0,0,0,0,0,0),(2,'\u519c\u7530',61,36,0,0,0,10,1,1,2,0,1,2,'','[35]',0,1,1,0,1,0,1,0,0,1),(3,'\u6865\u6881',64,0,0,0,2,500,1,1,0,0,1,2,'\u4f9b\u4eba\u5728\u4e0a\u9762\u884c\u8d70','[]',0,0,1,0,0,0,0,0,0,0),(4,'\u6a31\u82b1\u6811',34,85,0,0,4,0,1,1,0,0,1,2,'\u7ed9\u4e88\u5468\u56f4\u597d\u7684\u5f71\u54cd','[]',0,0,1,0,0,2,0,0,0,0),(5,'\u5de5\u5382',77,62,0,0,0,100,1,1,0,0,1,2,'','[]',1,0,1,0,1,0,1,0,0,0),(6,'\u9152\u5c4b',66,93,0,0,0,100,1,1,1,0,1,2,'','[5, 6, 7, 8]',1,1,1,0,0,0,2,0,0,0),(7,'\u996e\u6599\u5e97',32,66,0,0,0,100,1,1,1,0,1,2,'','[9,10,11,12]',1,1,1,0,0,0,2,0,0,0),(8,'\u5927\u5b85',32,93,0,0,5,100,1,1,0,0,1.5,2,'','[]',1,0,1,0,0,0,0,0,0,0),(9,'\u9053\u5177\u5c4b',32,95,0,0,0,100,1,1,1,0,1,2,'','[16, 17, 18, 19]',1,1,1,0,0,0,2,0,0,0),(10,'\u953b\u9020\u5c4b',34,95,0,0,0,200,1,1,1,0,1,2,'','[24, 25, 26, 27]',1,1,1,0,0,0,2,0,0,0),(11,'\u8336\u5c4b',21,38,0,0,0,50,1,1,1,0,1,2,'','[1, 2, 3, 4]',1,1,1,0,0,0,2,0,0,0),(12,'\u91c7\u77ff\u573a',28,105,0,0,0,100,2,1,3,0,1,2,'','[36]',1,1,1,0,1,0,1,0,0,1),(13,'\u670d\u88c5\u5e97',62,90,0,0,0,250,1,1,1,0,1,2,'','[20, 21, 22, 23]',1,1,1,0,0,0,2,0,0,0),(14,'\u8c6a\u5b85',58,210,0,0,5,200,1,1,0,0,2,2,'','[]',1,0,1,0,0,0,0,0,0,0),(15,'\u9053\u8def',64,0,0,0,3,5,1,1,0,0,1,2,'','[]',0,0,1,0,0,0,0,0,0,0),(16,'\u753b\u822b',76,78,0,0,0,100,1,1,1,0,1,2,'','[32,33,34]',1,1,1,0,0,0,2,0,0,0),(17,'\u7279\u4ea7\u5e97',76,79,0,0,0,100,1,1,1,0,1,2,'','[13, 14, 15]',1,1,1,0,0,0,2,0,0,0),(18,'\u6742\u8d27\u5e97',71,70,0,0,0,100,1,1,1,0,1,2,'','[28, 29, 30, 31]',1,1,1,0,0,0,2,0,0,0),(19,'\u4f10\u6728\u573a',54,81,0,0,0,0,2,1,5,0,1,2,'','[37]',1,1,1,0,1,0,1,0,0,1),(20,'\u79fb\u9664\u5efa\u7b51\u7269',64,0,0,0,0,0,1,1,0,1,1,2,'','[]',1,0,1,0,0,0,0,0,0,0),(21,'\u79fb\u52a8\u5efa\u7b51\u7269',64,0,0,0,0,20,1,1,0,1,1,2,'','[]',1,0,1,0,0,0,0,0,0,0),(22,'\u7bf1\u7b06',64,0,0,0,10,0,1,1,0,1,1,2,'','[]',1,0,1,0,0,0,0,0,0,0),(24,'\u8def\u706f',64,0,0,0,11,150,1,1,0,0,1,2,'\u5468\u56f4\u7530\u5730\u3001\u5de5\u623f\u751f\u4ea7\u529b\u63d0\u5347\uff0c\u6548\u679c2\u683c\uff0c\u63d0\u53471.3\u500d','[]',1,0,0,200,0,6,0,1,1,0),(25,'\u82b1\u4e1b',64,0,0,0,4,100,1,1,0,0,1,2,'\u5468\u56f4\u5efa\u7b51\u80fd\u529b\u63d0\u5347\uff0c\u6548\u679c2\u683c\uff0c\u63d0\u53471.2\u500d','[]',1,0,0,100,0,4,0,1,1,0),(26,'\u6c34\u6c60',64,0,0,0,12,200,1,1,0,0,1,2,'\u5468\u56f4\u4f4f\u5b85\u4f53\u529b\u56de\u590d\u901f\u5ea6\u63d0\u5347\uff0c\u6548\u679c2\u683c\uff0c\u63d0\u53471.4\u500d','[]',1,0,0,250,0,8,0,1,1,0),(27,'\u82b1\u9f13',153,337,0,0,13,100,1,1,0,0,1,2,'\u5468\u56f4\u7530\u5730\u751f\u4ea7\u529b\u63d0\u5347\uff0c\u6548\u679c2\u683c\uff0c\u63d0\u53471.2\u500d','[]',1,0,0,150,0,4,0,1,1,0),(28,'\u5751\u9053',64,0,0,0,0,150,1,1,4,0,1,2,'\u6316\u6398\u53ef\u4ee5\u83b7\u5f97\u77ff\u77f3','[]',0,0,0,0,0,0,1,1,0,0),(29,'\u6811\u6728',64,0,0,0,0,50,1,1,6,0,1,2,'\u780d\u4f10\u53ef\u4ee5\u83b7\u5f97\u6728\u6750','[]',1,0,0,0,0,0,1,1,0,0),(30,'\u7537\u732b\u96d5\u50cf',64,0,0,0,14,250,1,1,0,0,1,2,'\u5468\u56f4\u5546\u5e97\u8d29\u5356\u529b\u5927\u5e45\u5ea6\u63d0\u5347\uff0c\u6548\u679c2\u683c\uff0c\u63d0\u53472\u500d','[]',1,0,0,600,0,20,0,1,1,0),(31,'\u5973\u732b\u96d5\u50cf',64,0,0,0,11,300,1,1,0,0,1,2,'\u5468\u56f4\u751f\u4ea7\u529b\u5927\u5e45\u5ea6\u63d0\u5347\uff0c\u6548\u679c2\u683c\uff0c\u63d0\u53472\u500d','[]',1,0,1,500,0,20,0,1,1,0),(32,'\u6751\u843d\u5165\u53e3\u70b9',64,0,0,0,999,0,1,1,0,0,1,2,'','[]',1,0,1,0,0,0,0,0,0,0)", "description": "Creates a table named buildings with 22 columns: id (integer primary key), name (varchar), x (integer), y (integer), z (integer), hp (integer), mp (integer), max_hp (integer), max_mp (integer), type (integer), level (integer), price (integer), owner (integer), description (varchar), effect (varchar), effect_level (integer), effect_type (integer), effect_value (integer), effect_time (", "concepts": ["CREATE TABLE", "INSERT INTO", "VALUES", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Drops the table named cityData if it exists. */\nDROP TABLE IF EXISTS `cityData`", "description": "Drops the table named cityData if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named cityData if it exists.", "response": "-- Reasoning:\nWe need to drop the table named cityData if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS cityData;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('cityData');"}
{"seed": "/* Creates a table named cityData with five columns: id (integer primary key), foot (integer), arrow (integer), magic (integer), and goods (varchar). */\nCREATE TABLE `cityData` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `foot` int(11) NOT NULL DEFAULT '0',\n  `arrow` int(11) NOT NULL DEFAULT '0',\n  `magic` int(11) NOT NULL DEFAULT '0',\n  `cav` int(11) NOT NULL DEFAULT '0',\n  `goods` varchar(200) COLLATE utf8mb4_bin NOT NULL DEFAULT '{}',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named cityData with five columns: id (integer primary key), foot (integer), arrow (integer), magic (integer), and goods (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named cityData with five columns: id (integer primary key), foot (integer), arrow (integer), magic (integer), and goods (varchar).", "response": "-- Reasoning:\nWe need a new table named cityData. It should have an integer primary key so that each city has a unique identifier, and four integer columns to store the number of foot, arrow, magic, and goods.\n\n-- Solution:\n```sql\nCREATE TABLE cityData (\n  id INT PRIMARY KEY,\n  foot INT,\n  arrow INT,\n  magic INT,\n  goods VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the cityData table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 foot: integer\n  \u2022 arrow: integer\n  \u2022 magic: integer\n  \u2022 goods: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('cityData');"}
{"seed": "/* Inserts 24 rows into the cityData table. */\nINSERT INTO `cityData` VALUES (1,52,21,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [44,38], \\\"silver\\\": 1300, \\\"build\\\": []}'),(2,70,27,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [41, 38], \\\"silver\\\": 1140, \\\"build\\\": []}'),(3,78,31,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [], \\\"silver\\\": 5250, \\\"build\\\": []}'),(4,95,190,6,18,'{\\\"equip\\\": [], \\\"goods\\\": [42], \\\"silver\\\": 2780, \\\"build\\\": [3]}'),(5,221,94,18,31,'{\\\"equip\\\": [], \\\"goods\\\": [41], \\\"silver\\\": 7800, \\\"build\\\": []}'),(6,221,94,18,31,'{\\\"equip\\\": [], \\\"goods\\\": [42], \\\"silver\\\": 1420, \\\"build\\\": [17]}'),(7,221,94,18,31,'{\\\"equip\\\": [], \\\"goods\\\": [39], \\\"silver\\\": 2780, \\\"build\\\": [8]}'),(8,221,94,18,31,'{\\\"equip\\\": [], \\\"goods\\\": [40, 39], \\\"silver\\\": 4100, \\\"build\\\": []}'),(9,221,94,18,31,'{\\\"equip\\\": [], \\\"goods\\\": [46], \\\"silver\\\": 480, \\\"build\\\": [25]}'),(10,249,199,49,49,'{\\\"equip\\\": [], \\\"goods\\\": [47], \\\"silver\\\": 380, \\\"build\\\": [6]}'),(11,136,54,4,16,'{\\\"equip\\\": [], \\\"goods\\\": [], \\\"silver\\\": 2020, \\\"build\\\": [27]}'),(12,205,68,13,81,'{\\\"equip\\\": [], \\\"goods\\\": [41], \\\"silver\\\": 3080, \\\"build\\\": [9]}'),(13,111,44,22,44,'{\\\"equip\\\": [], \\\"goods\\\": [43], \\\"silver\\\": 3960, \\\"build\\\": [24]}'),(14,79,79,159,159,'{\\\"equip\\\": [], \\\"goods\\\": [40], \\\"silver\\\": 14320, \\\"build\\\": [17]}'),(15,146,58,29,29,'{\\\"equip\\\": [], \\\"goods\\\": [40], \\\"silver\\\": 6080, \\\"build\\\": []}'),(16,113,113,68,22,'{\\\"equip\\\": [], \\\"goods\\\": [44], \\\"silver\\\": 3000, \\\"build\\\": [10]}'),(17,142,57,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [48], \\\"silver\\\": 3300, \\\"build\\\": [13]}'),(18,149,59,29,29,'{\\\"equip\\\": [82], \\\"goods\\\": [], \\\"silver\\\": 3080, \\\"build\\\": []}'),(19,149,59,29,29,'{\\\"equip\\\": [], \\\"goods\\\": [38], \\\"silver\\\": 6340, \\\"build\\\": [14]}'),(20,122,73,38,24,'{\\\"equip\\\": [], \\\"goods\\\": [], \\\"silver\\\": 4080, \\\"build\\\": []}'),(21,179,71,13,28,'{\\\"equip\\\": [], \\\"goods\\\": [43], \\\"silver\\\": 8700, \\\"build\\\": []}'),(22,67,27,95,13,'{\\\"equip\\\": [], \\\"goods\\\": [42], \\\"silver\\\": 9800, \\\"build\\\": []}'),(23,222,88,133,44,'{\\\"equip\\\": [69, 70], \\\"goods\\\": [], \\\"silver\\\": 6680, \\\"build\\\": [31]}'),(24,14,222,0,0,'{\\\"equip\\\": [57], \\\"goods\\\": [], \\\"silver\\\": 1300, \\\"build\\\": []}')", "description": "Inserts 24 rows into the cityData table.", "concepts": ["INSERT INTO", "VALUES", "CTE", "cityData", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to insert 24 rows into the cityData table.", "response": "-- Reasoning:\nWe need to insert 24 rows into the cityData table.\n\n-- Solution:\n```sql\nINSERT INTO cityData (city, state, population)\nVALUES\n  ('New York', 'NY', 8550405),\n  ('Los Angeles', 'CA', 3971883),\n  ('Chicago', 'IL', 2718782),\n  ('Houston', 'TX', 2296224),\n  ('Phoenix', 'AZ', 1626078),\n  ('Philadelphia', 'PA', 1567532),\n  ('San Antonio', 'TX', 1409019),\n  ('San Diego', 'CA', 1355896),\n  ('Dallas', 'TX', 1341075),\n  ('San Jose', 'CA', 998537),\n  ('Austin', 'TX', 950714),\n  ('Jacksonville', 'FL', 892062),\n  ('San Francisco', 'CA', 884363),\n  ('Columbus', 'OH', 860236),\n  ('Indianapolis', 'IN', 8433"}
{"seed": "/* Drops the table equip if it exists. */\nDROP TABLE IF EXISTS `equip`", "description": "Drops the table equip if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table equip if it exists.", "response": "-- Reasoning:\nWe need to drop the table equip if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS equip;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('equip');"}
{"seed": "/* Creates a table named equip with 20 columns: id (integer primary key), name (varchar), attack (int), labor (int), defense (int), silver (int), kind (int), shoot (int), brawn (int), health (int), special (varchar), subKind (int), attribute (varchar), des (varchar), researchCost (int), once (int), getMethod (varchar), skillId (int), ride (int). */\nCREATE TABLE `equip` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `attack` int(11) NOT NULL,\n  `labor` int(11) NOT NULL,\n  `defense` int(11) NOT NULL,\n  `silver` int(11) NOT NULL,\n  `kind` int(11) NOT NULL,\n  `shoot` int(11) NOT NULL,\n  `brawn` int(11) NOT NULL,\n  `health` int(11) NOT NULL,\n  `special` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `subKind` int(11) NOT NULL,\n  `attribute` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `des` varchar(200) COLLATE utf8mb4_bin NOT NULL DEFAULT '\u6ca1\u6709\u63cf\u8ff0',\n  `researchCost` int(11) NOT NULL DEFAULT '100',\n  `once` int(11) NOT NULL DEFAULT '0',\n  `getMethod` varchar(100) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `skillId` int(11) NOT NULL DEFAULT '0',\n  `ride` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=86 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named equip with 20 columns: id (integer primary key), name (varchar), attack (int), labor (int), defense (int), silver (int), kind (int), shoot (int), brawn (int), health (int), special (varchar), subKind (int), attribute (varchar), des (varchar), researchCost (int), once (int), getMethod (varchar), skillId (int), ride (int).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named equip with 20 columns: id (integer primary key), name (varchar), attack (int), labor (int), defense (int), silver (int), kind (int), shoot (int), brawn (int), health (int), special (varchar), subKind (int), attribute (varchar), des (varchar), researchCost (int), once (int), getMethod (varchar), skillId (int), ride (int).", "response": "-- Reasoning:\nWe need a new table named equip. It should have an integer primary key so that each equipment has a unique identifier, and a name column to store the equipment\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE equip (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  attack INT,\n  labor INT,\n  defense INT,\n  silver INT,\n  kind INT,\n  shoot INT,\n  brawn INT,\n  health INT,\n  special VARCHAR(255),\n  subKind INT,\n  attribute VARCHAR(255),\n  des VARCHAR(255),\n  researchCost INT,\n  once INT,\n  getMethod VARCHAR(255),\n  skillId INT,\n  ride INT\n);\n```\n\n-- Explanation:\nThis statement defines the equip table with 20 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 attack: integer\n  \u2022 labor: integer\n  \u2022 defense: integer\n  \u2022 silver: integer\n  \u2022 kind: integer\n  \u2022 shoot: integer\n  \u2022 brawn: integer\n  \u2022 health: integer\n  \u2022 special: variable\u2010length string up to 255 characters\n  \u2022 subKind: integer\n  \u2022 attribute: variable\u2010length string up to 255 characters\n  \u2022"}
{"seed": "/* The `users` table has the following columns: */\nINSERT INTO `equip` VALUES (1,'\u9570\u5200',3,8,0,20,0,0,0,0,'',0,'\u653b\u51fb+3 \u52b3\u52a8+8','',100,0,'[]',0,0),(2,'\u6728\u5200',6,0,0,30,0,0,0,0,'',0,'\u653b\u51fb+6','',100,0,'[]',0,0),(3,'\u77ed\u5200',9,0,0,80,0,0,0,0,'',0,'\u653b\u51fb+9','',100,0,'[]',0,0),(4,'\u65a7',14,0,0,140,0,0,0,0,'',0,'\u653b\u51fb+14','',100,0,'[[\\\"sword\\\", 1]]',0,0),(5,'\u957f\u5200',18,0,0,180,0,0,0,0,'',0,'\u653b\u51fb+18','',100,0,'[[\\\"spear\\\", 1]]',0,0),(6,'\u5927\u5200',28,0,0,320,0,0,0,0,'',0,'\u653b\u51fb+28','',100,0,'[[\\\"sword\\\", 2]]',0,0),(7,'\u5fcd\u8005\u5200',32,0,0,560,0,0,0,0,'',0,'\u653b\u51fb+32','',100,0,'[[\\\"ninja\\\", 3]]',0,0),(8,'\u91ce\u592a\u5200',48,0,0,750,0,0,0,0,'',0,'\u653b\u51fb+48','',100,0,'[[\\\"sword\\\", 3]]',0,0),(9,'\u65a9\u9a6c\u5200',70,0,0,910,0,0,0,0,'',0,'\u653b\u51fb+70','',100,0,'[[\\\"sword\\\", 4]]',0,0),(10,'\u8d85\u5fcd\u8005\u5200',90,0,0,1300,0,0,0,0,'',0,'\u653b\u51fb+90','',100,0,'[[\\\"sword\\\", 4], [\\\"ninja\\\", 4]]',0,0),(11,'\u7af9\u67aa',8,0,5,100,0,0,0,0,'',1,'\u653b\u51fb+8 \u9632\u5fa1+5','',100,0,'[]',0,0),(12,'\u957f\u67aa',12,0,10,180,0,0,0,0,'',1,'\u653b\u51fb+12 \u9632\u5fa1+10','',100,0,'[[\\\"spear\\\", 1]]',0,0),(13,'\u7247\u9570\u67aa',18,0,20,210,0,0,0,0,'',1,'\u653b\u51fb+18 \u9632\u5fa1+20','',100,0,'[[\\\"spear\\\", 2]]',0,0),(14,'\u5341\u6587\u5b57\u67aa',28,0,30,420,0,0,0,0,'',1,'\u653b\u51fb+28 \u9632\u5fa1+30','',100,0,'[[\\\"spear\\\", 3]]',0,0),(15,'\u957f\u67c4\u5200',40,0,30,720,0,0,0,0,'',1,'\u653b\u51fb+40 \u9632\u5fa1+30','',100,0,'[[\\\"sword\\\", 3]]',0,0),(16,'\u5de8\u67aa',34,0,40,840,0,0,0,0,'',1,'\u653b\u51fb+34 \u9632\u5fa1+40','',100,0,'[[\\\"spear\\\", 4]]',0,0),(17,'\u6728\u5f13',15,0,0,160,0,0,0,0,'',2,'\u653b\u51fb+15','',100,0,'[[\\\"bow\\\", 1]]',0,0),(18,'\u4e09\u679a\u6253\u5f13',27,0,0,320,0,0,0,0,'',2,'\u653b\u51fb+27','',100,0,'[[\\\"bow\\\", 2]]',0,0),(19,'\u56db\u679a\u6253\u5f13',48,0,0,500,0,0,0,0,'',2,'\u653b\u51fb+48','',100,0,'[]',0,0),(20,'\u98de\u8757\u5f13',60,0,0,780,0,0,0,0,'',2,'\u653b\u51fb+60','',100,0,'[[\\\"bow\\\", 4]]',0,0),(21,'\u6728\u6756',36,0,0,300,0,0,0,0,'',3,'\u653b\u51fb+36','',100,0,'[[\\\"magic\\\", 1]]',0,0),(22,'\u8fde\u51fb\u6756',68,0,0,560,0,0,0,0,'',3,'\u653b\u51fb+68','',100,0,'[[\\\"magic\\\", 2]]',0,0),(23,'\u8f6e\u56de\u6756',84,0,0,900,0,0,0,0,'',3,'\u653b\u51fb+84','',100,0,'[]',0,0),(24,'\u51cc\u7a7a\u6756',100,0,0,1250,0,0,0,0,'',3,'\u653b\u51fb+100','',100,0,'[[\\\"magic\\\", 4]]',0,0),(25,'\u706b\u795e\u6756',125,0,0,1600,0,0,0,0,'',3,'\u653b\u51fb+125','',100,0,'[]',0,0),(26,'\u68d2\u7403\u68cd',40,0,0,0,0,0,0,0,'',0,'\u653b\u51fb+40','',100,0,'[]',0,0),(27,'\u9e70\u722a\u94a9',15,0,30,200,0,0,0,0,'',4,'\u653b\u51fb+15 \u9632\u5fa1+30','',100,0,'[[\\\"ninja\\\", 2]]',0,0),(28,'\u5934\u5dfe',1,0,2,25,1,0,0,0,'',0,'\u9632\u5fa1+2 \u653b\u51fb+1','',100,0,'[]',0,0),(29,'\u5047\u80e1\u5b50',0,0,0,50,1,0,4,0,'',0,'\u8155\u529b+4','',100,0,'[]',0,0),(30,'\u9762\u5177',0,0,0,50,1,4,0,0,'',0,'\u8fdc\u7a0b+4','',100,0,'[]',0,0),(31,'\u53d1\u5361',0,0,0,75,1,0,0,10,'',0,'\u4f53\u529b+10','',100,0,'[]',0,0),(32,'\u624b\u5dfe',0,10,0,110,1,0,0,0,'',0,'\u52b3\u52a8+10','',100,0,'[]',0,0),(33,'\u8774\u8776\u7ed3',0,0,0,90,1,0,0,20,'',0,'\u4f53\u529b+20','',100,0,'[]',0,0),(34,'\u9ed1\u5e03\u5706\u5e3d',0,0,0,125,1,0,0,30,'',0,'\u4f53\u529b+30','',100,0,'[]',0,0),(35,'\u773c\u5e26',3,0,0,130,1,0,0,0,'',0,'\u653b\u51fb+3','',100,0,'[]',0,0),(36,'\u8349\u7b20',0,0,5,150,1,0,2,0,'',0,'\u9632\u5fa1+5 \u8155\u529b+2','',100,0,'[]',0,0),(37,'\u6df1\u8349\u5e3d',0,0,2,175,1,0,6,0,'',0,'\u9632\u5fa1+2 \u8155\u529b+6','',100,0,'[]',0,0),(38,'\u9e1f\u5e3d\u5b50',0,0,2,190,1,6,0,0,'',0,'\u9632\u5fa1+2 \u8fdc\u7a0b+6','',100,0,'[]',0,0),(39,'\u773c\u955c',0,0,0,200,1,10,0,0,'',0,'\u8fdc\u7a0b+10','',100,0,'[]',0,0),(40,'\u94b5\u91d1',2,0,5,210,1,0,0,0,'',0,'\u9632\u5fa1+5 \u653b\u51fb+2','',100,0,'[]',0,0),(41,'\u534a\u9996',0,0,8,240,1,0,0,0,'',0,'\u9632\u5fa1+8','',100,0,'[]',0,0),(42,'\u9635\u4f1e',0,0,5,250,1,0,4,0,'',0,'\u9632\u5fa1+5 \u8155\u529b+4','',100,0,'[]',0,0),(43,'\u9999\u8549',0,0,5,0,1,0,0,100,'',0,'\u9632\u5fa1+5 \u4f53\u529b+100','',100,0,'[]',0,0),(44,'\u68d2\u7403\u5e3d',0,0,0,0,1,8,8,0,'',0,'\u8155\u529b+8 \u8fdc\u7a0b+8','',100,0,'[]',0,0),(45,'\u5c0f\u9e21',0,0,10,0,1,0,0,0,'',0,'\u9632\u5fa1+10','',100,0,'[]',0,0),(46,'\u677e\u8338',0,30,0,0,1,0,0,0,'',0,'\u52b3\u52a8+30','',100,0,'[]',0,0),(47,'\u5c0f\u7532',0,0,10,100,2,0,0,0,'',0,'\u9632\u5fa1+10','',100,0,'[]',0,0),(48,'\u94dc\u7532',0,0,20,180,2,0,0,0,'',0,'\u9632\u5fa1+20','',100,0,'[[\\\"armour\\\", 1]]',0,0),(49,'\u4f5b\u7532',0,0,30,360,2,0,0,0,'',0,'\u9632\u5fa1+30','',100,0,'[[\\\"armour\\\", 2]]',0,0),(50,'\u4ed9\u53f0\u7532',0,0,38,0,2,0,0,0,'',0,'\u9632\u5fa1+38','',100,0,'[]',0,0),(51,'\u6731\u6f06\u7532',0,0,42,0,2,0,0,0,'',0,'\u9632\u5fa1+42','',100,0,'[]',0,0),(52,'\u5f53\u4e16\u80f8\u7532',0,0,40,630,2,0,0,0,'',0,'\u9632\u5fa1+40','',100,0,'[[\\\"armour\\\", 3]]',0,0),(53,'\u4f5b\u4f53\u80f8\u7532',0,0,50,880,2,0,0,0,'',0,'\u9632\u5fa1+50','',100,0,'[[\\\"armour\\\", 4]]',0,0),(54,'\u4ed9\u53f0\u80f8\u7532',0,0,58,0,2,0,0,0,'',0,'\u9632\u5fa1+58','',100,0,'[]',0,0),(55,'\u6731\u6f06\u80f8\u7532',0,0,62,0,2,0,0,0,'',0,'\u9632\u5fa1+62','',100,0,'[]',0,0),(56,'\u9a91\u58eb\u80f8\u7532',0,0,60,1200,2,0,0,0,'',0,'\u9632\u5fa1+60','',100,0,'[[\\\"armour\\\", 5]]',0,0),(57,'\u55b5\u55b5\u80f8\u7532',0,-20,80,0,2,0,0,0,'',0,'\u9632\u5fa1+80 \u52b3\u52a8-20','',100,1,'[]',0,0),(58,'\u5fcd\u8005\u670d',0,0,5,120,2,6,0,0,'',0,'\u9632\u5fa1+5 \u8fdc\u7a0b+6','',100,0,'[[\\\"ninja\\\", 1]]',0,0),(59,'\u98ce\u9b54\u670d',0,0,15,220,2,20,0,0,'',0,'\u9632\u5fa1+15 \u8fdc\u7a0b+20','',100,0,'[]',0,0),(60,'\u8fde\u73af\u7532',0,0,20,260,2,18,0,0,'',0,'\u9632\u5fa1+20 \u8fdc\u7a0b+18','',100,0,'[[\\\"ninja\\\", 2]]',0,0),(61,'\u5fcd\u8005\u94e0\u7532',0,0,25,580,2,30,0,0,'',0,'\u9632\u5fa1+25 \u8fdc\u7a0b+30','',100,0,'[[\\\"ninja\\\", 3]]',0,0),(62,'\u4f0a\u8d3a\u94e0\u7532',0,0,40,920,2,40,0,0,'',0,'\u9632\u5fa1+40 \u8fdc\u7a0b+40','',100,0,'[[\\\"ninja\\\", 4]]',0,0),(63,'\u5973\u5fcd\u94e0\u7532',0,0,30,0,2,20,0,0,'',0,'\u9632\u5fa1+30 \u8fdc\u7a0b+20','',100,0,'[]',0,0),(64,'\u7537\u5b50\u6c49\u7684\u515c\u88c6\u5e03',20,0,0,0,2,0,0,50,'',0,'\u653b\u51fb+20 \u4f53\u529b+50','',100,0,'[]',0,0),(65,'\u5154\u5973\u90ce\u88c5',0,0,40,0,2,0,0,250,'',0,'\u9632\u5fa1+40 \u4f53\u529b+250','',100,0,'[]',0,0),(66,'\u8d85\u5fcd\u94e0\u7532',0,0,30,0,2,60,0,0,'',0,'\u9632\u5fa1+30 \u8fdc\u7a0b+60','',100,0,'[]',0,0),(67,'\u8349\u836f',0,0,0,100,3,0,0,0,'',0,'\u6218\u6597\u4e2d\u6bcf\u56de\u5408\u4f53\u529b\u81ea\u52a8\u56de\u590d15%','',100,0,'[]',43,0),(68,'\u5175\u7cae\u4e38',0,0,0,300,3,0,0,0,'',0,'\u6218\u6597\u4e2d\u6bcf\u56de\u5408\u4f53\u529b\u81ea\u52a8\u56de\u590d20%','',100,0,'[[\\\"ninja\\\", 2]]',44,0),(69,'\u94f6\u6db2\u4e39',0,0,0,500,3,0,0,0,'',0,'\u6218\u6597\u4e2d\u6bcf\u56de\u5408\u4f53\u529b\u81ea\u52a8\u56de\u590d30%','',100,1,'[]',45,0),(70,'\u55b5\u55b5\u5fbd\u7ae0',0,20,0,2020,3,0,0,0,'',0,'\u52b3\u52a8+20','',100,1,'[]',0,0),(71,'\u624b\u91cc\u5251',6,0,0,250,3,0,0,0,'',0,'\u653b\u51fb+6','',100,0,'[[\\\"ninja\\\", 1]]',0,0),(72,'\u516b\u65b9\u624b\u91cc\u5251',10,0,0,380,3,0,0,0,'',0,'\u653b\u51fb+10','',100,0,'[[\\\"ninja\\\", 3]]',0,0),(73,'\u9b54\u6cd5\u70b8\u5f39',30,0,0,550,3,0,0,0,'',0,'\u653b\u51fb+30','',100,0,'[[\\\"ninja\\\", 4]]',0,0),(74,'\u68d2\u7403',8,0,0,0,3,0,0,0,'',0,'\u653b\u51fb+8','',100,1,'[]',0,0),(75,'\u5fcd\u72ac',20,0,0,0,3,0,0,80,'',0,'\u6280\u80fd:\u5fcd\u72ac\u75be\u8d70 \u653b\u51fb20 \u4f53\u529b80','',100,1,'[]',46,1),(76,'\u91ce\u732a',40,0,0,0,3,0,0,120,'',0,'\u6280\u80fd:\u8010\u5f13\u7bad \u653b\u51fb40 \u4f53\u529b120','',100,1,'[]',10,1),(77,'\u91ce\u72fc',26,0,0,0,3,0,0,100,'',0,'\u6280\u80fd:\u6218\u672f2 \u653b\u51fb26 \u4f53\u529b100','',100,1,'[]',2,1),(78,'\u5c71\u718a',60,0,0,0,3,0,0,240,'',0,'\u6280\u80fd:\u8010\u6b65\u51752 \u653b\u51fb60 \u4f53\u529b240','',100,0,'[]',7,1),(79,'\u91ce\u9524',20,0,0,0,3,0,0,300,'',0,'\u6280\u80fd\uff1a\u8fd1\u6218\u8fde\u51fb3 \u653b\u51fb20 \u4f53\u529b300','',100,0,'[]',33,1),(80,'\u4e4c\u9e26',14,0,0,0,3,0,0,50,'',0,'\u6280\u80fd\uff1a\u8010\u6b65\u5175 \u653b\u51fb14 \u4f53\u529b50','',100,1,'[]',6,1),(81,'\u86e4\u87c6',20,0,20,0,3,0,0,0,'',0,'\u653b\u51fb+20 \u9632\u5fa1\u529b+20','',100,1,'[]',0,1),(82,'\u77ee\u9a6c',0,5,-10,240,3,0,0,0,'',0,'\u52b3\u52a8+5 \u9632\u5fa1\u529b-10','',100,1,'[]',0,1),(83,'\u677f\u6817\u6bdb',0,0,0,0,3,0,0,0,'',0,'--','',100,1,'[]',0,1),(84,'\u9ed1\u9e7f\u6bdb',0,0,0,0,3,0,10,20,'',0,'\u4f53\u529b+20 \u8155\u529b+10','',100,1,'[]',0,1),(85,'\u4f50\u76ee\u6bdb',0,0,20,0,3,10,0,0,'',0,'\u8fdc\u7a0b+10 \u9632\u5fa1\u529b+20','',100,1,'[]',0,1)", "description": "The `users` table has the following columns:", "concepts": ["```\nCREATE", "TABLE", "INT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT"], "instruction": "```\n/* Return each customer's total sales grouped by customer */\nSELECT customer_id, SUM(amount) AS total_sales\nFROM orders\nGROUP BY customer_id\nORDER BY total_sales DESC;\n```", "response": "-- Reasoning:\nWe need to return each customer's total sales grouped by customer.\n\n-- Solution:\n```sql\nSELECT customer_id, SUM(amount) AS total_sales\nFROM orders\nGROUP BY customer_id\nORDER BY total_sales DESC;\n```\n\n-- Explanation:\nThis query returns the total sales for each customer, grouped by customer_id. It uses the SUM() function to calculate the total sales for each customer, and the GROUP BY clause to group the results by customer_id. The ORDER BY clause is used to sort the results in descending order based on the total_sales column.\n\n-- Tests:\n-- 1. Verify correct output\nSELECT customer_id, SUM(amount) AS total_sales\nFROM orders\nGROUP BY customer_id\nORDER BY total_sales DESC;"}
{"seed": "/* Drops the table named goods if it exists. */\nDROP TABLE IF EXISTS `goods`", "description": "Drops the table named goods if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named goods if it exists.", "response": "-- Reasoning:\nWe need to delete the goods table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS goods;\n```\n\n-- Explanation:\nThis statement deletes the goods table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('goods');"}
{"seed": "/* Creates a table named goods with 11 columns: id (integer primary key), name (varchar), food (int), stone (int), wood (int), store (int), price (int), condition (int), storeName (varchar), researchCost (int), des (varchar). */\nCREATE TABLE `goods` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `food` int(11) NOT NULL,\n  `stone` int(11) NOT NULL,\n  `wood` int(11) NOT NULL,\n  `store` int(11) NOT NULL,\n  `price` int(11) NOT NULL,\n  `condition` int(11) NOT NULL DEFAULT '0',\n  `storeName` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `researchCost` int(11) NOT NULL DEFAULT '100',\n  `des` varchar(100) COLLATE utf8mb4_bin NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named goods with 11 columns: id (integer primary key), name (varchar), food (int), stone (int), wood (int), store (int), price (int), condition (int), storeName (varchar), researchCost (int), des (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "ENGINE", "NOT", "NULL", "DEFAULT", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named goods with 11 columns: id (integer primary key), name (varchar), food (int), stone (int), wood (int), store (int), price (int), condition (int), storeName (varchar), researchCost (int), des (varchar).", "response": "-- Reasoning:\nWe need a new table named goods. It should have an integer primary key so that each good has a unique identifier, and a name column to store the good\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE goods (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  food INT,\n  stone INT,\n  wood INT,\n  store INT,\n  price INT,\n  condition INT,\n  storeName VARCHAR(255),\n  researchCost INT,\n  des VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the goods table with 11 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 food: integer\n  \u2022 stone: integer\n  \u2022 wood: integer\n  \u2022 store: integer\n  \u2022 price: integer\n  \u2022 condition: integer\n  \u2022 storeName: variable\u2010length string up to 255 characters\n  \u2022 researchCost: integer\n  \u2022 des: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('goods');"}
{"seed": "/* Inserts 48 rows into the goods table. */\nINSERT INTO `goods` VALUES (1,'\u8c46\u7cd5',1,0,0,11,5,0,'\u8336\u5c4b',100,'\u98df\u6750 1\u4e2a \u552e\u4ef7 5\u94f6\u5e01'),(2,'\u7c73\u997c',1,0,0,11,10,100,'\u8336\u5c4b',100,'\u98df\u6750 1\u4e2a \u552e\u4ef7 10\u94f6\u5e01'),(3,'\u828b\u5934\u997c',2,0,0,11,15,200,'\u8336\u5c4b',100,'\u98df\u6750 2\u4e2a \u552e\u4ef7 15\u94f6\u5e01'),(4,'\u7389\u9732\u7cd5',3,0,0,11,27,300,'\u8336\u5c4b',100,'\u98df\u6750 3\u4e2a \u552e\u4ef7 27\u94f6\u5e01'),(5,'\u6d4a\u9152',1,0,0,6,6,0,'\u9152\u5c4b',100,'\u98df\u6750 1\u4e2a \u552e\u4ef7 6\u94f6\u5e01'),(6,'\u767d\u9152',2,0,0,6,13,100,'\u9152\u5c4b',100,'\u98df\u6750 2\u4e2a \u552e\u4ef7 13\u94f6\u5e01'),(7,'\u574a\u9152',2,0,1,6,37,200,'\u9152\u5c4b',100,'\u98df\u6750 2\u4e2a \u6728\u5934 1\u4e2a \u552e\u4ef7 37\u94f6\u5e01'),(8,'\u7c73\u9152',2,0,1,6,46,300,'\u9152\u5c4b',100,'\u98df\u6750 2\u4e2a \u6728\u5934 1\u4e2a \u552e\u4ef7 46\u94f6\u5e01'),(9,'\u62cc\u83dc',2,0,0,11,14,0,'\u996d\u5e97',100,'\u98df\u6750 2\u4e2a \u552e\u4ef7 14\u94f6\u5e01'),(10,'\u7116\u83dc',2,0,0,11,16,200,'\u996d\u5e97',100,'\u98df\u6750 2\u4e2a \u552e\u4ef7 16\u94f6\u5e01'),(11,'\u5929\u5987\u7f57',2,0,1,11,30,300,'\u996d\u5e97',100,'\u98df\u6750 2\u4e2a \u6728\u5934 1\u4e2a \u552e\u4ef7 30\u94f6\u5e01'),(12,'\u821f\u884c\u523a\u751f',2,0,1,11,50,400,'\u996d\u5e97',100,'\u98df\u6750 2\u4e2a \u6728\u5934 1\u4e2a \u552e\u4ef7 50\u94f6\u5e01'),(13,'\u5e72\u83c7',0,0,1,17,16,0,'\u7279\u4ea7\u5e97',100,'\u6728\u5934 1\u4e2a \u552e\u4ef7 16\u94f6\u5e01'),(14,'\u5c0f\u523b\u5200',0,0,2,17,41,300,'\u7279\u4ea7\u5e97',100,'\u6728\u5934 2\u4e2a \u552e\u4ef7 41\u94f6\u5e01'),(15,'\u6728\u96d5\u50cf',0,0,2,17,52,400,'\u7279\u4ea7\u5e97',100,'\u6728\u5934 2\u4e2a \u552e\u4ef7 52\u94f6\u5e01'),(16,'\u8336\u7897',0,0,1,9,16,0,'\u9053\u5177\u5c4b',100,'\u6728\u5934 1\u4e2a \u552e\u4ef7 16\u94f6\u5e01'),(17,'\u82b1\u74f6',0,1,0,9,30,300,'\u9053\u5177\u5c4b',100,'\u77f3\u5934 1\u4e2a \u552e\u4ef7 30\u94f6\u5e01'),(18,'\u4fe1\u4e50\u70e7',0,2,0,9,74,400,'\u9053\u5177\u5c4b',100,'\u77f3\u5934 2\u4e2a \u552e\u4ef7 74\u94f6\u5e01'),(19,'\u9676\u5076',0,2,0,9,86,500,'\u9053\u5177\u5c4b',100,'\u77f3\u5934 2\u4e2a \u552e\u4ef7 86\u94f6\u5e01'),(20,'\u9a6c\u7532',0,0,1,13,17,0,'\u670d\u88c5\u5e97',100,'\u6728\u5934 1\u4e2a \u552e\u4ef7 17\u94f6\u5e01'),(21,'\u65e0\u8896\u886b',0,0,2,13,46,300,'\u670d\u88c5\u5e97',100,'\u6728\u5934 2\u4e2a \u552e\u4ef7 46\u94f6\u5e01'),(22,'\u957f\u8896\u886b',0,1,2,13,100,400,'\u670d\u88c5\u5e97',100,'\u6728\u5934 2\u4e2a \u77f3\u5934 1\u4e2a \u552e\u4ef7 100\u94f6\u5e01'),(23,'\u534e\u670d',0,1,2,13,117,500,'\u670d\u88c5\u5e97',100,'\u6728\u5934 2\u4e2a \u77f3\u5934 1\u4e2a \u552e\u4ef7 117\u94f6\u5e01'),(24,'\u9570\u5200',0,1,0,10,24,0,'\u953b\u9020\u5c4b',100,'\u77f3\u5934 1\u4e2a \u552e\u4ef7 24\u94f6\u5e01'),(25,'\u98ce\u94c3',0,1,0,10,30,400,'\u953b\u9020\u5c4b',100,'\u77f3\u5934 1\u4e2a \u552e\u4ef7 30\u94f6\u5e01'),(26,'\u94c1\u7f50',0,2,0,10,72,500,'\u953b\u9020\u5c4b',100,'\u77f3\u5934 2\u4e2a \u552e\u4ef7 72\u94f6\u5e01'),(27,'\u94c1\u9505',0,2,0,10,84,600,'\u953b\u9020\u5c4b',100,'\u77f3\u5934 2\u4e2a \u552e\u4ef7 84\u94f6\u5e01'),(28,'\u53d1\u5361',0,1,0,18,28,0,'\u6742\u8d27\u5e97',100,'\u77f3\u5934 1\u4e2a \u552e\u4ef7 28\u94f6\u5e01'),(29,'\u955c\u5b50',0,1,1,18,62,500,'\u6742\u8d27\u5e97',100,'\u6728\u5934 1\u4e2a \u77f3\u5934 1\u4e2a \u552e\u4ef7 62\u94f6\u5e01'),(30,'\u624b\u956f',0,1,1,18,76,600,'\u6742\u8d27\u5e97',100,'\u6728\u5934 1\u4e2a \u77f3\u5934 1\u4e2a \u552e\u4ef7 76\u94f6\u5e01'),(31,'\u91d1\u9970\u9879\u94fe',0,2,1,18,144,700,'\u6742\u8d27\u5e97',100,'\u6728\u5934 1\u4e2a \u77f3\u5934 2\u4e2a \u552e\u4ef7 144\u94f6\u5e01'),(32,'\u5c0f\u7ed8\u672c',0,0,1,0,16,0,'\u4e66\u5e97',100,'\u6728\u5934 1\u4e2a \u552e\u4ef7 16\u94f6\u5e01'),(33,'\u6302\u5386',0,0,2,0,44,400,'\u4e66\u5e97',100,'\u6728\u5934 2\u4e2a \u552e\u4ef7 44\u94f6\u5e01'),(34,'\u5c0f\u8bf4\u4e66',0,0,2,0,56,500,'\u4e66\u5e97',100,'\u6728\u5934 2\u4e2a \u552e\u4ef7 56\u94f6\u5e01'),(35,'\u98df\u6750',0,0,0,2,3,0,'\u519c\u7530',100,'\u552e\u4ef7 3\u94f6\u5e01'),(36,'\u77ff\u77f3',0,0,0,12,12,0,'\u77ff\u77f3\u5b58\u653e\u5904',100,'\u552e\u4ef7 12\u94f6\u5e01'),(37,'\u6728\u6750',0,0,0,19,8,0,'\u4f10\u6728\u573a',100,'\u552e\u4ef7 8\u94f6\u5e01'),(38,'\u571f\u5730\u6743\u5229\u8bc1',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(39,'\u5175\u6cd5\u4e66',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(40,'\u9020\u5200\u6280\u672f',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(41,'\u9020\u67aa\u6280\u672f',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(42,'\u70bc\u91d1\u6280\u672f',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(43,'\u9020\u5f13\u6280\u672f',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(44,'\u94e0\u7532\u6280\u672f',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(45,'\u5fcd\u8005\u6280\u672f',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(46,'\u5f13\u5175\u5175\u79cd\u4e66',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(47,'\u9b54\u6cd5\u5175\u79cd\u4e66',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01'),(48,'\u9a91\u5175\u5175\u79cd\u4e66',0,0,0,0,0,0,'',100,'\u552e\u4ef7 0\u94f6\u5e01')", "description": "Inserts 48 rows into the goods table.", "concepts": ["INSERT INTO", "VALUES", "CREATE TABLE", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT", "DEFAULT", "AUTO_INCREMENT", "CTE", "window functions"], "instruction": "Write a SQL query to insert 48 rows into the goods table.", "response": "-- Reasoning:\nWe need to insert 48 rows into the goods table.\n\n-- Solution:\n```sql\nINSERT INTO goods (name, price, quantity)\nVALUES\n  ('apple', 1.25, 100),\n  ('banana', 0.50, 200),\n  ('carrot', 0.75, 150),\n  ('durian', 2.00, 50),\n  ('eggplant', 1.00, 100),\n  ('fig', 1.50, 100),\n  ('grape', 2.00, 100),\n  ('honeydew', 1.00, 100),\n  ('ice cream', 2.00, 100),\n  ('jackfruit', 1.00, 100),\n  ('kiwi', 1.00, 100),\n  ('lemon', 1.00, 100),\n  ('mango', 1.00, 100),\n  ('nectarine', 1.00, 100),\n  ('orange', 1.00, 100),\n  ('papaya', 1.00, 100),\n  ('quince',"}
{"seed": "/* Drops the table named param if it exists. */\nDROP TABLE IF EXISTS `param`", "description": "Drops the table named param if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "param"], "instruction": "Write a SQL query to drop the table named param if it exists.", "response": "-- Reasoning:\nWe need to drop the table named param if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS param;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('param');"}
{"seed": "/* Creates a table named param with three columns: id (integer primary key), key (varchar), and value (integer). */\nCREATE TABLE `param` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `key` varchar(200) COLLATE utf8mb4_bin NOT NULL,\n  `value` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named param with three columns: id (integer primary key), key (varchar), and value (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "ENGINE", "NOT", "NULL", "DEFAULT", "CHARSET", "COLLATE", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named param with three columns: id (integer primary key), key (varchar), and value (integer).", "response": "-- Reasoning:\nWe need a new table named param. It should have an integer primary key so that each parameter has a unique identifier, and two varchar columns to store the parameter\u2019s key and value.\n\n-- Solution:\n```sql\nCREATE TABLE param (\n  id INTEGER PRIMARY KEY,\n  key VARCHAR(255),\n  value INTEGER\n);\n```\n\n-- Explanation:\nThis statement defines the param table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 key: variable\u2010length string up to 255 characters\n  \u2022 value: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('param');"}
{"seed": "/* Inserts five rows into the param table. */\nINSERT INTO `param` VALUES (1,'maxSpeed',1500),(2,'accUp',25000),(3,'holdTime',5),(4,'fallAcc',500),(5,'fallInitSpeed',-40)", "description": "Inserts five rows into the param table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert five rows into the param table.", "response": "-- Reasoning:\nWe need to insert five rows into the param table.\n\n-- Solution:\n```sql\nINSERT INTO param (name, value) VALUES\n  ('a', 1),\n  ('b', 2),\n  ('c', 3),\n  ('d', 4),\n  ('e', 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the param table.\n\n-- Tests:\n-- 1. Verify all rows are inserted\nSELECT * FROM param;"}
{"seed": "/* Drops the table named people if it exists. */\nDROP TABLE IF EXISTS `people`", "description": "Drops the table named people if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named people if it exists.", "response": "-- Reasoning:\nWe need to delete the table named people if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS people;\n```\n\n-- Explanation:\nThis statement deletes the table named people if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('people');"}
{"seed": "/* Creates a table named people with 28 columns: id (integer primary key), name (varchar), ax (int), ay (int), jumpTime (float), kind (int), brawn (int), health (int), labor (int), shoot (int), attack (int), defense (int), skill (int), healthAdd (int), brawnAdd (int), shootAdd (int), laborAdd (int), girl (int), skillName (varchar */\nCREATE TABLE `people` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) COLLATE utf8mb4_bin NOT NULL,\n  `ax` int(11) NOT NULL DEFAULT '163',\n  `ay` int(11) NOT NULL DEFAULT '237',\n  `jumpTime` float NOT NULL DEFAULT '1',\n  `kind` int(11) NOT NULL DEFAULT '1',\n  `brawn` int(11) NOT NULL DEFAULT '0',\n  `health` int(11) NOT NULL DEFAULT '0',\n  `labor` int(11) NOT NULL DEFAULT '0',\n  `shoot` int(11) NOT NULL DEFAULT '0',\n  `attack` int(11) NOT NULL DEFAULT '0',\n  `defense` int(11) NOT NULL DEFAULT '0',\n  `skill` int(11) NOT NULL DEFAULT '0',\n  `healthAdd` int(11) NOT NULL DEFAULT '0',\n  `brawnAdd` int(11) NOT NULL DEFAULT '0',\n  `shootAdd` int(11) NOT NULL DEFAULT '0',\n  `laborAdd` int(11) NOT NULL DEFAULT '0',\n  `girl` int(11) NOT NULL DEFAULT '0',\n  `skillName` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `silver` int(11) NOT NULL DEFAULT '0',\n  `gold` int(11) NOT NULL DEFAULT '0',\n  `delete` int(11) NOT NULL DEFAULT '0',\n  `levelSkill` varchar(200) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `appear` int(100) NOT NULL DEFAULT '0' COMMENT '\u51fa\u73b0\u7684\u57ce\u5821\u6216\u8005\u6751\u5e84',\n  `cityKind` int(11) NOT NULL DEFAULT '0' COMMENT '\u57ce\u58210 \u6751\u843d1 \u65b0\u624b\u67512',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named people with 28 columns: id (integer primary key), name (varchar), ax (int), ay (int), jumpTime (float), kind (int), brawn (int), health (int), labor (int), shoot (int), attack (int), defense (int), skill (int), healthAdd (int), brawnAdd (int), shootAdd (int), laborAdd (int), girl (int), skillName (varchar", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named people with 28 columns: id (integer primary key), name (varchar), ax (int), ay (int), jumpTime (float), kind (int), brawn (int), health (int), labor (int), shoot (int), attack (int), defense (int), skill (int), healthAdd (int), brawnAdd (int), shootAdd (int), laborAdd (int), girl (int), skillName (varchar.", "response": "-- Reasoning:\nWe need a new table named people. It should have an integer primary key so that each person has a unique identifier, and a name column to store the person\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE people (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  ax INT,\n  ay INT,\n  jumpTime FLOAT,\n  kind INT,\n  brawn INT,\n  health INT,\n  labor INT,\n  shoot INT,\n  attack INT,\n  defense INT,\n  skill INT,\n  healthAdd INT,\n  brawnAdd INT,\n  shootAdd INT,\n  laborAdd INT,\n  girl INT,\n  skillName VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the people table with 28 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 ax: integer\n  \u2022 ay: integer\n  \u2022 jumpTime: float\n  \u2022 kind: integer\n  \u2022 brawn: integer\n  \u2022 health: integer\n  \u2022 labor: integer\n  \u2022 shoot: integer\n  \u2022 attack: integer\n  \u2022 defense: integer\n  \u2022 skill: integer\n  \u2022 healthAdd: integer\n  \u2022 brawnAdd: integer\n  \u2022 shootAdd: integer\n  \u2022 laborAdd: integer\n  \u2022 girl:"}
{"seed": "/* Drops the table named picName if it exists. */\nDROP TABLE IF EXISTS `picName`", "description": "Drops the table named picName if it exists.", "concepts": ["DROP TABLE", "IF EXISTS", "picName"], "instruction": "Write a SQL query to drop the table named picName if it exists.", "response": "-- Reasoning:\nWe need to drop the table named picName if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS picName;\n```\n\n-- Explanation:\nThis statement drops the table named picName if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('picName');"}
{"seed": "/* Creates a table named picName with three columns: id (integer primary key), cnName (varchar) and engName (varchar). */\nCREATE TABLE `picName` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `cnName` varchar(100) NOT NULL,\n  `engName` varchar(200) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `cnName` (`cnName`)\n) ENGINE=InnoDB AUTO_INCREMENT=665 DEFAULT CHARSET=utf8", "description": "Creates a table named picName with three columns: id (integer primary key), cnName (varchar) and engName (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "UNIQUE KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named picName with three columns: id (integer primary key), cnName (varchar) and engName (varchar).", "response": "-- Reasoning:\nWe need a new table named picName. It should have an integer primary key so that each picName has a unique identifier, and two name columns to store the picName\u2019s Chinese and English names as text.\n\n-- Solution:\n```sql\nCREATE TABLE picName (\n  id INT PRIMARY KEY,\n  cnName VARCHAR(255),\n  engName VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the picName table with three columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cnName: variable\u2010length string up to 255 characters\n  \u2022 engName: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('picName');"}
{"seed": "/* Drops the table named skill if it exists. */\nDROP TABLE IF EXISTS `skill`", "description": "Drops the table named skill if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named skill if it exists.", "response": "-- Reasoning:\nWe need to drop the skill table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS skill;\n```\n\n-- Explanation:\nThis statement drops the skill table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('skill');"}
{"seed": "/* Creates a table named skill with 13 columns: id (integer primary key), name (varchar), attribute (varchar), picId (integer), hasLevel (integer), defense (integer), attack (integer), kind (integer), effect (integer), passivity (integer), health (integer). */\nCREATE TABLE `skill` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(200) COLLATE utf8mb4_bin NOT NULL,\n  `attribute` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  `picId` int(11) NOT NULL DEFAULT '0',\n  `hasLevel` int(11) NOT NULL DEFAULT '0',\n  `defense` int(11) NOT NULL DEFAULT '0',\n  `attack` int(11) NOT NULL DEFAULT '0',\n  `kind` int(11) NOT NULL DEFAULT '0',\n  `effect` int(11) NOT NULL DEFAULT '0',\n  `passivity` int(11) NOT NULL DEFAULT '0',\n  `health` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named skill with 13 columns: id (integer primary key), name (varchar), attribute (varchar), picId (integer), hasLevel (integer), defense (integer), attack (integer), kind (integer), effect (integer), passivity (integer), health (integer).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "COLLATE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named skill with 13 columns: id (integer primary key), name (varchar), attribute (varchar), picId (integer), hasLevel (integer), defense (integer), attack (integer), kind (integer), effect (integer), passivity (integer), health (integer).", "response": "-- Reasoning:\nWe need a new table named skill. It should have an integer primary key so that each skill has a unique identifier, and a name column to store the skill\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE skill (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  attribute VARCHAR(255),\n  picId INT,\n  hasLevel INT,\n  defense INT,\n  attack INT,\n  kind INT,\n  effect INT,\n  passivity INT,\n  health INT\n);\n```\n\n-- Explanation:\nThis statement defines the skill table with 13 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 attribute: variable\u2010length string up to 255 characters\n  \u2022 picId: integer\n  \u2022 hasLevel: integer\n  \u2022 defense: integer\n  \u2022 attack: integer\n  \u2022 kind: integer\n  \u2022 effect: integer\n  \u2022 passivity: integer\n  \u2022 health: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('skill');"}
{"seed": "/* Creates a table named skill with 23 columns: id (integer primary key), name (varchar), description (varchar), type (integer), level (integer), attack (integer), defense (integer), breed (integer), value (integer), is_active (integer), is_passive (integer). */\nINSERT INTO `skill` VALUES (1,'\u6218\u672f','\u89d2\u8272\u6240\u5728\u5175\u79cd\u653b\u51fb\u529b+5%',0,0,0,0,1,5,0,0),(2,'\u6218\u672f2','\u89d2\u8272\u6240\u5728\u5175\u79cd\u653b\u51fb\u529b+10%',0,2,0,0,1,10,0,0),(3,'\u6218\u672f3','\u89d2\u8272\u6240\u5728\u5175\u79cd\u653b\u51fb\u529b+15%',0,3,0,0,1,15,0,0),(4,'\u6218\u672f4','\u89d2\u8272\u6240\u5728\u5175\u79cd\u653b\u51fb\u529b+20%',0,4,0,0,1,20,0,0),(5,'\u6218\u672f5','\u89d2\u8272\u6240\u5728\u5175\u79cd\u653b\u51fb\u529b+25%',0,0,0,0,1,25,0,0),(6,'\u8010\u6b65\u5175','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u6b65\u5175\u9632\u5fa1\u529b+5%',0,0,0,0,2,5,1,0),(7,'\u8010\u6b65\u51752','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u6b65\u5175\u9632\u5fa1\u529b+10%',0,2,0,0,2,10,1,0),(8,'\u8010\u6b65\u51753','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u6b65\u5175\u9632\u5fa1\u529b+15%',0,3,0,0,2,15,1,0),(9,'\u8010\u6b65\u51754','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u6b65\u5175\u9632\u5fa1\u529b+20%',0,4,0,0,2,20,1,0),(10,'\u8010\u5f13\u7bad','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u5f13\u5175\u9632\u5fa1\u529b+5%',0,0,0,0,3,5,1,0),(11,'\u8010\u5f13\u7bad2','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u5f13\u5175\u9632\u5fa1\u529b+10%',0,2,0,0,3,10,1,0),(12,'\u8010\u5f13\u7bad3','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u5f13\u5175\u9632\u5fa1\u529b+15%',0,3,0,0,3,15,1,0),(13,'\u8010\u5f13\u7bad4','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u5f13\u5175\u9632\u5fa1\u529b+20%',0,4,0,0,3,20,1,0),(14,'\u8010\u9b54\u6cd5','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9b54\u6cd5\u9632\u5fa1\u529b+5%',0,0,0,0,4,5,1,0),(15,'\u8010\u9b54\u6cd52','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9b54\u6cd5\u9632\u5fa1\u529b+10%',0,2,0,0,4,10,1,0),(16,'\u8010\u9b54\u6cd53','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9b54\u6cd5\u9632\u5fa1\u529b+15%',0,3,0,0,4,15,1,0),(17,'\u8010\u9b54\u6cd54','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9b54\u6cd5\u9632\u5fa1\u529b+20%',0,4,0,0,4,20,1,0),(18,'\u8010\u9a91\u5175','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9a91\u5175\u9632\u5fa1\u529b+5%',0,0,0,0,5,5,1,0),(19,'\u8010\u9a91\u51752','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9a91\u5175\u9632\u5fa1\u529b+10%',0,2,0,0,5,10,1,0),(20,'\u8010\u9a91\u51753','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9a91\u5175\u9632\u5fa1\u529b+15%',0,3,0,0,5,15,1,0),(21,'\u8010\u9a91\u51754','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9a91\u5175\u9632\u5fa1\u529b+20%',0,4,0,0,5,20,1,0),(22,'\u8010\u9a91\u51755','\u89d2\u8272\u6240\u5728\u5175\u79cd\u5bf9\u9a91\u5175\u9632\u5fa1\u529b+25%',0,0,0,0,5,25,1,0),(23,'\u653b\u51fbUP','\u89d2\u8272\u653b\u51fb\u529b+10',0,0,0,10,0,0,0,0),(24,'\u653b\u51fbUP2','\u89d2\u8272\u653b\u51fb\u529b+20',0,2,0,20,0,0,0,0),(25,'\u653b\u51fbUP3','\u89d2\u8272\u653b\u51fb\u529b+30',0,3,0,30,0,0,0,0),(26,'\u653b\u51fbUP4','\u89d2\u8272\u653b\u51fb\u529b+40',0,4,0,40,0,0,0,0),(27,'\u9632\u5fa1UP','\u89d2\u8272\u9632\u5fa1\u529b+10',0,0,10,0,0,0,0,0),(28,'\u9632\u5fa1UP2','\u89d2\u8272\u9632\u5fa1\u529b+20',0,2,20,0,0,0,0,0),(29,'\u9632\u5fa1UP3','\u89d2\u8272\u9632\u5fa1\u529b+30',0,3,30,0,0,0,0,0),(30,'\u9632\u5fa1UP4','\u89d2\u8272\u9632\u5fa1\u529b+40',0,4,40,0,0,0,0,0),(31,'\u8fd1\u6218\u8fde\u51fb','\u8fde\u7eed\u53d1\u52a82\u6b21\u653b\u51fb\uff08\u6b65\u5175\u6709\u6548\uff09',0,0,0,0,6,2,0,0),(32,'\u8fd1\u6218\u8fde\u51fb2','\u8fde\u7eed\u53d1\u52a83\u6b21\u653b\u51fb\uff08\u6b65\u5175\u6709\u6548\uff09',0,2,0,0,6,3,0,0),(33,'\u8fd1\u6218\u8fde\u51fb3','\u8fde\u7eed\u53d1\u52a84\u6b21\u653b\u51fb\uff08\u6b65\u5175\u6709\u6548\uff09',0,3,0,0,6,4,0,0),(34,'\u8fd1\u6218\u8fde\u51fb4','\u8fde\u7eed\u53d1\u52a85\u6b21\u653b\u51fb\uff08\u6b65\u5175\u6709\u6548\uff09',0,4,0,0,6,5,0,0),(35,'\u8fdc\u7a0b\u8fde\u51fb','\u8fde\u7eed\u53d1\u52a82\u6b21\u653b\u51fb\uff08\u8fdc\u7a0b\u6709\u6548\uff09',0,0,0,0,7,2,0,0),(36,'\u8fdc\u7a0b\u8fde\u51fb2','\u8fde\u7eed\u53d1\u52a83\u6b21\u653b\u51fb\uff08\u8fdc\u7a0b\u6709\u6548\uff09',0,2,0,0,7,3,0,0),(37,'\u8fdc\u7a0b\u8fde\u51fb3','\u8fde\u7eed\u53d1\u52a84\u6b21\u653b\u51fb\uff08\u8fdc\u7a0b\u6709\u6548\uff09',0,3,0,0,7,4,0,0),(38,'\u8fdc\u7a0b\u8fde\u51fb4','\u8fde\u7eed\u53d1\u52a85\u6b21\u653b\u51fb\uff08\u8fdc\u7a0b\u6709\u6548\uff09',0,4,0,0,7,5,0,0),(39,'\u7bad\u77e2\u65e0\u6548','\u89d2\u8272\u5bf9\u5f13\u7bad\u4f24\u5bb3\u514d\u75ab',0,0,0,0,0,0,0,0),(40,'\u9b54\u6cd5\u65e0\u6548','\u89d2\u8272\u5bf9\u9b54\u6cd5\u4f24\u5bb3\u514d\u75ab',0,0,0,0,0,0,0,0),(41,'\u8fdc\u7a0b\u65e0\u6548','\u89d2\u8272\u5bf9\u8fdc\u7a0b\u4f24\u5bb3\u514d\u75ab',0,0,0,0,0,0,0,0),(42,'\u8d27\u7269\u8fd0\u8f93','\u89d2\u8272\u5728\u6751\u843d\u4e2d\u79fb\u52a8\u901f\u5ea6X2',0,0,0,0,0,0,0,0),(43,'\u8349\u836f\u6062\u590d','',0,0,0,0,8,15,0,0),(44,'\u5175\u7cae\u4e38','',0,0,0,0,8,20,0,0),(45,'\u94f6\u6db2\u4e39','',0,0,0,0,8,30,0,0),(46,'\u5fcd\u72ac\u75be\u8d70','',0,0,0,0,9,0,0,0),(47,'\u91ce\u732a','',0,0,0,0,0,0,0,0),(48,'\u91ce\u72fc','',0,0,0,0,0,0,0,0),(49,'\u5c71\u718a','',0,0,0,0,0,0,0,0),(50,'\u91ce\u9524','',0,0,0,0,0,0,0,0),(51,'\u4e4c\u9e26','',0,0,0,0,0,0,0,0),(52,'\u86e4\u87c6','',0,0,0,0,0,0,0,0),(53,'\u77ee\u9a6c','',0,0,0,0,0,0,0,0)", "description": "Creates a table named skill with 23 columns: id (integer primary key), name (varchar), description (varchar), type (integer), level (integer), attack (integer), defense (integer), breed (integer), value (integer), is_active (integer), is_passive (integer).", "concepts": ["INSERT INTO", "VALUES", "skill", "skill", "skill", "skill", "skill", "skill", "skill", "skill", "skill", "skill", "skill", "skill", "skill"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Drops the table named tech if it exists. */\nDROP TABLE IF EXISTS `tech`", "description": "Drops the table named tech if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named tech if it exists.", "response": "-- Reasoning:\nWe need to delete the table named tech if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS tech;\n```\n\n-- Explanation:\nThis statement deletes the table named tech if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('tech');"}
{"seed": "/* Creates a table named tech with two columns: id (integer primary key) and name (varchar). */\nCREATE TABLE `tech` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(100) COLLATE utf8mb4_bin NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named tech with two columns: id (integer primary key) and name (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "ENGINE", "CHARSET", "NOT NULL", "COLLATE", "utf8mb4_"], "instruction": "Write a SQL query to create a table named tech with two columns: id (integer primary key) and name (varchar).", "response": "-- Reasoning:\nWe need a new table named tech. It should have an integer primary key so that each tech has a unique identifier, and a name column to store the tech\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE tech (\n  id INT PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the tech table with two columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('tech');"}
{"seed": "/* Creates a table named user with 23 columns: uid (integer primary key), silver (integer), username (varchar), gold (integer), inResearch (integer), soldiers (char), inSell (char), date (integer), curVillage (integer), gameStage (integer), ownPeople (char), ownBuild (char), fightNum (integer), arenaLevel (integer), ownTech (char), lastArenaTime (integer), landBook (integer), showMapYet */\nCREATE TABLE `user` (\n  `uid` int(11) NOT NULL AUTO_INCREMENT,\n  `silver` int(11) NOT NULL DEFAULT '0',\n  `username` varchar(50) COLLATE utf8mb4_bin NOT NULL,\n  `gold` int(11) NOT NULL DEFAULT '0',\n  `inResearch` int(11) NOT NULL DEFAULT '0',\n  `soldiers` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[[1,50],[0,0],[0,0],[0,0]]',\n  `inSell` char(255) COLLATE utf8mb4_bin NOT NULL,\n  `date` int(11) NOT NULL DEFAULT '720',\n  `curVillage` int(11) NOT NULL DEFAULT '1',\n  `gameStage` int(11) NOT NULL DEFAULT '1',\n  `ownPeople` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `ownBuild` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[1,2,15,4,5,6,7]',\n  `fightNum` int(11) NOT NULL DEFAULT '4',\n  `arenaLevel` int(11) NOT NULL DEFAULT '1',\n  `ownTech` char(255) COLLATE utf8mb4_bin NOT NULL,\n  `lastArenaTime` int(11) NOT NULL DEFAULT '0',\n  `landBook` int(11) NOT NULL DEFAULT '0',\n  `showMapYet` tinyint(1) NOT NULL DEFAULT '0',\n  `attendHero` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `newStage` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`uid`),\n  KEY `username` (`username`)\n) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named user with 23 columns: uid (integer primary key), silver (integer), username (varchar), gold (integer), inResearch (integer), soldiers (char), inSell (char), date (integer), curVillage (integer), gameStage (integer), ownPeople (char), ownBuild (char), fightNum (integer), arenaLevel (integer), ownTech (char), lastArenaTime (integer), landBook (integer), showMapYet", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "DEFAULT", "NOT NULL", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named user with 23 columns: uid (integer primary key), silver (integer), username (varchar), gold (integer), inResearch (integer), soldiers (char), inSell (char), date (integer), curVillage (integer), gameStage (integer), ownPeople (char), ownBuild (char), fightNum (integer), arenaLevel (integer), ownTech (char), lastArenaTime (integer), landBook (integer), showMapYet.", "response": "-- Reasoning:\nWe need a new table named user. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE user (\n  uid INT PRIMARY KEY,\n  silver INT,\n  username VARCHAR(20),\n  gold INT,\n  inResearch INT,\n  soldiers CHAR,\n  inSell CHAR,\n  date INT,\n  curVillage INT,\n  gameStage INT,\n  ownPeople CHAR,\n  ownBuild CHAR,\n  fightNum INT,\n  arenaLevel INT,\n  ownTech CHAR,\n  lastArenaTime INT,\n  landBook INT,\n  showMapYet INT\n);\n```\n\n-- Explanation:\nThis statement defines the user table with 23 columns:\n  \u2022 uid: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 silver: integer\n  \u2022 username: variable\u2010length string up to 20 characters\n  \u2022 gold: integer\n  \u2022 inResearch: integer\n  \u2022 soldiers: char\n  \u2022 inSell: char\n  \u2022 date: integer\n  \u2022 curVillage: integer\n  \u2022 gameStage: integer\n  \u2022 ownPeople: char\n  \u2022 ownBuild: char\n  \u2022 fightNum: integer\n  \u2022 arenaLevel: integer\n  \u2022 ownTech: char\n  \u2022 lastArenaTime: integer\n  \u2022 landBook: integer\n  \u2022 showMapY"}
{"seed": "/* Drops the table named userBattleData if it exists. */\nDROP TABLE IF EXISTS `userBattleData`", "description": "Drops the table named userBattleData if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named userBattleData if it exists.", "response": "-- Reasoning:\nWe need to drop the table named userBattleData if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS userBattleData;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('userBattleData');"}
{"seed": "/* Creates a table named userBattleData with two columns: uid (integer) and catData (varchar). */\nCREATE TABLE `userBattleData` (\n  `uid` int(11) NOT NULL,\n  `catData` varchar(1500) COLLATE utf8mb4_bin NOT NULL,\n  PRIMARY KEY (`uid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named userBattleData with two columns: uid (integer) and catData (varchar).", "concepts": ["CREATE TABLE", "uid", "catData", "PRIMARY KEY", "varchar", "utf8mb4_bin", "utf8mb4_bin", "utf8mb"], "instruction": "Write a SQL query to create a table named userBattleData with two columns: uid (integer) and catData (varchar).", "response": "-- Reasoning:\nWe need a new table named userBattleData. It should have an integer primary key so that each user has a unique identifier, and a catData column to store the user\u2019s cat data as text.\n\n-- Solution:\n```sql\nCREATE TABLE userBattleData (\n  uid INT PRIMARY KEY,\n  catData VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the userBattleData table with two columns:\n  \u2022 uid: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 catData: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('userBattleData');"}
{"seed": "/* Inserts 13 rows into the userBattleData table with the given values. */\nINSERT INTO `userBattleData` VALUES (51,'null'),(52,'null'),(53,'null'),(54,'null'),(55,'null'),(56,'null'),(57,'null'),(58,'{\\\"totalTime\\\":[1.2206555615734,3.3541019662497,5.6608303277876,5.7578207683116,1.9235384061671,3.6718523935474],\\\"path\\\":[229,5,228,145,146,147,254],\\\"curPoint\\\":4,\\\"moveTime\\\":4}'),(59,'null'),(60,'null'),(61,'null'),(62,'null'),(63,'null'),(64,'null'),(65,'null'),(66,'null'),(67,'null'),(68,'null'),(69,'null')", "description": "Inserts 13 rows into the userBattleData table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 13 rows into the userBattleData table with the given values.", "response": "-- Reasoning:\nWe need to insert 13 rows into the userBattleData table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO userBattleData (user_id, battle_id, result)\nVALUES (1, 1, 'win'), (1, 2, 'win'), (1, 3, 'win'), (1, 4, 'win'), (1, 5, 'win'), (1, 6, 'win'), (1, 7, 'win'), (1, 8, 'win'), (1, 9, 'win'), (1, 10, 'win'), (1, 11, 'win'), (1, 12, 'win'), (1, 13, 'win');\n```\n\n-- Explanation:\nThis INSERT statement inserts 13 rows into the userBattleData table with the given values.\n\n-- Tests:\n-- 1. Verify 13 rows are inserted\nSELECT * FROM userBattleData;"}
{"seed": "/* Drops the table named userBuilding if it exists. */\nDROP TABLE IF EXISTS `userBuilding`", "description": "Drops the table named userBuilding if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named userBuilding if it exists.", "response": "-- Reasoning:\nWe need to drop the table named userBuilding if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS userBuilding;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('userBuilding');"}
{"seed": "/* Creates a table named userBuilding with 11 columns: uid (integer), bid (integer), kind (integer), ax (integer), ay (integer), static (tinyint), dir (integer), goodsKind (integer), workNum (integer), and lifeStage (float). */\nCREATE TABLE `userBuilding` (\n  `uid` int(11) NOT NULL,\n  `bid` int(11) NOT NULL,\n  `kind` int(11) NOT NULL DEFAULT '0',\n  `ax` int(11) NOT NULL,\n  `ay` int(11) NOT NULL,\n  `static` tinyint(1) NOT NULL DEFAULT '0',\n  `dir` int(11) NOT NULL DEFAULT '0',\n  `goodsKind` int(11) NOT NULL DEFAULT '0',\n  `workNum` int(11) NOT NULL DEFAULT '0',\n  `lifeStage` float NOT NULL DEFAULT '0',\n  PRIMARY KEY (`uid`,`bid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named userBuilding with 11 columns: uid (integer), bid (integer), kind (integer), ax (integer), ay (integer), static (tinyint), dir (integer), goodsKind (integer), workNum (integer), and lifeStage (float).", "concepts": ["CREATE TABLE", "PRIMARY KEY", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named userBuilding with 11 columns: uid (integer), bid (integer), kind (integer), ax (integer), ay (integer), static (tinyint), dir (integer), goodsKind (integer), workNum (integer), and lifeStage (float).", "response": "-- Reasoning:\nWe need a new table named userBuilding. It should have an integer primary key so that each building has a unique identifier, and a name column to store the building\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE userBuilding (\n  uid INT,\n  bid INT,\n  kind INT,\n  ax INT,\n  ay INT,\n  static TINYINT,\n  dir INT,\n  goodsKind INT,\n  workNum INT,\n  lifeStage FLOAT\n);\n```\n\n-- Explanation:\nThis statement defines the userBuilding table with 11 columns:\n  \u2022 uid: integer\n  \u2022 bid: integer\n  \u2022 kind: integer\n  \u2022 ax: integer\n  \u2022 ay: integer\n  \u2022 static: tinyint\n  \u2022 dir: integer\n  \u2022 goodsKind: integer\n  \u2022 workNum: integer\n  \u2022 lifeStage: float\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('userBuilding');"}
{"seed": "/* Drops the table named userHoldEquip if it exists. */\nDROP TABLE IF EXISTS `userHoldEquip`", "description": "Drops the table named userHoldEquip if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named userHoldEquip if it exists.", "response": "-- Reasoning:\nWe need to drop the table named userHoldEquip if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS userHoldEquip;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('userHoldEquip');"}
{"seed": "/* Creates a table named userHoldEquip with three columns: uid (integer), eid (integer), and num (integer). The table has a unique constraint on the columns uid and eid. */\nCREATE TABLE `userHoldEquip` (\n  `uid` int(11) NOT NULL,\n  `eid` int(11) NOT NULL,\n  `num` int(11) NOT NULL,\n  UNIQUE KEY `uid` (`uid`,`eid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named userHoldEquip with three columns: uid (integer), eid (integer), and num (integer). The table has a unique constraint on the columns uid and eid.", "concepts": ["CREATE TABLE", "uid", "eid", "num", "UNIQUE", "KEY", "uid", "eid", "num"], "instruction": "Write a SQL query to create a table named userHoldEquip with three columns: uid (integer), eid (integer), and num (integer). The table has a unique constraint on the columns uid and eid.", "response": "-- Reasoning:\nWe need a new table named userHoldEquip. It should have a unique constraint on the columns uid and eid so that each user can only hold one copy of each equipment.\n\n-- Solution:\n```sql\nCREATE TABLE userHoldEquip (\n  uid INT,\n  eid INT,\n  num INT,\n  PRIMARY KEY (uid, eid),\n  UNIQUE (uid, eid)\n);\n```\n\n-- Explanation:\nThis statement defines the userHoldEquip table with three columns:\n  \u2022 uid: integer\n  \u2022 eid: integer\n  \u2022 num: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('userHoldEquip');"}
{"seed": "/* Inserts a new row into the userHoldEquip table with the values 68, 3, and 1. */\nINSERT INTO `userHoldEquip` VALUES (68,3,1)", "description": "Inserts a new row into the userHoldEquip table with the values 68, 3, and 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the userHoldEquip table with the values 68, 3, and 1.", "response": "-- Reasoning:\nWe need to insert a new row into the userHoldEquip table with the values 68, 3, and 1.\n\n-- Solution:\n```sql\nINSERT INTO userHoldEquip (userId, equipId, quantity)\nVALUES (68, 3, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the userHoldEquip table with the values 68, 3, and 1.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM userHoldEquip;"}
{"seed": "/* Drops the table named userPeople if it exists. */\nDROP TABLE IF EXISTS `userPeople`", "description": "Drops the table named userPeople if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named userPeople if it exists.", "response": "-- Reasoning:\nWe need to delete the table named userPeople if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS userPeople;\n```\n\n-- Explanation:\nThis statement deletes the table named userPeople if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('userPeople');"}
{"seed": "/* Creates a table named userPeople with 13 columns: uid (integer), pid (integer), kind (integer), px (integer), py (integer), level (integer), hid (integer), health (integer), weapon (integer), head (integer), body (integer), spe (integer). */\nCREATE TABLE `userPeople` (\n  `uid` int(11) NOT NULL,\n  `pid` int(11) NOT NULL,\n  `kind` int(11) NOT NULL,\n  `px` int(11) NOT NULL,\n  `py` int(11) NOT NULL,\n  `level` int(11) NOT NULL DEFAULT '0',\n  `hid` int(11) NOT NULL DEFAULT '0',\n  `health` int(11) NOT NULL DEFAULT '0',\n  `weapon` int(11) NOT NULL DEFAULT '0',\n  `head` int(11) NOT NULL DEFAULT '0',\n  `body` int(11) NOT NULL DEFAULT '0',\n  `spe` int(11) NOT NULL DEFAULT '0',\n  PRIMARY KEY (`uid`,`pid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named userPeople with 13 columns: uid (integer), pid (integer), kind (integer), px (integer), py (integer), level (integer), hid (integer), health (integer), weapon (integer), head (integer), body (integer), spe (integer).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named userPeople with 13 columns: uid (integer), pid (integer), kind (integer), px (integer), py (integer), level (integer), hid (integer), health (integer), weapon (integer), head (integer), body (integer), spe (integer).", "response": "-- Reasoning:\nWe need a new table named userPeople. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE userPeople (\n  uid INT PRIMARY KEY,\n  pid INT,\n  kind INT,\n  px INT,\n  py INT,\n  level INT,\n  hid INT,\n  health INT,\n  weapon INT,\n  head INT,\n  body INT,\n  spe INT\n);\n```\n\n-- Explanation:\nThis statement defines the userPeople table with 13 columns:\n  \u2022 uid: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 pid: integer\n  \u2022 kind: integer\n  \u2022 px: integer\n  \u2022 py: integer\n  \u2022 level: integer\n  \u2022 hid: integer\n  \u2022 health: integer\n  \u2022 weapon: integer\n  \u2022 head: integer\n  \u2022 body: integer\n  \u2022 spe: integer\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('userPeople');"}
{"seed": "/* The first column is the name of the table. */\nINSERT INTO `userPeople` VALUES (5,1,14,4930,680,0,0,0,0,0,0,0),(5,2,18,4930,680,0,0,0,0,0,0,0),(5,3,20,4930,680,0,0,0,0,0,0,0),(5,4,23,4976,703,0,0,0,0,0,0,0),(8,1,14,4930,680,0,0,0,0,0,0,0),(8,2,18,4930,680,0,0,0,0,0,0,0),(8,3,20,4930,680,0,0,0,0,0,0,0),(8,4,23,4976,703,0,0,0,0,0,0,0),(10,1,14,4930,680,0,0,0,0,0,0,0),(10,2,18,4930,680,0,0,0,0,0,0,0),(10,3,20,4930,680,0,0,0,0,0,0,0),(10,4,23,4976,703,0,0,0,0,0,0,0),(12,1,14,4930,680,0,0,0,0,0,0,0),(12,2,18,4930,680,0,0,0,0,0,0,0),(12,3,20,4930,680,0,0,0,0,0,0,0),(12,4,23,4976,703,0,0,0,0,0,0,0),(13,1,14,4250,1020,0,114,8,0,0,0,0),(13,2,18,4425,1122,0,118,14,0,0,0,0),(13,3,20,4604,1183,0,97,35,0,0,0,0),(13,4,23,4590,850,0,110,39,0,0,0,0),(13,5,4,4096,1255,0,116,0,0,0,0,0),(14,1,14,4930,680,0,0,0,0,0,0,0),(14,2,18,4930,680,0,0,0,0,0,0,0),(14,3,20,4930,680,0,0,0,0,0,0,0),(14,4,23,4976,703,0,0,0,0,0,0,0),(16,1,14,4930,680,0,0,0,0,0,0,0),(16,2,18,4930,680,0,0,0,0,0,0,0),(16,3,20,4930,680,0,0,0,0,0,0,0),(16,4,23,4976,703,0,0,0,0,0,0,0),(17,1,14,4930,680,0,0,0,0,0,0,0),(17,2,18,4930,680,0,0,0,0,0,0,0),(17,3,20,4930,680,0,0,0,0,0,0,0),(17,4,23,4613,1009,0,97,0,0,0,0,0),(18,1,14,4930,680,0,0,0,0,0,0,0),(18,2,18,4930,680,0,0,0,0,0,0,0),(18,3,20,4930,680,0,0,0,0,0,0,0),(18,4,23,4590,1190,0,97,61,0,0,0,0),(19,1,14,4930,680,0,0,0,0,0,0,0),(19,2,18,4930,680,0,0,0,0,0,0,0),(19,3,20,4930,680,0,0,0,0,0,0,0),(19,4,23,4590,1190,0,97,15,0,0,0,0),(20,1,14,4930,680,0,0,0,0,0,0,0),(20,2,18,4930,680,0,0,0,0,0,0,0),(20,3,20,4930,680,0,0,0,0,0,0,0),(20,4,23,4455,1088,0,97,0,0,0,0,0),(21,1,14,4930,680,0,0,0,0,0,0,0),(21,2,18,4930,680,0,0,0,0,0,0,0),(21,3,20,4930,680,0,0,0,0,0,0,0),(21,4,23,4930,1020,0,97,59,0,0,0,0),(22,1,14,4930,680,0,0,0,0,0,0,0),(22,2,18,4930,680,0,0,0,0,0,0,0),(22,3,20,4930,680,0,0,0,0,0,0,0),(22,4,23,4894,868,0,97,0,0,0,0,0),(23,1,14,4930,680,0,0,0,0,0,0,0),(23,2,18,4930,680,0,0,0,0,0,0,0),(23,3,20,4930,680,0,0,0,0,0,0,0),(23,4,23,4934,1018,0,97,53,0,0,0,0),(24,1,14,4930,680,0,0,0,0,0,0,0),(24,2,18,4930,680,0,0,0,0,0,0,0),(24,3,20,4930,680,0,0,0,0,0,0,0),(24,4,23,4930,1020,0,97,55,0,0,0,0),(24,5,10,4930,680,0,0,0,0,0,0,0),(25,1,14,4250,1020,0,118,48,0,0,0,0),(25,2,18,4250,1700,0,114,46,2,0,0,0),(25,3,20,3740,1955,0,112,20,0,0,0,0),(25,4,23,4933,1019,0,97,54,0,0,0,0),(25,5,10,4590,1530,0,116,54,0,0,0,0),(25,6,35,3570,1870,0,120,63,0,0,0,0),(26,1,14,4080,1615,2,112,54,3,0,0,0),(26,2,18,4250,1700,6,113,94,3,0,0,0),(26,3,20,4840,1066,12,110,153,3,0,0,0),(26,4,23,4590,1190,28,97,313,3,0,0,0),(26,5,4,4590,1530,11,116,34,3,0,0,0),(26,6,9,4420,1785,11,114,48,0,0,0,0),(27,1,14,4250,1020,0,112,37,0,0,0,0),(27,2,18,4420,935,0,110,14,0,0,0,0),(27,3,20,4590,850,0,111,18,0,0,0,0),(27,4,23,4931,1019,0,97,55,0,0,0,0),(27,5,4,3910,1530,0,114,67,0,0,0,0),(28,1,14,4930,680,0,0,0,0,0,0,0),(28,2,18,4930,680,0,0,0,0,0,0,0),(28,3,20,4930,680,0,0,0,0,0,0,0),(28,4,23,4800,1085,0,97,54,0,0,0,0),(29,1,14,4250,1020,5,110,48,3,0,0,0),(29,2,18,4420,935,6,111,46,3,0,0,0),(29,3,20,4590,850,8,112,57,3,0,0,0),(29,4,23,4931,1019,6,97,59,3,0,0,0),(29,5,4,4250,1870,0,0,0,0,0,0,0),(30,1,14,4930,680,0,0,0,3,0,0,0),(30,2,18,4930,680,0,0,0,3,0,0,0),(30,3,20,4930,680,0,0,0,3,0,0,0),(30,4,23,4590,1190,0,97,55,3,0,0,0),(30,5,4,5270,1530,0,0,0,3,0,0,0),(30,6,9,5270,1530,0,0,0,3,0,0,0),(31,1,14,4930,680,0,0,0,0,0,0,0),(31,2,18,4930,680,0,0,0,0,0,0,0),(31,3,20,4930,680,0,0,0,0,0,0,0),(31,4,23,4590,1190,0,97,0,0,0,0,0),(32,1,14,4590,850,0,115,47,0,0,0,0),(32,2,18,4590,1530,0,113,37,0,0,0,0),(32,3,20,4644,1898,0,111,57,3,0,0,0),(32,4,23,4590,1190,4,97,97,3,0,0,0),(32,5,4,4991,2071,4,127,83,3,0,0,0),(32,6,9,4760,1445,9,117,111,3,0,0,0),(33,1,14,4930,1020,0,0,0,0,0,0,0),(33,2,18,4930,1020,0,0,0,0,0,0,0),(33,3,20,4930,1020,0,0,0,0,0,0,0),(33,4,23,4744,1113,0,97,61,0,0,0,0),(34,1,14,4930,1020,0,0,0,0,0,0,0),(34,2,18,4930,1020,0,0,0,0,0,0,0),(34,3,20,4930,1020,0,0,0,0,0,0,0),(34,4,23,4976,703,0,0,0,0,0,0,0),(35,1,14,4930,1020,0,0,0,0,0,0,0),(35,2,18,4930,1020,0,0,0,0,0,0,0),(35,3,20,4930,1020,0,0,0,0,0,0,0),(35,4,23,4881,1044,0,97,53,0,0,0,0),(36,1,14,4930,1020,0,0,0,0,0,0,0),(36,2,18,4930,1020,0,0,0,0,0,0,0),(36,3,20,4930,1020,0,0,0,0,0,0,0),(36,4,23,4932,1019,0,97,58,0,0,0,0),(36,5,4,3910,1360,0,0,0,0,0,0,0),(37,1,14,4930,1020,0,0,0,0,0,0,0),(37,2,18,4930,1020,0,0,0,3,0,0,0),(37,3,20,4250,1700,0,110,57,3,0,47,0),(37,4,23,4590,1190,0,97,61,3,0,47,0),(37,5,4,4080,1615,0,112,67,3,0,47,0),(37,6,9,4590,1870,0,0,0,3,0,47,0),(38,1,14,4928,1019,0,122,31,0,0,0,0),(38,2,18,4080,1105,0,121,46,3,0,0,0),(38,3,20,3740,1955,0,127,57,3,0,47,0),(38,4,23,4590,1190,0,97,61,3,0,47,0),(38,5,4,5100,1105,0,113,63,3,0,47,0),(38,6,9,5064,1258,0,117,41,3,0,47,0),(39,1,14,4930,1020,0,0,0,0,0,0,0),(39,2,18,4080,1615,0,115,46,0,0,0,0),(39,3,20,4080,1275,0,110,57,0,0,0,0),(39,4,23,4569,1031,0,97,61,0,0,0,0),(39,5,4,3910,1360,0,0,0,0,0,0,0),(40,1,14,5440,2125,0,148,48,0,0,0,0),(40,2,18,5270,2040,0,147,46,0,0,0,0),(40,3,20,4930,1870,0,146,57,0,0,0,0),(40,4,23,4931,1020,0,144,58,0,0,0,0),(41,1,14,3910,1360,0,0,0,0,0,0,0),(41,2,18,3910,1360,0,0,0,0,0,0,0),(41,3,20,4421,935,0,144,54,0,0,0,0),(41,4,23,4590,1190,0,123,61,0,0,0,0),(42,1,14,3910,1360,0,0,0,0,0,0,0),(42,2,18,3910,1360,0,0,0,0,0,0,0),(42,3,20,4760,1275,0,144,57,0,0,0,0),(42,4,23,4932,1019,0,123,56,0,0,0,0),(43,1,14,3230,1190,0,0,0,0,0,0,0),(43,2,18,3230,1190,0,0,0,0,0,0,0),(43,3,20,3230,1190,0,0,0,0,0,0,0),(43,4,23,4917,1026,0,123,61,0,0,0,0),(44,1,14,4930,680,0,0,0,0,0,0,0),(44,2,18,4930,680,0,0,0,0,0,0,0),(44,3,20,4930,680,0,0,0,0,0,0,0),(44,4,23,4833,1069,0,123,61,0,0,0,0),(45,1,14,4930,1190,0,0,0,0,0,0,0),(45,2,18,4420,935,0,146,46,0,0,0,0),(45,3,20,4931,1021,0,144,57,0,0,0,0),(45,4,23,4590,1190,0,123,61,0,0,0,0),(46,1,14,4590,1190,0,0,0,0,0,0,0),(46,2,18,4931,1020,0,146,43,0,0,0,0),(46,3,20,4930,1190,0,144,57,0,0,0,0),(46,4,23,4250,1020,0,123,61,0,0,0,0),(47,1,14,4420,1105,0,0,0,0,0,0,0),(47,2,18,4250,1020,0,0,0,0,0,0,0),(47,3,20,4080,935,0,0,0,0,0,0,0),(47,4,23,4590,1190,0,123,56,0,0,0,0),(48,1,14,4420,1105,0,0,0,0,0,0,0),(48,2,18,4250,1020,0,0,0,0,0,0,0),(48,3,20,4080,935,0,0,0,0,0,0,0),(48,4,23,4590,1190,0,123,61,0,0,0,0),(48,5,4,3910,1360,0,0,0,0,0,0,0),(49,1,14,4420,1120,0,0,0,0,0,0,0),(49,2,18,4250,1035,0,0,0,0,0,0,0),(49,3,20,4080,950,0,0,0,0,0,0,0),(49,4,23,4250,865,0,0,0,0,0,0,0),(50,1,14,4420,1105,0,0,0,0,0,0,0),(50,2,18,4250,1020,0,0,0,0,0,0,0),(50,3,20,4420,935,0,144,57,0,0,0,0),(50,4,23,4590,1190,0,123,61,0,0,0,0),(51,1,14,4420,1105,0,0,0,0,0,0,0),(51,2,18,4250,1020,0,0,0,0,0,0,0),(51,3,20,4080,935,0,0,0,0,0,0,0),(51,4,23,4931,1019,0,123,60,0,0,0,0),(52,1,14,4420,1105,0,0,0,0,0,0,0),(52,2,18,4080,1105,0,146,26,0,0,0,0),(52,3,20,3910,1530,0,144,18,0,0,0,0),(52,4,23,4775,1097,0,123,61,0,0,0,0),(53,1,14,4420,1105,0,0,0,0,0,0,0),(53,2,18,4250,1020,0,0,0,0,0,0,0),(53,3,20,4930,1190,0,144,36,0,0,0,0),(53,4,23,4590,1190,0,123,61,0,0,0,0),(53,5,4,4080,1105,0,146,36,0,0,0,0),(54,1,14,4420,1105,0,0,0,0,0,0,0),(54,2,18,4931,1020,0,145,38,0,0,0,0),(54,3,20,4420,935,0,144,57,3,0,0,0),(54,4,23,4590,1190,0,123,61,3,0,0,0),(54,5,4,3910,1360,0,0,0,0,0,0,0),(54,6,9,4590,1870,0,0,0,0,0,0,0),(55,1,14,4420,1105,0,0,0,3,0,0,0),(55,2,18,4250,1020,0,0,0,3,0,0,0),(55,3,20,4590,850,0,144,10,3,0,0,0),(55,4,23,4590,1190,0,123,61,3,0,0,0),(56,1,14,4930,1190,0,147,16,0,0,0,0),(56,2,18,4420,935,0,146,16,0,0,0,0),(56,3,20,4932,1021,0,144,26,0,0,0,0),(56,4,23,4590,1190,0,123,61,0,0,0,0),(56,5,14,4590,1020,0,0,0,0,0,0,0),(57,1,18,4760,1445,0,154,46,0,0,0,0),(57,2,20,4931,1019,0,148,54,0,0,0,0),(57,3,23,4250,1360,0,146,58,3,0,0,0),(57,4,14,4590,1530,0,152,12,3,0,0,0),(57,5,14,4080,1615,0,150,48,3,0,0,0),(57,6,4,4590,850,0,144,67,3,0,0,0),(57,7,9,4590,1190,0,123,57,3,0,0,0),(58,1,18,4250,1020,0,0,0,0,0,0,0),(58,2,20,4590,850,0,144,57,0,0,0,0),(58,3,23,4689,1140,0,123,54,0,0,0,0),(58,4,14,4590,1020,0,0,0,0,0,0,0),(58,5,14,4590,1020,0,0,0,0,0,0,0),(59,1,18,4250,1020,0,0,0,0,0,0,0),(59,2,20,4420,935,0,144,20,0,0,0,0),(59,3,23,4590,1190,0,123,39,0,0,0,0),(60,1,18,4250,1035,0,0,0,0,0,0,0),(60,2,20,4080,950,0,0,0,0,0,0,0),(60,3,23,4250,865,0,0,0,0,0,0,0),(61,1,18,4250,1035,0,0,0,0,0,0,0),(61,2,20,4080,950,0,0,0,0,0,0,0),(61,3,23,4250,865,0,0,0,0,0,0,0),(62,1,18,4250,1020,0,0,46,0,0,0,0),(62,2,20,4080,935,0,0,57,0,0,0,0),(62,3,23,4808,1080,0,123,61,0,0,0,0),(63,1,18,4250,1035,0,0,46,0,0,0,0),(63,2,20,4080,950,0,0,57,0,0,0,0),(63,3,23,4250,865,0,0,61,0,0,0,0),(64,1,18,4250,1020,0,0,46,0,0,0,0),(64,2,20,4420,935,0,144,57,0,0,0,0),(64,3,23,4924,1022,0,123,61,0,0,0,0),(65,1,18,4358,1136,6,146,94,0,0,0,0),(65,2,20,4420,935,1,144,50,0,0,0,0),(65,3,23,4590,1190,5,123,68,0,0,0,0),(65,4,14,4760,1105,1,0,0,0,0,0,0),(66,1,18,3910,1190,0,146,36,0,0,0,0),(66,2,20,4247,1021,0,144,56,0,0,0,0),(66,3,23,4590,1190,0,123,61,3,0,47,0),(66,4,14,4930,1700,0,152,46,3,0,47,0),(66,5,4,5105,1447,0,154,14,3,0,47,0),(66,6,9,4930,1360,0,158,22,0,0,0,0),(66,7,5,3908,1360,0,160,46,0,0,0,0),(67,1,18,4249,1020,0,146,39,0,0,0,0),(67,2,20,4420,935,0,144,57,0,0,0,0),(67,3,23,4590,1190,0,123,61,0,0,0,0),(67,4,14,4930,1020,0,150,10,0,0,0,0),(68,1,18,5270,1530,0,146,45,0,0,0,0),(68,2,20,4070,1444,0,144,57,0,0,0,0),(68,3,23,4487,1135,0,123,55,0,0,0,0),(68,4,14,4012,1414,0,148,45,3,0,47,0),(68,5,4,4506,1655,0,157,67,3,0,47,0),(68,6,9,5100,1275,0,150,44,3,0,47,0),(68,7,5,4930,1020,0,159,45,3,0,0,0),(69,1,18,4250,1035,0,0,46,0,0,0,0),(69,2,20,4080,950,0,0,57,0,0,0,0),(69,3,23,4250,865,0,0,61,0,0,0,0)", "description": "The first column is the name of the table.", "concepts": ["```\nCREATE TABLE users (id INT PRIMARY KEY", "name VARCHAR(100));\nINSERT INTO users VALUES (1", "'Alice');"], "instruction": "Write a SQL query to list all the users in the users table.", "response": "-- Reasoning:\nWe need to list all the users in the users table.\n\n-- Solution:\n```sql\nSELECT * FROM users;\n```\n\n-- Explanation:\nThis query selects all the columns from the users table.\n\n-- Tests:\n-- 1. Verify all users are listed\nSELECT * FROM users;"}
{"seed": "/* Drops the table named userResearch if it exists. */\nDROP TABLE IF EXISTS `userResearch`", "description": "Drops the table named userResearch if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named userResearch if it exists.", "response": "-- Reasoning:\nWe need to drop the table named userResearch if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS userResearch;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('userResearch');"}
{"seed": "/* Creates a table named userResearch with three columns: uid (integer primary key), researchGoods (varchar) and ownGoods (varchar). */\nCREATE TABLE `userResearch` (\n  `uid` int(11) NOT NULL,\n  `researchGoods` varchar(500) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `ownGoods` varchar(500) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  PRIMARY KEY (`uid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named userResearch with three columns: uid (integer primary key), researchGoods (varchar) and ownGoods (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "COLLATE", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named userResearch with three columns: uid (integer primary key), researchGoods (varchar) and ownGoods (varchar).", "response": "-- Reasoning:\nWe need a new table named userResearch. It should have an integer primary key so that each user has a unique identifier, and two columns to store the user\u2019s research and own goods as text.\n\n-- Solution:\n```sql\nCREATE TABLE userResearch (\n  uid INT PRIMARY KEY,\n  researchGoods VARCHAR(255),\n  ownGoods VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the userResearch table with three columns:\n  \u2022 uid: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 researchGoods: variable\u2010length string up to 255 characters\n  \u2022 ownGoods: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('userResearch');"}
{"seed": "/* Inserts a new row into the userResearch table with the given values. */\nINSERT INTO `userResearch` VALUES (14,'[]','[]'),(16,'[[0, 11]]','[[0, 2], [0, 3]]'),(17,'[]','[[0, 2], [0, 3], [0, 11]]'),(18,'[[0, 11]]','[[0, 2], [0, 3]]'),(19,'[[0, 11]]','[[0, 2], [0, 3]]'),(20,'[[0, 11]]','[[0, 2], [0, 3]]'),(21,'[[0, 11]]','[[0, 2], [0, 3]]'),(22,'[[0, 11]]','[[0, 2], [0, 3]]'),(23,'[[0, 11]]','[[0, 2], [0, 3]]'),(24,'[[0, 11]]','[[0, 2], [0, 3]]'),(25,'[[0, 11], [0, 4], [0, 6]]','[[0, 2], [0, 3]]'),(26,'[[0, 11]]','[[0, 2], [0, 3]]'),(27,'[[0, 11]]','[[0, 2], [0, 3]]'),(28,'[[0, 11]]','[[0, 2], [0, 3]]'),(29,'[[0, 11]]','[[0, 2], [0, 3]]'),(30,'[[0, 11]]','[[0, 2], [0, 3]]'),(31,'[[0, 11]]','[[0, 2], [0, 3]]'),(32,'[[0, 11], [1, 6], [0, 5], [0, 12]]','[[0, 2], [0, 3]]'),(33,'[[0, 11]]','[[0, 2], [0, 3]]'),(34,'[[0, 11]]','[[0, 2], [0, 3]]'),(35,'[[0, 11]]','[[0, 2], [0, 3]]'),(36,'[[0, 11]]','[[0, 2], [0, 3]]'),(37,'[[0, 11]]','[[0, 2], [0, 3], [0, 47]]'),(38,'[[0, 11], [1, 6]]','[[0, 2], [0, 3], [0, 47]]'),(39,'[[0, 11]]','[[0, 2], [0, 3], [0, 47]]'),(40,'[[0, 11]]','[[0, 2], [0, 3]]'),(41,'[[0, 11]]','[[0, 2], [0, 3]]'),(42,'[[0, 11]]','[[0, 2], [0, 3], [0, 47]]'),(43,'[[0, 11]]','[[0, 2], [0, 3]]'),(44,'[[0, 11]]','[[0, 2], [0, 3]]'),(45,'[[0, 11]]','[[0, 2], [0, 3]]'),(46,'[[0, 11]]','[[0, 2], [0, 3]]'),(47,'[[0, 11]]','[[0, 2], [0, 3]]'),(48,'[[0, 11]]','[[0, 2], [0, 3], [0, 47]]'),(49,'[[0, 11]]','[[0, 2], [0, 3]]'),(50,'[[0, 11]]','[[0, 2], [0, 3]]'),(51,'[[0,11]]','[[0,2],[0,3]]')", "description": "Inserts a new row into the userResearch table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Drops the table named userTableData if it exists. */\nDROP TABLE IF EXISTS `userTableData`", "description": "Drops the table named userTableData if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named userTableData if it exists.", "response": "-- Reasoning:\nWe need to drop the table named userTableData if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS userTableData;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('userTableData');"}
{"seed": "/* Creates a table named userTableData with six columns: uid (integer), buildNum (char), ownCity (char), openMap (char), showLand (char), ownVillage (char). */\nCREATE TABLE `userTableData` (\n  `uid` int(11) NOT NULL,\n  `buildNum` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `ownCity` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `openMap` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `showLand` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  `ownVillage` char(255) COLLATE utf8mb4_bin NOT NULL DEFAULT '[]',\n  PRIMARY KEY (`uid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named userTableData with six columns: uid (integer), buildNum (char), ownCity (char), openMap (char), showLand (char), ownVillage (char).", "concepts": ["CREATE TABLE", "uid", "buildNum", "ownCity", "openMap", "showLand", "ownVillage", "PRIMARY KEY", "INT", "DEFAULT", "NOT NULL"], "instruction": "Write a SQL query to create a table named userTableData with six columns: uid (integer), buildNum (char), ownCity (char), openMap (char), showLand (char), ownVillage (char).", "response": "-- Reasoning:\nWe need a new table named userTableData. It should have six columns:\n  \u2022 uid: integer\n  \u2022 buildNum: char\n  \u2022 ownCity: char\n  \u2022 openMap: char\n  \u2022 showLand: char\n  \u2022 ownVillage: char\n\n-- Solution:\n```sql\nCREATE TABLE userTableData (\n  uid INT,\n  buildNum CHAR(1),\n  ownCity CHAR(1),\n  openMap CHAR(1),\n  showLand CHAR(1),\n  ownVillage CHAR(1)\n);\n```\n\n-- Explanation:\nThis statement defines the userTableData table with six columns:\n  \u2022 uid: integer\n  \u2022 buildNum: char\n  \u2022 ownCity: char\n  \u2022 openMap: char\n  \u2022 showLand: char\n  \u2022 ownVillage: char\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('userTableData');"}
{"seed": "/* Inserts the given data into the userTableData table. */\nINSERT INTO `userTableData` VALUES (25,'[[28, 0], [26, 3], [24, 0], [29, 3]]','[[230, true]]','[[3, true]]','[[11, true]]','[[254, true]]'),(26,'[[28, 2], [29, 14]]','[[230, true]]','[[2, true], [5, true], [6, true], [15, true]]','[[11, true], [13, true]]','[]'),(27,'[]','[]','[[8, true]]','[]','[]'),(28,'[]','[]','[]','[]','[]'),(29,'[]','[]','[[8, true]]','[]','[]'),(30,'[]','[]','[[10, true], [8, true]]','[]','[]'),(31,'[]','[]','[[8, true]]','[]','[]'),(32,'[[28, 1], [29, 5]]','[[232, true], [230, true]]','[[2, true], [6, true], [8, true], [9, true], [10, true]]','[[13, true]]','[]'),(33,'[]','[]','[]','[]','[]'),(34,'[]','[]','[]','[]','[]'),(35,'[]','[]','[]','[]','[]'),(36,'[]','[]','[[8, true]]','[]','[]'),(37,'[]','[]','[[8, true], [10, true], [9, true]]','[]','[]'),(38,'[[28, 3], [29, 12]]','[]','[[3, true], [5, true], [6, true], [8, true], [9, true], [10, true], [11, true], [12, true], [13, true], [14, true]]','[[11, true], [13, true]]','[]'),(39,'[]','[]','[[8, true]]','[]','[]'),(40,'[[29, 3]]','[]','[[2, true]]','[[13, true]]','[]'),(41,'[]','[]','[]','[]','[]'),(42,'[]','[]','[[8, true]]','[]','[]'),(43,'[]','[]','[]','[]','[]'),(44,'[]','[]','[]','[]','[]'),(45,'[]','[]','[]','[]','[]'),(46,'[]','[]','[]','[]','[]'),(47,'[]','[]','[]','[]','[]'),(48,'[]','[]','[[8, true]]','[]','[]'),(49,'[]','[]','[]','[]','[]'),(50,'[]','[]','[]','[]','[]'),(51,'[]','[]','[]','[]','[]'),(52,'[]','[]','[8]','[]','[]'),(53,'[]','[]','[8]','[]','[]'),(54,'[]','[]','[10,8]','[]','[]'),(55,'[]','[]','[10,8]','[]','[]'),(56,'[]','[]','[]','[]','[]'),(57,'[[29,4]]','[]','[2,3,5,8,9,10]','[[11,true],[13,true]]','[]'),(58,'[]','[237,230]','[8]','[]','[]'),(59,'[]','[]','[]','[]','[]'),(60,'[]','[]','[]','[]','[]'),(61,'[]','[]','[]','[]','[]'),(62,'[]','[]','[]','[]','[]'),(63,'[]','[]','[]','[]','[]'),(64,'[]','[]','[]','[]','[]'),(65,'[[29,3]]','[230,237]','[3]','[[11,true]]','[]'),(66,'[]','[230]','[8,10,9]','[]','[]'),(67,'[]','[]','[]','[]','[]'),(68,'[[29,1]]','[230]','[5,8,10,9]','[[11,true]]','[]'),(69,'[]','[]','[]','[]','[]')", "description": "Inserts the given data into the userTableData table.", "concepts": ["INSERT INTO", "VALUES", "userTableData", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "INT", "VARCHAR", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to insert the given data into the userTableData table.", "response": "-- Reasoning:\nWe need to insert the given data into the userTableData table.\n\n-- Solution:\n```sql\nINSERT INTO userTableData (id, name, age)\nVALUES (1, 'John', 20), (2, 'Jane', 25), (3, 'Bob', 30);\n```\n\n-- Explanation:\nThis INSERT statement inserts the given data into the userTableData table.\n\n-- Tests:\n-- 1. Verify data is inserted\nSELECT * FROM userTableData;"}
{"seed": "/* Drops the table villageReward if it exists. */\nDROP TABLE IF EXISTS `villageReward`", "description": "Drops the table villageReward if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table villageReward if it exists.", "response": "-- Reasoning:\nWe need to drop the villageReward table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS villageReward;\n```\n\n-- Explanation:\nThis statement drops the villageReward table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('villageReward');"}
{"seed": "/* Creates a table named villageReward with five columns: id (integer primary key), foot (integer), arrow (integer), magic (integer), and goods (varchar). */\nCREATE TABLE `villageReward` (\n  `id` int(11) NOT NULL,\n  `foot` int(11) NOT NULL DEFAULT '0',\n  `arrow` int(11) NOT NULL DEFAULT '0',\n  `magic` int(11) NOT NULL DEFAULT '0',\n  `cav` int(11) NOT NULL DEFAULT '0',\n  `goods` varchar(500) COLLATE utf8mb4_bin NOT NULL DEFAULT '{}',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin", "description": "Creates a table named villageReward with five columns: id (integer primary key), foot (integer), arrow (integer), magic (integer), and goods (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "NOT NULL", "ENGINE", "CHARSET", "COLLATE", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT", "DEFAULT"], "instruction": "Write a SQL query to create a table named villageReward with five columns: id (integer primary key), foot (integer), arrow (integer), magic (integer), and goods (varchar).", "response": "-- Reasoning:\nWe need a new table named villageReward. It should have an integer primary key so that each village has a unique identifier, and four integer columns to store the number of each type of weapon, and a varchar column to store the name of the village.\n\n-- Solution:\n```sql\nCREATE TABLE villageReward (\n  id INT PRIMARY KEY,\n  foot INT,\n  arrow INT,\n  magic INT,\n  goods VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the villageReward table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 foot: integer\n  \u2022 arrow: integer\n  \u2022 magic: integer\n  \u2022 goods: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('villageReward');"}
{"seed": "/* Inserts 23 rows into the villageReward table. */\nINSERT INTO `villageReward` VALUES (1,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [40], \\\"silver\\\": 650, \\\"build\\\": []}'),(2,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [41], \\\"silver\\\": 800, \\\"build\\\": []}'),(3,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [43], \\\"silver\\\": 600, \\\"build\\\": []}'),(4,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [43], \\\"silver\\\": 400, \\\"build\\\": []}'),(5,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [43], \\\"silver\\\": 400, \\\"build\\\": []}'),(6,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [42], \\\"silver\\\": 500, \\\"build\\\": []}'),(7,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [44], \\\"silver\\\": 400, \\\"build\\\": []}'),(8,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [44], \\\"silver\\\": 200, \\\"build\\\": []}'),(9,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [44], \\\"silver\\\": 650, \\\"build\\\": []}'),(10,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [45], \\\"silver\\\": 500, \\\"build\\\": []}'),(11,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [45], \\\"silver\\\": 1200, \\\"build\\\": []}'),(12,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [45], \\\"silver\\\": 550, \\\"build\\\": []}'),(13,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [45], \\\"silver\\\": 350, \\\"build\\\": []}'),(14,0,0,0,0,'{\\\"equip\\\": [84], \\\"goods\\\": [], \\\"silver\\\": 600, \\\"build\\\": []}'),(15,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [], \\\"silver\\\": 300, \\\"build\\\": []}'),(16,0,0,0,0,'{\\\"equip\\\": [], \\\"goods\\\": [], \\\"silver\\\": 1800, \\\"build\\\": [30]}'),(17,0,0,0,0,'{\\\"equip\\\": [81], \\\"goods\\\": [], \\\"silver\\\": 400, \\\"build\\\": []}'),(18,0,0,0,0,'{\\\"equip\\\": [78], \\\"goods\\\": [], \\\"silver\\\": 0, \\\"build\\\": []}'),(19,0,0,0,0,'{\\\"equip\\\": [79], \\\"goods\\\": [], \\\"silver\\\": 0, \\\"build\\\": []}'),(20,0,0,0,0,'{\\\"equip\\\": [80], \\\"goods\\\": [], \\\"silver\\\": 0, \\\"build\\\": []}'),(21,0,0,0,0,'{\\\"equip\\\": [77], \\\"goods\\\": [], \\\"silver\\\": 0, \\\"build\\\": []}'),(22,0,0,0,0,'{\\\"equip\\\": [76], \\\"goods\\\": [], \\\"silver\\\": 0, \\\"build\\\": []}'),(23,0,0,0,0,'{\\\"equip\\\": [75, 85], \\\"goods\\\": [], \\\"silver\\\": 0, \\\"build\\\": []}')", "description": "Inserts 23 rows into the villageReward table.", "concepts": ["INSERT INTO", "VALUES", "AUTO_INCREMENT", "PRIMARY KEY", "FOREIGN KEY", "DEFAULT", "window functions", "CTE", "UNION", "HAVING", "ORDER"], "instruction": "Write a SQL query to insert 23 rows into the villageReward table.", "response": "-- Reasoning:\nWe need to insert 23 rows into the villageReward table.\n\n-- Solution:\n```sql\nINSERT INTO villageReward (village_id, reward_id)\nVALUES (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23);\n```\n\n-- Explanation:\nThis INSERT statement inserts 23 rows into the villageReward table.\n\n-- Tests:\n-- 1. Verify 23 rows are inserted\nSELECT * FROM villageReward;"}
{"seed": "/* Creates a table named atm with four columns: id (integer), cust_name (varchar), account_no (integer), and atm_status (varchar). */\nCREATE TABLE `atm` (\n  `id` int(10) NOT NULL,\n  `cust_name` varchar(255) NOT NULL,\n  `account_no` int(10) NOT NULL,\n  `atm_status` varchar(50) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named atm with four columns: id (integer), cust_name (varchar), account_no (integer), and atm_status (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named atm with four columns: id (integer), cust_name (varchar), account_no (integer), and atm_status (varchar).", "response": "-- Reasoning:\nWe need a new table named atm. It should have an integer primary key so that each ATM has a unique identifier, and a name column to store the customer\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE atm (\n  id INT PRIMARY KEY,\n  cust_name VARCHAR(255),\n  account_no INT,\n  atm_status VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the atm table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cust_name: variable\u2010length string up to 255 characters\n  \u2022 account_no: integer\n  \u2022 atm_status: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('atm');"}
{"seed": "/* Inserts a new row into the atm table with the given values. */\nINSERT INTO `atm` (`id`, `cust_name`, `account_no`, `atm_status`) VALUES\n(15, 'Rashid feroz', 34, 'PENDING')", "description": "Inserts a new row into the atm table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the atm table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the atm table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO atm (id, location, balance)\nVALUES (1, 'Los Angeles', 10000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the atm table with the given values:\n  \u2022 id: 1\n  \u2022 location: Los Angeles\n  \u2022 balance: 10000\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM atm;"}
{"seed": "/* Creates a table named bank_customers with 30 columns. */\nCREATE TABLE `bank_customers` (\n  `Id` int(100) NOT NULL,\n  `Username` varchar(20) DEFAULT NULL,\n  `Password` varchar(15) DEFAULT NULL,\n  `Customer_Photo` longblob DEFAULT NULL,\n  `Photo_name` varchar(500) DEFAULT NULL,\n  `Customer_ID` varchar(20) DEFAULT NULL,\n  `Gender` varchar(10) NOT NULL,\n  `Landline_no` varchar(10) NOT NULL,\n  `Home_Addr` varchar(100) NOT NULL,\n  `Office_Addr` varchar(255) NOT NULL,\n  `Country` varchar(255) NOT NULL,\n  `State` varchar(255) NOT NULL,\n  `City` varchar(255) NOT NULL,\n  `Pin_code` varchar(255) NOT NULL,\n  `Account_no` varchar(20) DEFAULT NULL,\n  `Branch` varchar(50) DEFAULT NULL,\n  `IFSC_Code` varchar(50) DEFAULT NULL,\n  `PAN` varchar(10) DEFAULT NULL,\n  `AADHAR` varchar(50) DEFAULT NULL,\n  `Current_Balance` float(100,2) DEFAULT NULL,\n  `LastTransaction` int(20) DEFAULT 0,\n  `Mobile_no` varchar(20) DEFAULT NULL,\n  `Email_ID` varchar(50) DEFAULT 'Nil',\n  `Debit_Card_No` varchar(50) DEFAULT NULL,\n  `Debit_Card_Pin` int(4) DEFAULT NULL,\n  `CVV` int(3) DEFAULT NULL,\n  `DOB` varchar(20) DEFAULT NULL,\n  `Area_Loc` varchar(255) DEFAULT NULL,\n  `Nominee_name` varchar(255) DEFAULT NULL,\n  `Nominee_ac_no` varchar(255) DEFAULT NULL,\n  `Last_Login` varchar(50) DEFAULT NULL,\n  `Ac_Opening_Date` varchar(255) DEFAULT NULL,\n  `Account_Status` varchar(10) NOT NULL,\n  `Account_type` varchar(20) NOT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1", "description": "Creates a table named bank_customers with 30 columns.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "NOT NULL", "ENGINE", "MyISAM", "DEFAULT", "CHARSET", "latin1"], "instruction": "Write a SQL query to create a table named bank_customers with 30 columns.", "response": "-- Reasoning:\nWe need a new table named bank_customers. It should have 30 columns, each with a unique name and a data type.\n\n-- Solution:\n```sql\nCREATE TABLE bank_customers (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  address VARCHAR(255),\n  city VARCHAR(255),\n  state VARCHAR(255),\n  zipcode VARCHAR(255),\n  phone VARCHAR(255),\n  email VARCHAR(255),\n  account_number VARCHAR(255),\n  account_type VARCHAR(255),\n  account_balance VARCHAR(255),\n  account_status VARCHAR(255),\n  account_open_date VARCHAR(255),\n  account_close_date VARCHAR(255),\n  account_last_activity_date VARCHAR(255),\n  account_last_activity_amount VARCHAR(255),\n  account_last_activity_type VARCHAR(255),\n  account_last_activity_description VARCHAR(255),\n  account_last_activity_user VARCHAR(255),\n  account_last_activity_user_id VARCHAR(255),\n  account_last_activity_user_name VARCHAR(255),\n  account_last_activity_user_email VARCHAR(255),\n  account_last_activity_"}
{"seed": "/* Inserts a new row into the bank_customers table with the given values. */\nINSERT INTO `bank_customers` (`Id`, `Username`, `Password`, `Customer_Photo`, `Photo_name`, `Customer_ID`, `Gender`, `Landline_no`, `Home_Addr`, `Office_Addr`, `Country`, `State`, `City`, `Pin_code`, `Account_no`, `Branch`, `IFSC_Code`, `PAN`, `AADHAR`, `Current_Balance`, `LastTransaction`, `Mobile_no`, `Email_ID`, `Debit_Card_No`, `Debit_Card_Pin`, `CVV`, `DOB`, `Area_Loc`, `Nominee_name`, `Nominee_ac_no`, `Last_Login`, `Ac_Opening_Date`, `Account_Status`, `Account_type`) VALUES\n(1, 'Junaid', 'junaid@123', NULL, NULL, '10111', 'Male', '', 'XXX', 'XXX', 'India', 'West Bengal', 'Kolkata', '700087', '10110528510111', 'New Market Kolkata ', '10110', 'XXX', 'XXX', 10000.00, 0, '7278523122', 'mail@junaidashraf.com', '421362466207', 7214, NULL, '1995-12-10', 'New Market', '', '', '26/12/20 02:54:19 PM', '26/12/20 02:50:47 PM', 'ACTIVE', 'Saving'),\n(2, 'Ashraf', 'ashraf@123', NULL, NULL, '1011010112', 'Male', '', 'XXX', 'XXX', 'India', 'West Bengal', 'Kolkata', '700087', '101104441011010112', 'New Market Kolkata ', '10110', 'XXX', 'XXX', 45000.00, 0, '9831915575', 'ashraf@gmail.com', '421364603938', 2534, NULL, '1995-12-10', 'XXX', '', '', '26/12/20 03:02:10 PM', '26/12/20 02:55:43 PM', 'ACTIVE', 'Saving')", "description": "Inserts a new row into the bank_customers table with the given values.", "concepts": ["INSERT INTO", "VALUES", "bank_customers", "Id", "Username", "Password", "Customer_Photo", "Photo_name", "Customer_ID", "Gender", "Land"], "instruction": "Write a SQL query to insert a new row into the bank_customers table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the bank_customers table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO bank_customers (name, age, balance)\nVALUES ('', 32, 1000000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the bank_customers table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM bank_customers;"}
{"seed": "/* Creates a table named bank_staff with 14 columns: Id, staff_name, staff_id, Password, Mobile_no, Email_id, Gender, Department, DOB, AADHAR, PAN, Home_addr, Last_login. */\nCREATE TABLE `bank_staff` (\n  `Id` int(255) NOT NULL,\n  `staff_name` varchar(50) DEFAULT NULL,\n  `staff_id` varchar(50) DEFAULT NULL,\n  `Password` varchar(50) DEFAULT NULL,\n  `Mobile_no` varchar(50) DEFAULT NULL,\n  `Email_id` varchar(50) DEFAULT 'Nill',\n  `Gender` varchar(50) DEFAULT NULL,\n  `Department` varchar(50) DEFAULT NULL,\n  `DOB` varchar(50) DEFAULT NULL,\n  `AADHAR` varchar(50) DEFAULT NULL,\n  `PAN` varchar(50) DEFAULT NULL,\n  `Home_addr` varchar(50) DEFAULT NULL,\n  `Last_login` varchar(50) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named bank_staff with 14 columns: Id, staff_name, staff_id, Password, Mobile_no, Email_id, Gender, Department, DOB, AADHAR, PAN, Home_addr, Last_login.", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "NULL", "ENGINE", "CHARSET", "INSERT INTO", "VALUES"], "instruction": "Write a SQL query to create a table named bank_staff with 14 columns: Id, staff_name, staff_id, Password, Mobile_no, Email_id, Gender, Department, DOB, AADHAR, PAN, Home_addr, Last_login.", "response": "-- Reasoning:\nWe need a new table named bank_staff. It should have an integer primary key so that each staff has a unique identifier, and a name column to store the staff\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE bank_staff (\n  Id INT PRIMARY KEY,\n  staff_name VARCHAR(255),\n  staff_id VARCHAR(255),\n  Password VARCHAR(255),\n  Mobile_no VARCHAR(255),\n  Email_id VARCHAR(255),\n  Gender VARCHAR(255),\n  Department VARCHAR(255),\n  DOB VARCHAR(255),\n  AADHAR VARCHAR(255),\n  PAN VARCHAR(255),\n  Home_addr VARCHAR(255),\n  Last_login VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the bank_staff table with 14 columns:\n  \u2022 Id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 staff_name: variable\u2010length string up to 255 characters\n  \u2022 staff_id: variable\u2010length string up to 255 characters\n  \u2022 Password: variable\u2010length string up to 255 characters\n  \u2022 Mobile_no: variable\u2010length string up to 255 characters\n  \u2022 Email_id: variable\u2010length string"}
{"seed": "/* Inserts a new row into the bank_staff table with the given values. */\nINSERT INTO `bank_staff` (`Id`, `staff_name`, `staff_id`, `Password`, `Mobile_no`, `Email_id`, `Gender`, `Department`, `DOB`, `AADHAR`, `PAN`, `Home_addr`, `Last_login`) VALUES\n(1, 'Junaid Ashraf', '210001', 'junaid@123', '7278523122', 'Nill', 'Male', 'Revenue', '10121995', '3639256458', 'COWPA5468', '21, Market Street, 3rd Floor, Kolkata - 700087', '26/12/20 03:00:59 PM')", "description": "Inserts a new row into the bank_staff table with the given values.", "concepts": ["INSERT INTO", "VALUES", "bank_staff", "Id", "staff_name", "staff_id", "Password", "Mobile_no", "Email_id", "Gender"], "instruction": "Write a SQL query to insert a new row into the bank_staff table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the bank_staff table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO bank_staff (staff_id, name, age, salary)\nVALUES (1, 'John', 30, 100000);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the bank_staff table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM bank_staff;"}
{"seed": "/* Creates a table named beneficiary_10111 with seven columns: id (integer), Beneficiary_name (varchar), Beneficiary_ac_no (varchar), IFSC_code (varchar), Account_type (varchar), Status (varchar), Date_added (varchar). */\nCREATE TABLE `beneficiary_10111` (\n  `id` int(255) NOT NULL,\n  `Beneficiary_name` varchar(255) DEFAULT NULL,\n  `Beneficiary_ac_no` varchar(255) DEFAULT NULL,\n  `IFSC_code` varchar(255) DEFAULT NULL,\n  `Account_type` varchar(255) DEFAULT NULL,\n  `Status` varchar(255) DEFAULT NULL,\n  `Date_added` varchar(255) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named beneficiary_10111 with seven columns: id (integer), Beneficiary_name (varchar), Beneficiary_ac_no (varchar), IFSC_code (varchar), Account_type (varchar), Status (varchar), Date_added (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named beneficiary_10111 with seven columns: id (integer), Beneficiary_name (varchar), Beneficiary_ac_no (varchar), IFSC_code (varchar), Account_type (varchar), Status (varchar), Date_added (varchar).", "response": "-- Reasoning:\nWe need a new table named beneficiary_10111. It should have an integer primary key so that each beneficiary has a unique identifier, and a name column to store the beneficiary\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE beneficiary_10111 (\n  id INT PRIMARY KEY,\n  Beneficiary_name VARCHAR(255),\n  Beneficiary_ac_no VARCHAR(255),\n  IFSC_code VARCHAR(255),\n  Account_type VARCHAR(255),\n  Status VARCHAR(255),\n  Date_added VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the beneficiary_10111 table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Beneficiary_name: variable\u2010length string up to 255 characters\n  \u2022 Beneficiary_ac_no: variable\u2010length string up to 255 characters\n  \u2022 IFSC_code: variable\u2010length string up to 255 characters\n  \u2022 Account_type: variable\u2010length string up to 255 characters\n  \u2022 Status: variable\u2010length string up to 255 characters\n  \u2022 Date_added: variable\u2010length string up to 255"}
{"seed": "/* Creates a table named beneficiary_1011010112 with seven columns: id (integer), Beneficiary_name (varchar), Beneficiary_ac_no (varchar), IFSC_code (varchar), Account_type (varchar), Status (varchar), and Date_added (varchar). */\nCREATE TABLE `beneficiary_1011010112` (\n  `id` int(255) NOT NULL,\n  `Beneficiary_name` varchar(255) DEFAULT NULL,\n  `Beneficiary_ac_no` varchar(255) DEFAULT NULL,\n  `IFSC_code` varchar(255) DEFAULT NULL,\n  `Account_type` varchar(255) DEFAULT NULL,\n  `Status` varchar(255) DEFAULT NULL,\n  `Date_added` varchar(255) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named beneficiary_1011010112 with seven columns: id (integer), Beneficiary_name (varchar), Beneficiary_ac_no (varchar), IFSC_code (varchar), Account_type (varchar), Status (varchar), and Date_added (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named beneficiary_1011010112 with seven columns: id (integer), Beneficiary_name (varchar), Beneficiary_ac_no (varchar), IFSC_code (varchar), Account_type (varchar), Status (varchar), and Date_added (varchar).", "response": "-- Reasoning:\nWe need a new table named beneficiary_1011010112. It should have an integer primary key so that each beneficiary has a unique identifier, and a name column to store the beneficiary\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE beneficiary_1011010112 (\n  id INT PRIMARY KEY,\n  Beneficiary_name VARCHAR(255),\n  Beneficiary_ac_no VARCHAR(255),\n  IFSC_code VARCHAR(255),\n  Account_type VARCHAR(255),\n  Status VARCHAR(255),\n  Date_added VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the beneficiary_1011010112 table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Beneficiary_name: variable\u2010length string up to 255 characters\n  \u2022 Beneficiary_ac_no: variable\u2010length string up to 255 characters\n  \u2022 IFSC_code: variable\u2010length string up to 255 characters\n  \u2022 Account_type: variable\u2010length string up to 255 characters\n  \u2022 Status: variable\u2010length string up to 255 characters\n  \u2022"}
{"seed": "/* Inserts a new row into the beneficiary_1011010112 table with the given values. */\nINSERT INTO `beneficiary_1011010112` (`id`, `Beneficiary_name`, `Beneficiary_ac_no`, `IFSC_code`, `Account_type`, `Status`, `Date_added`) VALUES\n(1, 'Junaid', '10110528510111', '10110', 'Saving', 'ACTIVE', '26/12/20 03:00:07 PM')", "description": "Inserts a new row into the beneficiary_1011010112 table with the given values.", "concepts": ["INSERT INTO", "VALUES", "beneficiary_1011010112", "id", "Beneficiary_name", "Beneficiary"], "instruction": "Write a SQL query to insert a new row into the beneficiary_1011010112 table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the beneficiary_1011010112 table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO beneficiary_1011010112 (\n  beneficiary_id,\n  name,\n  address,\n  city,\n  state,\n  zip,\n  country,\n  phone,\n  email\n) VALUES (\n  1011010112,\n  '',\n  '123 Main St',\n  'Anytown',\n  'CA',\n  94101,\n  'USA',\n  '123-456-7890',\n  ''\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the beneficiary_1011010112 table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM beneficiary_1011010112;"}
{"seed": "/* Creates a table named cheque_book with four columns: id (integer), cust_name (varchar), account_no (integer), and cheque_book_status (varchar). */\nCREATE TABLE `cheque_book` (\n  `id` int(10) NOT NULL,\n  `cust_name` varchar(255) NOT NULL,\n  `account_no` int(10) NOT NULL,\n  `cheque_book_status` varchar(25) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named cheque_book with four columns: id (integer), cust_name (varchar), account_no (integer), and cheque_book_status (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "NOT NULL", "ENGINE", "DEFAULT", "CHARSET"], "instruction": "Write a SQL query to create a table named cheque_book with four columns: id (integer), cust_name (varchar), account_no (integer), and cheque_book_status (varchar).", "response": "-- Reasoning:\nWe need a new table named cheque_book. It should have an integer primary key so that each cheque book has a unique identifier, and a name column to store the customer\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE cheque_book (\n  id INT PRIMARY KEY,\n  cust_name VARCHAR(255),\n  account_no INT,\n  cheque_book_status VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the cheque_book table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 cust_name: variable\u2010length string up to 255 characters\n  \u2022 account_no: integer\n  \u2022 cheque_book_status: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('cheque_book');"}
{"seed": "/* Inserts a new row into the cheque_book table with the given values. */\nINSERT INTO `cheque_book` (`id`, `cust_name`, `account_no`, `cheque_book_status`) VALUES\n(8, 'Rashid feroz', 34, 'PENDING')", "description": "Inserts a new row into the cheque_book table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the cheque_book table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the cheque_book table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO cheque_book (\n  cheque_id,\n  amount,\n  status\n) VALUES (\n  1,\n  1000,\n  'pending'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the cheque_book table with the given values:\n  \u2022 cheque_id: 1\n  \u2022 amount: 1000\n  \u2022 status: pending\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM cheque_book;"}
{"seed": "/* Creates a table named passbook_10111 with seven columns: id (integer), Transaction_id (varchar), Transaction_date (varchar), Description (varchar), Cr_amount (varchar), Dr_amount (varchar), Net_Balance (varchar), Remark (varchar). */\nCREATE TABLE `passbook_10111` (\n  `id` int(255) NOT NULL,\n  `Transaction_id` varchar(255) DEFAULT NULL,\n  `Transaction_date` varchar(255) DEFAULT NULL,\n  `Description` varchar(255) DEFAULT NULL,\n  `Cr_amount` varchar(255) DEFAULT NULL,\n  `Dr_amount` varchar(255) DEFAULT NULL,\n  `Net_Balance` varchar(255) DEFAULT NULL,\n  `Remark` varchar(255) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named passbook_10111 with seven columns: id (integer), Transaction_id (varchar), Transaction_date (varchar), Description (varchar), Cr_amount (varchar), Dr_amount (varchar), Net_Balance (varchar), Remark (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named passbook_10111 with seven columns: id (integer), Transaction_id (varchar), Transaction_date (varchar), Description (varchar), Cr_amount (varchar), Dr_amount (varchar), Net_Balance (varchar), Remark (varchar).", "response": "-- Reasoning:\nWe need a new table named passbook_10111. It should have an integer primary key so that each transaction has a unique identifier, and a name column to store the transaction\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE passbook_10111 (\n  id INT PRIMARY KEY,\n  Transaction_id VARCHAR(255),\n  Transaction_date VARCHAR(255),\n  Description VARCHAR(255),\n  Cr_amount VARCHAR(255),\n  Dr_amount VARCHAR(255),\n  Net_Balance VARCHAR(255),\n  Remark VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the passbook_10111 table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Transaction_id: variable\u2010length string up to 255 characters\n  \u2022 Transaction_date: variable\u2010length string up to 255 characters\n  \u2022 Description: variable\u2010length string up to 255 characters\n  \u2022 Cr_amount: variable\u2010length string up to 255 characters\n  \u2022 Dr_amount: variable\u2010length string up to 255 characters\n  \u2022 Net_Balance: variable\u2010length string up to 255 characters\n  \u2022 Remark: variable\u2010"}
{"seed": "/* Inserts two rows into the passbook_10111 table. The first row has an id of 1, a Transaction_id of 842697598725, a Transaction_date of 26/12/20 02:50:47 PM, a Description of Account Opening, a Cr_amount of 0, a Dr_amount of 0, a Net_Balance of 0 */\nINSERT INTO `passbook_10111` (`id`, `Transaction_id`, `Transaction_date`, `Description`, `Cr_amount`, `Dr_amount`, `Net_Balance`, `Remark`) VALUES\n(1, '842697598725', '26/12/20 02:50:47 PM', 'Account Opening', '0', '0', '0', NULL),\n(2, '861930485468', '26/12/20 03:03:19 PM', 'Ashraf/101104441011010112/10110', '10000', '0', '10000', '')", "description": "Inserts two rows into the passbook_10111 table. The first row has an id of 1, a Transaction_id of 842697598725, a Transaction_date of 26/12/20 02:50:47 PM, a Description of Account Opening, a Cr_amount of 0, a Dr_amount of 0, a Net_Balance of 0", "concepts": ["INSERT INTO", "VALUES", "INT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to insert two rows into the passbook_10111 table. The first row has an id of 1, a Transaction_id of 842697598725, a Transaction_date of 26/12/20 02:50:47 PM, a Description of Account Opening, a Cr_amount of 0, a Dr_amount of 0, a Net_Balance of 0. The second row has an id of 2, a Transaction_id of 861930485468, a Transaction_date of 26/12/20 0", "response": "-- Reasoning:\nWe need to insert two rows into the passbook_10111 table. The first row has an id of 1, a Transaction_id of 842697598725, a Transaction_date of 26/12/20 02:50:47 PM, a Description of Account Opening, a Cr_amount of 0, a Dr_amount of 0, a Net_Balance of 0. The second row has an id of 2, a Transaction_id of 861930485468, a Transaction_date of 26/12/20 02:50:47 PM, a Description of Account Opening, a Cr_amount of 0, a Dr_amount of 0, a Net_Balance of 0.\n\n-- Solution:\n```sql\nINSERT INTO passbook_10111 (id, Transaction_id, Transaction_date, Description, Cr_amount, Dr_amount, Net_Balance)\nVALUES (1, 842697598725, '26/12/20 02:50:47 PM', 'Account Opening', 0, 0, 0),\n(2, 86193"}
{"seed": "/* Creates a table named passbook_1011010112 with seven columns: id (integer), Transaction_id (varchar), Transaction_date (varchar), Description (varchar), Cr_amount (varchar), Dr_amount (varchar), Net_Balance (varchar), Remark (varchar). */\nCREATE TABLE `passbook_1011010112` (\n  `id` int(255) NOT NULL,\n  `Transaction_id` varchar(255) DEFAULT NULL,\n  `Transaction_date` varchar(255) DEFAULT NULL,\n  `Description` varchar(255) DEFAULT NULL,\n  `Cr_amount` varchar(255) DEFAULT NULL,\n  `Dr_amount` varchar(255) DEFAULT NULL,\n  `Net_Balance` varchar(255) DEFAULT NULL,\n  `Remark` varchar(255) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4", "description": "Creates a table named passbook_1011010112 with seven columns: id (integer), Transaction_id (varchar), Transaction_date (varchar), Description (varchar), Cr_amount (varchar), Dr_amount (varchar), Net_Balance (varchar), Remark (varchar).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named passbook_1011010112 with seven columns: id (integer), Transaction_id (varchar), Transaction_date (varchar), Description (varchar), Cr_amount (varchar), Dr_amount (varchar), Net_Balance (varchar), Remark (varchar).", "response": "-- Reasoning:\nWe need a new table named passbook_1011010112. It should have an integer primary key so that each transaction has a unique identifier, and a name column to store the transaction\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE passbook_1011010112 (\n  id INT PRIMARY KEY,\n  Transaction_id VARCHAR(255),\n  Transaction_date VARCHAR(255),\n  Description VARCHAR(255),\n  Cr_amount VARCHAR(255),\n  Dr_amount VARCHAR(255),\n  Net_Balance VARCHAR(255),\n  Remark VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the passbook_1011010112 table with seven columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 Transaction_id: variable\u2010length string up to 255 characters\n  \u2022 Transaction_date: variable\u2010length string up to 255 characters\n  \u2022 Description: variable\u2010length string up to 255 characters\n  \u2022 Cr_amount: variable\u2010length string up to 255 characters\n  \u2022 Dr_amount: variable\u2010length string up to 255 characters\n  \u2022 Net_Balance: variable\u2010length"}
{"seed": "/* Inserts three rows into the passbook_1011010112 table. */\nINSERT INTO `passbook_1011010112` (`id`, `Transaction_id`, `Transaction_date`, `Description`, `Cr_amount`, `Dr_amount`, `Net_Balance`, `Remark`) VALUES\n(1, '589306552829', '26/12/20 02:55:43 PM', 'Account Opening', '0', '0', '0', NULL),\n(2, '583402470572', '26/12/20 03:01:35 PM', 'Cash Deposit/583402470572', '55000', '0', '55000', 'Cash Deposit'),\n(3, '861930485468', '26/12/20 03:03:19 PM', 'Junaid/10110528510111/10110', '0', '10000', '45000', '')", "description": "Inserts three rows into the passbook_1011010112 table.", "concepts": ["INSERT INTO", "VALUES", "passbook_1011010112", "id", "Transaction_id", "Transaction_date", "Description"], "instruction": "Write a SQL query to insert three rows into the passbook_1011010112 table.", "response": "-- Reasoning:\nWe need to insert three rows into the passbook_1011010112 table.\n\n-- Solution:\n```sql\nINSERT INTO passbook_1011010112 (name, balance)\nVALUES ('Alice', 100), ('Bob', 200), ('Charlie', 300);\n```\n\n-- Explanation:\nThis INSERT statement inserts three rows into the passbook_1011010112 table:\n  \u2022 Alice: balance 100\n  \u2022 Bob: balance 200\n  \u2022 Charlie: balance 300\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM passbook_1011010112;"}
{"seed": "/* Creates a table named pending_accounts with 20 columns. */\nCREATE TABLE `pending_accounts` (\n  `Application_no` varchar(50) NOT NULL,\n  `Name` varchar(50) DEFAULT NULL,\n  `Gender` varchar(50) DEFAULT NULL,\n  `Mobile_no` varchar(50) DEFAULT NULL,\n  `Email_id` varchar(50) DEFAULT 'Nil',\n  `Landline_no` varchar(50) DEFAULT 'Nil',\n  `DOB` varchar(50) DEFAULT NULL,\n  `PAN` varchar(50) DEFAULT NULL,\n  `AADHAR` varchar(50) DEFAULT NULL,\n  `Home_Addr` varchar(100) DEFAULT NULL,\n  `Office_Addr` varchar(100) DEFAULT NULL,\n  `Country` varchar(50) DEFAULT NULL,\n  `State` varchar(50) DEFAULT NULL,\n  `City` varchar(50) DEFAULT NULL,\n  `Pin` varchar(50) DEFAULT NULL,\n  `Area_Loc` varchar(255) DEFAULT NULL,\n  `Nominee_name` varchar(255) DEFAULT NULL,\n  `Nominee_ac_no` varchar(255) DEFAULT NULL,\n  `Account_type` varchar(50) DEFAULT NULL,\n  `Application_Date` varchar(50) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named pending_accounts with 20 columns.", "concepts": ["CREATE TABLE", "VARCHAR", "DEFAULT", "NULL", "PRIMARY KEY", "AUTO_INCREMENT", "FOREIGN KEY", "INT", "DEFAULT", "NULL", "NULL", "NULL", "NULL"], "instruction": "Write a SQL query to create a table named pending_accounts with 20 columns.", "response": "-- Reasoning:\nWe need a new table named pending_accounts. It should have 20 columns, each of which is a VARCHAR(255).\n\n-- Solution:\n```sql\nCREATE TABLE pending_accounts (\n  col1 VARCHAR(255),\n  col2 VARCHAR(255),\n  col3 VARCHAR(255),\n  col4 VARCHAR(255),\n  col5 VARCHAR(255),\n  col6 VARCHAR(255),\n  col7 VARCHAR(255),\n  col8 VARCHAR(255),\n  col9 VARCHAR(255),\n  col10 VARCHAR(255),\n  col11 VARCHAR(255),\n  col12 VARCHAR(255),\n  col13 VARCHAR(255),\n  col14 VARCHAR(255),\n  col15 VARCHAR(255),\n  col16 VARCHAR(255),\n  col17 VARCHAR(255),\n  col18 VARCHAR(255),\n  col19 VARCHAR(255),\n  col20 VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement creates the pending_accounts table with 20 columns, each of which is a VARCHAR(255).\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info"}
{"seed": "/* Creates a table named staff with 12 columns: id (integer), name (varchar), dob (date), relationship (varchar), department (varchar), doj (date), address (varchar), mobile (varchar), email (varchar), pwd (varchar), gender (char), lastlogin (datetime). */\nCREATE TABLE `staff` (\n  `id` int(5) NOT NULL,\n  `name` varchar(255) NOT NULL,\n  `dob` date NOT NULL,\n  `relationship` varchar(255) NOT NULL,\n  `department` varchar(255) NOT NULL,\n  `doj` date NOT NULL,\n  `address` varchar(255) NOT NULL,\n  `mobile` varchar(11) NOT NULL,\n  `email` varchar(255) NOT NULL,\n  `pwd` varchar(32) NOT NULL,\n  `gender` char(1) NOT NULL,\n  `lastlogin` datetime NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1", "description": "Creates a table named staff with 12 columns: id (integer), name (varchar), dob (date), relationship (varchar), department (varchar), doj (date), address (varchar), mobile (varchar), email (varchar), pwd (varchar), gender (char), lastlogin (datetime).", "concepts": ["CREATE TABLE", "INT", "VARCHAR", "DATE", "VARCHAR", "VARCHAR", "DATE", "VARCHAR", "VARCHAR", "VARCHAR", "CHAR", "DATETIME"], "instruction": "Write a SQL query to create a table named staff with 12 columns: id (integer), name (varchar), dob (date), relationship (varchar), department (varchar), doj (date), address (varchar), mobile (varchar), email (varchar), pwd (varchar), gender (char), lastlogin (datetime).", "response": "-- Reasoning:\nWe need a new table named staff. It should have an integer primary key so that each staff member has a unique identifier, and a name column to store the staff member\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE staff (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  dob DATE,\n  relationship VARCHAR(255),\n  department VARCHAR(255),\n  doj DATE,\n  address VARCHAR(255),\n  mobile VARCHAR(255),\n  email VARCHAR(255),\n  pwd VARCHAR(255),\n  gender CHAR,\n  lastlogin DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the staff table with 12 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 dob: date\n  \u2022 relationship: variable\u2010length string up to 255 characters\n  \u2022 department: variable\u2010length string up to 255 characters\n  \u2022 doj: date\n  \u2022 address: variable\u2010length string up to 255 characters\n  \u2022 mobile: variable\u2010length string up to 255 characters\n  \u2022 email: variable\u2010length string up to 255 characters\n  \u2022 pwd: variable\u2010length string up to 2"}
{"seed": "/* Inserts five rows into the staff table. */\nINSERT INTO `staff` (`id`, `name`, `dob`, `relationship`, `department`, `doj`, `address`, `mobile`, `email`, `pwd`, `gender`, `lastlogin`) VALUES\n(1, 'sunil', '1990-05-05', 'married', 'revenue', '1999-11-11', 'kestopur12', 'sunil@gmail', 'kul@gmail.com', 'wew', 'M', '2015-01-11 10:29:48'),\n(2, 'akash', '1998-08-21', 'unmarried', 'revenue', '2013-08-03', 'kolkata', '9635722546', 'akash@gmail.com', '125', 'M', '2015-01-10 21:22:59'),\n(4, 'pankaj', '1989-05-31', 'married', 'revenue', '2015-01-04', 'bhagalpur13', 'pankaj@gmai', 'pankaj@gmail.com', '789', 'M', '0000-00-00 00:00:00'),\n(5, 'sharma', '1980-04-21', 'married', 'revenue', '1991-01-01', 'khidirpur', '9876543210', 'sharma@gmail.com', 'sharma', 'M', '0000-00-00 00:00:00')", "description": "Inserts five rows into the staff table.", "concepts": ["INSERT INTO", "VALUES", "PRIMARY KEY", "AUTO_INCREMENT", "DEFAULT", "FOREIGN KEY", "VARCHAR", "INT", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to insert five rows into the staff table.", "response": "-- Reasoning:\nWe need to insert five rows into the staff table.\n\n-- Solution:\n```sql\nINSERT INTO staff (name, age, salary)\nVALUES ('John', 30, 100000),\n       ('Jane', 25, 120000),\n       ('Mike', 40, 150000),\n       ('Mary', 20, 100000),\n       ('Kevin', 35, 120000);\n```\n\n-- Explanation:\nThis INSERT statement inserts five rows into the staff table.\n\n-- Tests:\n-- 1. Verify rows are inserted\nSELECT * FROM staff;"}
{"seed": "/* Adds a primary key constraint to the id column in the atm table. */\nALTER TABLE `atm`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the atm table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the atm table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the atm table. This will ensure that each ATM has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE atm\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the atm table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('atm');"}
{"seed": "/* Adds a primary key constraint to the Id column in the bank_customers table. */\nALTER TABLE `bank_customers`\n  ADD PRIMARY KEY (`Id`)", "description": "Adds a primary key constraint to the Id column in the bank_customers table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the Id column in the bank_customers table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the Id column in the bank_customers table. This will ensure that each customer has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE bank_customers\n  ADD PRIMARY KEY (Id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the Id column in the bank_customers table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('bank_customers');"}
{"seed": "/* Adds a primary key constraint to the Id column in the bank_staff table. */\nALTER TABLE `bank_staff`\n  ADD PRIMARY KEY (`Id`)", "description": "Adds a primary key constraint to the Id column in the bank_staff table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the Id column in the bank_staff table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the Id column in the bank_staff table. This will ensure that each row has a unique identifier and that the Id column cannot be null.\n\n-- Solution:\n```sql\nALTER TABLE bank_staff\n  ADD PRIMARY KEY (Id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the Id column in the bank_staff table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('bank_staff');"}
{"seed": "/* Adds a primary key constraint to the beneficiary_10111 table. */\nALTER TABLE `beneficiary_10111`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the beneficiary_10111 table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the beneficiary_10111 table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the beneficiary_10111 table. This will ensure that each beneficiary has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE beneficiary_10111\n  ADD PRIMARY KEY (beneficiary_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the beneficiary_10111 table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('beneficiary_10111');"}
{"seed": "/* Adds a primary key constraint to the beneficiary_1011010112 table. */\nALTER TABLE `beneficiary_1011010112`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the beneficiary_1011010112 table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the beneficiary_1011010112 table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the beneficiary_1011010112 table. This will ensure that each beneficiary has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE beneficiary_1011010112\n  ADD PRIMARY KEY (beneficiary_id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the beneficiary_1011010112 table.\n\n-- Tests:\n-- 1. Verify primary key constraint exists\nPRAGMA table_info('beneficiary_1011010112');"}
{"seed": "/* Adds a primary key constraint to the id column in the cheque_book table. */\nALTER TABLE `cheque_book`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the cheque_book table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the cheque_book table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the cheque_book table. This will ensure that each cheque has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE cheque_book\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the cheque_book table.\n\n-- Tests:\n-- 1. Check primary key constraint is added\nPRAGMA table_info('cheque_book');"}
{"seed": "/* Adds a primary key constraint to the id column in the passbook_10111 table. */\nALTER TABLE `passbook_10111`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column in the passbook_10111 table.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column in the passbook_10111 table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column in the passbook_10111 table. This will ensure that each row has a unique identifier and that the id column cannot be null.\n\n-- Solution:\n```sql\nALTER TABLE passbook_10111\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column in the passbook_10111 table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('passbook_10111');"}
{"seed": "/* Adds a primary key constraint to the id column of the passbook_1011010112 table. */\nALTER TABLE `passbook_1011010112`\n  ADD PRIMARY KEY (`id`)", "description": "Adds a primary key constraint to the id column of the passbook_1011010112 table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the id column of the passbook_1011010112 table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the id column of the passbook_1011010112 table. This will ensure that each row has a unique identifier and that the id column cannot be null.\n\n-- Solution:\n```sql\nALTER TABLE passbook_1011010112\n  ADD PRIMARY KEY (id);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the id column of the passbook_1011010112 table.\n\n-- Tests:\n-- 1. Verify primary key constraint is added\nPRAGMA table_info('passbook_1011010112');"}
{"seed": "/* Adds a primary key constraint to the pending_accounts table with the Application_no column. */\nALTER TABLE `pending_accounts`\n  ADD PRIMARY KEY (`Application_no`)", "description": "Adds a primary key constraint to the pending_accounts table with the Application_no column.", "concepts": ["ALTER TABLE", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the pending_accounts table with the Application_no column.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the pending_accounts table. This will ensure that each account has a unique Application_no.\n\n-- Solution:\n```sql\nALTER TABLE pending_accounts\n  ADD CONSTRAINT pk_pending_accounts PRIMARY KEY (Application_no);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the pending_accounts table.\n\n-- Tests:\n-- 1. Check new constraint appears\nPRAGMA table_info('pending_accounts');"}
{"seed": "/* Adds a primary key and unique key constraint to the id and email columns of the staff table. */\nALTER TABLE `staff`\n  ADD PRIMARY KEY (`id`),\n  ADD UNIQUE KEY `email` (`email`)", "description": "Adds a primary key and unique key constraint to the id and email columns of the staff table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY", "UNIQUE KEY"], "instruction": "Write a SQL query to add a primary key and unique key constraint to the id and email columns of the staff table.", "response": "-- Reasoning:\nWe need to modify the staff table by adding a primary key and unique key constraint to the id and email columns.\n\n-- Solution:\n```sql\nALTER TABLE staff\n  ADD PRIMARY KEY (id),\n  ADD UNIQUE (email);\n```\n\n-- Explanation:\nThis ALTER statement updates the staff table schema by adding:\n  \u2022 PRIMARY KEY (id): a primary key constraint on the id column\n  \u2022 UNIQUE (email): a unique key constraint on the email column\n\n-- Tests:\n-- 1. Check new constraints appear\nPRAGMA table_info('staff');"}
{"seed": "/* Modifies the atm table by adding an auto-incrementing id column. */\nALTER TABLE `atm`\n  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT", "description": "Modifies the atm table by adding an auto-incrementing id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY"], "instruction": "Write a SQL query to modify the atm table by adding an auto-incrementing id column.", "response": "-- Reasoning:\nWe need to modify the existing atm table by adding a new column named id. It should be an integer and auto\u2010incrementing.\n\n-- Solution:\n```sql\nALTER TABLE atm\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the atm table schema by adding:\n  \u2022 id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('atm');"}
{"seed": "/* Modifies the bank_customers table by adding an AUTO_INCREMENT column to the Id column. */\nALTER TABLE `bank_customers`\n  MODIFY `Id` int(100) NOT NULL AUTO_INCREMENT", "description": "Modifies the bank_customers table by adding an AUTO_INCREMENT column to the Id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the bank_customers table by adding an AUTO_INCREMENT column to the Id column.", "response": "-- Reasoning:\nWe need to modify the bank_customers table by adding an AUTO_INCREMENT column to the Id column.\n\n-- Solution:\n```sql\nALTER TABLE bank_customers\n  ADD COLUMN Id INT AUTO_INCREMENT PRIMARY KEY;\n```\n\n-- Explanation:\nThis ALTER statement updates the bank_customers table schema by adding:\n  \u2022 Id: an integer column that auto\u2010increments and is the primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incremented\nPRAGMA table_info('bank_customers');"}
{"seed": "/* Modifies the bank_staff table by adding an auto-incrementing column named Id. */\nALTER TABLE `bank_staff`\n  MODIFY `Id` int(255) NOT NULL AUTO_INCREMENT", "description": "Modifies the bank_staff table by adding an auto-incrementing column named Id.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY", "INT", "NOT NULL", "PRIMARY KEY", "VARCHAR"], "instruction": "Write a SQL query to modify the bank_staff table by adding an auto-incrementing column named Id.", "response": "-- Reasoning:\nWe need to modify the existing bank_staff table by adding a new column named Id. It should be an auto\u2010incrementing integer and primary key.\n\n-- Solution:\n```sql\nALTER TABLE bank_staff\n  ADD COLUMN Id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the bank_staff table schema by adding:\n  \u2022 Id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('bank_staff');"}
{"seed": "/* Modifies the id column of the beneficiary_10111 table to auto-increment. */\nALTER TABLE `beneficiary_10111`\n  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the beneficiary_10111 table to auto-increment.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the id column of the beneficiary_10111 table to auto-increment.", "response": "-- Reasoning:\nWe need to modify the existing beneficiary_10111 table by changing the id column to auto\u2010increment.\n\n-- Solution:\n```sql\nALTER TABLE beneficiary_10111\n  MODIFY COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the beneficiary_10111 table schema by changing:\n  \u2022 id: an integer column to auto\u2010increment\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('beneficiary_10111');"}
{"seed": "/* Modifies the beneficiary_1011010112 table by adding an AUTO_INCREMENT column to the id column. */\nALTER TABLE `beneficiary_1011010112`\n  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT", "description": "Modifies the beneficiary_1011010112 table by adding an AUTO_INCREMENT column to the id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY"], "instruction": "Write a SQL query to modify the beneficiary_1011010112 table by adding an AUTO_INCREMENT column to the id column.", "response": "-- Reasoning:\nWe need to modify the beneficiary_1011010112 table by adding an AUTO_INCREMENT column to the id column.\n\n-- Solution:\n```sql\nALTER TABLE beneficiary_1011010112\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the beneficiary_1011010112 table schema by adding:\n  \u2022 id: an integer column that is the primary key and auto\u2010increments\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incremented\nPRAGMA table_info('beneficiary_1011010112');"}
{"seed": "/* Modifies the id column of the cheque_book table to be an auto-incrementing integer. */\nALTER TABLE `cheque_book`\n  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT", "description": "Modifies the id column of the cheque_book table to be an auto-incrementing integer.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY", "INT"], "instruction": "Write a SQL query to modify the id column of the cheque_book table to be an auto-incrementing integer.", "response": "-- Reasoning:\nWe need to modify the existing cheque_book table by changing the id column to be an auto\u2010incrementing integer.\n\n-- Solution:\n```sql\nALTER TABLE cheque_book\n  ALTER COLUMN id\n  INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the cheque_book table schema by changing:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique, and auto\u2010incrementing\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('cheque_book');"}
{"seed": "/* Modifies the passbook_10111 table by adding an auto-incrementing id column. */\nALTER TABLE `passbook_10111`\n  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT", "description": "Modifies the passbook_10111 table by adding an auto-incrementing id column.", "concepts": ["ALTER TABLE", "MODIFY", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the passbook_10111 table by adding an auto-incrementing id column.", "response": "-- Reasoning:\nWe need to modify the existing passbook_10111 table by adding a new column named id. It should be an auto\u2010incrementing integer and primary key.\n\n-- Solution:\n```sql\nALTER TABLE passbook_10111\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the passbook_10111 table schema by adding:\n  \u2022 id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('passbook_10111');"}
{"seed": "/* Modifies the passbook_1011010112 table by adding an AUTO_INCREMENT column to the id column. */\nALTER TABLE `passbook_1011010112`\n  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT", "description": "Modifies the passbook_1011010112 table by adding an AUTO_INCREMENT column to the id column.", "concepts": ["ALTER TABLE", "MODIFY", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the passbook_1011010112 table by adding an AUTO_INCREMENT column to the id column.", "response": "-- Reasoning:\nWe need to modify the existing passbook_1011010112 table by adding a new column named id. It should be an integer and auto\u2010increment so that every new entry has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE passbook_1011010112\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the passbook_1011010112 table schema by adding:\n  \u2022 id: an integer column that is auto\u2010incremented and marked as PRIMARY KEY\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incremented\nPRAGMA table_info('passbook_1011010112');"}
{"seed": "/* Modifies the staff table by adding an auto-incrementing id column. */\nALTER TABLE `staff`\n  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT", "description": "Modifies the staff table by adding an auto-incrementing id column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT", "MODIFY"], "instruction": "Write a SQL query to modify the staff table by adding an auto-incrementing id column.", "response": "-- Reasoning:\nWe need to modify the staff table by adding a new column named id. It should be an auto\u2010incrementing integer and primary key.\n\n-- Solution:\n```sql\nALTER TABLE staff\n  ADD COLUMN id INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the staff table schema by adding:\n  \u2022 id: an auto\u2010incrementing integer primary key\n\n-- Tests:\n-- 1. Verify new column appears and is auto\u2010incrementing\nPRAGMA table_info('staff');"}
{"seed": "/* Drops the table named t_rms_account if it exists. */\nDROP TABLE IF EXISTS `t_rms_account`", "description": "Drops the table named t_rms_account if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_rms_account if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_rms_account if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_account;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_rms_account');"}
{"seed": "/* Creates a table named t_rms_account with seven columns: N_ACN_NO (integer primary key), S_USER_NO (varchar), S_USERNAME (varchar), S_PASSWORD (varchar), S_USER_TYPE (varchar), D_RG_TIME (datetime), S_EXT_VALUE1 (varchar). */\nCREATE TABLE `t_rms_account` (\n  `N_ACN_NO` int(11) NOT NULL AUTO_INCREMENT,\n  `S_USER_NO` varchar(255) DEFAULT NULL,\n  `S_USERNAME` varchar(255) DEFAULT NULL,\n  `S_PASSWORD` varchar(255) DEFAULT NULL,\n  `S_USER_TYPE` varchar(255) DEFAULT '1',\n  `D_RG_TIME` datetime DEFAULT NULL,\n  `S_EXT_VALUE1` varchar(255) DEFAULT '1',\n  PRIMARY KEY (`N_ACN_NO`)\n) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8", "description": "Creates a table named t_rms_account with seven columns: N_ACN_NO (integer primary key), S_USER_NO (varchar), S_USERNAME (varchar), S_PASSWORD (varchar), S_USER_TYPE (varchar), D_RG_TIME (datetime), S_EXT_VALUE1 (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named t_rms_account with seven columns: N_ACN_NO (integer primary key), S_USER_NO (varchar), S_USERNAME (varchar), S_PASSWORD (varchar), S_USER_TYPE (varchar), D_RG_TIME (datetime), S_EXT_VALUE1 (varchar).", "response": "-- Reasoning:\nWe need a new table named t_rms_account. It should have an integer primary key so that each account has a unique identifier, and a name column to store the account\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_account (\n  N_ACN_NO INT PRIMARY KEY,\n  S_USER_NO VARCHAR(255),\n  S_USERNAME VARCHAR(255),\n  S_PASSWORD VARCHAR(255),\n  S_USER_TYPE VARCHAR(255),\n  D_RG_TIME DATETIME,\n  S_EXT_VALUE1 VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_account table with seven columns:\n  \u2022 N_ACN_NO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_USER_NO: variable\u2010length string up to 255 characters\n  \u2022 S_USERNAME: variable\u2010length string up to 255 characters\n  \u2022 S_PASSWORD: variable\u2010length string up to 255 characters\n  \u2022 S_USER_TYPE: variable\u2010length string up to 255 characters\n  \u2022 D_RG_TIME: datetime\n  \u2022 S_EXT_VALUE1: variable\u2010length string up to 255 characters\n\n-- Tests:"}
{"seed": "/* Inserts a new user with id 1, name \u8303\u8d3a\u4f1f, password , and active status 1 into the t_rms_account table. */\nINSERT INTO `t_rms_account` VALUES ('1', '1004', '\u8303\u8d3a\u4f1f', '111111', '1', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 1, name \u8303\u8d3a\u4f1f, password , and active status 1 into the t_rms_account table.", "concepts": ["INSERT INTO", "VALUES", "t_rms_account", "\u8303\u8d3a\u4f1f", "111111", "1"], "instruction": "Write a SQL query to insert a new user with id 1, name \u8303\u8d3a\u4f1f, password , and active status 1 into the t_rms_account table.", "response": "-- Reasoning:\nWe need to insert a new user into the t_rms_account table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (id, name, password, active)\nVALUES (1, '\u8303\u8d3a\u4f1f', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new user into the t_rms_account table with the following values:\n  \u2022 id: 1\n  \u2022 name: \u8303\u8d3a\u4f1f\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM t_rms_account;"}
{"seed": "/* Inserts a new user with id 2, name \u674e\u6770\u6ce2, password , role 2, created_at 2018-03-10 00:00:00 and active 1 into the t_rms_account table. */\nINSERT INTO `t_rms_account` VALUES ('2', '1005', '\u674e\u6770\u6ce2', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 2, name \u674e\u6770\u6ce2, password , role 2, created_at 2018-03-10 00:00:00 and active 1 into the t_rms_account table.", "concepts": ["INSERT INTO", "VALUES", "t_rms_account", "\u674e\u6770\u6ce2", "111111", "2", "2"], "instruction": "Write a SQL query to insert a new user with id 2, name \u674e\u6770\u6ce2, password , role 2, created_at 2018-03-10 00:00:00 and active 1 into the t_rms_account table.", "response": "-- Reasoning:\nWe need to insert a new user into the t_rms_account table. It should have an integer id, a name, a password, a role, a created_at timestamp, and an active boolean.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (id, name, password, role, created_at, active)\nVALUES (2, '\u674e\u6770\u6ce2', '', 2, '2018-03-10 00:00:00', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_account table with:\n  \u2022 id: 2\n  \u2022 name: \u674e\u6770\u6ce2\n  \u2022 password: \n  \u2022 role: 2\n  \u2022 created_at: 2018-03-10 00:00:00\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM t_rms_account;"}
{"seed": "/* Inserts a new row into the t_rms_account table with the given values. */\nINSERT INTO `t_rms_account` VALUES ('3', '1006', '\u5510\u8f76\u4fca', '111111', '1', '2018-03-13 03:29:40', '1')", "description": "Inserts a new row into the t_rms_account table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_account table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_account table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (account_id, account_name, account_type, account_status)\nVALUES (1, '', 'Personal', 'Active');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_account table with the given values:\n  \u2022 account_id: 1\n  \u2022 account_name: \n  \u2022 account_type: Personal\n  \u2022 account_status: Active\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_account;"}
{"seed": "/* Inserts a new user with id 4, name \u9093\u57fa\u91d1, password , role 2, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('4', '1007', '\u9093\u57fa\u91d1', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 4, name \u9093\u57fa\u91d1, password , role 2, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES", "\u9093\u57fa\u91d1", "1007", "111111", "2", "2"], "instruction": "Write a SQL query to insert a new user with id 4, name \u9093\u57fa\u91d1, password , role 2, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer id, a name, a password, a role, and a created_at timestamp.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, role, created_at)\nVALUES (4, '\u9093\u57fa\u91d1', 'password', 2, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the following values:\n  \u2022 id: 4\n  \u2022 name: \u9093\u57fa\u91d1\n  \u2022 password: \n  \u2022 role: 2\n  \u2022 created_at: 2018-03-10 00:00:00\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 5, name \u5434\u9510\u950b, password , role 2, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('5', '1008', '\u5434\u9510\u950b', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 5, name \u5434\u9510\u950b, password , role 2, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 5, name \u5434\u9510\u950b, password , role 2, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 5, a name of \u5434\u9510\u950b, a password of , a role of 2, and a created_at of 2018-03-10 00:00:00.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, role, created_at)\nVALUES (5, '\u5434\u9510\u950b', '', 2, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 6, name \u6797\u542f\u7476, password , role 2, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('6', '1009', '\u6797\u542f\u7476', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 6, name \u6797\u542f\u7476, password , role 2, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES", "\u6797\u542f\u7476", "\u6797\u542f\u7476", "\u6797\u542f\u7476", "\u6797\u542f\u7476"], "instruction": "Write a SQL query to insert a new user with id 6, name \u6797\u542f\u7476, password , role 2, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer id, a name, a password, a role, and a created_at timestamp.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, role, created_at)\nVALUES (6, '\u6797\u542f\u7476', 'password', 2, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with:\n  \u2022 id: 6\n  \u2022 name: \u6797\u542f\u7476\n  \u2022 password: \n  \u2022 role: 2\n  \u2022 created_at: 2018-03-10 00:00:00\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 7, username 1010, password , role 2, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('7', '1010', '\u859b\u7693\u4ec1', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 7, username 1010, password , role 2, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 7, username 1010, password , role 2, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer id, a username, a password, a role, and a created_at timestamp.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, role, created_at)\nVALUES (7, '1010', 'password', 2, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the following values:\n  \u2022 id: 7\n  \u2022 username: 1010\n  \u2022 password: \n  \u2022 role: 2\n  \u2022 created_at: 2018-03-10 00:00:00\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 7;"}
{"seed": "/* Inserts a new user with id 8, name \u5f20\u4f1f\u5b81, password , role 2, created_at 2018-03-10 00:00:00 and active 1 into the t_rms_account table. */\nINSERT INTO `t_rms_account` VALUES ('8', '1011', '\u5f20\u4f1f\u5b81', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 8, name \u5f20\u4f1f\u5b81, password , role 2, created_at 2018-03-10 00:00:00 and active 1 into the t_rms_account table.", "concepts": ["INSERT INTO", "VALUES", "t_rms_account", "\u5f20\u4f1f\u5b81", "111111", "2", "2"], "instruction": "Write a SQL query to insert a new user with id 8, name \u5f20\u4f1f\u5b81, password , role 2, created_at 2018-03-10 00:00:00 and active 1 into the t_rms_account table.", "response": "-- Reasoning:\nWe need to insert a new user into the t_rms_account table. It should have an integer id, a name, a password, a role, a created_at timestamp, and an active boolean.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (id, name, password, role, created_at, active)\nVALUES (8, '\u5f20\u4f1f\u5b81', 'password', 2, '2018-03-10 00:00:00', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_account table with:\n  \u2022 id: 8\n  \u2022 name: \u5f20\u4f1f\u5b81\n  \u2022 password: \n  \u2022 role: 2\n  \u2022 created_at: 2018-03-10 00:00:00\n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM t_rms_account;"}
{"seed": "/* Inserts a new user with id 9, name \u79a4\u52b2\u5764, password , role 2, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('9', '1012', '\u79a4\u52b2\u5764', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 9, name \u79a4\u52b2\u5764, password , role 2, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 9, name \u79a4\u52b2\u5764, password , role 2, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 9, a name of \u79a4\u52b2\u5764, a password of , a role of 2, and a created_at of 2018-03-10 00:00:00.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, role, created_at)\nVALUES (9, '\u79a4\u52b2\u5764', '', 2, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 9;"}
{"seed": "/* Inserts a new user with id 10, username 1013, password , role 2, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('10', '1013', '\u9648\u5fd7\u4f1f', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 10, username 1013, password , role 2, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 10, username 1013, password , role 2, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 10, a username of 1013, a password of an empty string, a role of 2, and a created_at timestamp of 2018-03-10 00:00:00.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, role, created_at)\nVALUES (10, '1013', '', 2, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 10;"}
{"seed": "/* Inserts a new user with id 11, name \u9648\u99a5\u73ca, password , role 2, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('11', '1014', '\u9648\u99a5\u73ca', '111111', '2', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 11, name \u9648\u99a5\u73ca, password , role 2, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 11, name \u9648\u99a5\u73ca, password , role 2, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 11, a name of \u9648\u99a5\u73ca, a password of , a role of 2, and a created_at of 2018-03-10 00:00:00.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, role, created_at)\nVALUES (11, '\u9648\u99a5\u73ca', '', 2, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users;"}
{"seed": "/* Inserts a new user with id 12, name \u9ece\u5bb6\u8363, password , role 3, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('12', '1015', '\u9ece\u5bb6\u8363', '111111', '3', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 12, name \u9ece\u5bb6\u8363, password , role 3, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 12, name \u9ece\u5bb6\u8363, password , role 3, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 12, a name of \u9ece\u5bb6\u8363, a password of , a role of 3, and a created_at of 2018-03-10 00:00:00.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, role, created_at)\nVALUES (12, '\u9ece\u5bb6\u8363', '', 3, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 12;"}
{"seed": "/* Inserts a new user with id 13, name \u738b\u5b87\u701a, password , role 3, and created_at 2018-03-10 00:00:00. */\nINSERT INTO `t_rms_account` VALUES ('13', '1016', '\u738b\u5b87\u701a', '111111', '3', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 13, name \u738b\u5b87\u701a, password , role 3, and created_at 2018-03-10 00:00:00.", "concepts": ["INSERT INTO", "VALUES", "13", "1016", "\u738b\u5b87\u701a", "111111"], "instruction": "Write a SQL query to insert a new user with id 13, name \u738b\u5b87\u701a, password , role 3, and created_at 2018-03-10 00:00:00.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 13, a name of \u738b\u5b87\u701a, a password of , a role of 3, and a created_at of 2018-03-10 00:00:00.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, role, created_at)\nVALUES (13, '\u738b\u5b87\u701a', '', 3, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 13;"}
{"seed": "/* Inserts a new user with id 14, name \u9648\u5251\u6ee8, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table. */\nINSERT INTO `t_rms_account` VALUES ('14', '1017', '\u9648\u5251\u6ee8', '111111', '1', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 14, name \u9648\u5251\u6ee8, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 14, name \u9648\u5251\u6ee8, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table.", "response": "-- Reasoning:\nWe need to insert a new user into the t_rms_account table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (id, name, password, active, created_at)\nVALUES (14, '\u9648\u5251\u6ee8', '', 1, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis statement inserts a new user into the t_rms_account table with the following values:\n  \u2022 id: 14\n  \u2022 name: \u9648\u5251\u6ee8\n  \u2022 password: \n  \u2022 active: 1\n  \u2022 created_at: 2018-03-10 00:00:00\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM t_rms_account;"}
{"seed": "/* Inserts a new user with id 15, name \u5173\u5efa\u6210, password , active 1, and created_at 2018-03-10 00:00:00 into the users table. */\nINSERT INTO `t_rms_account` VALUES ('15', '1018', '\u5173\u5efa\u6210', '111111', '1', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 15, name \u5173\u5efa\u6210, password , active 1, and created_at 2018-03-10 00:00:00 into the users table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 15, name \u5173\u5efa\u6210, password , active 1, and created_at 2018-03-10 00:00:00 into the users table.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO users (id, name, password, active, created_at)\nVALUES (15, '\u5173\u5efa\u6210', '', 1, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis statement inserts a new row into the users table with the following values:\n  \u2022 id: 15\n  \u2022 name: \u5173\u5efa\u6210\n  \u2022 password: \n  \u2022 active: 1\n  \u2022 created_at: 2018-03-10 00:00:00\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM users WHERE id = 15;"}
{"seed": "/* Inserts a new user with id 16, name \u65b9\u94a6\u6d9b, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table. */\nINSERT INTO `t_rms_account` VALUES ('16', '1019', '\u65b9\u94a6\u6d9b', '111111', '1', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 16, name \u65b9\u94a6\u6d9b, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 16, name \u65b9\u94a6\u6d9b, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table.", "response": "-- Reasoning:\nWe need to insert a new user into the t_rms_account table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (id, name, password, active, created_at)\nVALUES (16, '\u65b9\u94a6\u6d9b', '', 1, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis statement inserts a new user into the t_rms_account table with the following values:\n  \u2022 id: 16\n  \u2022 name: \u65b9\u94a6\u6d9b\n  \u2022 password: \n  \u2022 active: 1\n  \u2022 created_at: 2018-03-10 00:00:00\n\n-- Tests:\n-- 1. Verify new user appears\nSELECT * FROM t_rms_account WHERE id = 16;"}
{"seed": "/* Inserts a new user with id 17, username 1020, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table. */\nINSERT INTO `t_rms_account` VALUES ('17', '1020', '\u6881\u9526\u67cf', '111111', '1', '2018-03-10 00:00:00', '1')", "description": "Inserts a new user with id 17, username 1020, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 17, username 1020, password , active 1, and created_at 2018-03-10 00:00:00 into the t_rms_account table.", "response": "-- Reasoning:\nWe need to insert a new user into the t_rms_account table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (id, username, password, active, created_at)\nVALUES (17, '1020', '', 1, '2018-03-10 00:00:00');\n```\n\n-- Explanation:\nThis statement inserts a new row into the t_rms_account table with the following values:\n  \u2022 id: 17\n  \u2022 username: 1020\n  \u2022 password: \n  \u2022 active: 1\n  \u2022 created_at: 2018-03-10 00:00:00\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_account;"}
{"seed": "/* Inserts a new user with id 18, username 1021, password , and active status 1 into the t_rms_account table. */\nINSERT INTO `t_rms_account` VALUES ('18', '1021', '\u738b\u5065', '111111', '1', '2018-03-11 00:00:00', '1')", "description": "Inserts a new user with id 18, username 1021, password , and active status 1 into the t_rms_account table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 18, username 1021, password , and active status 1 into the t_rms_account table.", "response": "-- Reasoning:\nWe need to insert a new user into the t_rms_account table. It should have an integer primary key so that each user has a unique identifier, and a name column to store the user\u2019s name as text.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_account (id, username, password, active)\nVALUES (18, '1021', '', 1);\n```\n\n-- Explanation:\nThis statement inserts a new row into the t_rms_account table with the following values:\n  \u2022 id: 18\n  \u2022 username: 1021\n  \u2022 password: \n  \u2022 active: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_account;"}
{"seed": "/* Inserts a new user with id 19, username admin, password , role 3, and created_at 2018-03-10 03:30:12. */\nINSERT INTO `t_rms_account` VALUES ('19', '1002', 'admin', '111111', '3', '2018-03-10 03:30:12', '1')", "description": "Inserts a new user with id 19, username admin, password , role 3, and created_at 2018-03-10 03:30:12.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new user with id 19, username admin, password , role 3, and created_at 2018-03-10 03:30:12.", "response": "-- Reasoning:\nWe need to insert a new user into the users table. It should have an id of 19, a username of admin, a password of , a role of 3, and a created_at timestamp of 2018-03-10 03:30:12.\n\n-- Solution:\n```sql\nINSERT INTO users (id, username, password, role, created_at)\nVALUES (19, 'admin', '', 3, '2018-03-10 03:30:12');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the users table with the given values.\n\n-- Tests:\n-- 1. Verify new user appears in table\nSELECT * FROM users WHERE id = 19;"}
{"seed": "/* Drops the table named t_rms_attach if it exists. */\nDROP TABLE IF EXISTS `t_rms_attach`", "description": "Drops the table named t_rms_attach if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named t_rms_attach if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_rms_attach if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_attach;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('t_rms_attach');"}
{"seed": "/* Creates a table named t_rms_attach with 13 columns: N_ATTACH_NO (integer primary key), S_ATTACH_NAME (varchar), S_ATTACH_TYPE (varchar), S_PATH (varchar), N_VERSION (integer), S_STATUS (char), D_CREATE_TIME (datetime), S_CREATOR (varchar), S_CREATOR_NO (varchar), N_LAST_ATTACH_NO (integer), S_FILE_TYPE (varchar */\nCREATE TABLE `t_rms_attach` (\n  `N_ATTACH_NO` int(11) NOT NULL AUTO_INCREMENT COMMENT '\u9644\u4ef6ID',\n  `S_ATTACH_NAME` varchar(255) NOT NULL COMMENT '\u9644\u4ef6\u540d\u79f0',\n  `S_ATTACH_TYPE` varchar(50) DEFAULT NULL,\n  `S_PATH` varchar(4000) DEFAULT NULL COMMENT '\u6587\u4ef6\u5b58\u50a8\u7edd\u5bf9\u8def\u5f84',\n  `N_VERSION` int(255) DEFAULT '1' COMMENT '\u7248\u672c',\n  `S_STATUS` char(1) DEFAULT '1' COMMENT '\u6587\u4ef6\u72b6\u6001 1-\u6b63\u5e38\uff0c2-\u5220\u9664\uff1b\u9ed8\u8ba41',\n  `D_CREATE_TIME` datetime DEFAULT NULL COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `S_CREATOR` varchar(50) DEFAULT NULL COMMENT '\u521b\u5efa\u8005',\n  `S_CREATOR_NO` varchar(50) DEFAULT NULL COMMENT '\u521b\u5efa\u8005ID',\n  `N_LAST_ATTACH_NO` int(11) DEFAULT NULL COMMENT '\u76f8\u540c\u7248\u672c\u7684\u6700\u65b0\u9644\u4ef6ID',\n  `S_FILE_TYPE` varchar(255) DEFAULT NULL COMMENT '\u6587\u4ef6\u7c7b\u578b(\u5907\u7528\u5b57\u6bb5\uff1b\u6587\u4ef6\u5141\u8bb8\u4e0a\u4f20\u7684\u7c7b\u578b\uff0c\u5982\uff1adoc/txt\u2026.)',\n  `S_SAVE_PATH` varchar(400) DEFAULT NULL COMMENT '\u6587\u4ef6\u5b58\u50a8\u7684\u8def\u5f84',\n  `S_SUB_PATH` varchar(255) DEFAULT NULL COMMENT '\u4e8c\u7ea7\u8def\u5f84\u7f16\u7801\uff1a\u652f\u6301\u65e5\u671f\u683c\u5f0fYYYY\u3001YYYY/MM\u3001YYYY/MM/DD',\n  PRIMARY KEY (`N_ATTACH_NO`)\n) ENGINE=InnoDB AUTO_INCREMENT=11026 DEFAULT CHARSET=utf8 COMMENT='\u6587\u4ef6\u8868'", "description": "Creates a table named t_rms_attach with 13 columns: N_ATTACH_NO (integer primary key), S_ATTACH_NAME (varchar), S_ATTACH_TYPE (varchar), S_PATH (varchar), N_VERSION (integer), S_STATUS (char), D_CREATE_TIME (datetime), S_CREATOR (varchar), S_CREATOR_NO (varchar), N_LAST_ATTACH_NO (integer), S_FILE_TYPE (varchar", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "COMMENT", "ENGINE", "NOT NULL", "DEFAULT", "PRIMARY KEY", "FOREIGN KEY"], "instruction": "Write a SQL query to create a table named t_rms_attach with 13 columns: N_ATTACH_NO (integer primary key), S_ATTACH_NAME (varchar), S_ATTACH_TYPE (varchar), S_PATH (varchar), N_VERSION (integer), S_STATUS (char), D_CREATE_TIME (datetime), S_CREATOR (varchar), S_CREATOR_NO (varchar), N_LAST_ATTACH_NO (integer), S_FILE_TYPE (varchar), S_SAVE_PATH (varchar), S_SUB_PATH (varchar).", "response": "-- Reasoning:\nWe need a new table named t_rms_attach. It should have an integer primary key so that each attachment has a unique identifier, and a name column to store the attachment\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_attach (\n  N_ATTACH_NO INT PRIMARY KEY,\n  S_ATTACH_NAME VARCHAR(255),\n  S_ATTACH_TYPE VARCHAR(255),\n  S_PATH VARCHAR(255),\n  N_VERSION INT,\n  S_STATUS CHAR(1),\n  D_CREATE_TIME DATETIME,\n  S_CREATOR VARCHAR(255),\n  S_CREATOR_NO VARCHAR(255),\n  N_LAST_ATTACH_NO INT,\n  S_FILE_TYPE VARCHAR(255),\n  S_SAVE_PATH VARCHAR(255),\n  S_SUB_PATH VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_attach table with 13 columns:\n  \u2022 N_ATTACH_NO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_ATTACH_NAME: variable\u2010length string up to 255 characters\n  \u2022 S_ATTACH_TYPE: variable\u2010length string up to 255 characters\n  \u2022 S_PATH: variable\u2010length string"}
{"seed": "/* Inserts a new row into the t_rms_attach table with the given values. */\nINSERT INTO `t_rms_attach` VALUES ('1', '\u901a\u77e5\u4e66', '\u5f55\u53d6\u901a\u77e5\u4e66', 'F:\\\\GraduationTest\\\\attach\\\\\u5f55\u53d6\u901a\u77e5\u4e66_\u901a\u77e5\u4e66', '1', '1', '2018-03-09 14:07:59', 'admin', '\u9662\u62db\u751f\u529e', '1', null, null, null)", "description": "Inserts a new row into the t_rms_attach table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_attach table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_attach table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_attach (\n  attach_id,\n  attach_name,\n  attach_type,\n  attach_size,\n  attach_path,\n  attach_create_time,\n  attach_create_user,\n  attach_update_time,\n  attach_update_user\n) VALUES (\n  1,\n  'test.txt',\n  'txt',\n  1024,\n  '/tmp/test.txt',\n  '2020-01-01 00:00:00',\n  'admin',\n  '2020-01-01 00:00:00',\n  'admin'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_attach table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_attach;"}
{"seed": "/* Drops the table named t_rms_auditinfo if it exists. */\nDROP TABLE IF EXISTS `t_rms_auditinfo`", "description": "Drops the table named t_rms_auditinfo if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_rms_auditinfo if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_rms_auditinfo if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_auditinfo;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('t_rms_auditinfo');"}
{"seed": "/* Creates a table named t_rms_auditinfo with 14 columns: N_AUDIT_NO (integer primary key), N_DEPT_NO, S_DEPT_CODE, S_SHORT_NAME, S_FULL_NAME, S_MODIFY_ITEMID, S_MODIFY_ITEM, S_BEFORE_MODIFY, S_AFTER_MODIFY, S_CREATOR, S_CREATOR_NO, D_CREATE_TIME, S */\nCREATE TABLE `t_rms_auditinfo` (\n  `N_AUDIT_NO` int(11) NOT NULL AUTO_INCREMENT COMMENT '\u4fee\u6539\u9879ID',\n  `N_DEPT_NO` int(11) DEFAULT NULL,\n  `S_DEPT_CODE` varchar(20) DEFAULT NULL COMMENT '\u4e13\u4e1a\u4ee3\u7801',\n  `S_SHORT_NAME` varchar(255) DEFAULT NULL COMMENT '\u4e13\u4e1a\u7b80\u79f0',\n  `S_FULL_NAME` varchar(255) DEFAULT NULL COMMENT '\u4e13\u4e1a\u5168\u79f0',\n  `S_MODIFY_ITEMID` varchar(50) DEFAULT NULL COMMENT '\u4fee\u6539\u9879ID',\n  `S_MODIFY_ITEM` varchar(255) DEFAULT NULL COMMENT '\u4fee\u6539\u9879',\n  `S_BEFORE_MODIFY` varchar(255) DEFAULT NULL COMMENT '\u4fee\u6539\u524d',\n  `S_AFTER_MODIFY` varchar(255) DEFAULT NULL COMMENT '\u4fee\u6539\u540e',\n  `S_CREATOR` varchar(50) DEFAULT NULL,\n  `S_CREATOR_NO` varchar(20) DEFAULT NULL COMMENT '\u521b\u5efa\u4ebaNO',\n  `D_CREATE_TIME` datetime DEFAULT NULL,\n  `S_OPERATOR` varchar(50) DEFAULT NULL COMMENT '\u5ba1\u6838\u4eba',\n  `S_STATUS` varchar(5) DEFAULT NULL COMMENT '\u5ba1\u6838\u72b6\u6001',\n  `S_OPERATOR_NO` varchar(50) DEFAULT NULL COMMENT '\u5ba1\u6838\u4ebaNO',\n  `D_OPERATE_TIME` datetime DEFAULT NULL COMMENT '\u5ba1\u6838\u65f6\u95f4',\n  PRIMARY KEY (`N_AUDIT_NO`)\n) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COMMENT='\u9662\u7cfb\u4e13\u4e1a\u4fee\u6539\u5ba1\u6838'", "description": "Creates a table named t_rms_auditinfo with 14 columns: N_AUDIT_NO (integer primary key), N_DEPT_NO, S_DEPT_CODE, S_SHORT_NAME, S_FULL_NAME, S_MODIFY_ITEMID, S_MODIFY_ITEM, S_BEFORE_MODIFY, S_AFTER_MODIFY, S_CREATOR, S_CREATOR_NO, D_CREATE_TIME, S", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "COMMENT", "ENGINE", "NOT", "NULL", "DEFAULT", "PRIMARY KEY", "FOREIGN"], "instruction": "Write a SQL query to create a table named t_rms_auditinfo with 14 columns: N_AUDIT_NO (integer primary key), N_DEPT_NO, S_DEPT_CODE, S_SHORT_NAME, S_FULL_NAME, S_MODIFY_ITEMID, S_MODIFY_ITEM, S_BEFORE_MODIFY, S_AFTER_MODIFY, S_CREATOR, S_CREATOR_NO, D_CREATE_TIME, S_OPERATOR, S_STATUS, S_OPERATOR_NO, D_OPERATE_TIME.", "response": "-- Reasoning:\nWe need a new table named t_rms_auditinfo. It should have an integer primary key so that each audit record has a unique identifier, and a name column to store the product\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_auditinfo (\n  N_AUDIT_NO INT PRIMARY KEY,\n  N_DEPT_NO INT,\n  S_DEPT_CODE VARCHAR(20),\n  S_SHORT_NAME VARCHAR(20),\n  S_FULL_NAME VARCHAR(20),\n  S_MODIFY_ITEMID VARCHAR(20),\n  S_MODIFY_ITEM VARCHAR(20),\n  S_BEFORE_MODIFY VARCHAR(20),\n  S_AFTER_MODIFY VARCHAR(20),\n  S_CREATOR VARCHAR(20),\n  S_CREATOR_NO VARCHAR(20),\n  D_CREATE_TIME DATETIME,\n  S_OPERATOR VARCHAR(20),\n  S_STATUS VARCHAR(20),\n  S_OPERATOR_NO VARCHAR(20),\n  D_OPERATE_TIME DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_auditinfo table with 14 columns:\n  \u2022 N_AUDIT_NO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 N_DEPT_NO: integer\n  \u2022 S"}
{"seed": "/* Inserts a new row into the t_rms_auditinfo table with the specified values. */\nINSERT INTO `t_rms_auditinfo` VALUES ('1', '123', 'test1', 'test', 'test', 'sDeptCode', null, 'test1', '', '\u8d85\u7ea7\u7ba1\u7406\u5458', 'admin', '2018-03-04 13:52:34', 'admin', '3', '1002', '2018-03-09 23:45:11')", "description": "Inserts a new row into the t_rms_auditinfo table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_auditinfo table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_auditinfo table with the following values:\n  \u2022 audit_id: 1\n  \u2022 audit_type: 'test'\n  \u2022 audit_date: '2020-01-01'\n  \u2022 audit_user: 'test'\n\n-- Solution:\n```sql\nINSERT INTO t_rms_auditinfo (audit_id, audit_type, audit_date, audit_user)\nVALUES (1, 'test', '2020-01-01', 'test');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_auditinfo table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_auditinfo;"}
{"seed": "/* Inserts a new row into the t_rms_auditinfo table with the given values. */\nINSERT INTO `t_rms_auditinfo` VALUES ('2', '123', 'test1', 'test', 'test', 'sFullName', null, 'test', '', '\u8d85\u7ea7\u7ba1\u7406\u5458', 'admin', '2018-03-04 13:52:34', 'admin', '3', '1002', '2018-03-09 23:45:11')", "description": "Inserts a new row into the t_rms_auditinfo table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_auditinfo table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_auditinfo table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_auditinfo (\n  audit_id,\n  audit_type,\n  audit_date,\n  audit_user,\n  audit_desc\n) VALUES (\n  1,\n  'INSERT',\n  '2020-01-01',\n  'admin',\n  'Insert a new row into the t_rms_auditinfo table'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_auditinfo table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_auditinfo;"}
{"seed": "/* Drops the table t_rms_department if it exists. */\nDROP TABLE IF EXISTS `t_rms_department`", "description": "Drops the table t_rms_department if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table t_rms_department if it exists.", "response": "-- Reasoning:\nWe need to drop the table t_rms_department if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_department;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_rms_department');"}
{"seed": "/* Creates a table named t_rms_department with 11 columns: N_DEPT_NO (integer primary key), S_DEPT_CODE (varchar), S_SHORT_NAME (varchar), S_FULL_NAME (varchar), S_REGION (varchar), S_TUITION (varchar), N_COUNT_ENROL (integer), N_COUNT_EXT_RNROL (integer), DB_ENROL_SCORE (double), S_REMARK (varchar), */\nCREATE TABLE `t_rms_department` (\n  `N_DEPT_NO` int(11) NOT NULL AUTO_INCREMENT COMMENT '\u9662\u7cfb\u4e13\u4e1a\u5185\u90e8\u7f16\u7801',\n  `S_DEPT_CODE` varchar(100) DEFAULT NULL COMMENT '\u4e13\u4e1a\u4ee3\u7801',\n  `S_SHORT_NAME` varchar(255) DEFAULT NULL,\n  `S_FULL_NAME` varchar(512) DEFAULT NULL COMMENT '\u4e13\u4e1a\u5168\u79f0',\n  `S_REGION` varchar(30) DEFAULT NULL COMMENT '\u6240\u5c5e\u9662\u7cfb  \\r\\n\u5173\u8054\u5b57\u5178\u8868\uff1a\u201cCollege\u201d\\r\\nRjgcx-\u8f6f\u4ef6\u5de5\u7a0b\u7cfb\u3001wljsx-\u7f51\u7edc\u6280\u672f\u7cfb\u3001\\r\\nDzx-\u7535\u5b50\u7cfb\u3001\\r\\nJsjx-\u8ba1\u7b97\u673a\u7cfb\u3001\\r\\nYxx-\u6e38\u620f\u7cfb\u3001\\r\\nSmmtx-\u6570\u7801\u5a92\u4f53\u7cfb\u3001\\r\\nGlx-\u7ba1\u7406\u7cfb\u3001\\r\\nGjjmx-\u56fd\u9645\u7ecf\u8d38\u7cfb\u3001\\r\\nCkx-\u8d22\u4f1a\u7cfb\u3001\\r\\nWyx-\u5916\u8bed\u7cfb\\r\\n',\n  `S_TUITION` varchar(255) DEFAULT NULL COMMENT '\u5b66\u8d39',\n  `N_COUNT_ENROL` int(11) DEFAULT NULL COMMENT '\u8ba1\u5212\u5185\u62db\u751f\u4eba\u6570',\n  `N_COUNT_EXT_RNROL` int(11) DEFAULT NULL COMMENT '\u8865\u5f55\u4eba\u6570',\n  `DB_ENROL_SCORE` double DEFAULT NULL COMMENT '\u5f55\u53d6\u5206\u6570\u7ebf',\n  `S_REMARK` varchar(255) DEFAULT NULL,\n  `C_VALID_FLAG` char(2) DEFAULT '1' COMMENT '\u6570\u636e\u72b6\u6001  1-\u6709\u6548\u30012-\u5220\u9664',\n  PRIMARY KEY (`N_DEPT_NO`)\n) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8 COMMENT='\u9662\u7cfb\u4e13\u4e1a\u8868'", "description": "Creates a table named t_rms_department with 11 columns: N_DEPT_NO (integer primary key), S_DEPT_CODE (varchar), S_SHORT_NAME (varchar), S_FULL_NAME (varchar), S_REGION (varchar), S_TUITION (varchar), N_COUNT_ENROL (integer), N_COUNT_EXT_RNROL (integer), DB_ENROL_SCORE (double), S_REMARK (varchar),", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "COMMENT", "ENGINE", "CHARSET", "FOREIGN KEY", "REFERENCES", "REFERENCES", "REFERENCES"], "instruction": "Write a SQL query to create a table named t_rms_department with 11 columns: N_DEPT_NO (integer primary key), S_DEPT_CODE (varchar), S_SHORT_NAME (varchar), S_FULL_NAME (varchar), S_REGION (varchar), S_TUITION (varchar), N_COUNT_ENROL (integer), N_COUNT_EXT_RNROL (integer), DB_ENROL_SCORE (double), S_REMARK (varchar), C_VALID_FLAG (char(2)).", "response": "-- Reasoning:\nWe need a new table named t_rms_department. It should have an integer primary key so that each department has a unique identifier, and a name column to store the department\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_department (\n  N_DEPT_NO INT PRIMARY KEY,\n  S_DEPT_CODE VARCHAR(255),\n  S_SHORT_NAME VARCHAR(255),\n  S_FULL_NAME VARCHAR(255),\n  S_REGION VARCHAR(255),\n  S_TUITION VARCHAR(255),\n  N_COUNT_ENROL INT,\n  N_COUNT_EXT_RNROL INT,\n  DB_ENROL_SCORE DOUBLE,\n  S_REMARK VARCHAR(255),\n  C_VALID_FLAG CHAR(2)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_department table with 11 columns:\n  \u2022 N_DEPT_NO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_DEPT_CODE: variable\u2010length string up to 255 characters\n  \u2022 S_SHORT_NAME: variable\u2010length string up to 255 characters\n  \u2022 S_FULL_NAME: variable\u2010length string up to 255 characters\n  \u2022 S_REGION: variable"}
{"seed": "/* Inserts a new row into the t_rms_department table with the given values. */\nINSERT INTO `t_rms_department` VALUES ('1', '080706', '\u4fe1\u5de5', '\u4fe1\u606f\u5de5\u7a0b', 'rjgcx', '22000', '280', '280', null, '\u5927\u6570\u636e\u4fe1\u606f\u5e94\u7528\u4e0e\u5f00\u53d1\u65b9\u5411\uff0c\u79fb\u52a8\u4e92\u8054\u7f51\u4e0e\u5f00\u53d1\u65b9\u5411', '1')", "description": "Inserts a new row into the t_rms_department table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_department table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_department table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_department (department_id, department_name)\nVALUES (1, 'Sales');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_department table with the given values:\n  \u2022 department_id: 1\n  \u2022 department_name: Sales\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_department;"}
{"seed": "/* Drops the table named t_rms_dictionary if it exists. */\nDROP TABLE IF EXISTS `t_rms_dictionary`", "description": "Drops the table named t_rms_dictionary if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named t_rms_dictionary if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_rms_dictionary if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_dictionary;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('t_rms_dictionary');"}
{"seed": "/* Creates a table named t_rms_dictionary with seven columns: N_DICT_NO (integer primary key), S_ITEM_CODE (varchar), S_SORT_NO (varchar), S_ITEM_KEY (varchar), S_ITEM_VALUE (varchar), S_REMARK (varchar), and C_VALID_FLAG (char). */\nCREATE TABLE `t_rms_dictionary` (\n  `N_DICT_NO` int(10) NOT NULL AUTO_INCREMENT,\n  `S_ITEM_CODE` varchar(128) NOT NULL COMMENT '\u5b57\u5178\u7f16\u7801',\n  `S_SORT_NO` varchar(128) DEFAULT NULL COMMENT '\u6392\u5e8f',\n  `S_ITEM_KEY` varchar(128) NOT NULL COMMENT '\u5b57\u5178\u952e',\n  `S_ITEM_VALUE` varchar(128) NOT NULL COMMENT '\u5b57\u5178\u503c',\n  `S_REMARK` varchar(255) DEFAULT NULL COMMENT '\u63cf\u8ff0',\n  `C_VALID_FLAG` char(2) DEFAULT '1' COMMENT '\u6570\u636e\u72b6\u6001',\n  PRIMARY KEY (`N_DICT_NO`)\n) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8 COMMENT='\u5b57\u5178\u8868'", "description": "Creates a table named t_rms_dictionary with seven columns: N_DICT_NO (integer primary key), S_ITEM_CODE (varchar), S_SORT_NO (varchar), S_ITEM_KEY (varchar), S_ITEM_VALUE (varchar), S_REMARK (varchar), and C_VALID_FLAG (char).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "COMMENT", "DEFAULT", "ENGINE", "NOT NULL", "NULL", "DEFAULT", "CHARSET", "COMMENT", "COMMENT", "COMMENT"], "instruction": "Write a SQL query to create a table named t_rms_dictionary with seven columns: N_DICT_NO (integer primary key), S_ITEM_CODE (varchar), S_SORT_NO (varchar), S_ITEM_KEY (varchar), S_ITEM_VALUE (varchar), S_REMARK (varchar), and C_VALID_FLAG (char).", "response": "-- Reasoning:\nWe need a new table named t_rms_dictionary. It should have an integer primary key so that each item has a unique identifier, and a name column to store the item\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_dictionary (\n  N_DICT_NO INT PRIMARY KEY,\n  S_ITEM_CODE VARCHAR(255),\n  S_SORT_NO VARCHAR(255),\n  S_ITEM_KEY VARCHAR(255),\n  S_ITEM_VALUE VARCHAR(255),\n  S_REMARK VARCHAR(255),\n  C_VALID_FLAG CHAR(1)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_dictionary table with seven columns:\n  \u2022 N_DICT_NO: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_ITEM_CODE: variable\u2010length string up to 255 characters\n  \u2022 S_SORT_NO: variable\u2010length string up to 255 characters\n  \u2022 S_ITEM_KEY: variable\u2010length string up to 255 characters\n  \u2022 S_ITEM_VALUE: variable\u2010length string up to 255 characters\n  \u2022 S_REMARK: variable\u2010length string up to 255 characters\n  \u2022 C_VALID_FLAG: character, length"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 1, USER_TYPE, 1, student, \u5b66\u751f, '', and 1. */\nINSERT INTO `t_rms_dictionary` VALUES ('1', 'USER_TYPE', '1', 'student', '\u5b66\u751f', '', '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 1, USER_TYPE, 1, student, \u5b66\u751f, '', and 1.", "concepts": ["INSERT INTO", "VALUES", "USER_TYPE", "student", "\u5b66\u751f", "1"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 1, USER_TYPE, 1, student, \u5b66\u751f, '', and 1.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table with the following values:\n  \u2022 id: 1\n  \u2022 type: USER_TYPE\n  \u2022 status: 1\n  \u2022 name: student\n  \u2022 name_en: \u5b66\u751f\n  \u2022 name_zh:\n  \u2022 order: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, type, status, name, name_en, name_zh, order)\nVALUES (1, 'USER_TYPE', 1, 'student', '\u5b66\u751f', '', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 2, USER_TYPE, 2, d_admin, \u7cfb\u62db\u751f\u529e, null, and 1. */\nINSERT INTO `t_rms_dictionary` VALUES ('2', 'USER_TYPE', '2', 'd_admin', '\u7cfb\u62db\u751f\u529e', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 2, USER_TYPE, 2, d_admin, \u7cfb\u62db\u751f\u529e, null, and 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 2, USER_TYPE, 2, d_admin, \u7cfb\u62db\u751f\u529e, null, and 1.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 2\n  \u2022 name: USER_TYPE\n  \u2022 type: 2\n  \u2022 code: d_admin\n  \u2022 name_cn: \u7cfb\u62db\u751f\u529e\n  \u2022 name_en: null\n  \u2022 status: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, name, type, code, name_cn, name_en, status)\nVALUES (2, 'USER_TYPE', 2, 'd_admin', '\u7cfb\u62db\u751f\u529e', null, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 3, USER_TYPE, 3, f_admin, \u9662\u62db\u751f\u529e, null, and 1. */\nINSERT INTO `t_rms_dictionary` VALUES ('3', 'USER_TYPE', '3', 'f_admin', '\u9662\u62db\u751f\u529e', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 3, USER_TYPE, 3, f_admin, \u9662\u62db\u751f\u529e, null, and 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 3, USER_TYPE, 3, f_admin, \u9662\u62db\u751f\u529e, null, and 1.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 3\n  \u2022 name: USER_TYPE\n  \u2022 type: 3\n  \u2022 code: f_admin\n  \u2022 name_cn: \u9662\u62db\u751f\u529e\n  \u2022 name_en: null\n  \u2022 status: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, name, type, code, name_cn, name_en, status)\nVALUES (3, 'USER_TYPE', 3, 'f_admin', '\u9662\u62db\u751f\u529e', null, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the given values. */\nINSERT INTO `t_rms_dictionary` VALUES ('4', 'COLLEGE', '1', 'rjgcx', '\u8f6f\u4ef6\u5de5\u7a0b\u7cfb', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (\n  id,\n  name,\n  description,\n  type,\n  value,\n  status,\n  created_by,\n  created_date,\n  updated_by,\n  updated_date\n)\nVALUES (\n  1,\n  'test',\n  'test',\n  'test',\n  'test',\n  'test',\n  'test',\n  '2020-01-01',\n  'test',\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 14, 'OPERATE_STATUS', '1', '1', '\u5f85\u5ba1\u6838', null, '1'. */\nINSERT INTO `t_rms_dictionary` VALUES ('14', 'OPERATE_STATUS', '1', '1', '\u5f85\u5ba1\u6838', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 14, 'OPERATE_STATUS', '1', '1', '\u5f85\u5ba1\u6838', null, '1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 15, 'OPERATE_STATUS', '2', '2', '\u5ba1\u6838\u901a\u8fc7', null, '1'. */\nINSERT INTO `t_rms_dictionary` VALUES ('15', 'OPERATE_STATUS', '2', '2', '\u5ba1\u6838\u901a\u8fc7', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 15, 'OPERATE_STATUS', '2', '2', '\u5ba1\u6838\u901a\u8fc7', null, '1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 15, 'OPERATE_STATUS', '2', '2', '\u5ba1\u6838\u901a\u8fc7', null, '1'.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 15\n  \u2022 name: OPERATE_STATUS\n  \u2022 type: 2\n  \u2022 sort: 2\n  \u2022 value: \u5ba1\u6838\u901a\u8fc7\n  \u2022 remark: null\n  \u2022 status: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, name, type, sort, value, remark, status)\nVALUES (15, 'OPERATE_STATUS', 2, 2, '\u5ba1\u6838\u901a\u8fc7', null, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 16, 'OPERATE_STATUS', '3', '3', '\u5ba1\u6838\u4e0d\u901a\u8fc7', null, '1'. */\nINSERT INTO `t_rms_dictionary` VALUES ('16', 'OPERATE_STATUS', '3', '3', '\u5ba1\u6838\u4e0d\u901a\u8fc7', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 16, 'OPERATE_STATUS', '3', '3', '\u5ba1\u6838\u4e0d\u901a\u8fc7', null, '1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "", "response": "-- Reasoning:\nWe need to modify the existing orders table by adding a new column named status. It should be a VARCHAR(20) and not allow NULLs so that every order has a defined status.\n\n-- Solution:\n```sql\nALTER TABLE orders\n  ADD COLUMN status VARCHAR(20) NOT NULL;\n```\n\n-- Explanation:\nThis ALTER statement updates the orders table schema by adding:\n  \u2022 status: a non\u2010nullable varchar column up to 20 chars\n\n-- Tests:\n-- 1. Check new column appears and disallows nulls\nPRAGMA table_info('orders');"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 17, 'SUBJECT_TYPE', '1', 'wk', '\u6587\u79d1\u7c7b', null, '1'. */\nINSERT INTO `t_rms_dictionary` VALUES ('17', 'SUBJECT_TYPE', '1', 'wk', '\u6587\u79d1\u7c7b', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 17, 'SUBJECT_TYPE', '1', 'wk', '\u6587\u79d1\u7c7b', null, '1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 17, 'SUBJECT_TYPE', '1', 'wk', '\u6587\u79d1\u7c7b', null, '1'.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 17\n  \u2022 name: SUBJECT_TYPE\n  \u2022 code: 1\n  \u2022 short_name: wk\n  \u2022 full_name: \u6587\u79d1\u7c7b\n  \u2022 description: null\n  \u2022 is_active: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, name, code, short_name, full_name, description, is_active)\nVALUES (17, 'SUBJECT_TYPE', '1', 'wk', '\u6587\u79d1\u7c7b', null, '1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 18, 'SUBJECT_TYPE', '2', 'lk', '\u7406\u79d1\u7c7b', null, '1'. */\nINSERT INTO `t_rms_dictionary` VALUES ('18', 'SUBJECT_TYPE', '2', 'lk', '\u7406\u79d1\u7c7b', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 18, 'SUBJECT_TYPE', '2', 'lk', '\u7406\u79d1\u7c7b', null, '1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 18, 'SUBJECT_TYPE', '2', 'lk', '\u7406\u79d1\u7c7b', null, '1'.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 18\n  \u2022 name: SUBJECT_TYPE\n  \u2022 type: 2\n  \u2022 code: lk\n  \u2022 name_cn: \u7406\u79d1\u7c7b\n  \u2022 description: null\n  \u2022 status: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, name, type, code, name_cn, description, status)\nVALUES (18, 'SUBJECT_TYPE', 2, 'lk', '\u7406\u79d1\u7c7b', null, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 19, 'SUBJECT_TYPE', '3', 'ms', '\u7f8e\u672f\u7c7b', null, '1'. */\nINSERT INTO `t_rms_dictionary` VALUES ('19', 'SUBJECT_TYPE', '3', 'ms', '\u7f8e\u672f\u7c7b', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 19, 'SUBJECT_TYPE', '3', 'ms', '\u7f8e\u672f\u7c7b', null, '1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 19, 'SUBJECT_TYPE', '3', 'ms', '\u7f8e\u672f\u7c7b', null, '1'.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 19\n  \u2022 name: SUBJECT_TYPE\n  \u2022 code: 3\n  \u2022 language: ms\n  \u2022 description: \u7f8e\u672f\u7c7b\n  \u2022 parent_id: null\n  \u2022 is_leaf: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, name, code, language, description, parent_id, is_leaf)\nVALUES (19, 'SUBJECT_TYPE', '3', 'ms', '\u7f8e\u672f\u7c7b', null, '1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 23, POLITICAL_STATUS, 4, qz, \u7fa4\u4f17, and 1. */\nINSERT INTO `t_rms_dictionary` VALUES ('23', 'POLITICAL_STATUS', '4', 'qz', '\u7fa4\u4f17', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 23, POLITICAL_STATUS, 4, qz, \u7fa4\u4f17, and 1.", "concepts": ["INSERT INTO", "VALUES", "t_rms_dictionary", "VALUES", "23", "POLITICAL_STATUS", "4", "qz", "\u7fa4"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 23, POLITICAL_STATUS, 4, qz, \u7fa4\u4f17, and 1.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table with the values 23, POLITICAL_STATUS, 4, qz, \u7fa4\u4f17, and 1.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, code, type, code_value, code_name, sort_order)\nVALUES (23, 'POLITICAL_STATUS', 4, 'qz', '\u7fa4\u4f17', 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the following values:\n  \u2022 id: 23\n  \u2022 code: POLITICAL_STATUS\n  \u2022 type: 4\n  \u2022 code_value: qz\n  \u2022 code_name: \u7fa4\u4f17\n  \u2022 sort_order: 1\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary WHERE id = 23;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 24, PAY_FLAG, 1, 1, \u672a\u7f34\u8d39, null, and 1. */\nINSERT INTO `t_rms_dictionary` VALUES ('24', 'PAY_FLAG', '1', '1', '\u672a\u7f34\u8d39', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 24, PAY_FLAG, 1, 1, \u672a\u7f34\u8d39, null, and 1.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 24, PAY_FLAG, 1, 1, \u672a\u7f34\u8d39, null, and 1.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 24\n  \u2022 code: PAY_FLAG\n  \u2022 type: 1\n  \u2022 status: 1\n  \u2022 name: \u672a\u7f34\u8d39\n  \u2022 remark: null\n  \u2022 sort: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, code, type, status, name, remark, sort)\nVALUES (24, 'PAY_FLAG', 1, 1, '\u672a\u7f34\u8d39', null, 1);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 25, 'PAY_FLAG', '2', '2', '\u5df2\u7f34\u8d39', null, '1'. */\nINSERT INTO `t_rms_dictionary` VALUES ('25', 'PAY_FLAG', '2', '2', '\u5df2\u7f34\u8d39', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the values 25, 'PAY_FLAG', '2', '2', '\u5df2\u7f34\u8d39', null, '1'.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 25, 'PAY_FLAG', '2', '2', '\u5df2\u7f34\u8d39', null, '1'.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table. It should have the following values:\n  \u2022 id: 25\n  \u2022 code: PAY_FLAG\n  \u2022 code_type: 2\n  \u2022 code_value: 2\n  \u2022 code_name: \u5df2\u7f34\u8d39\n  \u2022 code_desc: null\n  \u2022 is_active: 1\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, code, code_type, code_value, code_name, code_desc, is_active)\nVALUES (25, 'PAY_FLAG', '2', '2', '\u5df2\u7f34\u8d39', null, '1');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the specified values. */\nINSERT INTO `t_rms_dictionary` VALUES ('26', 'PAY_FLAG', '3', '3', '\u5df2\u7f34\u90e8\u5206\u8d39\u7528', null, '1')", "description": "Inserts a new row into the t_rms_dictionary table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table with the specified values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (\n  id,\n  name,\n  description,\n  type,\n  value,\n  status,\n  created_by,\n  created_date,\n  updated_by,\n  updated_date\n)\nVALUES (\n  1,\n  'test',\n  'test',\n  'test',\n  'test',\n  'test',\n  'test',\n  '2020-01-01',\n  'test',\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_dictionary table with the specified values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_dictionary;"}
{"seed": "/* Inserts a new row into the t_rms_dictionary table with the values 31, test, null, test1, \u6d4b\u8bd5, , and 2. */\nINSERT INTO `t_rms_dictionary` VALUES ('31', 'test', null, 'test1', '\u6d4b\u8bd5', '', '2')", "description": "Inserts a new row into the t_rms_dictionary table with the values 31, test, null, test1, \u6d4b\u8bd5, , and 2.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_dictionary table with the values 31, test, null, test1, \u6d4b\u8bd5, , and 2.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_dictionary table with the values 31, test, null, test1, \u6d4b\u8bd5, , and 2.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_dictionary (id, name, description, name_en, name_zh, name_jp, name_kr, name_ru, name_fr, name_de, name_es, name_pt, name_it, name_nl, name_pl, name_tr, name_ar, name_he, name_hi, name_id, name_sv, name_da, name_fi, name_no, name_pt_br, name_cs, name_el, name_hu, name_is, name_lt, name_lv, name_mk, name_ms, name_nb, name_ro, name_sk, name_sl, name_th, name_uk, name_vi, name_bg, name_fa, name_hr, name_ka, name_sr, name_ta, name_be, name_et, name_kk, name_sl, name_tl, name_az, name_eu, name_ky, name_sw, name_te, name_bn, name_fa, name_gl, name_kn, name_ta,"}
{"seed": "/* Drops the table named t_rms_qainfo if it exists. */\nDROP TABLE IF EXISTS `t_rms_qainfo`", "description": "Drops the table named t_rms_qainfo if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_rms_qainfo if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_rms_qainfo if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_qainfo;\n```\n\n-- Explanation:\nThis DROP statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_rms_qainfo');"}
{"seed": "/* Creates a table named t_rms_qainfo with 10 columns: N_QA_ID (integer primary key), S_SORT_NO (varchar), S_QUESTION (varchar), S_ANSWER (varchar), S_REMARK (varchar), C_VALID_FLAG (varchar), D_CREATE_TIME (datetime), S_CREATOR (varchar), S_CREATOR_NO (varchar). */\nCREATE TABLE `t_rms_qainfo` (\n  `N_QA_ID` int(11) NOT NULL AUTO_INCREMENT,\n  `S_SORT_NO` varchar(255) DEFAULT NULL,\n  `S_QUESTION` varchar(255) DEFAULT NULL,\n  `S_ANSWER` varchar(4000) DEFAULT NULL,\n  `S_REMARK` varchar(255) DEFAULT NULL,\n  `C_VALID_FLAG` varchar(255) DEFAULT NULL,\n  `D_CREATE_TIME` datetime DEFAULT NULL,\n  `S_CREATOR` varchar(255) DEFAULT NULL,\n  `S_CREATOR_NO` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`N_QA_ID`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8", "description": "Creates a table named t_rms_qainfo with 10 columns: N_QA_ID (integer primary key), S_SORT_NO (varchar), S_QUESTION (varchar), S_ANSWER (varchar), S_REMARK (varchar), C_VALID_FLAG (varchar), D_CREATE_TIME (datetime), S_CREATOR (varchar), S_CREATOR_NO (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "DATETIME", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named t_rms_qainfo with 10 columns: N_QA_ID (integer primary key), S_SORT_NO (varchar), S_QUESTION (varchar), S_ANSWER (varchar), S_REMARK (varchar), C_VALID_FLAG (varchar), D_CREATE_TIME (datetime), S_CREATOR (varchar), S_CREATOR_NO (varchar).", "response": "-- Reasoning:\nWe need a new table named t_rms_qainfo. It should have an integer primary key so that each QA info has a unique identifier, and a name column to store the QA info\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_qainfo (\n  N_QA_ID INT PRIMARY KEY,\n  S_SORT_NO VARCHAR(255),\n  S_QUESTION VARCHAR(255),\n  S_ANSWER VARCHAR(255),\n  S_REMARK VARCHAR(255),\n  C_VALID_FLAG VARCHAR(255),\n  D_CREATE_TIME DATETIME,\n  S_CREATOR VARCHAR(255),\n  S_CREATOR_NO VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_qainfo table with 10 columns:\n  \u2022 N_QA_ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_SORT_NO: variable\u2010length string up to 255 characters\n  \u2022 S_QUESTION: variable\u2010length string up to 255 characters\n  \u2022 S_ANSWER: variable\u2010length string up to 255 characters\n  \u2022 S_REMARK: variable\u2010length string up to 255 characters"}
{"seed": "/* Inserts a new row into the t_rms_qainfo table with the given values. */\nINSERT INTO `t_rms_qainfo` VALUES ('1', '1', '\u534e\u8f6f\u5b66\u9662\u5c5e\u4e8e\u4ec0\u4e48\u6027\u8d28\u7684\u5b66\u6821\uff1f', '\u7b54\uff1a\u5e7f\u5dde\u5927\u5b66\u534e\u8f6f\u8f6f\u4ef6\u5b66\u9662\u662f\u7ecf\u6559\u80b2\u90e8\u6279\u51c6\u7684\u672c\u79d1\u5c42\u6b21\u72ec\u7acb\u5b66\u9662\uff0c\u4e3b\u7ba1\u5355\u4f4d\u662f\u5e7f\u4e1c\u7701\u6559\u80b2\u5385\u3002', '', '1', '2018-03-09 00:00:00', 'admin', '1002')", "description": "Inserts a new row into the t_rms_qainfo table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_qainfo table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_qainfo table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_qainfo (\n  qainfo_id,\n  qainfo_name,\n  qainfo_desc,\n  qainfo_type,\n  qainfo_status,\n  qainfo_create_time,\n  qainfo_update_time\n) VALUES (\n  1,\n  'test',\n  'test',\n  'test',\n  'test',\n  '2020-01-01 00:00:00',\n  '2020-01-01 00:00:00'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_qainfo table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_qainfo;"}
{"seed": "/* Drops the table named t_rms_recruitinfo if it exists. */\nDROP TABLE IF EXISTS `t_rms_recruitinfo`", "description": "Drops the table named t_rms_recruitinfo if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_rms_recruitinfo if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_rms_recruitinfo if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_recruitinfo;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_rms_recruitinfo');"}
{"seed": "/* Creates a table named t_rms_recruitinfo with 20 columns: N_STUDENT_ID (integer primary key), S_CANDIDATE_NUM (varchar), S_STUDENT_NAME (varchar), S_STUDENT_NO (varchar), N_AGE (integer), C_SEX (varchar), S_ADDRESS (varchar), S_CONTACT (varchar), S_EMAIL (varchar), S_OTHER_CTACT (varchar), */\nCREATE TABLE `t_rms_recruitinfo` (\n  `N_STUDENT_ID` int(255) NOT NULL AUTO_INCREMENT,\n  `S_CANDIDATE_NUM` varchar(255) DEFAULT NULL,\n  `S_STUDENT_NAME` varchar(255) DEFAULT NULL,\n  `S_STUDENT_NO` varchar(255) DEFAULT NULL,\n  `N_AGE` int(11) DEFAULT NULL,\n  `C_SEX` varchar(255) DEFAULT NULL,\n  `S_ADDRESS` varchar(255) DEFAULT NULL,\n  `S_CONTACT` varchar(255) DEFAULT NULL,\n  `S_EMAIL` varchar(255) DEFAULT NULL,\n  `S_OTHER_CTACT` varchar(255) DEFAULT NULL,\n  `S_ENROL_MAJOR` varchar(255) DEFAULT NULL,\n  `S_ADMITED_MAJOR` varchar(255) DEFAULT NULL,\n  `S_ADMITED_NO` int(11) DEFAULT NULL,\n  `S_REGISTER_FLAG` varchar(2) DEFAULT '1',\n  `S_GRADE` varchar(255) DEFAULT NULL,\n  `S_POLITIIS` varchar(255) DEFAULT NULL,\n  `S_PAY_FLAG` varchar(10) DEFAULT '1',\n  `S_OPERATOR` varchar(255) DEFAULT NULL,\n  `S_OPERATOR_NO` varchar(255) DEFAULT NULL,\n  `D_OPERATE_TIME` datetime DEFAULT NULL,\n  `S_STATUS` varchar(255) DEFAULT '1',\n  PRIMARY KEY (`N_STUDENT_ID`)\n) ENGINE=InnoDB AUTO_INCREMENT=11020 DEFAULT CHARSET=utf8", "description": "Creates a table named t_rms_recruitinfo with 20 columns: N_STUDENT_ID (integer primary key), S_CANDIDATE_NUM (varchar), S_STUDENT_NAME (varchar), S_STUDENT_NO (varchar), N_AGE (integer), C_SEX (varchar), S_ADDRESS (varchar), S_CONTACT (varchar), S_EMAIL (varchar), S_OTHER_CTACT (varchar),", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "AUTO_INCREMENT", "DEFAULT", "ENGINE", "CHARSET", "PRIMARY KEY", "FOREIGN KEY", "VARCHAR", "INT"], "instruction": "Write a SQL query to create a table named t_rms_recruitinfo with 20 columns: N_STUDENT_ID (integer primary key), S_CANDIDATE_NUM (varchar), S_STUDENT_NAME (varchar), S_STUDENT_NO (varchar), N_AGE (integer), C_SEX (varchar), S_ADDRESS (varchar), S_CONTACT (varchar), S_EMAIL (varchar), S_OTHER_CTACT (varchar), S_ENROL_MAJOR (varchar), S_ADMITED_MAJOR (varchar), S_ADMITED_NO (int), S_REGISTER_FLAG (varchar), S_GRADE (varchar), S", "response": "-- Reasoning:\nWe need a new table named t_rms_recruitinfo. It should have an integer primary key so that each student has a unique identifier, and a name column to store the student\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_recruitinfo (\n  N_STUDENT_ID INT PRIMARY KEY,\n  S_CANDIDATE_NUM VARCHAR(255),\n  S_STUDENT_NAME VARCHAR(255),\n  S_STUDENT_NO VARCHAR(255),\n  N_AGE INT,\n  C_SEX VARCHAR(255),\n  S_ADDRESS VARCHAR(255),\n  S_CONTACT VARCHAR(255),\n  S_EMAIL VARCHAR(255),\n  S_OTHER_CTACT VARCHAR(255),\n  S_ENROL_MAJOR VARCHAR(255),\n  S_ADMITED_MAJOR VARCHAR(255),\n  S_ADMITED_NO INT,\n  S_REGISTER_FLAG VARCHAR(255),\n  S_GRADE VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_recruitinfo table with 20 columns:\n  \u2022 N_STUDENT_ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_C"}
{"seed": "/* Inserts a new record into the t_rms_recruitinfo table with the given values. */\nINSERT INTO `t_rms_recruitinfo` VALUES ('11001', '1440112301', '\u8303\u8d3a\u4f1f', '1440112301', '23', '\u7537', '\u5e7f\u4e1c\u7701\u5e7f\u5dde\u5e02\u4ece\u5316\u533a', '13956795677', '13447@qq.com', '13956795677', '080902-1', '080902-1', '111001', '1', '2014', 'zgybdy', '0', '', '', null, '1')", "description": "Inserts a new record into the t_rms_recruitinfo table with the given values.", "concepts": ["INSERT INTO", "VALUES", "t_rms_recruitinfo", "11001", "144011230"], "instruction": "Write a SQL query to insert a new record into the t_rms_recruitinfo table with the given values.", "response": "-- Reasoning:\nWe need to insert a new record into the t_rms_recruitinfo table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_recruitinfo (\n  id,\n  name,\n  age,\n  sex,\n  address,\n  phone,\n  email,\n  education,\n  major,\n  graduate_school,\n  graduate_time,\n  graduate_degree,\n  graduate_major,\n  graduate_gpa,\n  graduate_gpa_rank,\n  graduate_gpa_rank_time,\n  graduate_gpa_rank_school,\n  graduate_gpa_rank_major,\n  graduate_gpa_rank_degree,\n  graduate_gpa_rank_time_degree,\n  graduate_gpa_rank_school_degree,\n  graduate_gpa_rank_major_degree,\n  graduate_gpa_rank_time_major_degree,\n  graduate_gpa_rank_school_major_degree,\n  graduate_gpa_rank_major_school_degree,\n  graduate_gpa_rank_time_major_school_degree,\n  graduate_gpa_rank_school_major_school_degree,\n  graduate_gpa_rank_major_school_school_degree,\n  graduate_gpa_rank"}
{"seed": "/* Inserts a new row into the t_rms_recruitinfo table with the given values. */\nINSERT INTO `t_rms_recruitinfo` VALUES ('11002', '6602552', '\u674e\u6770\u6ce2', '1440112328', '23', '\u7537', '\u5e7f\u4e1c\u7701\u5e7f\u5dde\u5e02\u4ece\u5316\u533a', '18955830996', '13448@qq.com', '18955830996', '080903', '080903', '111002', '1', '2014', 'zgybdy', '0', '', '', null, '1')", "description": "Inserts a new row into the t_rms_recruitinfo table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_recruitinfo table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_recruitinfo table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_recruitinfo (\n  id,\n  name,\n  age,\n  sex,\n  address,\n  phone,\n  email,\n  education,\n  major,\n  graduate_school,\n  graduate_time,\n  graduate_degree,\n  graduate_major,\n  graduate_gpa,\n  graduate_gpa_rank,\n  graduate_gpa_rank_time,\n  graduate_gpa_rank_school,\n  graduate_gpa_rank_major,\n  graduate_gpa_rank_degree,\n  graduate_gpa_rank_time_degree,\n  graduate_gpa_rank_school_degree,\n  graduate_gpa_rank_major_degree,\n  graduate_gpa_rank_time_major_degree,\n  graduate_gpa_rank_school_major_degree,\n  graduate_gpa_rank_major_school_degree,\n  graduate_gpa_rank_time_major_school_degree,\n  graduate_gpa_rank_school_major_school_degree,\n  graduate_gpa_rank_major_school_school_degree,\n  graduate_gpa_rank"}
{"seed": "/* Inserts a new record into the t_rms_recruitinfo table with the specified values. */\nINSERT INTO `t_rms_recruitinfo` VALUES ('11007', '6602557', '\u859b\u7693\u4ec1', '1440112338', '23', '\u7537', '\u5e7f\u4e1c\u7701\u5e7f\u5dde\u5e02\u4ece\u5316\u533a', '15905588919', '13453@qq.com', '15905588919', '130508', '130508', '111007', '1', '2014', 'zgybdy', '1', 'admin', '1002', '2018-03-09 00:00:00', '2')", "description": "Inserts a new record into the t_rms_recruitinfo table with the specified values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new record into the t_rms_recruitinfo table with the specified values.", "response": "-- Reasoning:\nWe need to insert a new record into the t_rms_recruitinfo table with the following values:\n  \u2022 id: 1\n  \u2022 name: \u201c\u201d\n  \u2022 age: 25\n  \u2022 gender: \u201cM\u201d\n  \u2022 address: \u201c123 Main Street\u201d\n\n-- Solution:\n```sql\nINSERT INTO t_rms_recruitinfo (id, name, age, gender, address)\nVALUES (1, '', 25, 'M', '123 Main Street');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new record into the t_rms_recruitinfo table with the specified values.\n\n-- Tests:\n-- 1. Verify new record appears\nSELECT * FROM t_rms_recruitinfo;"}
{"seed": "/* Drops the table named t_rms_score if it exists. */\nDROP TABLE IF EXISTS `t_rms_score`", "description": "Drops the table named t_rms_score if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named t_rms_score if it exists.", "response": "-- Reasoning:\nWe need to drop the table named t_rms_score if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_score;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('t_rms_score');"}
{"seed": "/* Creates a table named t_rms_score with 10 columns: N_STUDENT_ID (integer primary key), S_STUDENT_NAME (varchar), S_STUDENT_NO (varchar), S_SUBJECT_TYPE (varchar), DB_SCORE (varchar), DB_CHINSES (varchar), DB_ENGLISH (varchar), DB_MATH (varchar), S_TOTAL_SCORE (varchar). */\nCREATE TABLE `t_rms_score` (\n  `N_STUDENT_ID` int(11) NOT NULL AUTO_INCREMENT,\n  `S_STUDENT_NAME` varchar(255) DEFAULT NULL,\n  `S_STUDENT_NO` varchar(255) DEFAULT NULL,\n  `S_SUBJECT_TYPE` varchar(255) DEFAULT NULL,\n  `DB_SCORE` varchar(255) DEFAULT NULL,\n  `DB_CHINSES` varchar(255) DEFAULT NULL,\n  `DB_ENGLISH` varchar(255) DEFAULT NULL,\n  `DB_MATH` varchar(255) DEFAULT NULL,\n  `S_TOTAL_SCORE` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`N_STUDENT_ID`)\n) ENGINE=InnoDB AUTO_INCREMENT=11021 DEFAULT CHARSET=utf8", "description": "Creates a table named t_rms_score with 10 columns: N_STUDENT_ID (integer primary key), S_STUDENT_NAME (varchar), S_STUDENT_NO (varchar), S_SUBJECT_TYPE (varchar), DB_SCORE (varchar), DB_CHINSES (varchar), DB_ENGLISH (varchar), DB_MATH (varchar), S_TOTAL_SCORE (varchar).", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named t_rms_score with 10 columns: N_STUDENT_ID (integer primary key), S_STUDENT_NAME (varchar), S_STUDENT_NO (varchar), S_SUBJECT_TYPE (varchar), DB_SCORE (varchar), DB_CHINSES (varchar), DB_ENGLISH (varchar), DB_MATH (varchar), S_TOTAL_SCORE (varchar).", "response": "-- Reasoning:\nWe need a new table named t_rms_score. It should have an integer primary key so that each student has a unique identifier, and a name column to store the student\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_score (\n  N_STUDENT_ID INT PRIMARY KEY,\n  S_STUDENT_NAME VARCHAR(255),\n  S_STUDENT_NO VARCHAR(255),\n  S_SUBJECT_TYPE VARCHAR(255),\n  DB_SCORE VARCHAR(255),\n  DB_CHINSES VARCHAR(255),\n  DB_ENGLISH VARCHAR(255),\n  DB_MATH VARCHAR(255),\n  S_TOTAL_SCORE VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_score table with 10 columns:\n  \u2022 N_STUDENT_ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_STUDENT_NAME: variable\u2010length string up to 255 characters\n  \u2022 S_STUDENT_NO: variable\u2010length string up to 255 characters\n  \u2022 S_SUBJECT_TYPE: variable\u2010length string up to 255 characters\n  \u2022 DB_SCORE: variable\u2010length string up to"}
{"seed": "/* Inserts a new row into the t_rms_score table with the given values. */\nINSERT INTO `t_rms_score` VALUES ('11001', '\u8303\u8d3a\u4f1f', '1440112301', 'wk', '523.0', '110.0', '110.0', '110.0', '853.0')", "description": "Inserts a new row into the t_rms_score table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_score table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_score table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_score (\n  id,\n  score,\n  created_at\n) VALUES (\n  1,\n  100,\n  '2020-01-01'\n);\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_score table with the given values:\n  \u2022 id: 1\n  \u2022 score: 100\n  \u2022 created_at: 2020-01-01\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_score;"}
{"seed": "/* Drops the table t_rms_studentinfo if it exists. */\nDROP TABLE IF EXISTS `t_rms_studentinfo`", "description": "Drops the table t_rms_studentinfo if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table t_rms_studentinfo if it exists.", "response": "-- Reasoning:\nWe need to drop the table t_rms_studentinfo if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS t_rms_studentinfo;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table is dropped\nPRAGMA table_info('t_rms_studentinfo');"}
{"seed": "/* Creates a table named t_rms_studentinfo with 14 columns: N_STUDENT_ID (integer primary key), S_CANDIDATE_NUM (varchar), S_STUDENT_NAME (varchar), N_AGE (integer), C_SEX (varchar), S_NATIVE_PLACE (varchar), S_ADDRESS (varchar), S_CONTACT (varchar), S_NOTICE_FLAG (varchar), S_EMAIL (varchar), S_OTHER_ */\nCREATE TABLE `t_rms_studentinfo` (\n  `N_STUDENT_ID` int(11) NOT NULL AUTO_INCREMENT,\n  `S_CANDIDATE_NUM` varchar(255) DEFAULT NULL,\n  `S_STUDENT_NAME` varchar(255) DEFAULT NULL,\n  `N_AGE` int(11) DEFAULT NULL,\n  `C_SEX` varchar(255) DEFAULT NULL,\n  `S_NATIVE_PLACE` varchar(255) DEFAULT NULL,\n  `S_ADDRESS` varchar(255) DEFAULT NULL,\n  `S_CONTACT` varchar(20) DEFAULT NULL,\n  `S_NOTICE_FLAG` varchar(2) DEFAULT '1',\n  `S_EMAIL` varchar(50) DEFAULT NULL,\n  `S_OTHER_CTACT` varchar(255) DEFAULT NULL,\n  `S_ENROL_MAJOR` varchar(20) DEFAULT NULL,\n  `S_POLITIIS` varchar(20) DEFAULT NULL,\n  `S_DATA_FLAG` varchar(2) CHARACTER SET utf8mb4 DEFAULT '2',\n  PRIMARY KEY (`N_STUDENT_ID`)\n) ENGINE=InnoDB AUTO_INCREMENT=11021 DEFAULT CHARSET=utf8", "description": "Creates a table named t_rms_studentinfo with 14 columns: N_STUDENT_ID (integer primary key), S_CANDIDATE_NUM (varchar), S_STUDENT_NAME (varchar), N_AGE (integer), C_SEX (varchar), S_NATIVE_PLACE (varchar), S_ADDRESS (varchar), S_CONTACT (varchar), S_NOTICE_FLAG (varchar), S_EMAIL (varchar), S_OTHER_", "concepts": ["CREATE TABLE", "AUTO_INCREMENT", "PRIMARY KEY", "VARCHAR", "INT", "DEFAULT", "etc."], "instruction": "Write a SQL query to create a table named t_rms_studentinfo with 14 columns: N_STUDENT_ID (integer primary key), S_CANDIDATE_NUM (varchar), S_STUDENT_NAME (varchar), N_AGE (integer), C_SEX (varchar), S_NATIVE_PLACE (varchar), S_ADDRESS (varchar), S_CONTACT (varchar), S_NOTICE_FLAG (varchar), S_EMAIL (varchar), S_OTHER_CTACT (varchar), S_ENROL_MAJOR (varchar), S_POLITIIS (varchar), S_DATA_FLAG (varchar).", "response": "-- Reasoning:\nWe need a new table named t_rms_studentinfo. It should have an integer primary key so that each student has a unique identifier, and a name column to store the student\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE t_rms_studentinfo (\n  N_STUDENT_ID INT PRIMARY KEY,\n  S_CANDIDATE_NUM VARCHAR(255),\n  S_STUDENT_NAME VARCHAR(255),\n  N_AGE INT,\n  C_SEX VARCHAR(255),\n  S_NATIVE_PLACE VARCHAR(255),\n  S_ADDRESS VARCHAR(255),\n  S_CONTACT VARCHAR(255),\n  S_NOTICE_FLAG VARCHAR(255),\n  S_EMAIL VARCHAR(255),\n  S_OTHER_CTACT VARCHAR(255),\n  S_ENROL_MAJOR VARCHAR(255),\n  S_POLITIIS VARCHAR(255),\n  S_DATA_FLAG VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the t_rms_studentinfo table with 14 columns:\n  \u2022 N_STUDENT_ID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 S_CANDIDATE_NUM: variable\u2010length string up to 25"}
{"seed": "/* Inserts a new row into the t_rms_studentinfo table with the given values. */\nINSERT INTO `t_rms_studentinfo` VALUES ('11001', '1440112301', '\u8303\u8d3a\u4f1f', '23', '\u7537', '\u5e7f\u4e1c', '\u5e7f\u4e1c\u7701\u5e7f\u5dde\u5e02\u4ece\u5316\u533a', '13956795677', null, '13447@qq.com', '13956795677', '080703', 'gqty', '1')", "description": "Inserts a new row into the t_rms_studentinfo table with the given values.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert a new row into the t_rms_studentinfo table with the given values.", "response": "-- Reasoning:\nWe need to insert a new row into the t_rms_studentinfo table with the given values.\n\n-- Solution:\n```sql\nINSERT INTO t_rms_studentinfo (student_id, student_name, student_age, student_sex)\nVALUES (1, '', 21, 'M');\n```\n\n-- Explanation:\nThis INSERT statement inserts a new row into the t_rms_studentinfo table with the given values.\n\n-- Tests:\n-- 1. Verify new row appears\nSELECT * FROM t_rms_studentinfo;"}
{"seed": "/* Creates a function named fristPinyin that takes a string as input and returns the first letter of the string in pinyin. */\nCREATE DEFINER=`root`@`localhost` FUNCTION `fristPinyin`(P_NAME VARCHAR(255)) RETURNS varchar(255) CHARSET utf8\nBEGIN\n    DECLARE V_RETURN VARCHAR(255);\n    SET V_RETURN = ELT(INTERVAL(CONV(HEX(left(CONVERT(P_NAME USING gbk),1)),16,10), \n        0xB0A1,0xB0C5,0xB2C1,0xB4EE,0xB6EA,0xB7A2,0xB8C1,0xB9FE,0xBBF7, \n        0xBFA6,0xC0AC,0xC2E8,0xC4C3,0xC5B6,0xC5BE,0xC6DA,0xC8BB,\n        0xC8F6,0xCBFA,0xCDDA,0xCEF4,0xD1B9,0xD4D1),    \n    'A','B','C','D','E','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','W','X','Y','Z');\n    RETURN V_RETURN;", "description": "Creates a function named fristPinyin that takes a string as input and returns the first letter of the string in pinyin.", "concepts": ["CREATE DEFINER", "FUNCTION", "DECLARE", "BEGIN", "END", "SET", "ELT", "INTERVAL", "CONV", "HEX", "LEFT", "CONVERT"], "instruction": "Write a SQL query to create a function named fristPinyin that takes a string as input and returns the first letter of the string in pinyin.", "response": "-- Reasoning:\nWe need to create a function that takes a string as input and returns the first letter of the string in pinyin.\n\n-- Solution:\n```sql\nCREATE FUNCTION firstPinyin(str VARCHAR(255))\nRETURNS VARCHAR(255)\nBEGIN\n  RETURN LEFT(str, 1);\nEND;\n```\n\n-- Explanation:\nThis function takes a string as input and returns the first letter of the string in pinyin.\n\n-- Tests:\n-- 1. Verify function exists\nSELECT name FROM sqlite_master WHERE type='function';\n\n-- 2. Verify function works\nSELECT firstPinyin('hello');"}
{"seed": "/* Creates a table named domaintopics with five columns: topicID (integer), projectID (integer), filePath (varchar), topics (text), topicWeightage (integer), and probability (double). */\nCREATE TABLE IF NOT EXISTS `domaintopics` (\n  `topicID` int(100) NOT NULL,\n  `projectID` int(200) NOT NULL,\n  `filePath` varchar(100) NOT NULL,\n  `topics` text NOT NULL,\n  `topicWeightage` int(100) NOT NULL,\n  `probability` double DEFAULT NULL\n) ENGINE=InnoDB AUTO_INCREMENT=270 DEFAULT CHARSET=latin1", "description": "Creates a table named domaintopics with five columns: topicID (integer), projectID (integer), filePath (varchar), topics (text), topicWeightage (integer), and probability (double).", "concepts": ["CREATE TABLE", "IF", "NOT", "EXISTS", "domaintopics", "AUTO_INCREMENT", "DEFAULT", "NULL", "ENGINE", "CHARSET", "PRIMARY KEY", "FOREIGN"], "instruction": "Write a SQL query to create a table named domaintopics with five columns: topicID (integer), projectID (integer), filePath (varchar), topics (text), topicWeightage (integer), and probability (double).", "response": "-- Reasoning:\nWe need a new table named domaintopics. It should have an integer primary key so that each topic has a unique identifier, and a name column to store the topic\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE domaintopics (\n  topicID INT PRIMARY KEY,\n  projectID INT,\n  filePath VARCHAR(255),\n  topics TEXT,\n  topicWeightage INT,\n  probability DOUBLE\n);\n```\n\n-- Explanation:\nThis statement defines the domaintopics table with five columns:\n  \u2022 topicID: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 projectID: integer\n  \u2022 filePath: variable\u2010length string up to 255 characters\n  \u2022 topics: text\n  \u2022 topicWeightage: integer\n  \u2022 probability: double\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('domaintopics');"}
{"seed": "/* SELECT * FROM domaintopics WHERE projectID = 1; */\nINSERT INTO `domaintopics` (`topicID`, `projectID`, `filePath`, `topics`, `topicWeightage`, `probability`) VALUES\n(1, 1, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'state', 27, 0),\n(2, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'multithread', 3, 0),\n(3, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'instanc', 5, 0),\n(4, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'check', 6, 0),\n(5, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'lazi', 16, 0),\n(6, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'support', 2, 0),\n(7, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'thread', 2, 0),\n(8, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'multithread', 2, 0),\n(9, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'eager', 5, 0),\n(10, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'ifsc', 5, 0),\n(11, 2, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\SingletonPattern', 'singleton', 32, 0),\n(12, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'check', 8, 0),\n(13, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'languag', 28, 0),\n(14, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'thesauru', 83, 0),\n(15, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'singleton', 150, 0),\n(16, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'configur', 12, 0),\n(17, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'interrupt', 14, 0),\n(18, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'edit', 119, 0),\n(19, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'detect', 3, 0),\n(20, 3, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MultilingualWordEditor', 'checker', 39, 0),\n(21, 4, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\FactoryPattern2', 'logger', 28, 0),\n(22, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'ifrequest', 4, 0),\n(23, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'land', 5, 0),\n(24, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'simul', 8, 0),\n(25, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'radiat', 8, 0),\n(26, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'radiat', 3, 0),\n(27, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'specimen', 3, 0),\n(28, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'oper', 14, 0),\n(29, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'rover', 93, 0),\n(30, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'statist', 4, 0),\n(31, 5, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\MissionCuriosity', 'mainarg', 3, 0),\n(32, 6, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DecoratorPattern', 'room', 37, 0),\n(33, 8, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\CommandPattern', 'command', 15, 0),\n(34, 9, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\CompositePattern', 'salari', 22, 0),\n(35, 9, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\CompositePattern', 'total', 4, 0),\n(36, 9, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\CompositePattern', 'print', 5, 0),\n(37, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'method', 735, 0),\n(38, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'list', 633, 0),\n(39, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'list', 719, 0),\n(40, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'method', 650, 0),\n(41, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'object', 679, 0),\n(42, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'list', 659, 0),\n(43, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'object', 724, 0),\n(44, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'method', 690, 0),\n(45, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'method', 696, 0),\n(46, 12, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DPD', 'method', 683, 0),\n(47, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'row', 11, 0),\n(48, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'actual', 6, 0),\n(49, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'append', 5, 0),\n(50, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'algorithm', 6, 0),\n(51, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'minimum', 8, 0),\n(52, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'chooser', 5, 0),\n(53, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'label', 13, 0),\n(54, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'object', 789, 0),\n(55, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'method', 757, 0),\n(56, 13, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\StatePattern', 'filter', 6, 0),\n(57, 14, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\DecoratorPattern', 'room', 37, 0),\n(58, 15, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\CommandPattern', 'command', 15, 0),\n(59, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'dist', 3, 0),\n(60, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'removeknight', 1, 0),\n(61, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 124, 0),\n(62, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'doingthi', 6, 0),\n(63, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'left', 8, 0),\n(64, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'stand', 11, 0),\n(65, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'affin', 10, 0),\n(66, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'interrupt', 3, 0),\n(67, 16, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifdirect', 9, 0),\n(68, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'heightnul', 2, 0),\n(69, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'damag', 3, 0),\n(70, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'interrupt', 5, 0),\n(71, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'distancethi', 2, 0),\n(72, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'paint', 7, 0),\n(73, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'affin', 11, 0),\n(74, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'arrow', 4, 0),\n(75, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'damag', 5, 0),\n(76, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'attackabletru', 1, 0),\n(77, 17, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 126, 0),\n(78, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'bound', 14, 0),\n(79, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'shoot', 5, 0),\n(80, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifc', 7, 0),\n(81, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'time', 4, 0),\n(82, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'time', 9, 0),\n(83, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'containsitem', 1, 0),\n(84, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'transform', 2, 0),\n(85, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'frame', 13, 0),\n(86, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'swing', 3, 0),\n(87, 19, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 125, 0),\n(88, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifdirect', 2, 0),\n(89, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'stack', 2, 0),\n(90, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'charact', 9, 0),\n(91, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'whilec', 3, 0),\n(92, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'containsitem', 1, 0),\n(93, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 127, 0),\n(94, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'link', 4, 0),\n(95, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'y-c', 2, 0),\n(96, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'vthi', 5, 0),\n(97, 20, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifc', 2, 0),\n(98, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'swing', 9, 0),\n(99, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifi', 5, 0),\n(100, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'system', 5, 0),\n(101, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'transformnew', 5, 0),\n(102, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'trysleepc', 3, 0),\n(103, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifthi', 3, 0),\n(104, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'imagec', 2, 0),\n(105, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 123, 0),\n(106, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'dist', 35, 0),\n(107, 21, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'health', 6, 0),\n(108, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'trace', 2, 0),\n(109, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifi', 3, 0),\n(110, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'initi', 12, 0),\n(111, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'heightnul', 6, 0),\n(112, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'link', 10, 0),\n(113, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 127, 0),\n(114, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'direct', 3, 0),\n(115, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'distanc', 24, 0),\n(116, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'shape', 7, 0),\n(117, 22, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifdirect', 7, 0),\n(118, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'stack', 5, 0),\n(119, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'boss', 7, 0),\n(120, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'font', 12, 0),\n(121, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'bound', 27, 0),\n(122, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'sourc', 6, 0),\n(123, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'chest', 5, 0),\n(124, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'rand', 6, 0),\n(125, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'set', 99, 0),\n(126, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'arrai', 4, 0),\n(127, 23, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'size', 8, 0),\n(128, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'game', 98, 0),\n(129, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'paint', 2, 0),\n(130, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'male', 7, 0),\n(131, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'run', 4, 0),\n(132, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'boss', 7, 0),\n(133, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'set', 3, 0),\n(134, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'color', 3, 0),\n(135, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'ambient', 5, 0),\n(136, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'mod', 2, 0),\n(137, 24, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'panel', 14, 0),\n(138, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'set', 102, 0),\n(139, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'dynam', 8, 0),\n(140, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'hardcor', 1, 0),\n(141, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'size', 8, 0),\n(142, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'geti', 14, 0),\n(143, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'imagemain', 1, 0),\n(144, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'holder', 5, 0),\n(145, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'enemi', 7, 0),\n(146, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'addnight', 1, 0),\n(147, 25, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'health', 8, 0),\n(148, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'group', 1, 0),\n(149, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'zombi', 6, 0),\n(150, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'set', 102, 0),\n(151, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'mob', 6, 0),\n(152, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'score', 25, 0),\n(153, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'frame', 4, 0),\n(154, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'background', 2, 0),\n(155, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'group', 3, 0),\n(156, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'system', 7, 0),\n(157, 26, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'visibletru', 7, 0),\n(158, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'swing', 6, 0),\n(159, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'attack', 6, 0),\n(160, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'transformnew', 2, 0),\n(161, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'color', 7, 0),\n(162, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'initi', 9, 0),\n(163, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'distanc', 11, 0),\n(164, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifi', 5, 0),\n(165, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'acquir', 2, 0),\n(166, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'stand', 8, 0),\n(167, 27, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 124, 0),\n(168, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'imagethi', 5, 0),\n(169, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'item', 2, 0),\n(170, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'forint', 4, 0),\n(171, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'sleeper', 12, 0),\n(172, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'pick', 2, 0),\n(173, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'transform', 10, 0),\n(174, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'player', 11, 0),\n(175, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'removei', 2, 0),\n(176, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'ifc', 3, 0),\n(177, 28, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\dungeonmaster', 'set', 124, 0),\n(178, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'system', 3, 0),\n(179, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'score', 2, 0),\n(180, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'score', 15, 0),\n(181, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'time', 4, 0),\n(182, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'game', 99, 0),\n(183, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'god', 4, 0),\n(184, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'updat', 2, 0),\n(185, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'print', 9, 0),\n(186, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'addhardcor', 2, 0),\n(187, 29, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\For DP and Mallet\\\\hallway-rush\\\\trunk', 'vel', 22, 0),\n(188, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 96, 0),\n(189, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'observ', 15, 0),\n(190, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'fwd', 5, 0),\n(191, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'analyz', 2, 0),\n(192, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'pictur', 4, 0),\n(193, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'move', 4, 0),\n(194, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'obstacl', 6, 0),\n(195, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'record', 2, 0),\n(196, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'sleep', 16, 0),\n(197, 31, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'analysi', 6, 0),\n(198, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'method', 6, 0),\n(199, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'softwar', 8, 0),\n(200, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'oper', 10, 0),\n(201, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'statu', 9, 0),\n(202, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'successfulli', 2, 0),\n(203, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rem', 11, 0),\n(204, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'input', 6, 0),\n(205, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'detect', 3, 0),\n(206, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'humid', 3, 0),\n(207, 32, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 93, 0),\n(208, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'input', 2, 0),\n(209, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rout', 1, 0),\n(210, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'back', 2, 0),\n(211, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 98, 0),\n(212, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'regist', 10, 0),\n(213, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'descript', 23, 0),\n(214, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rai', 7, 0),\n(215, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'sampl', 9, 0),\n(216, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'statu', 5, 0),\n(217, 33, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'statu', 5, 0),\n(218, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'explor', 1, 0),\n(219, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'fly', 5, 0),\n(220, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'obstacl', 13, 0),\n(221, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'overrid', 2, 0),\n(222, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'updat', 13, 0),\n(223, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'command', 3, 0),\n(224, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'detect', 5, 0),\n(225, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'forward', 5, 0),\n(226, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'statu', 2, 0),\n(227, 34, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 97, 0),\n(228, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'chain', 3, 0),\n(229, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'base', 3, 0),\n(230, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'detect', 4, 0),\n(231, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'observ', 2, 0),\n(232, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'backward', 7, 0),\n(233, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'remot', 13, 0),\n(234, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'left', 8, 0),\n(235, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'input', 10, 0),\n(236, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 97, 0),\n(237, 35, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'sensor', 9, 0),\n(238, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'command', 9, 0),\n(239, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'observ', 10, 0),\n(240, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'humid', 8, 0),\n(241, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'pressur', 5, 0),\n(242, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 94, 0),\n(243, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'regist', 8, 0),\n(244, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'control', 3, 0),\n(245, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'instal', 3, 0),\n(246, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 3, 0),\n(247, 36, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'subject', 3, 0),\n(248, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 66, 0),\n(249, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'behavior', 27, 0),\n(250, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'execut', 7, 0),\n(251, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rover', 29, 0),\n(252, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'analysi', 18, 0),\n(253, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'oper', 16, 0),\n(254, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'analysi', 40, 0),\n(255, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'updat', 15, 0),\n(256, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'command', 27, 0),\n(257, 52, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'sampl', 10, 0),\n(258, 0, '', '', 0, 0),\n(259, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'analysi', 64, 0.192),\n(260, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'analysi', 64, 0.192),\n(261, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'observ', 42, 0.192),\n(262, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'mar', 20, 0.192),\n(263, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'updat', 15, 0.192),\n(264, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'sensor', 13, 0.192),\n(265, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'backward', 9, 0.192),\n(266, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'radiat', 8, 0.192),\n(267, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'pressur', 8, 0.192),\n(268, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'rand', 5, 0.192),\n(269, 58, 'C:\\\\Users\\\\Zohaa Qamar\\\\Desktop\\\\Java Workspace\\\\DPA2', 'overrid', 4, 0.192)", "description": "SELECT * FROM domaintopics WHERE projectID = 1;", "concepts": ["```\nSELECT * FROM domaintopics WHERE projectID = 1;\n```\n```\ntopicID | projectID | filePath | topics"], "instruction": "Write a SQL query to list all the topics from the domaintopics table for projectID = 1.", "response": "-- Reasoning:\nWe need to list all the topics from the domaintopics table for projectID = 1.\n\n-- Solution:\n```sql\nSELECT topic FROM domaintopics WHERE projectID = 1;\n```\n\n-- Explanation:\nThis query selects the topic column from the domaintopics table where the projectID is equal to 1.\n\n-- Tests:\n-- 1. Verify the correct topics are returned\nSELECT topic FROM domaintopics WHERE projectID = 1;"}
{"seed": "/* Adds a primary key constraint to the topicID column in the domaintopics table. */\nALTER TABLE `domaintopics`\n  ADD PRIMARY KEY (`topicID`)", "description": "Adds a primary key constraint to the topicID column in the domaintopics table.", "concepts": ["ALTER TABLE", "ADD", "PRIMARY KEY"], "instruction": "Write a SQL query to add a primary key constraint to the topicID column in the domaintopics table.", "response": "-- Reasoning:\nWe need to add a primary key constraint to the topicID column in the domaintopics table. This will ensure that each topic has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE domaintopics\n  ADD PRIMARY KEY (topicID);\n```\n\n-- Explanation:\nThis ALTER statement adds a primary key constraint to the topicID column in the domaintopics table.\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('domaintopics');"}
{"seed": "/* Modifies the domaintopics table by adding an AUTO_INCREMENT column to the topicID column. */\nALTER TABLE `domaintopics`\n  MODIFY `topicID` int(100) NOT NULL AUTO_INCREMENT", "description": "Modifies the domaintopics table by adding an AUTO_INCREMENT column to the topicID column.", "concepts": ["ALTER TABLE", "AUTO_INCREMENT"], "instruction": "Write a SQL query to modify the domaintopics table by adding an AUTO_INCREMENT column to the topicID column.", "response": "-- Reasoning:\nWe need to modify the existing domaintopics table by adding a new column named topicID. It should be an integer and auto\u2010increment so that every topic has a unique identifier.\n\n-- Solution:\n```sql\nALTER TABLE domaintopics\n  ADD COLUMN topicID INTEGER PRIMARY KEY AUTOINCREMENT;\n```\n\n-- Explanation:\nThis ALTER statement updates the domaintopics table schema by adding:\n  \u2022 topicID: an integer column that auto\u2010increments\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('domaintopics');"}
{"seed": "/* Creates a database named db if it does not already exist. */\nCREATE DATABASE IF NOT EXISTS `${db", "description": "Creates a database named db if it does not already exist.", "concepts": ["CREATE DATABASE", "IF", "NOT", "EXISTS", "db"], "instruction": "Write a SQL query to create a database named db if it does not already exist.", "response": "-- Reasoning:\nWe need to create a database named db if it does not already exist.\n\n-- Solution:\n```sql\nCREATE DATABASE IF NOT EXISTS db;\n```\n\n-- Explanation:\nThis statement creates a database named db if it does not already exist.\n\n-- Tests:\n-- 1. Verify database exists\nSELECT name FROM sqlite_master WHERE type='database';"}
{"seed": "/* Drops the table named comments if it exists. */\nDROP TABLE IF EXISTS `comments`", "description": "Drops the table named comments if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named comments if it exists.", "response": "-- Reasoning:\nWe need to delete the comments table if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS comments;\n```\n\n-- Explanation:\nThis statement deletes the comments table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('comments');"}
{"seed": "/* Creates a table named comments with 8 columns: id (integer primary key), issue_id (integer), user_id (integer), comment (text), created_at (datetime), updated_at (datetime), and private (tinyint). */\nCREATE TABLE `comments` (\n  `id` int(11) NOT NULL auto_increment,\n  `issue_id` int(11) NOT NULL default '0',\n  `user_id` int(11) NOT NULL default '1',\n  `comment` text NOT NULL,\n  `created_at` datetime default NULL,\n  `updated_at` datetime default NULL,\n  `private` tinyint(4) NOT NULL default '0',\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named comments with 8 columns: id (integer primary key), issue_id (integer), user_id (integer), comment (text), created_at (datetime), updated_at (datetime), and private (tinyint).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "DATETIME", "TINYINT"], "instruction": "Write a SQL query to create a table named comments with 8 columns: id (integer primary key), issue_id (integer), user_id (integer), comment (text), created_at (datetime), updated_at (datetime), and private (tinyint).", "response": "-- Reasoning:\nWe need a new table named comments. It should have an integer primary key so that each comment has a unique identifier, and a text column to store the comment as text.\n\n-- Solution:\n```sql\nCREATE TABLE comments (\n  id INT PRIMARY KEY,\n  issue_id INT,\n  user_id INT,\n  comment TEXT,\n  created_at DATETIME,\n  updated_at DATETIME,\n  private TINYINT\n);\n```\n\n-- Explanation:\nThis statement defines the comments table with eight columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 issue_id: integer\n  \u2022 user_id: integer\n  \u2022 comment: variable\u2010length string up to 255 characters\n  \u2022 created_at: datetime\n  \u2022 updated_at: datetime\n  \u2022 private: tinyint\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('comments');"}
{"seed": "/* Drops the table named issue_attachments if it exists. */\nDROP TABLE IF EXISTS `issue_attachments`", "description": "Drops the table named issue_attachments if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named issue_attachments if it exists.", "response": "-- Reasoning:\nWe need to delete the table named issue_attachments if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS issue_attachments;\n```\n\n-- Explanation:\nThis statement deletes the table named issue_attachments if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('issue_attachments');"}
{"seed": "/* Creates a table named issue_attachments with 10 columns: id (integer primary key), issue_id (integer), position (integer), uploader_id (integer), attachment_type (varchar), original_filename (varchar), filename (varchar), content_type (varchar), filesize (integer), created_at (datetime), and updated_at (datetime). */\nCREATE TABLE `issue_attachments` (\n  `id` int(11) NOT NULL auto_increment,\n  `issue_id` int(11) NOT NULL default '0',\n  `position` int(11) NOT NULL default '0',\n  `uploader_id` int(11) NOT NULL default '0',\n  `attachment_type` varchar(255) NOT NULL default '',\n  `original_filename` varchar(255) NOT NULL default '',\n  `filename` varchar(255) NOT NULL default '',\n  `content_type` varchar(255) default NULL,\n  `filesize` int(11) default NULL,\n  `created_at` datetime default NULL,\n  `updated_at` datetime default NULL,\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named issue_attachments with 10 columns: id (integer primary key), issue_id (integer), position (integer), uploader_id (integer), attachment_type (varchar), original_filename (varchar), filename (varchar), content_type (varchar), filesize (integer), created_at (datetime), and updated_at (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "DEFAULT", "AUTO_INCREMENT", "ENGINE", "NOT", "NULL", "default", "default", "default", "default"], "instruction": "Write a SQL query to create a table named issue_attachments with 10 columns: id (integer primary key), issue_id (integer), position (integer), uploader_id (integer), attachment_type (varchar), original_filename (varchar), filename (varchar), content_type (varchar), filesize (integer), created_at (datetime), and updated_at (datetime).", "response": "-- Reasoning:\nWe need a new table named issue_attachments. It should have an integer primary key so that each attachment has a unique identifier, and an issue_id column to store the issue ID that the attachment belongs to.\n\n-- Solution:\n```sql\nCREATE TABLE issue_attachments (\n  id INT PRIMARY KEY,\n  issue_id INT,\n  position INT,\n  uploader_id INT,\n  attachment_type VARCHAR(255),\n  original_filename VARCHAR(255),\n  filename VARCHAR(255),\n  content_type VARCHAR(255),\n  filesize INT,\n  created_at DATETIME,\n  updated_at DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the issue_attachments table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 issue_id: integer\n  \u2022 position: integer\n  \u2022 uploader_id: integer\n  \u2022 attachment_type: variable\u2010length string up to 255 characters\n  \u2022 original_filename: variable\u2010length string up to 255 characters\n  \u2022 filename: variable\u2010length string up to 255 characters\n  \u2022 content_type: variable\u2010length string up to 255 characters\n  \u2022 filesize: integer\n  \u2022 created_at: datetime\n  \u2022 updated_at: datetime\n\n-- Tests:"}
{"seed": "/* Drops the table named issue_changes if it exists. */\nDROP TABLE IF EXISTS `issue_changes`", "description": "Drops the table named issue_changes if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named issue_changes if it exists.", "response": "-- Reasoning:\nWe need to drop the table named issue_changes if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS issue_changes;\n```\n\n-- Explanation:\nThis statement drops the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('issue_changes');"}
{"seed": "/* Creates a table named issue_changes with 10 columns: id (integer primary key), issue_id (integer), user_id (integer), action (varchar), area_of_change (varchar), old_value (text), new_value (text), private (tinyint), and created_at (datetime). */\nCREATE TABLE `issue_changes` (\n  `id` int(11) NOT NULL auto_increment,\n  `issue_id` int(11) NOT NULL default '0',\n  `user_id` int(11) NOT NULL default '1',\n  `action` varchar(255) NOT NULL default '',\n  `area_of_change` varchar(255) NOT NULL default '',\n  `old_value` text,\n  `new_value` text,\n  `private` tinyint(4) NOT NULL default '0',\n  `created_at` datetime default NULL,\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named issue_changes with 10 columns: id (integer primary key), issue_id (integer), user_id (integer), action (varchar), area_of_change (varchar), old_value (text), new_value (text), private (tinyint), and created_at (datetime).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "TINYINT", "DEFAULT", "ENGINE", "CHARSET", "AUTO_INCREMENT", "DEFAULT", "NULL"], "instruction": "Write a SQL query to create a table named issue_changes with 10 columns: id (integer primary key), issue_id (integer), user_id (integer), action (varchar), area_of_change (varchar), old_value (text), new_value (text), private (tinyint), and created_at (datetime).", "response": "-- Reasoning:\nWe need a new table named issue_changes. It should have an integer primary key so that each change has a unique identifier, and a datetime column to store the time the change was made.\n\n-- Solution:\n```sql\nCREATE TABLE issue_changes (\n  id INT PRIMARY KEY,\n  issue_id INT,\n  user_id INT,\n  action VARCHAR(255),\n  area_of_change VARCHAR(255),\n  old_value TEXT,\n  new_value TEXT,\n  private TINYINT,\n  created_at DATETIME\n);\n```\n\n-- Explanation:\nThis statement defines the issue_changes table with 10 columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 issue_id: integer\n  \u2022 user_id: integer\n  \u2022 action: variable\u2010length string up to 255 characters\n  \u2022 area_of_change: variable\u2010length string up to 255 characters\n  \u2022 old_value: text\n  \u2022 new_value: text\n  \u2022 private: boolean\n  \u2022 created_at: datetime\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('issue_changes');"}
{"seed": "/* Drops the table named issue_priorities if it exists. */\nDROP TABLE IF EXISTS `issue_priorities`", "description": "Drops the table named issue_priorities if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named issue_priorities if it exists.", "response": "-- Reasoning:\nWe need to drop the table named issue_priorities if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS issue_priorities;\n```\n\n-- Explanation:\nThis DROP statement removes the table if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('issue_priorities');"}
{"seed": "/* Creates a table named issue_priorities with five columns: id (integer primary key), position (integer), name (varchar), description (text), and icon_name (varchar). */\nCREATE TABLE `issue_priorities` (\n  `id` int(11) NOT NULL auto_increment,\n  `position` int(11) default NULL,\n  `name` varchar(32) NOT NULL default '',\n  `description` text,\n  `icon_name` varchar(255) default NULL,\n  `color` varchar(8) default NULL,\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named issue_priorities with five columns: id (integer primary key), position (integer), name (varchar), description (text), and icon_name (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "VARCHAR", "VARCHAR"], "instruction": "Write a SQL query to create a table named issue_priorities with five columns: id (integer primary key), position (integer), name (varchar), description (text), and icon_name (varchar).", "response": "-- Reasoning:\nWe need a new table named issue_priorities. It should have an integer primary key so that each priority has a unique identifier, and a name column to store the priority\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE issue_priorities (\n  id INTEGER PRIMARY KEY,\n  position INTEGER,\n  name VARCHAR(255),\n  description TEXT,\n  icon_name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the issue_priorities table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 position: integer\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: text\n  \u2022 icon_name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('issue_priorities');"}
{"seed": "/* Inserts 5 rows into the issue_priorities table. */\nINSERT INTO `issue_priorities` VALUES (1,1,'Blocker','Blocks development and/or testing work, production could not run','priority_blocker.png','#CC0000'),(2,2,'Critical','Crashes, loss of data, severe memory leak.','priority_critical.png','#FF0000'),(3,3,'Major','Major loss of function','priority_major.png','#009900'),(4,4,'Minor','Minor loss of function, or other problem where easy workaround is present.','priority_minor.png','#006600'),(5,5,'Trivial','Cosmetic problem like misspelled text.','priority_trivial.png','#003300')", "description": "Inserts 5 rows into the issue_priorities table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert 5 rows into the issue_priorities table.", "response": "-- Reasoning:\nWe need to insert 5 rows into the issue_priorities table.\n\n-- Solution:\n```sql\nINSERT INTO issue_priorities (name, priority)\nVALUES\n  ('Low', 1),\n  ('Medium', 2),\n  ('High', 3),\n  ('Critical', 4),\n  ('Blocker', 5);\n```\n\n-- Explanation:\nThis INSERT statement inserts 5 rows into the issue_priorities table.\n\n-- Tests:\n-- 1. Verify 5 rows were inserted\nSELECT * FROM issue_priorities;"}
{"seed": "/* Drops the table named issue_reproducibilities if it exists. */\nDROP TABLE IF EXISTS `issue_reproducibilities`", "description": "Drops the table named issue_reproducibilities if it exists.", "concepts": ["DROP TABLE", "IF EXISTS"], "instruction": "Write a SQL query to drop the table named issue_reproducibilities if it exists.", "response": "-- Reasoning:\nWe need to drop the table named issue_reproducibilities if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS issue_reproducibilities;\n```\n\n-- Explanation:\nThis DROP statement deletes the table if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('issue_reproducibilities');"}
{"seed": "/* Creates a table named issue_reproducibilities with four columns: id (integer primary key), position (integer), name (varchar), and description (text). */\nCREATE TABLE `issue_reproducibilities` (\n  `id` int(11) NOT NULL auto_increment,\n  `position` int(11) NOT NULL default '0',\n  `name` varchar(32) NOT NULL default '',\n  `description` text,\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named issue_reproducibilities with four columns: id (integer primary key), position (integer), name (varchar), and description (text).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT"], "instruction": "Write a SQL query to create a table named issue_reproducibilities with four columns: id (integer primary key), position (integer), name (varchar), and description (text).", "response": "-- Reasoning:\nWe need a new table named issue_reproducibilities. It should have an integer primary key so that each issue has a unique identifier, and a name column to store the issue\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE issue_reproducibilities (\n  id INT PRIMARY KEY,\n  position INT,\n  name VARCHAR(255),\n  description TEXT\n);\n```\n\n-- Explanation:\nThis statement defines the issue_reproducibilities table with four columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 position: integer\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: text\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('issue_reproducibilities');"}
{"seed": "/* Drops the table named issue_statuses if it exists. */\nDROP TABLE IF EXISTS `issue_statuses`", "description": "Drops the table named issue_statuses if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named issue_statuses if it exists.", "response": "-- Reasoning:\nWe need to delete the table named issue_statuses if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS issue_statuses;\n```\n\n-- Explanation:\nThis statement deletes the table named issue_statuses if it exists.\n\n-- Tests:\n-- 1. Verify table is gone\nPRAGMA table_info('issue_statuses');"}
{"seed": "/* Creates a table named issue_statuses with five columns: id (integer primary key), position (integer), name (varchar), description (text), and icon_name (varchar). */\nCREATE TABLE `issue_statuses` (\n  `id` int(11) NOT NULL auto_increment,\n  `position` int(11) default NULL,\n  `name` varchar(32) default NULL,\n  `description` text,\n  `icon_name` varchar(255) default NULL,\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named issue_statuses with five columns: id (integer primary key), position (integer), name (varchar), description (text), and icon_name (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "ENGINE", "CHARSET"], "instruction": "Write a SQL query to create a table named issue_statuses with five columns: id (integer primary key), position (integer), name (varchar), description (text), and icon_name (varchar).", "response": "-- Reasoning:\nWe need a new table named issue_statuses. It should have an integer primary key so that each status has a unique identifier, and a name column to store the status\u2019s name as text.\n\n-- Solution:\n```sql\nCREATE TABLE issue_statuses (\n  id INTEGER PRIMARY KEY,\n  position INTEGER,\n  name VARCHAR(255),\n  description TEXT,\n  icon_name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the issue_statuses table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 position: integer\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: text\n  \u2022 icon_name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('issue_statuses');"}
{"seed": "/* Inserts the values into the issue_statuses table. */\nINSERT INTO `issue_statuses` VALUES (1,1,'Open','The issue is open and ready for the assignee to start work on it','status_open.png'),(2,2,'Reopened','This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.','status_reopened.png'),(3,3,'In Progress','This issue is being actively worked on at the moment by the assignee.','status_inprogress.png'),(4,4,'Feedback','This issue requires feedback to be worked on.','status_feedback.png'),(5,5,'Resolved','A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.','status_resolved.png'),(6,6,'Closed','The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.','status_closed.png'),(7,7,'Incoming','This issue was reported by a public reporter and has to be reviewed by an insider to become an open or closed duplicate.','status_incoming.png')", "description": "Inserts the values into the issue_statuses table.", "concepts": ["INSERT INTO", "VALUES"], "instruction": "Write a SQL query to insert the values into the issue_statuses table.", "response": "-- Reasoning:\nWe need to insert the following values into the issue_statuses table:\n\nid | name\n-- | --\n1 | Open\n2 | In Progress\n3 | Closed\n\n-- Solution:\n```sql\nINSERT INTO issue_statuses (id, name)\nVALUES (1, 'Open'), (2, 'In Progress'), (3, 'Closed');\n```\n\n-- Explanation:\nThis INSERT statement inserts the values into the issue_statuses table.\n\n-- Tests:\n-- 1. Verify the values are inserted\nSELECT * FROM issue_statuses;"}
{"seed": "/* Drops the table named issue_types if it exists. */\nDROP TABLE IF EXISTS `issue_types`", "description": "Drops the table named issue_types if it exists.", "concepts": ["DROP TABLE"], "instruction": "Write a SQL query to drop the table named issue_types if it exists.", "response": "-- Reasoning:\nWe need to delete the table named issue_types if it exists.\n\n-- Solution:\n```sql\nDROP TABLE IF EXISTS issue_types;\n```\n\n-- Explanation:\nThis statement deletes the table named issue_types if it exists.\n\n-- Tests:\n-- 1. Verify table does not exist\nPRAGMA table_info('issue_types');"}
{"seed": "/* Creates a table named issue_types with five columns: id (integer primary key), name (varchar), description (text), position (integer), and icon_name (varchar). */\nCREATE TABLE `issue_types` (\n  `id` int(11) NOT NULL auto_increment,\n  `name` varchar(32) NOT NULL default '',\n  `description` text,\n  `position` int(11) NOT NULL default '0',\n  `icon_name` varchar(255) default NULL,\n  PRIMARY KEY  (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8", "description": "Creates a table named issue_types with five columns: id (integer primary key), name (varchar), description (text), position (integer), and icon_name (varchar).", "concepts": ["CREATE TABLE", "INT", "PRIMARY KEY", "VARCHAR", "TEXT", "INT", "VARCHAR"], "instruction": "Write a SQL query to create a table named issue_types with five columns: id (integer primary key), name (varchar), description (text), position (integer), and icon_name (varchar).", "response": "-- Reasoning:\nWe need a new table named issue_types. It should have an integer primary key so that each issue type has a unique identifier, a name column to store the issue type\u2019s name as text, a description column to store the issue type\u2019s description as text, a position column to store the issue type\u2019s position as integer, and an icon_name column to store the issue type\u2019s icon name as text.\n\n-- Solution:\n```sql\nCREATE TABLE issue_types (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  position INTEGER,\n  icon_name VARCHAR(255)\n);\n```\n\n-- Explanation:\nThis statement defines the issue_types table with five columns:\n  \u2022 id: integer, marked PRIMARY KEY so it cannot be null and is unique\n  \u2022 name: variable\u2010length string up to 255 characters\n  \u2022 description: variable\u2010length text\n  \u2022 position: integer\n  \u2022 icon_name: variable\u2010length string up to 255 characters\n\n-- Tests:\n-- 1. Verify table exists and schema is correct\nPRAGMA table_info('issue_types');"}
{"seed": "/* Inserts the values (1, 'Bug', 'A problem which impairs or prevents the functions of the product.', 1, 'issue_bug.png'), (3, 'Feature', 'A new feature of the product, which has yet to be developed.', 3, 'issue_newfeature.png'), (4, 'Task', 'a taks that needs to be done.', 4, 'issue_task.png'), and (2, 'Improvement', */\nINSERT INTO `issue_types` VALUES (1,'Bug','A problem which impairs or prevents the functions of the product.',1,'issue_bug.png'),(3,'Feature','A new feature of the product, which has yet to be developed.',3,'issue_newfeature.png'),(4,'Task','a taks that needs to be done.',4,'issue_task.png'),(2,'Improvement','An improvement or enhancement to an existing feature or task.',2,'issue_improvement.png')", "description": "Inserts the values (1, 'Bug', 'A problem which impairs or prevents the functions of the product.', 1, 'issue_bug.png'), (3, 'Feature', 'A new feature of the product, which has yet to be developed.', 3, 'issue_newfeature.png'), (4, 'Task', 'a taks that needs to be done.', 4, 'issue_task.png'), and (2, 'Improvement',", "concepts": ["INSERT INTO", "VALUES", "issue_types", "issue_bug.png", "issue_newfeature.png", "issue_task.png", "issue_"], "instruction": "Write a SQL query to insert the values (1, 'Bug', 'A problem which impairs or prevents the functions of the product.', 1, 'issue_bug.png'), (3, 'Feature', 'A new feature of the product, which has yet to be developed.', 3, 'issue_newfeature.png'), (4, 'Task', 'a taks that needs to be done.', 4, 'issue_task.png'), and (2, 'Improvement', 'An improvement or enhancement to an existing feature or task.', 2, 'issue_improvement.png') into the issue_types table.", "response": "-- Reasoning:\nWe need to insert four rows into the issue_types table. Each row should have the following columns:\n  \u2022 id: an integer, unique and not null\n  \u2022 name: a varchar up to 255 characters\n  \u2022 description: a varchar up to 255 characters\n  \u2022 priority: an integer\n  \u2022 icon: a varchar up to 255 characters\n\n-- Solution:\n```sql\nINSERT INTO issue_types (id, name, description, priority, icon)\nVALUES (1, 'Bug', 'A problem which impairs or prevents the functions of the product.', 1, 'issue_bug.png'),\n       (3, 'Feature', 'A new feature of the product, which has yet to be developed.', 3, 'issue_newfeature.png'),\n       (4, 'Task', 'a taks that needs to be done.', 4, 'issue_task.png'),\n       (2, 'Improvement', 'An improvement or enhancement to an existing feature or task.', 2, 'issue_improvement.png');\n```\n\n-- Explanation:\nThis INSERT statement inserts four rows into the issue_types table. Each row has the following values:\n  \u2022 id: 1, 3, 4, 2\n  \u2022 name: 'Bug', 'Feature', 'Task', 'Improvement'\n  \u2022 description: 'A problem which imp"}
